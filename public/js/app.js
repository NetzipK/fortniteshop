/******/ (function(modules) {
	// webpackBootstrap
	/******/ // The module cache
	/******/ var installedModules = {}; // The require function
	/******/
	/******/ /******/ function __webpack_require__(moduleId) {
		/******/
		/******/ // Check if module is in cache
		/******/ if (installedModules[moduleId]) {
			/******/ return installedModules[moduleId].exports;
			/******/
		} // Create a new module (and put it into the cache)
		/******/ /******/ var module = (installedModules[moduleId] = {
			/******/ i: moduleId,
			/******/ l: false,
			/******/ exports: {},
			/******/
		}); // Execute the module function
		/******/
		/******/ /******/ modules[moduleId].call(
			module.exports,
			module,
			module.exports,
			__webpack_require__
		); // Flag the module as loaded
		/******/
		/******/ /******/ module.l = true; // Return the exports of the module
		/******/
		/******/ /******/ return module.exports;
		/******/
	} // expose the modules object (__webpack_modules__)
	/******/
	/******/
	/******/ /******/ __webpack_require__.m = modules; // expose the module cache
	/******/
	/******/ /******/ __webpack_require__.c = installedModules; // define getter function for harmony exports
	/******/
	/******/ /******/ __webpack_require__.d = function(exports, name, getter) {
		/******/ if (!__webpack_require__.o(exports, name)) {
			/******/ Object.defineProperty(exports, name, {
				enumerable: true,
				get: getter,
			});
			/******/
		}
		/******/
	}; // define __esModule on exports
	/******/
	/******/ /******/ __webpack_require__.r = function(exports) {
		/******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
			/******/ Object.defineProperty(exports, Symbol.toStringTag, {
				value: "Module",
			});
			/******/
		}
		/******/ Object.defineProperty(exports, "__esModule", {value: true});
		/******/
	}; // create a fake namespace object // mode & 1: value is a module id, require it // mode & 2: merge all properties of value into the ns // mode & 4: return value when already ns object // mode & 8|1: behave like require
	/******/
	/******/ /******/ /******/ /******/ /******/ /******/ __webpack_require__.t = function(
		value,
		mode
	) {
		/******/ if (mode & 1) value = __webpack_require__(value);
		/******/ if (mode & 8) return value;
		/******/ if (
			mode & 4 &&
			typeof value === "object" &&
			value &&
			value.__esModule
		)
			return value;
		/******/ var ns = Object.create(null);
		/******/ __webpack_require__.r(ns);
		/******/ Object.defineProperty(ns, "default", {
			enumerable: true,
			value: value,
		});
		/******/ if (mode & 2 && typeof value != "string")
			for (var key in value)
				__webpack_require__.d(
					ns,
					key,
					function(key) {
						return value[key];
					}.bind(null, key)
				);
		/******/ return ns;
		/******/
	}; // getDefaultExport function for compatibility with non-harmony modules
	/******/
	/******/ /******/ __webpack_require__.n = function(module) {
		/******/ var getter =
			module && module.__esModule
				? /******/ function getDefault() {
						return module["default"];
				  }
				: /******/ function getModuleExports() {
						return module;
				  };
		/******/ __webpack_require__.d(getter, "a", getter);
		/******/ return getter;
		/******/
	}; // Object.prototype.hasOwnProperty.call
	/******/
	/******/ /******/ __webpack_require__.o = function(object, property) {
		return Object.prototype.hasOwnProperty.call(object, property);
	}; // __webpack_public_path__
	/******/
	/******/ /******/ __webpack_require__.p = "/"; // Load entry module and return exports
	/******/
	/******/
	/******/ /******/ return __webpack_require__((__webpack_require__.s = 0));
	/******/
})(
	/************************************************************************/
	/******/ {
		/***/ "./node_modules/assert/assert.js":
			/*!***************************************!*\
  !*** ./node_modules/assert/assert.js ***!
  \***************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				/* WEBPACK VAR INJECTION */ (function(global) {
					var objectAssign = __webpack_require__(
						/*! object-assign */ "./node_modules/object-assign/index.js"
					);

					// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
					// original notice:

					/*!
					 * The buffer module from node.js, for the browser.
					 *
					 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
					 * @license  MIT
					 */
					function compare(a, b) {
						if (a === b) {
							return 0;
						}

						var x = a.length;
						var y = b.length;

						for (var i = 0, len = Math.min(x, y); i < len; ++i) {
							if (a[i] !== b[i]) {
								x = a[i];
								y = b[i];
								break;
							}
						}

						if (x < y) {
							return -1;
						}
						if (y < x) {
							return 1;
						}
						return 0;
					}
					function isBuffer(b) {
						if (
							global.Buffer &&
							typeof global.Buffer.isBuffer === "function"
						) {
							return global.Buffer.isBuffer(b);
						}
						return !!(b != null && b._isBuffer);
					}

					// based on node assert, original notice:
					// NB: The URL to the CommonJS spec is kept just for tradition.
					//     node-assert has evolved a lot since then, both in API and behavior.

					// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
					//
					// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
					//
					// Originally from narwhal.js (http://narwhaljs.org)
					// Copyright (c) 2009 Thomas Robinson <280north.com>
					//
					// Permission is hereby granted, free of charge, to any person obtaining a copy
					// of this software and associated documentation files (the 'Software'), to
					// deal in the Software without restriction, including without limitation the
					// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
					// sell copies of the Software, and to permit persons to whom the Software is
					// furnished to do so, subject to the following conditions:
					//
					// The above copyright notice and this permission notice shall be included in
					// all copies or substantial portions of the Software.
					//
					// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
					// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
					// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
					// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
					// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
					// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

					var util = __webpack_require__(
						/*! util/ */ "./node_modules/util/util.js"
					);
					var hasOwn = Object.prototype.hasOwnProperty;
					var pSlice = Array.prototype.slice;
					var functionsHaveNames = (function() {
						return function foo() {}.name === "foo";
					})();
					function pToString(obj) {
						return Object.prototype.toString.call(obj);
					}
					function isView(arrbuf) {
						if (isBuffer(arrbuf)) {
							return false;
						}
						if (typeof global.ArrayBuffer !== "function") {
							return false;
						}
						if (typeof ArrayBuffer.isView === "function") {
							return ArrayBuffer.isView(arrbuf);
						}
						if (!arrbuf) {
							return false;
						}
						if (arrbuf instanceof DataView) {
							return true;
						}
						if (
							arrbuf.buffer &&
							arrbuf.buffer instanceof ArrayBuffer
						) {
							return true;
						}
						return false;
					}
					// 1. The assert module provides functions that throw
					// AssertionError's when particular conditions are not met. The
					// assert module must conform to the following interface.

					var assert = (module.exports = ok);

					// 2. The AssertionError is defined in assert.
					// new assert.AssertionError({ message: message,
					//                             actual: actual,
					//                             expected: expected })

					var regex = /\s*function\s+([^\(\s]*)\s*/;
					// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
					function getName(func) {
						if (!util.isFunction(func)) {
							return;
						}
						if (functionsHaveNames) {
							return func.name;
						}
						var str = func.toString();
						var match = str.match(regex);
						return match && match[1];
					}
					assert.AssertionError = function AssertionError(options) {
						this.name = "AssertionError";
						this.actual = options.actual;
						this.expected = options.expected;
						this.operator = options.operator;
						if (options.message) {
							this.message = options.message;
							this.generatedMessage = false;
						} else {
							this.message = getMessage(this);
							this.generatedMessage = true;
						}
						var stackStartFunction =
							options.stackStartFunction || fail;
						if (Error.captureStackTrace) {
							Error.captureStackTrace(this, stackStartFunction);
						} else {
							// non v8 browsers so we can have a stacktrace
							var err = new Error();
							if (err.stack) {
								var out = err.stack;

								// try to strip useless frames
								var fn_name = getName(stackStartFunction);
								var idx = out.indexOf("\n" + fn_name);
								if (idx >= 0) {
									// once we have located the function frame
									// we need to strip out everything before it (and its line)
									var next_line = out.indexOf("\n", idx + 1);
									out = out.substring(next_line + 1);
								}

								this.stack = out;
							}
						}
					};

					// assert.AssertionError instanceof Error
					util.inherits(assert.AssertionError, Error);

					function truncate(s, n) {
						if (typeof s === "string") {
							return s.length < n ? s : s.slice(0, n);
						} else {
							return s;
						}
					}
					function inspect(something) {
						if (functionsHaveNames || !util.isFunction(something)) {
							return util.inspect(something);
						}
						var rawname = getName(something);
						var name = rawname ? ": " + rawname : "";
						return "[Function" + name + "]";
					}
					function getMessage(self) {
						return (
							truncate(inspect(self.actual), 128) +
							" " +
							self.operator +
							" " +
							truncate(inspect(self.expected), 128)
						);
					}

					// At present only the three keys mentioned above are used and
					// understood by the spec. Implementations or sub modules can pass
					// other keys to the AssertionError's constructor - they will be
					// ignored.

					// 3. All of the following functions must throw an AssertionError
					// when a corresponding condition is not met, with a message that
					// may be undefined if not provided.  All assertion methods provide
					// both the actual and expected values to the assertion error for
					// display purposes.

					function fail(
						actual,
						expected,
						message,
						operator,
						stackStartFunction
					) {
						throw new assert.AssertionError({
							message: message,
							actual: actual,
							expected: expected,
							operator: operator,
							stackStartFunction: stackStartFunction,
						});
					}

					// EXTENSION! allows for well behaved errors defined elsewhere.
					assert.fail = fail;

					// 4. Pure assertion tests whether a value is truthy, as determined
					// by !!guard.
					// assert.ok(guard, message_opt);
					// This statement is equivalent to assert.equal(true, !!guard,
					// message_opt);. To test strictly for the value true, use
					// assert.strictEqual(true, guard, message_opt);.

					function ok(value, message) {
						if (!value) fail(value, true, message, "==", assert.ok);
					}
					assert.ok = ok;

					// 5. The equality assertion tests shallow, coercive equality with
					// ==.
					// assert.equal(actual, expected, message_opt);

					assert.equal = function equal(actual, expected, message) {
						if (actual != expected)
							fail(actual, expected, message, "==", assert.equal);
					};

					// 6. The non-equality assertion tests for whether two objects are not equal
					// with != assert.notEqual(actual, expected, message_opt);

					assert.notEqual = function notEqual(
						actual,
						expected,
						message
					) {
						if (actual == expected) {
							fail(
								actual,
								expected,
								message,
								"!=",
								assert.notEqual
							);
						}
					};

					// 7. The equivalence assertion tests a deep equality relation.
					// assert.deepEqual(actual, expected, message_opt);

					assert.deepEqual = function deepEqual(
						actual,
						expected,
						message
					) {
						if (!_deepEqual(actual, expected, false)) {
							fail(
								actual,
								expected,
								message,
								"deepEqual",
								assert.deepEqual
							);
						}
					};

					assert.deepStrictEqual = function deepStrictEqual(
						actual,
						expected,
						message
					) {
						if (!_deepEqual(actual, expected, true)) {
							fail(
								actual,
								expected,
								message,
								"deepStrictEqual",
								assert.deepStrictEqual
							);
						}
					};

					function _deepEqual(actual, expected, strict, memos) {
						// 7.1. All identical values are equivalent, as determined by ===.
						if (actual === expected) {
							return true;
						} else if (isBuffer(actual) && isBuffer(expected)) {
							return compare(actual, expected) === 0;

							// 7.2. If the expected value is a Date object, the actual value is
							// equivalent if it is also a Date object that refers to the same time.
						} else if (
							util.isDate(actual) &&
							util.isDate(expected)
						) {
							return actual.getTime() === expected.getTime();

							// 7.3 If the expected value is a RegExp object, the actual value is
							// equivalent if it is also a RegExp object with the same source and
							// properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
						} else if (
							util.isRegExp(actual) &&
							util.isRegExp(expected)
						) {
							return (
								actual.source === expected.source &&
								actual.global === expected.global &&
								actual.multiline === expected.multiline &&
								actual.lastIndex === expected.lastIndex &&
								actual.ignoreCase === expected.ignoreCase
							);

							// 7.4. Other pairs that do not both pass typeof value == 'object',
							// equivalence is determined by ==.
						} else if (
							(actual === null || typeof actual !== "object") &&
							(expected === null || typeof expected !== "object")
						) {
							return strict
								? actual === expected
								: actual == expected;

							// If both values are instances of typed arrays, wrap their underlying
							// ArrayBuffers in a Buffer each to increase performance
							// This optimization requires the arrays to have the same type as checked by
							// Object.prototype.toString (aka pToString). Never perform binary
							// comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
							// bit patterns are not identical.
						} else if (
							isView(actual) &&
							isView(expected) &&
							pToString(actual) === pToString(expected) &&
							!(
								actual instanceof Float32Array ||
								actual instanceof Float64Array
							)
						) {
							return (
								compare(
									new Uint8Array(actual.buffer),
									new Uint8Array(expected.buffer)
								) === 0
							);

							// 7.5 For all other Object pairs, including Array objects, equivalence is
							// determined by having the same number of owned properties (as verified
							// with Object.prototype.hasOwnProperty.call), the same set of keys
							// (although not necessarily the same order), equivalent values for every
							// corresponding key, and an identical 'prototype' property. Note: this
							// accounts for both named and indexed properties on Arrays.
						} else if (isBuffer(actual) !== isBuffer(expected)) {
							return false;
						} else {
							memos = memos || {actual: [], expected: []};

							var actualIndex = memos.actual.indexOf(actual);
							if (actualIndex !== -1) {
								if (
									actualIndex ===
									memos.expected.indexOf(expected)
								) {
									return true;
								}
							}

							memos.actual.push(actual);
							memos.expected.push(expected);

							return objEquiv(actual, expected, strict, memos);
						}
					}

					function isArguments(object) {
						return (
							Object.prototype.toString.call(object) ==
							"[object Arguments]"
						);
					}

					function objEquiv(a, b, strict, actualVisitedObjects) {
						if (
							a === null ||
							a === undefined ||
							b === null ||
							b === undefined
						)
							return false;
						// if one is a primitive, the other must be same
						if (util.isPrimitive(a) || util.isPrimitive(b))
							return a === b;
						if (
							strict &&
							Object.getPrototypeOf(a) !==
								Object.getPrototypeOf(b)
						)
							return false;
						var aIsArgs = isArguments(a);
						var bIsArgs = isArguments(b);
						if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
							return false;
						if (aIsArgs) {
							a = pSlice.call(a);
							b = pSlice.call(b);
							return _deepEqual(a, b, strict);
						}
						var ka = objectKeys(a);
						var kb = objectKeys(b);
						var key, i;
						// having the same number of owned properties (keys incorporates
						// hasOwnProperty)
						if (ka.length !== kb.length) return false;
						//the same set of keys (although not necessarily the same order),
						ka.sort();
						kb.sort();
						//~~~cheap key test
						for (i = ka.length - 1; i >= 0; i--) {
							if (ka[i] !== kb[i]) return false;
						}
						//equivalent values for every corresponding key, and
						//~~~possibly expensive deep test
						for (i = ka.length - 1; i >= 0; i--) {
							key = ka[i];
							if (
								!_deepEqual(
									a[key],
									b[key],
									strict,
									actualVisitedObjects
								)
							)
								return false;
						}
						return true;
					}

					// 8. The non-equivalence assertion tests for any deep inequality.
					// assert.notDeepEqual(actual, expected, message_opt);

					assert.notDeepEqual = function notDeepEqual(
						actual,
						expected,
						message
					) {
						if (_deepEqual(actual, expected, false)) {
							fail(
								actual,
								expected,
								message,
								"notDeepEqual",
								assert.notDeepEqual
							);
						}
					};

					assert.notDeepStrictEqual = notDeepStrictEqual;
					function notDeepStrictEqual(actual, expected, message) {
						if (_deepEqual(actual, expected, true)) {
							fail(
								actual,
								expected,
								message,
								"notDeepStrictEqual",
								notDeepStrictEqual
							);
						}
					}

					// 9. The strict equality assertion tests strict equality, as determined by ===.
					// assert.strictEqual(actual, expected, message_opt);

					assert.strictEqual = function strictEqual(
						actual,
						expected,
						message
					) {
						if (actual !== expected) {
							fail(
								actual,
								expected,
								message,
								"===",
								assert.strictEqual
							);
						}
					};

					// 10. The strict non-equality assertion tests for strict inequality, as
					// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

					assert.notStrictEqual = function notStrictEqual(
						actual,
						expected,
						message
					) {
						if (actual === expected) {
							fail(
								actual,
								expected,
								message,
								"!==",
								assert.notStrictEqual
							);
						}
					};

					function expectedException(actual, expected) {
						if (!actual || !expected) {
							return false;
						}

						if (
							Object.prototype.toString.call(expected) ==
							"[object RegExp]"
						) {
							return expected.test(actual);
						}

						try {
							if (actual instanceof expected) {
								return true;
							}
						} catch (e) {
							// Ignore.  The instanceof check doesn't work for arrow functions.
						}

						if (Error.isPrototypeOf(expected)) {
							return false;
						}

						return expected.call({}, actual) === true;
					}

					function _tryBlock(block) {
						var error;
						try {
							block();
						} catch (e) {
							error = e;
						}
						return error;
					}

					function _throws(shouldThrow, block, expected, message) {
						var actual;

						if (typeof block !== "function") {
							throw new TypeError(
								'"block" argument must be a function'
							);
						}

						if (typeof expected === "string") {
							message = expected;
							expected = null;
						}

						actual = _tryBlock(block);

						message =
							(expected && expected.name
								? " (" + expected.name + ")."
								: ".") + (message ? " " + message : ".");

						if (shouldThrow && !actual) {
							fail(
								actual,
								expected,
								"Missing expected exception" + message
							);
						}

						var userProvidedMessage = typeof message === "string";
						var isUnwantedException =
							!shouldThrow && util.isError(actual);
						var isUnexpectedException =
							!shouldThrow && actual && !expected;

						if (
							(isUnwantedException &&
								userProvidedMessage &&
								expectedException(actual, expected)) ||
							isUnexpectedException
						) {
							fail(
								actual,
								expected,
								"Got unwanted exception" + message
							);
						}

						if (
							(shouldThrow &&
								actual &&
								expected &&
								!expectedException(actual, expected)) ||
							(!shouldThrow && actual)
						) {
							throw actual;
						}
					}

					// 11. Expected to throw an error:
					// assert.throws(block, Error_opt, message_opt);

					assert.throws = function(
						block,
						/*optional*/ error,
						/*optional*/ message
					) {
						_throws(true, block, error, message);
					};

					// EXTENSION! This is annoying to write outside this module.
					assert.doesNotThrow = function(
						block,
						/*optional*/ error,
						/*optional*/ message
					) {
						_throws(false, block, error, message);
					};

					assert.ifError = function(err) {
						if (err) throw err;
					};

					// Expose a strict only variant of assert
					function strict(value, message) {
						if (!value) fail(value, true, message, "==", strict);
					}
					assert.strict = objectAssign(strict, assert, {
						equal: assert.strictEqual,
						deepEqual: assert.deepStrictEqual,
						notEqual: assert.notStrictEqual,
						notDeepEqual: assert.notDeepStrictEqual,
					});
					assert.strict.strict = assert.strict;

					var objectKeys =
						Object.keys ||
						function(obj) {
							var keys = [];
							for (var key in obj) {
								if (hasOwn.call(obj, key)) keys.push(key);
							}
							return keys;
						};

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/ExampleComponent.vue?vue&type=script&lang=js&":
			/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/ExampleComponent.vue?vue&type=script&lang=js& ***!
  \***************************************************************************************************************************************************************************/
			/*! exports provided: default */
			/***/ function(module, __webpack_exports__, __webpack_require__) {
				"use strict";
				__webpack_require__.r(__webpack_exports__);
				//
				//
				//
				//
				//
				//
				//
				//
				//
				//
				//
				//
				//
				//
				//
				//
				/* harmony default export */ __webpack_exports__["default"] = {
					mounted: function mounted() {
						console.log("Component mounted.");
					},
				};

				/***/
			},

		/***/ "./node_modules/base64-js/index.js":
			/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";

				exports.byteLength = byteLength;
				exports.toByteArray = toByteArray;
				exports.fromByteArray = fromByteArray;

				var lookup = [];
				var revLookup = [];
				var Arr =
					typeof Uint8Array !== "undefined" ? Uint8Array : Array;

				var code =
					"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
				for (var i = 0, len = code.length; i < len; ++i) {
					lookup[i] = code[i];
					revLookup[code.charCodeAt(i)] = i;
				}

				// Support decoding URL-safe base64 strings, as Node.js does.
				// See: https://en.wikipedia.org/wiki/Base64#URL_applications
				revLookup["-".charCodeAt(0)] = 62;
				revLookup["_".charCodeAt(0)] = 63;

				function getLens(b64) {
					var len = b64.length;

					if (len % 4 > 0) {
						throw new Error(
							"Invalid string. Length must be a multiple of 4"
						);
					}

					// Trim off extra bytes after placeholder bytes are found
					// See: https://github.com/beatgammit/base64-js/issues/42
					var validLen = b64.indexOf("=");
					if (validLen === -1) validLen = len;

					var placeHoldersLen =
						validLen === len ? 0 : 4 - (validLen % 4);

					return [validLen, placeHoldersLen];
				}

				// base64 is 4/3 + up to two characters of the original data
				function byteLength(b64) {
					var lens = getLens(b64);
					var validLen = lens[0];
					var placeHoldersLen = lens[1];
					return (
						((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen
					);
				}

				function _byteLength(b64, validLen, placeHoldersLen) {
					return (
						((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen
					);
				}

				function toByteArray(b64) {
					var tmp;
					var lens = getLens(b64);
					var validLen = lens[0];
					var placeHoldersLen = lens[1];

					var arr = new Arr(
						_byteLength(b64, validLen, placeHoldersLen)
					);

					var curByte = 0;

					// if there are placeholders, only get up to the last complete 4 chars
					var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

					for (var i = 0; i < len; i += 4) {
						tmp =
							(revLookup[b64.charCodeAt(i)] << 18) |
							(revLookup[b64.charCodeAt(i + 1)] << 12) |
							(revLookup[b64.charCodeAt(i + 2)] << 6) |
							revLookup[b64.charCodeAt(i + 3)];
						arr[curByte++] = (tmp >> 16) & 0xff;
						arr[curByte++] = (tmp >> 8) & 0xff;
						arr[curByte++] = tmp & 0xff;
					}

					if (placeHoldersLen === 2) {
						tmp =
							(revLookup[b64.charCodeAt(i)] << 2) |
							(revLookup[b64.charCodeAt(i + 1)] >> 4);
						arr[curByte++] = tmp & 0xff;
					}

					if (placeHoldersLen === 1) {
						tmp =
							(revLookup[b64.charCodeAt(i)] << 10) |
							(revLookup[b64.charCodeAt(i + 1)] << 4) |
							(revLookup[b64.charCodeAt(i + 2)] >> 2);
						arr[curByte++] = (tmp >> 8) & 0xff;
						arr[curByte++] = tmp & 0xff;
					}

					return arr;
				}

				function tripletToBase64(num) {
					return (
						lookup[(num >> 18) & 0x3f] +
						lookup[(num >> 12) & 0x3f] +
						lookup[(num >> 6) & 0x3f] +
						lookup[num & 0x3f]
					);
				}

				function encodeChunk(uint8, start, end) {
					var tmp;
					var output = [];
					for (var i = start; i < end; i += 3) {
						tmp =
							((uint8[i] << 16) & 0xff0000) +
							((uint8[i + 1] << 8) & 0xff00) +
							(uint8[i + 2] & 0xff);
						output.push(tripletToBase64(tmp));
					}
					return output.join("");
				}

				function fromByteArray(uint8) {
					var tmp;
					var len = uint8.length;
					var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
					var parts = [];
					var maxChunkLength = 16383; // must be multiple of 3

					// go through the array every three bytes, we'll deal with trailing stuff later
					for (
						var i = 0, len2 = len - extraBytes;
						i < len2;
						i += maxChunkLength
					) {
						parts.push(
							encodeChunk(
								uint8,
								i,
								i + maxChunkLength > len2
									? len2
									: i + maxChunkLength
							)
						);
					}

					// pad the end with zeros, but make sure to not forget the extra bytes
					if (extraBytes === 1) {
						tmp = uint8[len - 1];
						parts.push(
							lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + "=="
						);
					} else if (extraBytes === 2) {
						tmp = (uint8[len - 2] << 8) + uint8[len - 1];
						parts.push(
							lookup[tmp >> 10] +
								lookup[(tmp >> 4) & 0x3f] +
								lookup[(tmp << 2) & 0x3f] +
								"="
						);
					}

					return parts.join("");
				}

				/***/
			},

		/***/ "./node_modules/browserify-zlib/lib/binding.js":
			/*!*****************************************************!*\
  !*** ./node_modules/browserify-zlib/lib/binding.js ***!
  \*****************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				/* WEBPACK VAR INJECTION */ (function(Buffer, process) {
					/* eslint camelcase: "off" */

					var assert = __webpack_require__(
						/*! assert */ "./node_modules/assert/assert.js"
					);

					var Zstream = __webpack_require__(
						/*! pako/lib/zlib/zstream */ "./node_modules/pako/lib/zlib/zstream.js"
					);
					var zlib_deflate = __webpack_require__(
						/*! pako/lib/zlib/deflate.js */ "./node_modules/pako/lib/zlib/deflate.js"
					);
					var zlib_inflate = __webpack_require__(
						/*! pako/lib/zlib/inflate.js */ "./node_modules/pako/lib/zlib/inflate.js"
					);
					var constants = __webpack_require__(
						/*! pako/lib/zlib/constants */ "./node_modules/pako/lib/zlib/constants.js"
					);

					for (var key in constants) {
						exports[key] = constants[key];
					}

					// zlib modes
					exports.NONE = 0;
					exports.DEFLATE = 1;
					exports.INFLATE = 2;
					exports.GZIP = 3;
					exports.GUNZIP = 4;
					exports.DEFLATERAW = 5;
					exports.INFLATERAW = 6;
					exports.UNZIP = 7;

					var GZIP_HEADER_ID1 = 0x1f;
					var GZIP_HEADER_ID2 = 0x8b;

					/**
					 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
					 */
					function Zlib(mode) {
						if (
							typeof mode !== "number" ||
							mode < exports.DEFLATE ||
							mode > exports.UNZIP
						) {
							throw new TypeError("Bad argument");
						}

						this.dictionary = null;
						this.err = 0;
						this.flush = 0;
						this.init_done = false;
						this.level = 0;
						this.memLevel = 0;
						this.mode = mode;
						this.strategy = 0;
						this.windowBits = 0;
						this.write_in_progress = false;
						this.pending_close = false;
						this.gzip_id_bytes_read = 0;
					}

					Zlib.prototype.close = function() {
						if (this.write_in_progress) {
							this.pending_close = true;
							return;
						}

						this.pending_close = false;

						assert(this.init_done, "close before init");
						assert(this.mode <= exports.UNZIP);

						if (
							this.mode === exports.DEFLATE ||
							this.mode === exports.GZIP ||
							this.mode === exports.DEFLATERAW
						) {
							zlib_deflate.deflateEnd(this.strm);
						} else if (
							this.mode === exports.INFLATE ||
							this.mode === exports.GUNZIP ||
							this.mode === exports.INFLATERAW ||
							this.mode === exports.UNZIP
						) {
							zlib_inflate.inflateEnd(this.strm);
						}

						this.mode = exports.NONE;

						this.dictionary = null;
					};

					Zlib.prototype.write = function(
						flush,
						input,
						in_off,
						in_len,
						out,
						out_off,
						out_len
					) {
						return this._write(
							true,
							flush,
							input,
							in_off,
							in_len,
							out,
							out_off,
							out_len
						);
					};

					Zlib.prototype.writeSync = function(
						flush,
						input,
						in_off,
						in_len,
						out,
						out_off,
						out_len
					) {
						return this._write(
							false,
							flush,
							input,
							in_off,
							in_len,
							out,
							out_off,
							out_len
						);
					};

					Zlib.prototype._write = function(
						async,
						flush,
						input,
						in_off,
						in_len,
						out,
						out_off,
						out_len
					) {
						assert.equal(arguments.length, 8);

						assert(this.init_done, "write before init");
						assert(this.mode !== exports.NONE, "already finalized");
						assert.equal(
							false,
							this.write_in_progress,
							"write already in progress"
						);
						assert.equal(
							false,
							this.pending_close,
							"close is pending"
						);

						this.write_in_progress = true;

						assert.equal(
							false,
							flush === undefined,
							"must provide flush value"
						);

						this.write_in_progress = true;

						if (
							flush !== exports.Z_NO_FLUSH &&
							flush !== exports.Z_PARTIAL_FLUSH &&
							flush !== exports.Z_SYNC_FLUSH &&
							flush !== exports.Z_FULL_FLUSH &&
							flush !== exports.Z_FINISH &&
							flush !== exports.Z_BLOCK
						) {
							throw new Error("Invalid flush value");
						}

						if (input == null) {
							input = Buffer.alloc(0);
							in_len = 0;
							in_off = 0;
						}

						this.strm.avail_in = in_len;
						this.strm.input = input;
						this.strm.next_in = in_off;
						this.strm.avail_out = out_len;
						this.strm.output = out;
						this.strm.next_out = out_off;
						this.flush = flush;

						if (!async) {
							// sync version
							this._process();

							if (this._checkError()) {
								return this._afterSync();
							}
							return;
						}

						// async version
						var self = this;
						process.nextTick(function() {
							self._process();
							self._after();
						});

						return this;
					};

					Zlib.prototype._afterSync = function() {
						var avail_out = this.strm.avail_out;
						var avail_in = this.strm.avail_in;

						this.write_in_progress = false;

						return [avail_in, avail_out];
					};

					Zlib.prototype._process = function() {
						var next_expected_header_byte = null;

						// If the avail_out is left at 0, then it means that it ran out
						// of room.  If there was avail_out left over, then it means
						// that all of the input was consumed.
						switch (this.mode) {
							case exports.DEFLATE:
							case exports.GZIP:
							case exports.DEFLATERAW:
								this.err = zlib_deflate.deflate(
									this.strm,
									this.flush
								);
								break;
							case exports.UNZIP:
								if (this.strm.avail_in > 0) {
									next_expected_header_byte = this.strm
										.next_in;
								}

								switch (this.gzip_id_bytes_read) {
									case 0:
										if (
											next_expected_header_byte === null
										) {
											break;
										}

										if (
											this.strm.input[
												next_expected_header_byte
											] === GZIP_HEADER_ID1
										) {
											this.gzip_id_bytes_read = 1;
											next_expected_header_byte++;

											if (this.strm.avail_in === 1) {
												// The only available byte was already read.
												break;
											}
										} else {
											this.mode = exports.INFLATE;
											break;
										}

									// fallthrough
									case 1:
										if (
											next_expected_header_byte === null
										) {
											break;
										}

										if (
											this.strm.input[
												next_expected_header_byte
											] === GZIP_HEADER_ID2
										) {
											this.gzip_id_bytes_read = 2;
											this.mode = exports.GUNZIP;
										} else {
											// There is no actual difference between INFLATE and INFLATERAW
											// (after initialization).
											this.mode = exports.INFLATE;
										}

										break;
									default:
										throw new Error(
											"invalid number of gzip magic number bytes read"
										);
								}

							// fallthrough
							case exports.INFLATE:
							case exports.GUNZIP:
							case exports.INFLATERAW:
								this.err = zlib_inflate.inflate(
									this.strm,
									this.flush

									// If data was encoded with dictionary
								);
								if (
									this.err === exports.Z_NEED_DICT &&
									this.dictionary
								) {
									// Load it
									this.err = zlib_inflate.inflateSetDictionary(
										this.strm,
										this.dictionary
									);
									if (this.err === exports.Z_OK) {
										// And try to decode again
										this.err = zlib_inflate.inflate(
											this.strm,
											this.flush
										);
									} else if (
										this.err === exports.Z_DATA_ERROR
									) {
										// Both inflateSetDictionary() and inflate() return Z_DATA_ERROR.
										// Make it possible for After() to tell a bad dictionary from bad
										// input.
										this.err = exports.Z_NEED_DICT;
									}
								}
								while (
									this.strm.avail_in > 0 &&
									this.mode === exports.GUNZIP &&
									this.err === exports.Z_STREAM_END &&
									this.strm.next_in[0] !== 0x00
								) {
									// Bytes remain in input buffer. Perhaps this is another compressed
									// member in the same archive, or just trailing garbage.
									// Trailing zero bytes are okay, though, since they are frequently
									// used for padding.

									this.reset();
									this.err = zlib_inflate.inflate(
										this.strm,
										this.flush
									);
								}
								break;
							default:
								throw new Error("Unknown mode " + this.mode);
						}
					};

					Zlib.prototype._checkError = function() {
						// Acceptable error states depend on the type of zlib stream.
						switch (this.err) {
							case exports.Z_OK:
							case exports.Z_BUF_ERROR:
								if (
									this.strm.avail_out !== 0 &&
									this.flush === exports.Z_FINISH
								) {
									this._error("unexpected end of file");
									return false;
								}
								break;
							case exports.Z_STREAM_END:
								// normal statuses, not fatal
								break;
							case exports.Z_NEED_DICT:
								if (this.dictionary == null) {
									this._error("Missing dictionary");
								} else {
									this._error("Bad dictionary");
								}
								return false;
							default:
								// something else.
								this._error("Zlib error");
								return false;
						}

						return true;
					};

					Zlib.prototype._after = function() {
						if (!this._checkError()) {
							return;
						}

						var avail_out = this.strm.avail_out;
						var avail_in = this.strm.avail_in;

						this.write_in_progress = false;

						// call the write() cb
						this.callback(avail_in, avail_out);

						if (this.pending_close) {
							this.close();
						}
					};

					Zlib.prototype._error = function(message) {
						if (this.strm.msg) {
							message = this.strm.msg;
						}
						this.onerror(
							message,
							this.err

							// no hope of rescue.
						);
						this.write_in_progress = false;
						if (this.pending_close) {
							this.close();
						}
					};

					Zlib.prototype.init = function(
						windowBits,
						level,
						memLevel,
						strategy,
						dictionary
					) {
						assert(
							arguments.length === 4 || arguments.length === 5,
							"init(windowBits, level, memLevel, strategy, [dictionary])"
						);

						assert(
							windowBits >= 8 && windowBits <= 15,
							"invalid windowBits"
						);
						assert(
							level >= -1 && level <= 9,
							"invalid compression level"
						);

						assert(
							memLevel >= 1 && memLevel <= 9,
							"invalid memlevel"
						);

						assert(
							strategy === exports.Z_FILTERED ||
								strategy === exports.Z_HUFFMAN_ONLY ||
								strategy === exports.Z_RLE ||
								strategy === exports.Z_FIXED ||
								strategy === exports.Z_DEFAULT_STRATEGY,
							"invalid strategy"
						);

						this._init(
							level,
							windowBits,
							memLevel,
							strategy,
							dictionary
						);
						this._setDictionary();
					};

					Zlib.prototype.params = function() {
						throw new Error("deflateParams Not supported");
					};

					Zlib.prototype.reset = function() {
						this._reset();
						this._setDictionary();
					};

					Zlib.prototype._init = function(
						level,
						windowBits,
						memLevel,
						strategy,
						dictionary
					) {
						this.level = level;
						this.windowBits = windowBits;
						this.memLevel = memLevel;
						this.strategy = strategy;

						this.flush = exports.Z_NO_FLUSH;

						this.err = exports.Z_OK;

						if (
							this.mode === exports.GZIP ||
							this.mode === exports.GUNZIP
						) {
							this.windowBits += 16;
						}

						if (this.mode === exports.UNZIP) {
							this.windowBits += 32;
						}

						if (
							this.mode === exports.DEFLATERAW ||
							this.mode === exports.INFLATERAW
						) {
							this.windowBits = -1 * this.windowBits;
						}

						this.strm = new Zstream();

						switch (this.mode) {
							case exports.DEFLATE:
							case exports.GZIP:
							case exports.DEFLATERAW:
								this.err = zlib_deflate.deflateInit2(
									this.strm,
									this.level,
									exports.Z_DEFLATED,
									this.windowBits,
									this.memLevel,
									this.strategy
								);
								break;
							case exports.INFLATE:
							case exports.GUNZIP:
							case exports.INFLATERAW:
							case exports.UNZIP:
								this.err = zlib_inflate.inflateInit2(
									this.strm,
									this.windowBits
								);
								break;
							default:
								throw new Error("Unknown mode " + this.mode);
						}

						if (this.err !== exports.Z_OK) {
							this._error("Init error");
						}

						this.dictionary = dictionary;

						this.write_in_progress = false;
						this.init_done = true;
					};

					Zlib.prototype._setDictionary = function() {
						if (this.dictionary == null) {
							return;
						}

						this.err = exports.Z_OK;

						switch (this.mode) {
							case exports.DEFLATE:
							case exports.DEFLATERAW:
								this.err = zlib_deflate.deflateSetDictionary(
									this.strm,
									this.dictionary
								);
								break;
							default:
								break;
						}

						if (this.err !== exports.Z_OK) {
							this._error("Failed to set dictionary");
						}
					};

					Zlib.prototype._reset = function() {
						this.err = exports.Z_OK;

						switch (this.mode) {
							case exports.DEFLATE:
							case exports.DEFLATERAW:
							case exports.GZIP:
								this.err = zlib_deflate.deflateReset(this.strm);
								break;
							case exports.INFLATE:
							case exports.INFLATERAW:
							case exports.GUNZIP:
								this.err = zlib_inflate.inflateReset(this.strm);
								break;
							default:
								break;
						}

						if (this.err !== exports.Z_OK) {
							this._error("Failed to reset stream");
						}
					};

					exports.Zlib = Zlib;
					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js"
					).Buffer,
					__webpack_require__(
						/*! ./../../process/browser.js */ "./node_modules/process/browser.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/browserify-zlib/lib/index.js":
			/*!***************************************************!*\
  !*** ./node_modules/browserify-zlib/lib/index.js ***!
  \***************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				/* WEBPACK VAR INJECTION */ (function(process) {
					var Buffer = __webpack_require__(
						/*! buffer */ "./node_modules/buffer/index.js"
					).Buffer;
					var Transform = __webpack_require__(
						/*! stream */ "./node_modules/stream-browserify/index.js"
					).Transform;
					var binding = __webpack_require__(
						/*! ./binding */ "./node_modules/browserify-zlib/lib/binding.js"
					);
					var util = __webpack_require__(
						/*! util */ "./node_modules/util/util.js"
					);
					var assert = __webpack_require__(
						/*! assert */ "./node_modules/assert/assert.js"
					).ok;
					var kMaxLength = __webpack_require__(
						/*! buffer */ "./node_modules/buffer/index.js"
					).kMaxLength;
					var kRangeErrorMessage =
						"Cannot create final Buffer. It would be larger " +
						"than 0x" +
						kMaxLength.toString(16) +
						" bytes";

					// zlib doesn't provide these, so kludge them in following the same
					// const naming scheme zlib uses.
					binding.Z_MIN_WINDOWBITS = 8;
					binding.Z_MAX_WINDOWBITS = 15;
					binding.Z_DEFAULT_WINDOWBITS = 15;

					// fewer than 64 bytes per chunk is stupid.
					// technically it could work with as few as 8, but even 64 bytes
					// is absurdly low.  Usually a MB or more is best.
					binding.Z_MIN_CHUNK = 64;
					binding.Z_MAX_CHUNK = Infinity;
					binding.Z_DEFAULT_CHUNK = 16 * 1024;

					binding.Z_MIN_MEMLEVEL = 1;
					binding.Z_MAX_MEMLEVEL = 9;
					binding.Z_DEFAULT_MEMLEVEL = 8;

					binding.Z_MIN_LEVEL = -1;
					binding.Z_MAX_LEVEL = 9;
					binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

					// expose all the zlib constants
					var bkeys = Object.keys(binding);
					for (var bk = 0; bk < bkeys.length; bk++) {
						var bkey = bkeys[bk];
						if (bkey.match(/^Z/)) {
							Object.defineProperty(exports, bkey, {
								enumerable: true,
								value: binding[bkey],
								writable: false,
							});
						}
					}

					// translation table for return codes.
					var codes = {
						Z_OK: binding.Z_OK,
						Z_STREAM_END: binding.Z_STREAM_END,
						Z_NEED_DICT: binding.Z_NEED_DICT,
						Z_ERRNO: binding.Z_ERRNO,
						Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
						Z_DATA_ERROR: binding.Z_DATA_ERROR,
						Z_MEM_ERROR: binding.Z_MEM_ERROR,
						Z_BUF_ERROR: binding.Z_BUF_ERROR,
						Z_VERSION_ERROR: binding.Z_VERSION_ERROR,
					};

					var ckeys = Object.keys(codes);
					for (var ck = 0; ck < ckeys.length; ck++) {
						var ckey = ckeys[ck];
						codes[codes[ckey]] = ckey;
					}

					Object.defineProperty(exports, "codes", {
						enumerable: true,
						value: Object.freeze(codes),
						writable: false,
					});

					exports.Deflate = Deflate;
					exports.Inflate = Inflate;
					exports.Gzip = Gzip;
					exports.Gunzip = Gunzip;
					exports.DeflateRaw = DeflateRaw;
					exports.InflateRaw = InflateRaw;
					exports.Unzip = Unzip;

					exports.createDeflate = function(o) {
						return new Deflate(o);
					};

					exports.createInflate = function(o) {
						return new Inflate(o);
					};

					exports.createDeflateRaw = function(o) {
						return new DeflateRaw(o);
					};

					exports.createInflateRaw = function(o) {
						return new InflateRaw(o);
					};

					exports.createGzip = function(o) {
						return new Gzip(o);
					};

					exports.createGunzip = function(o) {
						return new Gunzip(o);
					};

					exports.createUnzip = function(o) {
						return new Unzip(o);
					};

					// Convenience methods.
					// compress/decompress a string or buffer in one step.
					exports.deflate = function(buffer, opts, callback) {
						if (typeof opts === "function") {
							callback = opts;
							opts = {};
						}
						return zlibBuffer(new Deflate(opts), buffer, callback);
					};

					exports.deflateSync = function(buffer, opts) {
						return zlibBufferSync(new Deflate(opts), buffer);
					};

					exports.gzip = function(buffer, opts, callback) {
						if (typeof opts === "function") {
							callback = opts;
							opts = {};
						}
						return zlibBuffer(new Gzip(opts), buffer, callback);
					};

					exports.gzipSync = function(buffer, opts) {
						return zlibBufferSync(new Gzip(opts), buffer);
					};

					exports.deflateRaw = function(buffer, opts, callback) {
						if (typeof opts === "function") {
							callback = opts;
							opts = {};
						}
						return zlibBuffer(
							new DeflateRaw(opts),
							buffer,
							callback
						);
					};

					exports.deflateRawSync = function(buffer, opts) {
						return zlibBufferSync(new DeflateRaw(opts), buffer);
					};

					exports.unzip = function(buffer, opts, callback) {
						if (typeof opts === "function") {
							callback = opts;
							opts = {};
						}
						return zlibBuffer(new Unzip(opts), buffer, callback);
					};

					exports.unzipSync = function(buffer, opts) {
						return zlibBufferSync(new Unzip(opts), buffer);
					};

					exports.inflate = function(buffer, opts, callback) {
						if (typeof opts === "function") {
							callback = opts;
							opts = {};
						}
						return zlibBuffer(new Inflate(opts), buffer, callback);
					};

					exports.inflateSync = function(buffer, opts) {
						return zlibBufferSync(new Inflate(opts), buffer);
					};

					exports.gunzip = function(buffer, opts, callback) {
						if (typeof opts === "function") {
							callback = opts;
							opts = {};
						}
						return zlibBuffer(new Gunzip(opts), buffer, callback);
					};

					exports.gunzipSync = function(buffer, opts) {
						return zlibBufferSync(new Gunzip(opts), buffer);
					};

					exports.inflateRaw = function(buffer, opts, callback) {
						if (typeof opts === "function") {
							callback = opts;
							opts = {};
						}
						return zlibBuffer(
							new InflateRaw(opts),
							buffer,
							callback
						);
					};

					exports.inflateRawSync = function(buffer, opts) {
						return zlibBufferSync(new InflateRaw(opts), buffer);
					};

					function zlibBuffer(engine, buffer, callback) {
						var buffers = [];
						var nread = 0;

						engine.on("error", onError);
						engine.on("end", onEnd);

						engine.end(buffer);
						flow();

						function flow() {
							var chunk;
							while (null !== (chunk = engine.read())) {
								buffers.push(chunk);
								nread += chunk.length;
							}
							engine.once("readable", flow);
						}

						function onError(err) {
							engine.removeListener("end", onEnd);
							engine.removeListener("readable", flow);
							callback(err);
						}

						function onEnd() {
							var buf;
							var err = null;

							if (nread >= kMaxLength) {
								err = new RangeError(kRangeErrorMessage);
							} else {
								buf = Buffer.concat(buffers, nread);
							}

							buffers = [];
							engine.close();
							callback(err, buf);
						}
					}

					function zlibBufferSync(engine, buffer) {
						if (typeof buffer === "string")
							buffer = Buffer.from(buffer);

						if (!Buffer.isBuffer(buffer))
							throw new TypeError("Not a string or buffer");

						var flushFlag = engine._finishFlushFlag;

						return engine._processChunk(buffer, flushFlag);
					}

					// generic zlib
					// minimal 2-byte header
					function Deflate(opts) {
						if (!(this instanceof Deflate))
							return new Deflate(opts);
						Zlib.call(this, opts, binding.DEFLATE);
					}

					function Inflate(opts) {
						if (!(this instanceof Inflate))
							return new Inflate(opts);
						Zlib.call(this, opts, binding.INFLATE);
					}

					// gzip - bigger header, same deflate compression
					function Gzip(opts) {
						if (!(this instanceof Gzip)) return new Gzip(opts);
						Zlib.call(this, opts, binding.GZIP);
					}

					function Gunzip(opts) {
						if (!(this instanceof Gunzip)) return new Gunzip(opts);
						Zlib.call(this, opts, binding.GUNZIP);
					}

					// raw - no header
					function DeflateRaw(opts) {
						if (!(this instanceof DeflateRaw))
							return new DeflateRaw(opts);
						Zlib.call(this, opts, binding.DEFLATERAW);
					}

					function InflateRaw(opts) {
						if (!(this instanceof InflateRaw))
							return new InflateRaw(opts);
						Zlib.call(this, opts, binding.INFLATERAW);
					}

					// auto-detect header.
					function Unzip(opts) {
						if (!(this instanceof Unzip)) return new Unzip(opts);
						Zlib.call(this, opts, binding.UNZIP);
					}

					function isValidFlushFlag(flag) {
						return (
							flag === binding.Z_NO_FLUSH ||
							flag === binding.Z_PARTIAL_FLUSH ||
							flag === binding.Z_SYNC_FLUSH ||
							flag === binding.Z_FULL_FLUSH ||
							flag === binding.Z_FINISH ||
							flag === binding.Z_BLOCK
						);
					}

					// the Zlib class they all inherit from
					// This thing manages the queue of requests, and returns
					// true or false if there is anything in the queue when
					// you call the .write() method.

					function Zlib(opts, mode) {
						var _this = this;

						this._opts = opts = opts || {};
						this._chunkSize =
							opts.chunkSize || exports.Z_DEFAULT_CHUNK;

						Transform.call(this, opts);

						if (opts.flush && !isValidFlushFlag(opts.flush)) {
							throw new Error(
								"Invalid flush flag: " + opts.flush
							);
						}
						if (
							opts.finishFlush &&
							!isValidFlushFlag(opts.finishFlush)
						) {
							throw new Error(
								"Invalid flush flag: " + opts.finishFlush
							);
						}

						this._flushFlag = opts.flush || binding.Z_NO_FLUSH;
						this._finishFlushFlag =
							typeof opts.finishFlush !== "undefined"
								? opts.finishFlush
								: binding.Z_FINISH;

						if (opts.chunkSize) {
							if (
								opts.chunkSize < exports.Z_MIN_CHUNK ||
								opts.chunkSize > exports.Z_MAX_CHUNK
							) {
								throw new Error(
									"Invalid chunk size: " + opts.chunkSize
								);
							}
						}

						if (opts.windowBits) {
							if (
								opts.windowBits < exports.Z_MIN_WINDOWBITS ||
								opts.windowBits > exports.Z_MAX_WINDOWBITS
							) {
								throw new Error(
									"Invalid windowBits: " + opts.windowBits
								);
							}
						}

						if (opts.level) {
							if (
								opts.level < exports.Z_MIN_LEVEL ||
								opts.level > exports.Z_MAX_LEVEL
							) {
								throw new Error(
									"Invalid compression level: " + opts.level
								);
							}
						}

						if (opts.memLevel) {
							if (
								opts.memLevel < exports.Z_MIN_MEMLEVEL ||
								opts.memLevel > exports.Z_MAX_MEMLEVEL
							) {
								throw new Error(
									"Invalid memLevel: " + opts.memLevel
								);
							}
						}

						if (opts.strategy) {
							if (
								opts.strategy != exports.Z_FILTERED &&
								opts.strategy != exports.Z_HUFFMAN_ONLY &&
								opts.strategy != exports.Z_RLE &&
								opts.strategy != exports.Z_FIXED &&
								opts.strategy != exports.Z_DEFAULT_STRATEGY
							) {
								throw new Error(
									"Invalid strategy: " + opts.strategy
								);
							}
						}

						if (opts.dictionary) {
							if (!Buffer.isBuffer(opts.dictionary)) {
								throw new Error(
									"Invalid dictionary: it should be a Buffer instance"
								);
							}
						}

						this._handle = new binding.Zlib(mode);

						var self = this;
						this._hadError = false;
						this._handle.onerror = function(message, errno) {
							// there is no way to cleanly recover.
							// continuing only obscures problems.
							_close(self);
							self._hadError = true;

							var error = new Error(message);
							error.errno = errno;
							error.code = exports.codes[errno];
							self.emit("error", error);
						};

						var level = exports.Z_DEFAULT_COMPRESSION;
						if (typeof opts.level === "number") level = opts.level;

						var strategy = exports.Z_DEFAULT_STRATEGY;
						if (typeof opts.strategy === "number")
							strategy = opts.strategy;

						this._handle.init(
							opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,
							level,
							opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,
							strategy,
							opts.dictionary
						);

						this._buffer = Buffer.allocUnsafe(this._chunkSize);
						this._offset = 0;
						this._level = level;
						this._strategy = strategy;

						this.once("end", this.close);

						Object.defineProperty(this, "_closed", {
							get: function() {
								return !_this._handle;
							},
							configurable: true,
							enumerable: true,
						});
					}

					util.inherits(Zlib, Transform);

					Zlib.prototype.params = function(
						level,
						strategy,
						callback
					) {
						if (
							level < exports.Z_MIN_LEVEL ||
							level > exports.Z_MAX_LEVEL
						) {
							throw new RangeError(
								"Invalid compression level: " + level
							);
						}
						if (
							strategy != exports.Z_FILTERED &&
							strategy != exports.Z_HUFFMAN_ONLY &&
							strategy != exports.Z_RLE &&
							strategy != exports.Z_FIXED &&
							strategy != exports.Z_DEFAULT_STRATEGY
						) {
							throw new TypeError(
								"Invalid strategy: " + strategy
							);
						}

						if (
							this._level !== level ||
							this._strategy !== strategy
						) {
							var self = this;
							this.flush(binding.Z_SYNC_FLUSH, function() {
								assert(self._handle, "zlib binding closed");
								self._handle.params(level, strategy);
								if (!self._hadError) {
									self._level = level;
									self._strategy = strategy;
									if (callback) callback();
								}
							});
						} else {
							process.nextTick(callback);
						}
					};

					Zlib.prototype.reset = function() {
						assert(this._handle, "zlib binding closed");
						return this._handle.reset();
					};

					// This is the _flush function called by the transform class,
					// internally, when the last chunk has been written.
					Zlib.prototype._flush = function(callback) {
						this._transform(Buffer.alloc(0), "", callback);
					};

					Zlib.prototype.flush = function(kind, callback) {
						var _this2 = this;

						var ws = this._writableState;

						if (
							typeof kind === "function" ||
							(kind === undefined && !callback)
						) {
							callback = kind;
							kind = binding.Z_FULL_FLUSH;
						}

						if (ws.ended) {
							if (callback) process.nextTick(callback);
						} else if (ws.ending) {
							if (callback) this.once("end", callback);
						} else if (ws.needDrain) {
							if (callback) {
								this.once("drain", function() {
									return _this2.flush(kind, callback);
								});
							}
						} else {
							this._flushFlag = kind;
							this.write(Buffer.alloc(0), "", callback);
						}
					};

					Zlib.prototype.close = function(callback) {
						_close(this, callback);
						process.nextTick(emitCloseNT, this);
					};

					function _close(engine, callback) {
						if (callback) process.nextTick(callback);

						// Caller may invoke .close after a zlib error (which will null _handle).
						if (!engine._handle) return;

						engine._handle.close();
						engine._handle = null;
					}

					function emitCloseNT(self) {
						self.emit("close");
					}

					Zlib.prototype._transform = function(chunk, encoding, cb) {
						var flushFlag;
						var ws = this._writableState;
						var ending = ws.ending || ws.ended;
						var last =
							ending && (!chunk || ws.length === chunk.length);

						if (chunk !== null && !Buffer.isBuffer(chunk))
							return cb(new Error("invalid input"));

						if (!this._handle)
							return cb(new Error("zlib binding closed"));

						// If it's the last chunk, or a final flush, we use the Z_FINISH flush flag
						// (or whatever flag was provided using opts.finishFlush).
						// If it's explicitly flushing at some other time, then we use
						// Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
						// goodness.
						if (last) flushFlag = this._finishFlushFlag;
						else {
							flushFlag = this._flushFlag;
							// once we've flushed the last of the queue, stop flushing and
							// go back to the normal behavior.
							if (chunk.length >= ws.length) {
								this._flushFlag =
									this._opts.flush || binding.Z_NO_FLUSH;
							}
						}

						this._processChunk(chunk, flushFlag, cb);
					};

					Zlib.prototype._processChunk = function(
						chunk,
						flushFlag,
						cb
					) {
						var availInBefore = chunk && chunk.length;
						var availOutBefore = this._chunkSize - this._offset;
						var inOff = 0;

						var self = this;

						var async = typeof cb === "function";

						if (!async) {
							var buffers = [];
							var nread = 0;

							var error;
							this.on("error", function(er) {
								error = er;
							});

							assert(this._handle, "zlib binding closed");
							do {
								var res = this._handle.writeSync(
									flushFlag,
									chunk, // in
									inOff, // in_off
									availInBefore, // in_len
									this._buffer, // out
									this._offset, //out_off
									availOutBefore
								); // out_len
							} while (
								!this._hadError &&
								callback(res[0], res[1])
							);

							if (this._hadError) {
								throw error;
							}

							if (nread >= kMaxLength) {
								_close(this);
								throw new RangeError(kRangeErrorMessage);
							}

							var buf = Buffer.concat(buffers, nread);
							_close(this);

							return buf;
						}

						assert(this._handle, "zlib binding closed");
						var req = this._handle.write(
							flushFlag,
							chunk, // in
							inOff, // in_off
							availInBefore, // in_len
							this._buffer, // out
							this._offset, //out_off
							availOutBefore
						); // out_len

						req.buffer = chunk;
						req.callback = callback;

						function callback(availInAfter, availOutAfter) {
							// When the callback is used in an async write, the callback's
							// context is the `req` object that was created. The req object
							// is === this._handle, and that's why it's important to null
							// out the values after they are done being used. `this._handle`
							// can stay in memory longer than the callback and buffer are needed.
							if (this) {
								this.buffer = null;
								this.callback = null;
							}

							if (self._hadError) return;

							var have = availOutBefore - availOutAfter;
							assert(have >= 0, "have should not go down");

							if (have > 0) {
								var out = self._buffer.slice(
									self._offset,
									self._offset + have
								);
								self._offset += have;
								// serve some output to the consumer.
								if (async) {
									self.push(out);
								} else {
									buffers.push(out);
									nread += out.length;
								}
							}

							// exhausted the output buffer, or used all the input create a new one.
							if (
								availOutAfter === 0 ||
								self._offset >= self._chunkSize
							) {
								availOutBefore = self._chunkSize;
								self._offset = 0;
								self._buffer = Buffer.allocUnsafe(
									self._chunkSize
								);
							}

							if (availOutAfter === 0) {
								// Not actually done.  Need to reprocess.
								// Also, update the availInBefore to the availInAfter value,
								// so that if we have to hit it a third (fourth, etc.) time,
								// it'll have the correct byte counts.
								inOff += availInBefore - availInAfter;
								availInBefore = availInAfter;

								if (!async) return true;

								var newReq = self._handle.write(
									flushFlag,
									chunk,
									inOff,
									availInBefore,
									self._buffer,
									self._offset,
									self._chunkSize
								);
								newReq.callback = callback; // this same function
								newReq.buffer = chunk;
								return;
							}

							if (!async) return false;

							// finished with the chunk.
							cb();
						}
					};

					util.inherits(Deflate, Zlib);
					util.inherits(Inflate, Zlib);
					util.inherits(Gzip, Zlib);
					util.inherits(Gunzip, Zlib);
					util.inherits(DeflateRaw, Zlib);
					util.inherits(InflateRaw, Zlib);
					util.inherits(Unzip, Zlib);
					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../process/browser.js */ "./node_modules/process/browser.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/buffer/index.js":
			/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				/* WEBPACK VAR INJECTION */ (function(global) {
					/*!
					 * The buffer module from node.js, for the browser.
					 *
					 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
					 * @license  MIT
					 */
					/* eslint-disable no-proto */

					var base64 = __webpack_require__(
						/*! base64-js */ "./node_modules/base64-js/index.js"
					);
					var ieee754 = __webpack_require__(
						/*! ieee754 */ "./node_modules/ieee754/index.js"
					);
					var isArray = __webpack_require__(
						/*! isarray */ "./node_modules/isarray/index.js"
					);

					exports.Buffer = Buffer;
					exports.SlowBuffer = SlowBuffer;
					exports.INSPECT_MAX_BYTES = 50;

					/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
					Buffer.TYPED_ARRAY_SUPPORT =
						global.TYPED_ARRAY_SUPPORT !== undefined
							? global.TYPED_ARRAY_SUPPORT
							: typedArraySupport();

					/*
					 * Export kMaxLength after typed array support is determined.
					 */
					exports.kMaxLength = kMaxLength();

					function typedArraySupport() {
						try {
							var arr = new Uint8Array(1);
							arr.__proto__ = {
								__proto__: Uint8Array.prototype,
								foo: function() {
									return 42;
								},
							};
							return (
								arr.foo() === 42 && // typed array instances can be augmented
								typeof arr.subarray === "function" && // chrome 9-10 lack `subarray`
								arr.subarray(1, 1).byteLength === 0
							); // ie10 has broken `subarray`
						} catch (e) {
							return false;
						}
					}

					function kMaxLength() {
						return Buffer.TYPED_ARRAY_SUPPORT
							? 0x7fffffff
							: 0x3fffffff;
					}

					function createBuffer(that, length) {
						if (kMaxLength() < length) {
							throw new RangeError("Invalid typed array length");
						}
						if (Buffer.TYPED_ARRAY_SUPPORT) {
							// Return an augmented `Uint8Array` instance, for best performance
							that = new Uint8Array(length);
							that.__proto__ = Buffer.prototype;
						} else {
							// Fallback: Return an object instance of the Buffer class
							if (that === null) {
								that = new Buffer(length);
							}
							that.length = length;
						}

						return that;
					}

					/**
					 * The Buffer constructor returns instances of `Uint8Array` that have their
					 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
					 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
					 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
					 * returns a single octet.
					 *
					 * The `Uint8Array` prototype remains unmodified.
					 */

					function Buffer(arg, encodingOrOffset, length) {
						if (
							!Buffer.TYPED_ARRAY_SUPPORT &&
							!(this instanceof Buffer)
						) {
							return new Buffer(arg, encodingOrOffset, length);
						}

						// Common case.
						if (typeof arg === "number") {
							if (typeof encodingOrOffset === "string") {
								throw new Error(
									"If encoding is specified then the first argument must be a string"
								);
							}
							return allocUnsafe(this, arg);
						}
						return from(this, arg, encodingOrOffset, length);
					}

					Buffer.poolSize = 8192; // not used by this implementation

					// TODO: Legacy, not needed anymore. Remove in next major version.
					Buffer._augment = function(arr) {
						arr.__proto__ = Buffer.prototype;
						return arr;
					};

					function from(that, value, encodingOrOffset, length) {
						if (typeof value === "number") {
							throw new TypeError(
								'"value" argument must not be a number'
							);
						}

						if (
							typeof ArrayBuffer !== "undefined" &&
							value instanceof ArrayBuffer
						) {
							return fromArrayBuffer(
								that,
								value,
								encodingOrOffset,
								length
							);
						}

						if (typeof value === "string") {
							return fromString(that, value, encodingOrOffset);
						}

						return fromObject(that, value);
					}

					/**
					 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
					 * if value is a number.
					 * Buffer.from(str[, encoding])
					 * Buffer.from(array)
					 * Buffer.from(buffer)
					 * Buffer.from(arrayBuffer[, byteOffset[, length]])
					 **/
					Buffer.from = function(value, encodingOrOffset, length) {
						return from(null, value, encodingOrOffset, length);
					};

					if (Buffer.TYPED_ARRAY_SUPPORT) {
						Buffer.prototype.__proto__ = Uint8Array.prototype;
						Buffer.__proto__ = Uint8Array;
						if (
							typeof Symbol !== "undefined" &&
							Symbol.species &&
							Buffer[Symbol.species] === Buffer
						) {
							// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
							Object.defineProperty(Buffer, Symbol.species, {
								value: null,
								configurable: true,
							});
						}
					}

					function assertSize(size) {
						if (typeof size !== "number") {
							throw new TypeError(
								'"size" argument must be a number'
							);
						} else if (size < 0) {
							throw new RangeError(
								'"size" argument must not be negative'
							);
						}
					}

					function alloc(that, size, fill, encoding) {
						assertSize(size);
						if (size <= 0) {
							return createBuffer(that, size);
						}
						if (fill !== undefined) {
							// Only pay attention to encoding if it's a string. This
							// prevents accidentally sending in a number that would
							// be interpretted as a start offset.
							return typeof encoding === "string"
								? createBuffer(that, size).fill(fill, encoding)
								: createBuffer(that, size).fill(fill);
						}
						return createBuffer(that, size);
					}

					/**
					 * Creates a new filled Buffer instance.
					 * alloc(size[, fill[, encoding]])
					 **/
					Buffer.alloc = function(size, fill, encoding) {
						return alloc(null, size, fill, encoding);
					};

					function allocUnsafe(that, size) {
						assertSize(size);
						that = createBuffer(
							that,
							size < 0 ? 0 : checked(size) | 0
						);
						if (!Buffer.TYPED_ARRAY_SUPPORT) {
							for (var i = 0; i < size; ++i) {
								that[i] = 0;
							}
						}
						return that;
					}

					/**
					 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
					 * */
					Buffer.allocUnsafe = function(size) {
						return allocUnsafe(null, size);
					};
					/**
					 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
					 */
					Buffer.allocUnsafeSlow = function(size) {
						return allocUnsafe(null, size);
					};

					function fromString(that, string, encoding) {
						if (typeof encoding !== "string" || encoding === "") {
							encoding = "utf8";
						}

						if (!Buffer.isEncoding(encoding)) {
							throw new TypeError(
								'"encoding" must be a valid string encoding'
							);
						}

						var length = byteLength(string, encoding) | 0;
						that = createBuffer(that, length);

						var actual = that.write(string, encoding);

						if (actual !== length) {
							// Writing a hex string, for example, that contains invalid characters will
							// cause everything after the first invalid character to be ignored. (e.g.
							// 'abxxcd' will be treated as 'ab')
							that = that.slice(0, actual);
						}

						return that;
					}

					function fromArrayLike(that, array) {
						var length =
							array.length < 0 ? 0 : checked(array.length) | 0;
						that = createBuffer(that, length);
						for (var i = 0; i < length; i += 1) {
							that[i] = array[i] & 255;
						}
						return that;
					}

					function fromArrayBuffer(that, array, byteOffset, length) {
						array.byteLength; // this throws if `array` is not a valid ArrayBuffer

						if (byteOffset < 0 || array.byteLength < byteOffset) {
							throw new RangeError("'offset' is out of bounds");
						}

						if (array.byteLength < byteOffset + (length || 0)) {
							throw new RangeError("'length' is out of bounds");
						}

						if (byteOffset === undefined && length === undefined) {
							array = new Uint8Array(array);
						} else if (length === undefined) {
							array = new Uint8Array(array, byteOffset);
						} else {
							array = new Uint8Array(array, byteOffset, length);
						}

						if (Buffer.TYPED_ARRAY_SUPPORT) {
							// Return an augmented `Uint8Array` instance, for best performance
							that = array;
							that.__proto__ = Buffer.prototype;
						} else {
							// Fallback: Return an object instance of the Buffer class
							that = fromArrayLike(that, array);
						}
						return that;
					}

					function fromObject(that, obj) {
						if (Buffer.isBuffer(obj)) {
							var len = checked(obj.length) | 0;
							that = createBuffer(that, len);

							if (that.length === 0) {
								return that;
							}

							obj.copy(that, 0, 0, len);
							return that;
						}

						if (obj) {
							if (
								(typeof ArrayBuffer !== "undefined" &&
									obj.buffer instanceof ArrayBuffer) ||
								"length" in obj
							) {
								if (
									typeof obj.length !== "number" ||
									isnan(obj.length)
								) {
									return createBuffer(that, 0);
								}
								return fromArrayLike(that, obj);
							}

							if (obj.type === "Buffer" && isArray(obj.data)) {
								return fromArrayLike(that, obj.data);
							}
						}

						throw new TypeError(
							"First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object."
						);
					}

					function checked(length) {
						// Note: cannot use `length < kMaxLength()` here because that fails when
						// length is NaN (which is otherwise coerced to zero.)
						if (length >= kMaxLength()) {
							throw new RangeError(
								"Attempt to allocate Buffer larger than maximum " +
									"size: 0x" +
									kMaxLength().toString(16) +
									" bytes"
							);
						}
						return length | 0;
					}

					function SlowBuffer(length) {
						if (+length != length) {
							// eslint-disable-line eqeqeq
							length = 0;
						}
						return Buffer.alloc(+length);
					}

					Buffer.isBuffer = function isBuffer(b) {
						return !!(b != null && b._isBuffer);
					};

					Buffer.compare = function compare(a, b) {
						if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
							throw new TypeError("Arguments must be Buffers");
						}

						if (a === b) return 0;

						var x = a.length;
						var y = b.length;

						for (var i = 0, len = Math.min(x, y); i < len; ++i) {
							if (a[i] !== b[i]) {
								x = a[i];
								y = b[i];
								break;
							}
						}

						if (x < y) return -1;
						if (y < x) return 1;
						return 0;
					};

					Buffer.isEncoding = function isEncoding(encoding) {
						switch (String(encoding).toLowerCase()) {
							case "hex":
							case "utf8":
							case "utf-8":
							case "ascii":
							case "latin1":
							case "binary":
							case "base64":
							case "ucs2":
							case "ucs-2":
							case "utf16le":
							case "utf-16le":
								return true;
							default:
								return false;
						}
					};

					Buffer.concat = function concat(list, length) {
						if (!isArray(list)) {
							throw new TypeError(
								'"list" argument must be an Array of Buffers'
							);
						}

						if (list.length === 0) {
							return Buffer.alloc(0);
						}

						var i;
						if (length === undefined) {
							length = 0;
							for (i = 0; i < list.length; ++i) {
								length += list[i].length;
							}
						}

						var buffer = Buffer.allocUnsafe(length);
						var pos = 0;
						for (i = 0; i < list.length; ++i) {
							var buf = list[i];
							if (!Buffer.isBuffer(buf)) {
								throw new TypeError(
									'"list" argument must be an Array of Buffers'
								);
							}
							buf.copy(buffer, pos);
							pos += buf.length;
						}
						return buffer;
					};

					function byteLength(string, encoding) {
						if (Buffer.isBuffer(string)) {
							return string.length;
						}
						if (
							typeof ArrayBuffer !== "undefined" &&
							typeof ArrayBuffer.isView === "function" &&
							(ArrayBuffer.isView(string) ||
								string instanceof ArrayBuffer)
						) {
							return string.byteLength;
						}
						if (typeof string !== "string") {
							string = "" + string;
						}

						var len = string.length;
						if (len === 0) return 0;

						// Use a for loop to avoid recursion
						var loweredCase = false;
						for (;;) {
							switch (encoding) {
								case "ascii":
								case "latin1":
								case "binary":
									return len;
								case "utf8":
								case "utf-8":
								case undefined:
									return utf8ToBytes(string).length;
								case "ucs2":
								case "ucs-2":
								case "utf16le":
								case "utf-16le":
									return len * 2;
								case "hex":
									return len >>> 1;
								case "base64":
									return base64ToBytes(string).length;
								default:
									if (loweredCase)
										return utf8ToBytes(string).length; // assume utf8
									encoding = ("" + encoding).toLowerCase();
									loweredCase = true;
							}
						}
					}
					Buffer.byteLength = byteLength;

					function slowToString(encoding, start, end) {
						var loweredCase = false;

						// No need to verify that "this.length <= MAX_UINT32" since it's a read-only
						// property of a typed array.

						// This behaves neither like String nor Uint8Array in that we set start/end
						// to their upper/lower bounds if the value passed is out of range.
						// undefined is handled specially as per ECMA-262 6th Edition,
						// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
						if (start === undefined || start < 0) {
							start = 0;
						}
						// Return early if start > this.length. Done here to prevent potential uint32
						// coercion fail below.
						if (start > this.length) {
							return "";
						}

						if (end === undefined || end > this.length) {
							end = this.length;
						}

						if (end <= 0) {
							return "";
						}

						// Force coersion to uint32. This will also coerce falsey/NaN values to 0.
						end >>>= 0;
						start >>>= 0;

						if (end <= start) {
							return "";
						}

						if (!encoding) encoding = "utf8";

						while (true) {
							switch (encoding) {
								case "hex":
									return hexSlice(this, start, end);

								case "utf8":
								case "utf-8":
									return utf8Slice(this, start, end);

								case "ascii":
									return asciiSlice(this, start, end);

								case "latin1":
								case "binary":
									return latin1Slice(this, start, end);

								case "base64":
									return base64Slice(this, start, end);

								case "ucs2":
								case "ucs-2":
								case "utf16le":
								case "utf-16le":
									return utf16leSlice(this, start, end);

								default:
									if (loweredCase)
										throw new TypeError(
											"Unknown encoding: " + encoding
										);
									encoding = (encoding + "").toLowerCase();
									loweredCase = true;
							}
						}
					}

					// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
					// Buffer instances.
					Buffer.prototype._isBuffer = true;

					function swap(b, n, m) {
						var i = b[n];
						b[n] = b[m];
						b[m] = i;
					}

					Buffer.prototype.swap16 = function swap16() {
						var len = this.length;
						if (len % 2 !== 0) {
							throw new RangeError(
								"Buffer size must be a multiple of 16-bits"
							);
						}
						for (var i = 0; i < len; i += 2) {
							swap(this, i, i + 1);
						}
						return this;
					};

					Buffer.prototype.swap32 = function swap32() {
						var len = this.length;
						if (len % 4 !== 0) {
							throw new RangeError(
								"Buffer size must be a multiple of 32-bits"
							);
						}
						for (var i = 0; i < len; i += 4) {
							swap(this, i, i + 3);
							swap(this, i + 1, i + 2);
						}
						return this;
					};

					Buffer.prototype.swap64 = function swap64() {
						var len = this.length;
						if (len % 8 !== 0) {
							throw new RangeError(
								"Buffer size must be a multiple of 64-bits"
							);
						}
						for (var i = 0; i < len; i += 8) {
							swap(this, i, i + 7);
							swap(this, i + 1, i + 6);
							swap(this, i + 2, i + 5);
							swap(this, i + 3, i + 4);
						}
						return this;
					};

					Buffer.prototype.toString = function toString() {
						var length = this.length | 0;
						if (length === 0) return "";
						if (arguments.length === 0)
							return utf8Slice(this, 0, length);
						return slowToString.apply(this, arguments);
					};

					Buffer.prototype.equals = function equals(b) {
						if (!Buffer.isBuffer(b))
							throw new TypeError("Argument must be a Buffer");
						if (this === b) return true;
						return Buffer.compare(this, b) === 0;
					};

					Buffer.prototype.inspect = function inspect() {
						var str = "";
						var max = exports.INSPECT_MAX_BYTES;
						if (this.length > 0) {
							str = this.toString("hex", 0, max)
								.match(/.{2}/g)
								.join(" ");
							if (this.length > max) str += " ... ";
						}
						return "<Buffer " + str + ">";
					};

					Buffer.prototype.compare = function compare(
						target,
						start,
						end,
						thisStart,
						thisEnd
					) {
						if (!Buffer.isBuffer(target)) {
							throw new TypeError("Argument must be a Buffer");
						}

						if (start === undefined) {
							start = 0;
						}
						if (end === undefined) {
							end = target ? target.length : 0;
						}
						if (thisStart === undefined) {
							thisStart = 0;
						}
						if (thisEnd === undefined) {
							thisEnd = this.length;
						}

						if (
							start < 0 ||
							end > target.length ||
							thisStart < 0 ||
							thisEnd > this.length
						) {
							throw new RangeError("out of range index");
						}

						if (thisStart >= thisEnd && start >= end) {
							return 0;
						}
						if (thisStart >= thisEnd) {
							return -1;
						}
						if (start >= end) {
							return 1;
						}

						start >>>= 0;
						end >>>= 0;
						thisStart >>>= 0;
						thisEnd >>>= 0;

						if (this === target) return 0;

						var x = thisEnd - thisStart;
						var y = end - start;
						var len = Math.min(x, y);

						var thisCopy = this.slice(thisStart, thisEnd);
						var targetCopy = target.slice(start, end);

						for (var i = 0; i < len; ++i) {
							if (thisCopy[i] !== targetCopy[i]) {
								x = thisCopy[i];
								y = targetCopy[i];
								break;
							}
						}

						if (x < y) return -1;
						if (y < x) return 1;
						return 0;
					};

					// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
					// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
					//
					// Arguments:
					// - buffer - a Buffer to search
					// - val - a string, Buffer, or number
					// - byteOffset - an index into `buffer`; will be clamped to an int32
					// - encoding - an optional encoding, relevant is val is a string
					// - dir - true for indexOf, false for lastIndexOf
					function bidirectionalIndexOf(
						buffer,
						val,
						byteOffset,
						encoding,
						dir
					) {
						// Empty buffer means no match
						if (buffer.length === 0) return -1;

						// Normalize byteOffset
						if (typeof byteOffset === "string") {
							encoding = byteOffset;
							byteOffset = 0;
						} else if (byteOffset > 0x7fffffff) {
							byteOffset = 0x7fffffff;
						} else if (byteOffset < -0x80000000) {
							byteOffset = -0x80000000;
						}
						byteOffset = +byteOffset; // Coerce to Number.
						if (isNaN(byteOffset)) {
							// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
							byteOffset = dir ? 0 : buffer.length - 1;
						}

						// Normalize byteOffset: negative offsets start from the end of the buffer
						if (byteOffset < 0)
							byteOffset = buffer.length + byteOffset;
						if (byteOffset >= buffer.length) {
							if (dir) return -1;
							else byteOffset = buffer.length - 1;
						} else if (byteOffset < 0) {
							if (dir) byteOffset = 0;
							else return -1;
						}

						// Normalize val
						if (typeof val === "string") {
							val = Buffer.from(val, encoding);
						}

						// Finally, search either indexOf (if dir is true) or lastIndexOf
						if (Buffer.isBuffer(val)) {
							// Special case: looking for empty string/buffer always fails
							if (val.length === 0) {
								return -1;
							}
							return arrayIndexOf(
								buffer,
								val,
								byteOffset,
								encoding,
								dir
							);
						} else if (typeof val === "number") {
							val = val & 0xff; // Search for a byte value [0-255]
							if (
								Buffer.TYPED_ARRAY_SUPPORT &&
								typeof Uint8Array.prototype.indexOf ===
									"function"
							) {
								if (dir) {
									return Uint8Array.prototype.indexOf.call(
										buffer,
										val,
										byteOffset
									);
								} else {
									return Uint8Array.prototype.lastIndexOf.call(
										buffer,
										val,
										byteOffset
									);
								}
							}
							return arrayIndexOf(
								buffer,
								[val],
								byteOffset,
								encoding,
								dir
							);
						}

						throw new TypeError(
							"val must be string, number or Buffer"
						);
					}

					function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
						var indexSize = 1;
						var arrLength = arr.length;
						var valLength = val.length;

						if (encoding !== undefined) {
							encoding = String(encoding).toLowerCase();
							if (
								encoding === "ucs2" ||
								encoding === "ucs-2" ||
								encoding === "utf16le" ||
								encoding === "utf-16le"
							) {
								if (arr.length < 2 || val.length < 2) {
									return -1;
								}
								indexSize = 2;
								arrLength /= 2;
								valLength /= 2;
								byteOffset /= 2;
							}
						}

						function read(buf, i) {
							if (indexSize === 1) {
								return buf[i];
							} else {
								return buf.readUInt16BE(i * indexSize);
							}
						}

						var i;
						if (dir) {
							var foundIndex = -1;
							for (i = byteOffset; i < arrLength; i++) {
								if (
									read(arr, i) ===
									read(
										val,
										foundIndex === -1 ? 0 : i - foundIndex
									)
								) {
									if (foundIndex === -1) foundIndex = i;
									if (i - foundIndex + 1 === valLength)
										return foundIndex * indexSize;
								} else {
									if (foundIndex !== -1) i -= i - foundIndex;
									foundIndex = -1;
								}
							}
						} else {
							if (byteOffset + valLength > arrLength)
								byteOffset = arrLength - valLength;
							for (i = byteOffset; i >= 0; i--) {
								var found = true;
								for (var j = 0; j < valLength; j++) {
									if (read(arr, i + j) !== read(val, j)) {
										found = false;
										break;
									}
								}
								if (found) return i;
							}
						}

						return -1;
					}

					Buffer.prototype.includes = function includes(
						val,
						byteOffset,
						encoding
					) {
						return this.indexOf(val, byteOffset, encoding) !== -1;
					};

					Buffer.prototype.indexOf = function indexOf(
						val,
						byteOffset,
						encoding
					) {
						return bidirectionalIndexOf(
							this,
							val,
							byteOffset,
							encoding,
							true
						);
					};

					Buffer.prototype.lastIndexOf = function lastIndexOf(
						val,
						byteOffset,
						encoding
					) {
						return bidirectionalIndexOf(
							this,
							val,
							byteOffset,
							encoding,
							false
						);
					};

					function hexWrite(buf, string, offset, length) {
						offset = Number(offset) || 0;
						var remaining = buf.length - offset;
						if (!length) {
							length = remaining;
						} else {
							length = Number(length);
							if (length > remaining) {
								length = remaining;
							}
						}

						// must be an even number of digits
						var strLen = string.length;
						if (strLen % 2 !== 0)
							throw new TypeError("Invalid hex string");

						if (length > strLen / 2) {
							length = strLen / 2;
						}
						for (var i = 0; i < length; ++i) {
							var parsed = parseInt(string.substr(i * 2, 2), 16);
							if (isNaN(parsed)) return i;
							buf[offset + i] = parsed;
						}
						return i;
					}

					function utf8Write(buf, string, offset, length) {
						return blitBuffer(
							utf8ToBytes(string, buf.length - offset),
							buf,
							offset,
							length
						);
					}

					function asciiWrite(buf, string, offset, length) {
						return blitBuffer(
							asciiToBytes(string),
							buf,
							offset,
							length
						);
					}

					function latin1Write(buf, string, offset, length) {
						return asciiWrite(buf, string, offset, length);
					}

					function base64Write(buf, string, offset, length) {
						return blitBuffer(
							base64ToBytes(string),
							buf,
							offset,
							length
						);
					}

					function ucs2Write(buf, string, offset, length) {
						return blitBuffer(
							utf16leToBytes(string, buf.length - offset),
							buf,
							offset,
							length
						);
					}

					Buffer.prototype.write = function write(
						string,
						offset,
						length,
						encoding
					) {
						// Buffer#write(string)
						if (offset === undefined) {
							encoding = "utf8";
							length = this.length;
							offset = 0;
							// Buffer#write(string, encoding)
						} else if (
							length === undefined &&
							typeof offset === "string"
						) {
							encoding = offset;
							length = this.length;
							offset = 0;
							// Buffer#write(string, offset[, length][, encoding])
						} else if (isFinite(offset)) {
							offset = offset | 0;
							if (isFinite(length)) {
								length = length | 0;
								if (encoding === undefined) encoding = "utf8";
							} else {
								encoding = length;
								length = undefined;
							}
							// legacy write(string, encoding, offset, length) - remove in v0.13
						} else {
							throw new Error(
								"Buffer.write(string, encoding, offset[, length]) is no longer supported"
							);
						}

						var remaining = this.length - offset;
						if (length === undefined || length > remaining)
							length = remaining;

						if (
							(string.length > 0 && (length < 0 || offset < 0)) ||
							offset > this.length
						) {
							throw new RangeError(
								"Attempt to write outside buffer bounds"
							);
						}

						if (!encoding) encoding = "utf8";

						var loweredCase = false;
						for (;;) {
							switch (encoding) {
								case "hex":
									return hexWrite(
										this,
										string,
										offset,
										length
									);

								case "utf8":
								case "utf-8":
									return utf8Write(
										this,
										string,
										offset,
										length
									);

								case "ascii":
									return asciiWrite(
										this,
										string,
										offset,
										length
									);

								case "latin1":
								case "binary":
									return latin1Write(
										this,
										string,
										offset,
										length
									);

								case "base64":
									// Warning: maxLength not taken into account in base64Write
									return base64Write(
										this,
										string,
										offset,
										length
									);

								case "ucs2":
								case "ucs-2":
								case "utf16le":
								case "utf-16le":
									return ucs2Write(
										this,
										string,
										offset,
										length
									);

								default:
									if (loweredCase)
										throw new TypeError(
											"Unknown encoding: " + encoding
										);
									encoding = ("" + encoding).toLowerCase();
									loweredCase = true;
							}
						}
					};

					Buffer.prototype.toJSON = function toJSON() {
						return {
							type: "Buffer",
							data: Array.prototype.slice.call(
								this._arr || this,
								0
							),
						};
					};

					function base64Slice(buf, start, end) {
						if (start === 0 && end === buf.length) {
							return base64.fromByteArray(buf);
						} else {
							return base64.fromByteArray(buf.slice(start, end));
						}
					}

					function utf8Slice(buf, start, end) {
						end = Math.min(buf.length, end);
						var res = [];

						var i = start;
						while (i < end) {
							var firstByte = buf[i];
							var codePoint = null;
							var bytesPerSequence =
								firstByte > 0xef
									? 4
									: firstByte > 0xdf
									? 3
									: firstByte > 0xbf
									? 2
									: 1;

							if (i + bytesPerSequence <= end) {
								var secondByte,
									thirdByte,
									fourthByte,
									tempCodePoint;

								switch (bytesPerSequence) {
									case 1:
										if (firstByte < 0x80) {
											codePoint = firstByte;
										}
										break;
									case 2:
										secondByte = buf[i + 1];
										if ((secondByte & 0xc0) === 0x80) {
											tempCodePoint =
												((firstByte & 0x1f) << 0x6) |
												(secondByte & 0x3f);
											if (tempCodePoint > 0x7f) {
												codePoint = tempCodePoint;
											}
										}
										break;
									case 3:
										secondByte = buf[i + 1];
										thirdByte = buf[i + 2];
										if (
											(secondByte & 0xc0) === 0x80 &&
											(thirdByte & 0xc0) === 0x80
										) {
											tempCodePoint =
												((firstByte & 0xf) << 0xc) |
												((secondByte & 0x3f) << 0x6) |
												(thirdByte & 0x3f);
											if (
												tempCodePoint > 0x7ff &&
												(tempCodePoint < 0xd800 ||
													tempCodePoint > 0xdfff)
											) {
												codePoint = tempCodePoint;
											}
										}
										break;
									case 4:
										secondByte = buf[i + 1];
										thirdByte = buf[i + 2];
										fourthByte = buf[i + 3];
										if (
											(secondByte & 0xc0) === 0x80 &&
											(thirdByte & 0xc0) === 0x80 &&
											(fourthByte & 0xc0) === 0x80
										) {
											tempCodePoint =
												((firstByte & 0xf) << 0x12) |
												((secondByte & 0x3f) << 0xc) |
												((thirdByte & 0x3f) << 0x6) |
												(fourthByte & 0x3f);
											if (
												tempCodePoint > 0xffff &&
												tempCodePoint < 0x110000
											) {
												codePoint = tempCodePoint;
											}
										}
								}
							}

							if (codePoint === null) {
								// we did not generate a valid codePoint so insert a
								// replacement char (U+FFFD) and advance only 1 byte
								codePoint = 0xfffd;
								bytesPerSequence = 1;
							} else if (codePoint > 0xffff) {
								// encode to utf16 (surrogate pair dance)
								codePoint -= 0x10000;
								res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
								codePoint = 0xdc00 | (codePoint & 0x3ff);
							}

							res.push(codePoint);
							i += bytesPerSequence;
						}

						return decodeCodePointsArray(res);
					}

					// Based on http://stackoverflow.com/a/22747272/680742, the browser with
					// the lowest limit is Chrome, with 0x10000 args.
					// We go 1 magnitude less, for safety
					var MAX_ARGUMENTS_LENGTH = 0x1000;

					function decodeCodePointsArray(codePoints) {
						var len = codePoints.length;
						if (len <= MAX_ARGUMENTS_LENGTH) {
							return String.fromCharCode.apply(
								String,
								codePoints
							); // avoid extra slice()
						}

						// Decode in chunks to avoid "call stack size exceeded".
						var res = "";
						var i = 0;
						while (i < len) {
							res += String.fromCharCode.apply(
								String,
								codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
							);
						}
						return res;
					}

					function asciiSlice(buf, start, end) {
						var ret = "";
						end = Math.min(buf.length, end);

						for (var i = start; i < end; ++i) {
							ret += String.fromCharCode(buf[i] & 0x7f);
						}
						return ret;
					}

					function latin1Slice(buf, start, end) {
						var ret = "";
						end = Math.min(buf.length, end);

						for (var i = start; i < end; ++i) {
							ret += String.fromCharCode(buf[i]);
						}
						return ret;
					}

					function hexSlice(buf, start, end) {
						var len = buf.length;

						if (!start || start < 0) start = 0;
						if (!end || end < 0 || end > len) end = len;

						var out = "";
						for (var i = start; i < end; ++i) {
							out += toHex(buf[i]);
						}
						return out;
					}

					function utf16leSlice(buf, start, end) {
						var bytes = buf.slice(start, end);
						var res = "";
						for (var i = 0; i < bytes.length; i += 2) {
							res += String.fromCharCode(
								bytes[i] + bytes[i + 1] * 256
							);
						}
						return res;
					}

					Buffer.prototype.slice = function slice(start, end) {
						var len = this.length;
						start = ~~start;
						end = end === undefined ? len : ~~end;

						if (start < 0) {
							start += len;
							if (start < 0) start = 0;
						} else if (start > len) {
							start = len;
						}

						if (end < 0) {
							end += len;
							if (end < 0) end = 0;
						} else if (end > len) {
							end = len;
						}

						if (end < start) end = start;

						var newBuf;
						if (Buffer.TYPED_ARRAY_SUPPORT) {
							newBuf = this.subarray(start, end);
							newBuf.__proto__ = Buffer.prototype;
						} else {
							var sliceLen = end - start;
							newBuf = new Buffer(sliceLen, undefined);
							for (var i = 0; i < sliceLen; ++i) {
								newBuf[i] = this[i + start];
							}
						}

						return newBuf;
					};

					/*
					 * Need to make sure that buffer isn't trying to write out of bounds.
					 */
					function checkOffset(offset, ext, length) {
						if (offset % 1 !== 0 || offset < 0)
							throw new RangeError("offset is not uint");
						if (offset + ext > length)
							throw new RangeError(
								"Trying to access beyond buffer length"
							);
					}

					Buffer.prototype.readUIntLE = function readUIntLE(
						offset,
						byteLength,
						noAssert
					) {
						offset = offset | 0;
						byteLength = byteLength | 0;
						if (!noAssert)
							checkOffset(offset, byteLength, this.length);

						var val = this[offset];
						var mul = 1;
						var i = 0;
						while (++i < byteLength && (mul *= 0x100)) {
							val += this[offset + i] * mul;
						}

						return val;
					};

					Buffer.prototype.readUIntBE = function readUIntBE(
						offset,
						byteLength,
						noAssert
					) {
						offset = offset | 0;
						byteLength = byteLength | 0;
						if (!noAssert) {
							checkOffset(offset, byteLength, this.length);
						}

						var val = this[offset + --byteLength];
						var mul = 1;
						while (byteLength > 0 && (mul *= 0x100)) {
							val += this[offset + --byteLength] * mul;
						}

						return val;
					};

					Buffer.prototype.readUInt8 = function readUInt8(
						offset,
						noAssert
					) {
						if (!noAssert) checkOffset(offset, 1, this.length);
						return this[offset];
					};

					Buffer.prototype.readUInt16LE = function readUInt16LE(
						offset,
						noAssert
					) {
						if (!noAssert) checkOffset(offset, 2, this.length);
						return this[offset] | (this[offset + 1] << 8);
					};

					Buffer.prototype.readUInt16BE = function readUInt16BE(
						offset,
						noAssert
					) {
						if (!noAssert) checkOffset(offset, 2, this.length);
						return (this[offset] << 8) | this[offset + 1];
					};

					Buffer.prototype.readUInt32LE = function readUInt32LE(
						offset,
						noAssert
					) {
						if (!noAssert) checkOffset(offset, 4, this.length);

						return (
							(this[offset] |
								(this[offset + 1] << 8) |
								(this[offset + 2] << 16)) +
							this[offset + 3] * 0x1000000
						);
					};

					Buffer.prototype.readUInt32BE = function readUInt32BE(
						offset,
						noAssert
					) {
						if (!noAssert) checkOffset(offset, 4, this.length);

						return (
							this[offset] * 0x1000000 +
							((this[offset + 1] << 16) |
								(this[offset + 2] << 8) |
								this[offset + 3])
						);
					};

					Buffer.prototype.readIntLE = function readIntLE(
						offset,
						byteLength,
						noAssert
					) {
						offset = offset | 0;
						byteLength = byteLength | 0;
						if (!noAssert)
							checkOffset(offset, byteLength, this.length);

						var val = this[offset];
						var mul = 1;
						var i = 0;
						while (++i < byteLength && (mul *= 0x100)) {
							val += this[offset + i] * mul;
						}
						mul *= 0x80;

						if (val >= mul) val -= Math.pow(2, 8 * byteLength);

						return val;
					};

					Buffer.prototype.readIntBE = function readIntBE(
						offset,
						byteLength,
						noAssert
					) {
						offset = offset | 0;
						byteLength = byteLength | 0;
						if (!noAssert)
							checkOffset(offset, byteLength, this.length);

						var i = byteLength;
						var mul = 1;
						var val = this[offset + --i];
						while (i > 0 && (mul *= 0x100)) {
							val += this[offset + --i] * mul;
						}
						mul *= 0x80;

						if (val >= mul) val -= Math.pow(2, 8 * byteLength);

						return val;
					};

					Buffer.prototype.readInt8 = function readInt8(
						offset,
						noAssert
					) {
						if (!noAssert) checkOffset(offset, 1, this.length);
						if (!(this[offset] & 0x80)) return this[offset];
						return (0xff - this[offset] + 1) * -1;
					};

					Buffer.prototype.readInt16LE = function readInt16LE(
						offset,
						noAssert
					) {
						if (!noAssert) checkOffset(offset, 2, this.length);
						var val = this[offset] | (this[offset + 1] << 8);
						return val & 0x8000 ? val | 0xffff0000 : val;
					};

					Buffer.prototype.readInt16BE = function readInt16BE(
						offset,
						noAssert
					) {
						if (!noAssert) checkOffset(offset, 2, this.length);
						var val = this[offset + 1] | (this[offset] << 8);
						return val & 0x8000 ? val | 0xffff0000 : val;
					};

					Buffer.prototype.readInt32LE = function readInt32LE(
						offset,
						noAssert
					) {
						if (!noAssert) checkOffset(offset, 4, this.length);

						return (
							this[offset] |
							(this[offset + 1] << 8) |
							(this[offset + 2] << 16) |
							(this[offset + 3] << 24)
						);
					};

					Buffer.prototype.readInt32BE = function readInt32BE(
						offset,
						noAssert
					) {
						if (!noAssert) checkOffset(offset, 4, this.length);

						return (
							(this[offset] << 24) |
							(this[offset + 1] << 16) |
							(this[offset + 2] << 8) |
							this[offset + 3]
						);
					};

					Buffer.prototype.readFloatLE = function readFloatLE(
						offset,
						noAssert
					) {
						if (!noAssert) checkOffset(offset, 4, this.length);
						return ieee754.read(this, offset, true, 23, 4);
					};

					Buffer.prototype.readFloatBE = function readFloatBE(
						offset,
						noAssert
					) {
						if (!noAssert) checkOffset(offset, 4, this.length);
						return ieee754.read(this, offset, false, 23, 4);
					};

					Buffer.prototype.readDoubleLE = function readDoubleLE(
						offset,
						noAssert
					) {
						if (!noAssert) checkOffset(offset, 8, this.length);
						return ieee754.read(this, offset, true, 52, 8);
					};

					Buffer.prototype.readDoubleBE = function readDoubleBE(
						offset,
						noAssert
					) {
						if (!noAssert) checkOffset(offset, 8, this.length);
						return ieee754.read(this, offset, false, 52, 8);
					};

					function checkInt(buf, value, offset, ext, max, min) {
						if (!Buffer.isBuffer(buf))
							throw new TypeError(
								'"buffer" argument must be a Buffer instance'
							);
						if (value > max || value < min)
							throw new RangeError(
								'"value" argument is out of bounds'
							);
						if (offset + ext > buf.length)
							throw new RangeError("Index out of range");
					}

					Buffer.prototype.writeUIntLE = function writeUIntLE(
						value,
						offset,
						byteLength,
						noAssert
					) {
						value = +value;
						offset = offset | 0;
						byteLength = byteLength | 0;
						if (!noAssert) {
							var maxBytes = Math.pow(2, 8 * byteLength) - 1;
							checkInt(
								this,
								value,
								offset,
								byteLength,
								maxBytes,
								0
							);
						}

						var mul = 1;
						var i = 0;
						this[offset] = value & 0xff;
						while (++i < byteLength && (mul *= 0x100)) {
							this[offset + i] = (value / mul) & 0xff;
						}

						return offset + byteLength;
					};

					Buffer.prototype.writeUIntBE = function writeUIntBE(
						value,
						offset,
						byteLength,
						noAssert
					) {
						value = +value;
						offset = offset | 0;
						byteLength = byteLength | 0;
						if (!noAssert) {
							var maxBytes = Math.pow(2, 8 * byteLength) - 1;
							checkInt(
								this,
								value,
								offset,
								byteLength,
								maxBytes,
								0
							);
						}

						var i = byteLength - 1;
						var mul = 1;
						this[offset + i] = value & 0xff;
						while (--i >= 0 && (mul *= 0x100)) {
							this[offset + i] = (value / mul) & 0xff;
						}

						return offset + byteLength;
					};

					Buffer.prototype.writeUInt8 = function writeUInt8(
						value,
						offset,
						noAssert
					) {
						value = +value;
						offset = offset | 0;
						if (!noAssert)
							checkInt(this, value, offset, 1, 0xff, 0);
						if (!Buffer.TYPED_ARRAY_SUPPORT)
							value = Math.floor(value);
						this[offset] = value & 0xff;
						return offset + 1;
					};

					function objectWriteUInt16(
						buf,
						value,
						offset,
						littleEndian
					) {
						if (value < 0) value = 0xffff + value + 1;
						for (
							var i = 0, j = Math.min(buf.length - offset, 2);
							i < j;
							++i
						) {
							buf[offset + i] =
								(value &
									(0xff <<
										(8 * (littleEndian ? i : 1 - i)))) >>>
								((littleEndian ? i : 1 - i) * 8);
						}
					}

					Buffer.prototype.writeUInt16LE = function writeUInt16LE(
						value,
						offset,
						noAssert
					) {
						value = +value;
						offset = offset | 0;
						if (!noAssert)
							checkInt(this, value, offset, 2, 0xffff, 0);
						if (Buffer.TYPED_ARRAY_SUPPORT) {
							this[offset] = value & 0xff;
							this[offset + 1] = value >>> 8;
						} else {
							objectWriteUInt16(this, value, offset, true);
						}
						return offset + 2;
					};

					Buffer.prototype.writeUInt16BE = function writeUInt16BE(
						value,
						offset,
						noAssert
					) {
						value = +value;
						offset = offset | 0;
						if (!noAssert)
							checkInt(this, value, offset, 2, 0xffff, 0);
						if (Buffer.TYPED_ARRAY_SUPPORT) {
							this[offset] = value >>> 8;
							this[offset + 1] = value & 0xff;
						} else {
							objectWriteUInt16(this, value, offset, false);
						}
						return offset + 2;
					};

					function objectWriteUInt32(
						buf,
						value,
						offset,
						littleEndian
					) {
						if (value < 0) value = 0xffffffff + value + 1;
						for (
							var i = 0, j = Math.min(buf.length - offset, 4);
							i < j;
							++i
						) {
							buf[offset + i] =
								(value >>> ((littleEndian ? i : 3 - i) * 8)) &
								0xff;
						}
					}

					Buffer.prototype.writeUInt32LE = function writeUInt32LE(
						value,
						offset,
						noAssert
					) {
						value = +value;
						offset = offset | 0;
						if (!noAssert)
							checkInt(this, value, offset, 4, 0xffffffff, 0);
						if (Buffer.TYPED_ARRAY_SUPPORT) {
							this[offset + 3] = value >>> 24;
							this[offset + 2] = value >>> 16;
							this[offset + 1] = value >>> 8;
							this[offset] = value & 0xff;
						} else {
							objectWriteUInt32(this, value, offset, true);
						}
						return offset + 4;
					};

					Buffer.prototype.writeUInt32BE = function writeUInt32BE(
						value,
						offset,
						noAssert
					) {
						value = +value;
						offset = offset | 0;
						if (!noAssert)
							checkInt(this, value, offset, 4, 0xffffffff, 0);
						if (Buffer.TYPED_ARRAY_SUPPORT) {
							this[offset] = value >>> 24;
							this[offset + 1] = value >>> 16;
							this[offset + 2] = value >>> 8;
							this[offset + 3] = value & 0xff;
						} else {
							objectWriteUInt32(this, value, offset, false);
						}
						return offset + 4;
					};

					Buffer.prototype.writeIntLE = function writeIntLE(
						value,
						offset,
						byteLength,
						noAssert
					) {
						value = +value;
						offset = offset | 0;
						if (!noAssert) {
							var limit = Math.pow(2, 8 * byteLength - 1);

							checkInt(
								this,
								value,
								offset,
								byteLength,
								limit - 1,
								-limit
							);
						}

						var i = 0;
						var mul = 1;
						var sub = 0;
						this[offset] = value & 0xff;
						while (++i < byteLength && (mul *= 0x100)) {
							if (
								value < 0 &&
								sub === 0 &&
								this[offset + i - 1] !== 0
							) {
								sub = 1;
							}
							this[offset + i] =
								(((value / mul) >> 0) - sub) & 0xff;
						}

						return offset + byteLength;
					};

					Buffer.prototype.writeIntBE = function writeIntBE(
						value,
						offset,
						byteLength,
						noAssert
					) {
						value = +value;
						offset = offset | 0;
						if (!noAssert) {
							var limit = Math.pow(2, 8 * byteLength - 1);

							checkInt(
								this,
								value,
								offset,
								byteLength,
								limit - 1,
								-limit
							);
						}

						var i = byteLength - 1;
						var mul = 1;
						var sub = 0;
						this[offset + i] = value & 0xff;
						while (--i >= 0 && (mul *= 0x100)) {
							if (
								value < 0 &&
								sub === 0 &&
								this[offset + i + 1] !== 0
							) {
								sub = 1;
							}
							this[offset + i] =
								(((value / mul) >> 0) - sub) & 0xff;
						}

						return offset + byteLength;
					};

					Buffer.prototype.writeInt8 = function writeInt8(
						value,
						offset,
						noAssert
					) {
						value = +value;
						offset = offset | 0;
						if (!noAssert)
							checkInt(this, value, offset, 1, 0x7f, -0x80);
						if (!Buffer.TYPED_ARRAY_SUPPORT)
							value = Math.floor(value);
						if (value < 0) value = 0xff + value + 1;
						this[offset] = value & 0xff;
						return offset + 1;
					};

					Buffer.prototype.writeInt16LE = function writeInt16LE(
						value,
						offset,
						noAssert
					) {
						value = +value;
						offset = offset | 0;
						if (!noAssert)
							checkInt(this, value, offset, 2, 0x7fff, -0x8000);
						if (Buffer.TYPED_ARRAY_SUPPORT) {
							this[offset] = value & 0xff;
							this[offset + 1] = value >>> 8;
						} else {
							objectWriteUInt16(this, value, offset, true);
						}
						return offset + 2;
					};

					Buffer.prototype.writeInt16BE = function writeInt16BE(
						value,
						offset,
						noAssert
					) {
						value = +value;
						offset = offset | 0;
						if (!noAssert)
							checkInt(this, value, offset, 2, 0x7fff, -0x8000);
						if (Buffer.TYPED_ARRAY_SUPPORT) {
							this[offset] = value >>> 8;
							this[offset + 1] = value & 0xff;
						} else {
							objectWriteUInt16(this, value, offset, false);
						}
						return offset + 2;
					};

					Buffer.prototype.writeInt32LE = function writeInt32LE(
						value,
						offset,
						noAssert
					) {
						value = +value;
						offset = offset | 0;
						if (!noAssert)
							checkInt(
								this,
								value,
								offset,
								4,
								0x7fffffff,
								-0x80000000
							);
						if (Buffer.TYPED_ARRAY_SUPPORT) {
							this[offset] = value & 0xff;
							this[offset + 1] = value >>> 8;
							this[offset + 2] = value >>> 16;
							this[offset + 3] = value >>> 24;
						} else {
							objectWriteUInt32(this, value, offset, true);
						}
						return offset + 4;
					};

					Buffer.prototype.writeInt32BE = function writeInt32BE(
						value,
						offset,
						noAssert
					) {
						value = +value;
						offset = offset | 0;
						if (!noAssert)
							checkInt(
								this,
								value,
								offset,
								4,
								0x7fffffff,
								-0x80000000
							);
						if (value < 0) value = 0xffffffff + value + 1;
						if (Buffer.TYPED_ARRAY_SUPPORT) {
							this[offset] = value >>> 24;
							this[offset + 1] = value >>> 16;
							this[offset + 2] = value >>> 8;
							this[offset + 3] = value & 0xff;
						} else {
							objectWriteUInt32(this, value, offset, false);
						}
						return offset + 4;
					};

					function checkIEEE754(buf, value, offset, ext, max, min) {
						if (offset + ext > buf.length)
							throw new RangeError("Index out of range");
						if (offset < 0)
							throw new RangeError("Index out of range");
					}

					function writeFloat(
						buf,
						value,
						offset,
						littleEndian,
						noAssert
					) {
						if (!noAssert) {
							checkIEEE754(
								buf,
								value,
								offset,
								4,
								3.4028234663852886e38,
								-3.4028234663852886e38
							);
						}
						ieee754.write(buf, value, offset, littleEndian, 23, 4);
						return offset + 4;
					}

					Buffer.prototype.writeFloatLE = function writeFloatLE(
						value,
						offset,
						noAssert
					) {
						return writeFloat(this, value, offset, true, noAssert);
					};

					Buffer.prototype.writeFloatBE = function writeFloatBE(
						value,
						offset,
						noAssert
					) {
						return writeFloat(this, value, offset, false, noAssert);
					};

					function writeDouble(
						buf,
						value,
						offset,
						littleEndian,
						noAssert
					) {
						if (!noAssert) {
							checkIEEE754(
								buf,
								value,
								offset,
								8,
								1.7976931348623157e308,
								-1.7976931348623157e308
							);
						}
						ieee754.write(buf, value, offset, littleEndian, 52, 8);
						return offset + 8;
					}

					Buffer.prototype.writeDoubleLE = function writeDoubleLE(
						value,
						offset,
						noAssert
					) {
						return writeDouble(this, value, offset, true, noAssert);
					};

					Buffer.prototype.writeDoubleBE = function writeDoubleBE(
						value,
						offset,
						noAssert
					) {
						return writeDouble(
							this,
							value,
							offset,
							false,
							noAssert
						);
					};

					// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
					Buffer.prototype.copy = function copy(
						target,
						targetStart,
						start,
						end
					) {
						if (!start) start = 0;
						if (!end && end !== 0) end = this.length;
						if (targetStart >= target.length)
							targetStart = target.length;
						if (!targetStart) targetStart = 0;
						if (end > 0 && end < start) end = start;

						// Copy 0 bytes; we're done
						if (end === start) return 0;
						if (target.length === 0 || this.length === 0) return 0;

						// Fatal error conditions
						if (targetStart < 0) {
							throw new RangeError("targetStart out of bounds");
						}
						if (start < 0 || start >= this.length)
							throw new RangeError("sourceStart out of bounds");
						if (end < 0)
							throw new RangeError("sourceEnd out of bounds");

						// Are we oob?
						if (end > this.length) end = this.length;
						if (target.length - targetStart < end - start) {
							end = target.length - targetStart + start;
						}

						var len = end - start;
						var i;

						if (
							this === target &&
							start < targetStart &&
							targetStart < end
						) {
							// descending copy from end
							for (i = len - 1; i >= 0; --i) {
								target[i + targetStart] = this[i + start];
							}
						} else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
							// ascending copy from start
							for (i = 0; i < len; ++i) {
								target[i + targetStart] = this[i + start];
							}
						} else {
							Uint8Array.prototype.set.call(
								target,
								this.subarray(start, start + len),
								targetStart
							);
						}

						return len;
					};

					// Usage:
					//    buffer.fill(number[, offset[, end]])
					//    buffer.fill(buffer[, offset[, end]])
					//    buffer.fill(string[, offset[, end]][, encoding])
					Buffer.prototype.fill = function fill(
						val,
						start,
						end,
						encoding
					) {
						// Handle string cases:
						if (typeof val === "string") {
							if (typeof start === "string") {
								encoding = start;
								start = 0;
								end = this.length;
							} else if (typeof end === "string") {
								encoding = end;
								end = this.length;
							}
							if (val.length === 1) {
								var code = val.charCodeAt(0);
								if (code < 256) {
									val = code;
								}
							}
							if (
								encoding !== undefined &&
								typeof encoding !== "string"
							) {
								throw new TypeError(
									"encoding must be a string"
								);
							}
							if (
								typeof encoding === "string" &&
								!Buffer.isEncoding(encoding)
							) {
								throw new TypeError(
									"Unknown encoding: " + encoding
								);
							}
						} else if (typeof val === "number") {
							val = val & 255;
						}

						// Invalid ranges are not set to a default, so can range check early.
						if (
							start < 0 ||
							this.length < start ||
							this.length < end
						) {
							throw new RangeError("Out of range index");
						}

						if (end <= start) {
							return this;
						}

						start = start >>> 0;
						end = end === undefined ? this.length : end >>> 0;

						if (!val) val = 0;

						var i;
						if (typeof val === "number") {
							for (i = start; i < end; ++i) {
								this[i] = val;
							}
						} else {
							var bytes = Buffer.isBuffer(val)
								? val
								: utf8ToBytes(
										new Buffer(val, encoding).toString()
								  );
							var len = bytes.length;
							for (i = 0; i < end - start; ++i) {
								this[i + start] = bytes[i % len];
							}
						}

						return this;
					};

					// HELPER FUNCTIONS
					// ================

					var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

					function base64clean(str) {
						// Node strips out invalid characters like \n and \t from the string, base64-js does not
						str = stringtrim(str).replace(INVALID_BASE64_RE, "");
						// Node converts strings with length < 2 to ''
						if (str.length < 2) return "";
						// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
						while (str.length % 4 !== 0) {
							str = str + "=";
						}
						return str;
					}

					function stringtrim(str) {
						if (str.trim) return str.trim();
						return str.replace(/^\s+|\s+$/g, "");
					}

					function toHex(n) {
						if (n < 16) return "0" + n.toString(16);
						return n.toString(16);
					}

					function utf8ToBytes(string, units) {
						units = units || Infinity;
						var codePoint;
						var length = string.length;
						var leadSurrogate = null;
						var bytes = [];

						for (var i = 0; i < length; ++i) {
							codePoint = string.charCodeAt(i);

							// is surrogate component
							if (codePoint > 0xd7ff && codePoint < 0xe000) {
								// last char was a lead
								if (!leadSurrogate) {
									// no lead yet
									if (codePoint > 0xdbff) {
										// unexpected trail
										if ((units -= 3) > -1)
											bytes.push(0xef, 0xbf, 0xbd);
										continue;
									} else if (i + 1 === length) {
										// unpaired lead
										if ((units -= 3) > -1)
											bytes.push(0xef, 0xbf, 0xbd);
										continue;
									}

									// valid lead
									leadSurrogate = codePoint;

									continue;
								}

								// 2 leads in a row
								if (codePoint < 0xdc00) {
									if ((units -= 3) > -1)
										bytes.push(0xef, 0xbf, 0xbd);
									leadSurrogate = codePoint;
									continue;
								}

								// valid surrogate pair
								codePoint =
									(((leadSurrogate - 0xd800) << 10) |
										(codePoint - 0xdc00)) +
									0x10000;
							} else if (leadSurrogate) {
								// valid bmp char, but last char was a lead
								if ((units -= 3) > -1)
									bytes.push(0xef, 0xbf, 0xbd);
							}

							leadSurrogate = null;

							// encode utf8
							if (codePoint < 0x80) {
								if ((units -= 1) < 0) break;
								bytes.push(codePoint);
							} else if (codePoint < 0x800) {
								if ((units -= 2) < 0) break;
								bytes.push(
									(codePoint >> 0x6) | 0xc0,
									(codePoint & 0x3f) | 0x80
								);
							} else if (codePoint < 0x10000) {
								if ((units -= 3) < 0) break;
								bytes.push(
									(codePoint >> 0xc) | 0xe0,
									((codePoint >> 0x6) & 0x3f) | 0x80,
									(codePoint & 0x3f) | 0x80
								);
							} else if (codePoint < 0x110000) {
								if ((units -= 4) < 0) break;
								bytes.push(
									(codePoint >> 0x12) | 0xf0,
									((codePoint >> 0xc) & 0x3f) | 0x80,
									((codePoint >> 0x6) & 0x3f) | 0x80,
									(codePoint & 0x3f) | 0x80
								);
							} else {
								throw new Error("Invalid code point");
							}
						}

						return bytes;
					}

					function asciiToBytes(str) {
						var byteArray = [];
						for (var i = 0; i < str.length; ++i) {
							// Node's code seems to be doing this and not & 0x7F..
							byteArray.push(str.charCodeAt(i) & 0xff);
						}
						return byteArray;
					}

					function utf16leToBytes(str, units) {
						var c, hi, lo;
						var byteArray = [];
						for (var i = 0; i < str.length; ++i) {
							if ((units -= 2) < 0) break;

							c = str.charCodeAt(i);
							hi = c >> 8;
							lo = c % 256;
							byteArray.push(lo);
							byteArray.push(hi);
						}

						return byteArray;
					}

					function base64ToBytes(str) {
						return base64.toByteArray(base64clean(str));
					}

					function blitBuffer(src, dst, offset, length) {
						for (var i = 0; i < length; ++i) {
							if (i + offset >= dst.length || i >= src.length)
								break;
							dst[i + offset] = src[i];
						}
						return i;
					}

					function isnan(val) {
						return val !== val; // eslint-disable-line no-self-compare
					}

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/builtin-status-codes/browser.js":
			/*!******************************************************!*\
  !*** ./node_modules/builtin-status-codes/browser.js ***!
  \******************************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				module.exports = {
					"100": "Continue",
					"101": "Switching Protocols",
					"102": "Processing",
					"200": "OK",
					"201": "Created",
					"202": "Accepted",
					"203": "Non-Authoritative Information",
					"204": "No Content",
					"205": "Reset Content",
					"206": "Partial Content",
					"207": "Multi-Status",
					"208": "Already Reported",
					"226": "IM Used",
					"300": "Multiple Choices",
					"301": "Moved Permanently",
					"302": "Found",
					"303": "See Other",
					"304": "Not Modified",
					"305": "Use Proxy",
					"307": "Temporary Redirect",
					"308": "Permanent Redirect",
					"400": "Bad Request",
					"401": "Unauthorized",
					"402": "Payment Required",
					"403": "Forbidden",
					"404": "Not Found",
					"405": "Method Not Allowed",
					"406": "Not Acceptable",
					"407": "Proxy Authentication Required",
					"408": "Request Timeout",
					"409": "Conflict",
					"410": "Gone",
					"411": "Length Required",
					"412": "Precondition Failed",
					"413": "Payload Too Large",
					"414": "URI Too Long",
					"415": "Unsupported Media Type",
					"416": "Range Not Satisfiable",
					"417": "Expectation Failed",
					"418": "I'm a teapot",
					"421": "Misdirected Request",
					"422": "Unprocessable Entity",
					"423": "Locked",
					"424": "Failed Dependency",
					"425": "Unordered Collection",
					"426": "Upgrade Required",
					"428": "Precondition Required",
					"429": "Too Many Requests",
					"431": "Request Header Fields Too Large",
					"451": "Unavailable For Legal Reasons",
					"500": "Internal Server Error",
					"501": "Not Implemented",
					"502": "Bad Gateway",
					"503": "Service Unavailable",
					"504": "Gateway Timeout",
					"505": "HTTP Version Not Supported",
					"506": "Variant Also Negotiates",
					"507": "Insufficient Storage",
					"508": "Loop Detected",
					"509": "Bandwidth Limit Exceeded",
					"510": "Not Extended",
					"511": "Network Authentication Required",
				};

				/***/
			},

		/***/ "./node_modules/core-util-is/lib/util.js":
			/*!***********************************************!*\
  !*** ./node_modules/core-util-is/lib/util.js ***!
  \***********************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(Buffer) {
					// Copyright Joyent, Inc. and other Node contributors.
					//
					// Permission is hereby granted, free of charge, to any person obtaining a
					// copy of this software and associated documentation files (the
					// "Software"), to deal in the Software without restriction, including
					// without limitation the rights to use, copy, modify, merge, publish,
					// distribute, sublicense, and/or sell copies of the Software, and to permit
					// persons to whom the Software is furnished to do so, subject to the
					// following conditions:
					//
					// The above copyright notice and this permission notice shall be included
					// in all copies or substantial portions of the Software.
					//
					// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
					// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
					// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
					// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
					// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
					// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
					// USE OR OTHER DEALINGS IN THE SOFTWARE.

					// NOTE: These type checking functions intentionally don't use `instanceof`
					// because it is fragile and can be easily faked with `Object.create()`.

					function isArray(arg) {
						if (Array.isArray) {
							return Array.isArray(arg);
						}
						return objectToString(arg) === "[object Array]";
					}
					exports.isArray = isArray;

					function isBoolean(arg) {
						return typeof arg === "boolean";
					}
					exports.isBoolean = isBoolean;

					function isNull(arg) {
						return arg === null;
					}
					exports.isNull = isNull;

					function isNullOrUndefined(arg) {
						return arg == null;
					}
					exports.isNullOrUndefined = isNullOrUndefined;

					function isNumber(arg) {
						return typeof arg === "number";
					}
					exports.isNumber = isNumber;

					function isString(arg) {
						return typeof arg === "string";
					}
					exports.isString = isString;

					function isSymbol(arg) {
						return typeof arg === "symbol";
					}
					exports.isSymbol = isSymbol;

					function isUndefined(arg) {
						return arg === void 0;
					}
					exports.isUndefined = isUndefined;

					function isRegExp(re) {
						return objectToString(re) === "[object RegExp]";
					}
					exports.isRegExp = isRegExp;

					function isObject(arg) {
						return typeof arg === "object" && arg !== null;
					}
					exports.isObject = isObject;

					function isDate(d) {
						return objectToString(d) === "[object Date]";
					}
					exports.isDate = isDate;

					function isError(e) {
						return (
							objectToString(e) === "[object Error]" ||
							e instanceof Error
						);
					}
					exports.isError = isError;

					function isFunction(arg) {
						return typeof arg === "function";
					}
					exports.isFunction = isFunction;

					function isPrimitive(arg) {
						return (
							arg === null ||
							typeof arg === "boolean" ||
							typeof arg === "number" ||
							typeof arg === "string" ||
							typeof arg === "symbol" || // ES6 symbol
							typeof arg === "undefined"
						);
					}
					exports.isPrimitive = isPrimitive;

					exports.isBuffer = Buffer.isBuffer;

					function objectToString(o) {
						return Object.prototype.toString.call(o);
					}

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js"
					).Buffer
				));

				/***/
			},

		/***/ "./node_modules/discord.js/package.json":
			/*!**********************************************!*\
  !*** ./node_modules/discord.js/package.json ***!
  \**********************************************/
			/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, browser, bugs, bundleDependencies, dependencies, deprecated, description, devDependencies, engines, homepage, keywords, license, main, name, peerDependencies, repository, runkitExampleFilename, scripts, types, version, default */
			/***/ function(module) {
				module.exports = {
					_from: "discord.js",
					_id: "discord.js@11.4.2",
					_inBundle: false,
					_integrity:
						"sha512-MDwpu0lMFTjqomijDl1Ed9miMQe6kB4ifKdP28QZllmLv/HVOJXhatRgjS8urp/wBlOfx+qAYSXcdI5cKGYsfg==",
					_location: "/discord.js",
					_phantomChildren: {},
					_requested: {
						type: "tag",
						registry: true,
						raw: "discord.js",
						name: "discord.js",
						escapedName: "discord.js",
						rawSpec: "",
						saveSpec: null,
						fetchSpec: "latest",
					},
					_requiredBy: ["#USER", "/"],
					_resolved:
						"https://registry.npmjs.org/discord.js/-/discord.js-11.4.2.tgz",
					_shasum: "54586981926521572051f2a30b984aad2b49786e",
					_spec: "discord.js",
					_where: "C:\\xampp\\htdocs\\laravel",
					author: {
						name: "Amish Shah",
						email: "amishshah.2k@gmail.com",
					},
					browser: {
						ws: false,
						uws: false,
						erlpack: false,
						"prism-media": false,
						opusscript: false,
						"node-opus": false,
						tweetnacl: false,
						sodium: false,
						"src/sharding/Shard.js": false,
						"src/sharding/ShardClientUtil.js": false,
						"src/sharding/ShardingManager.js": false,
						"src/client/voice/dispatcher/StreamDispatcher.js": false,
						"src/client/voice/opus/BaseOpusEngine.js": false,
						"src/client/voice/opus/NodeOpusEngine.js": false,
						"src/client/voice/opus/OpusEngineList.js": false,
						"src/client/voice/opus/OpusScriptEngine.js": false,
						"src/client/voice/pcm/ConverterEngine.js": false,
						"src/client/voice/pcm/ConverterEngineList.js": false,
						"src/client/voice/pcm/FfmpegConverterEngine.js": false,
						"src/client/voice/player/AudioPlayer.js": false,
						"src/client/voice/receiver/VoiceReadable.js": false,
						"src/client/voice/receiver/VoiceReceiver.js": false,
						"src/client/voice/util/Secretbox.js": false,
						"src/client/voice/util/SecretKey.js": false,
						"src/client/voice/util/VolumeInterface.js": false,
						"src/client/voice/ClientVoiceManager.js": false,
						"src/client/voice/VoiceBroadcast.js": false,
						"src/client/voice/VoiceConnection.js": false,
						"src/client/voice/VoiceUDPClient.js": false,
						"src/client/voice/VoiceWebSocket.js": false,
					},
					bugs: {
						url: "https://github.com/discordjs/discord.js/issues",
					},
					bundleDependencies: false,
					dependencies: {
						long: "^4.0.0",
						"prism-media": "^0.0.3",
						snekfetch: "^3.6.4",
						tweetnacl: "^1.0.0",
						ws: "^4.0.0",
					},
					deprecated: false,
					description:
						"A powerful library for interacting with the Discord API",
					devDependencies: {
						"@types/node": "^9.4.6",
						"discord.js-docgen": "github:discordjs/docgen",
						eslint: "^4.18.0",
						"parallel-webpack": "^2.2.0",
						"uglifyjs-webpack-plugin": "^1.2.0",
						webpack: "^3.11.0",
					},
					engines: {node: ">=6.0.0"},
					homepage: "https://github.com/discordjs/discord.js#readme",
					keywords: [
						"discord",
						"api",
						"bot",
						"client",
						"node",
						"discordapp",
					],
					license: "Apache-2.0",
					main: "./src/index",
					name: "discord.js",
					peerDependencies: {
						bufferutil: "^3.0.3",
						erlpack: "discordapp/erlpack",
						"node-opus": "^0.2.7",
						opusscript: "^0.0.6",
						sodium: "^2.0.3",
						"libsodium-wrappers": "^0.7.3",
						uws: "^9.14.0",
					},
					repository: {
						type: "git",
						url: "git+https://github.com/discordjs/discord.js.git",
					},
					runkitExampleFilename: "./docs/examples/ping.js",
					scripts: {
						docs:
							"docgen --source src --custom docs/index.yml --output docs/docs.json",
						"docs:test":
							"docgen --source src --custom docs/index.yml",
						lint: "eslint src",
						"lint:fix": "eslint --fix src",
						test: "npm run lint && npm run docs:test",
						webpack: "parallel-webpack",
					},
					types: "./typings/index.d.ts",
					version: "11.4.2",
				};

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/Client.js":
			/*!******************************************************!*\
  !*** ./node_modules/discord.js/src/client/Client.js ***!
  \******************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(process) {
					const EventEmitter = __webpack_require__(
						/*! events */ "./node_modules/events/events.js"
					);
					const Constants = __webpack_require__(
						/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
					);
					const Permissions = __webpack_require__(
						/*! ../util/Permissions */ "./node_modules/discord.js/src/util/Permissions.js"
					);
					const Util = __webpack_require__(
						/*! ../util/Util */ "./node_modules/discord.js/src/util/Util.js"
					);
					const RESTManager = __webpack_require__(
						/*! ./rest/RESTManager */ "./node_modules/discord.js/src/client/rest/RESTManager.js"
					);
					const ClientDataManager = __webpack_require__(
						/*! ./ClientDataManager */ "./node_modules/discord.js/src/client/ClientDataManager.js"
					);
					const ClientManager = __webpack_require__(
						/*! ./ClientManager */ "./node_modules/discord.js/src/client/ClientManager.js"
					);
					const ClientDataResolver = __webpack_require__(
						/*! ./ClientDataResolver */ "./node_modules/discord.js/src/client/ClientDataResolver.js"
					);
					const ClientVoiceManager = __webpack_require__(
						/*! ./voice/ClientVoiceManager */ 7
					);
					const WebSocketManager = __webpack_require__(
						/*! ./websocket/WebSocketManager */ "./node_modules/discord.js/src/client/websocket/WebSocketManager.js"
					);
					const ActionsManager = __webpack_require__(
						/*! ./actions/ActionsManager */ "./node_modules/discord.js/src/client/actions/ActionsManager.js"
					);
					const Collection = __webpack_require__(
						/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
					);
					const Presence = __webpack_require__(
						/*! ../structures/Presence */ "./node_modules/discord.js/src/structures/Presence.js"
					).Presence;
					const ShardClientUtil = __webpack_require__(
						/*! ../sharding/ShardClientUtil */ 8
					);
					const VoiceBroadcast = __webpack_require__(
						/*! ./voice/VoiceBroadcast */ 9
					);

					/**
					 * The main hub for interacting with the Discord API, and the starting point for any bot.
					 * @extends {EventEmitter}
					 */
					class Client extends EventEmitter {
						/**
						 * @param {ClientOptions} [options] Options for the client
						 */
						constructor(options = {}) {
							super();

							// Obtain shard details from environment
							if (
								!options.shardId &&
								"SHARD_ID" in
									Object({
										MIX_PUSHER_APP_CLUSTER: "mt1",
										MIX_PUSHER_APP_KEY: "",
										NODE_ENV: "development",
									})
							)
								options.shardId = Number(
									Object({
										MIX_PUSHER_APP_CLUSTER: "mt1",
										MIX_PUSHER_APP_KEY: "",
										NODE_ENV: "development",
									}).SHARD_ID
								);
							if (
								!options.shardCount &&
								"SHARD_COUNT" in
									Object({
										MIX_PUSHER_APP_CLUSTER: "mt1",
										MIX_PUSHER_APP_KEY: "",
										NODE_ENV: "development",
									})
							)
								options.shardCount = Number(
									Object({
										MIX_PUSHER_APP_CLUSTER: "mt1",
										MIX_PUSHER_APP_KEY: "",
										NODE_ENV: "development",
									}).SHARD_COUNT
								);

							/**
							 * The options the client was instantiated with
							 * @type {ClientOptions}
							 */
							this.options = Util.mergeDefault(
								Constants.DefaultOptions,
								options
							);
							this._validateOptions();

							/**
							 * The REST manager of the client
							 * @type {RESTManager}
							 * @private
							 */
							this.rest = new RESTManager(this);

							/**
							 * The data manager of the client
							 * @type {ClientDataManager}
							 * @private
							 */
							this.dataManager = new ClientDataManager(this);

							/**
							 * The manager of the client
							 * @type {ClientManager}
							 * @private
							 */
							this.manager = new ClientManager(this);

							/**
							 * The WebSocket manager of the client
							 * @type {WebSocketManager}
							 * @private
							 */
							this.ws = new WebSocketManager(this);

							/**
							 * The data resolver of the client
							 * @type {ClientDataResolver}
							 * @private
							 */
							this.resolver = new ClientDataResolver(this);

							/**
							 * The action manager of the client
							 * @type {ActionsManager}
							 * @private
							 */
							this.actions = new ActionsManager(this);

							/**
							 * The voice manager of the client (`null` in browsers)
							 * @type {?ClientVoiceManager}
							 * @private
							 */
							this.voice = !this.browser
								? new ClientVoiceManager(this)
								: null;

							/**
							 * The shard helpers for the client
							 * (only if the process was spawned as a child, such as from a {@link ShardingManager})
							 * @type {?ShardClientUtil}
							 */
							this.shard = process.send
								? ShardClientUtil.singleton(this)
								: null;

							/**
							 * All of the {@link User} objects that have been cached at any point, mapped by their IDs
							 * @type {Collection<Snowflake, User>}
							 */
							this.users = new Collection();

							/**
							 * All of the guilds the client is currently handling, mapped by their IDs -
							 * as long as sharding isn't being used, this will be *every* guild the bot is a member of
							 * @type {Collection<Snowflake, Guild>}
							 */
							this.guilds = new Collection();

							/**
							 * All of the {@link Channel}s that the client is currently handling, mapped by their IDs -
							 * as long as sharding isn't being used, this will be *every* channel in *every* guild, and all DM channels
							 * @type {Collection<Snowflake, Channel>}
							 */
							this.channels = new Collection();

							/**
							 * Presences that have been received for the client user's friends, mapped by user IDs
							 * <warn>This is only filled when using a user account.</warn>
							 * @type {Collection<Snowflake, Presence>}
							 */
							this.presences = new Collection();

							Object.defineProperty(this, "token", {
								writable: true,
							});
							if (
								!this.token &&
								"CLIENT_TOKEN" in
									Object({
										MIX_PUSHER_APP_CLUSTER: "mt1",
										MIX_PUSHER_APP_KEY: "",
										NODE_ENV: "development",
									})
							) {
								/**
								 * Authorization token for the logged in user/bot
								 * <warn>This should be kept private at all times.</warn>
								 * @type {?string}
								 */
								this.token = Object({
									MIX_PUSHER_APP_CLUSTER: "mt1",
									MIX_PUSHER_APP_KEY: "",
									NODE_ENV: "development",
								}).CLIENT_TOKEN;
							} else {
								this.token = null;
							}

							/**
							 * User that the client is logged in as
							 * @type {?ClientUser}
							 */
							this.user = null;

							/**
							 * Time at which the client was last regarded as being in the `READY` state
							 * (each time the client disconnects and successfully reconnects, this will be overwritten)
							 * @type {?Date}
							 */
							this.readyAt = null;

							/**
							 * Active voice broadcasts that have been created
							 * @type {VoiceBroadcast[]}
							 */
							this.broadcasts = [];

							/**
							 * Previous heartbeat pings of the websocket (most recent first, limited to three elements)
							 * @type {number[]}
							 */
							this.pings = [];

							/**
							 * Timeouts set by {@link Client#setTimeout} that are still active
							 * @type {Set<Timeout>}
							 * @private
							 */
							this._timeouts = new Set();

							/**
							 * Intervals set by {@link Client#setInterval} that are still active
							 * @type {Set<Timeout>}
							 * @private
							 */
							this._intervals = new Set();

							if (this.options.messageSweepInterval > 0) {
								this.setInterval(
									this.sweepMessages.bind(this),
									this.options.messageSweepInterval * 1000
								);
							}
						}

						/**
						 * Timestamp of the latest ping's start time
						 * @type {number}
						 * @private
						 */
						get _pingTimestamp() {
							return this.ws.connection
								? this.ws.connection.lastPingTimestamp
								: 0;
						}

						/**
						 * Current status of the client's connection to Discord
						 * @type {?number}
						 * @readonly
						 */
						get status() {
							return this.ws.connection.status;
						}

						/**
						 * How long it has been since the client last entered the `READY` state in milliseconds
						 * @type {?number}
						 * @readonly
						 */
						get uptime() {
							return this.readyAt
								? Date.now() - this.readyAt
								: null;
						}

						/**
						 * Average heartbeat ping of the websocket, obtained by averaging the {@link Client#pings} property
						 * @type {number}
						 * @readonly
						 */
						get ping() {
							return (
								this.pings.reduce((prev, p) => prev + p, 0) /
								this.pings.length
							);
						}

						/**
						 * All active voice connections that have been established, mapped by guild ID
						 * @type {Collection<Snowflake, VoiceConnection>}
						 * @readonly
						 */
						get voiceConnections() {
							if (this.browser) return new Collection();
							return this.voice.connections;
						}

						/**
						 * All custom emojis that the client has access to, mapped by their IDs
						 * @type {Collection<Snowflake, Emoji>}
						 * @readonly
						 */
						get emojis() {
							const emojis = new Collection();
							for (const guild of this.guilds.values()) {
								for (const emoji of guild.emojis.values())
									emojis.set(emoji.id, emoji);
							}
							return emojis;
						}

						/**
						 * Timestamp of the time the client was last `READY` at
						 * @type {?number}
						 * @readonly
						 */
						get readyTimestamp() {
							return this.readyAt ? this.readyAt.getTime() : null;
						}

						/**
						 * Whether the client is in a browser environment
						 * @type {boolean}
						 * @readonly
						 */
						get browser() {
							return typeof window !== "undefined";
						}

						/**
						 * Creates a voice broadcast.
						 * @returns {VoiceBroadcast}
						 */
						createVoiceBroadcast() {
							const broadcast = new VoiceBroadcast(this);
							this.broadcasts.push(broadcast);
							return broadcast;
						}

						/**
						 * Logs the client in, establishing a websocket connection to Discord.
						 * <info>Both bot and regular user accounts are supported, but it is highly recommended to use a bot account whenever
						 * possible. User accounts are subject to harsher ratelimits and other restrictions that don't apply to bot accounts.
						 * Bot accounts also have access to many features that user accounts cannot utilise. Automating a user account is
						 * considered a violation of the ToS.</info>
						 * @param {string} token Token of the account to log in with
						 * @returns {Promise<string>} Token of the account used
						 * @example
						 * client.login('my token')
						 *  .then(console.log)
						 *  .catch(console.error);
						 */
						login(token = this.token) {
							return this.rest.methods.login(token);
						}

						/**
						 * Logs out, terminates the connection to Discord, and destroys the client.
						 * @returns {Promise}
						 */
						destroy() {
							for (const t of this._timeouts) clearTimeout(t);
							for (const i of this._intervals) clearInterval(i);
							this._timeouts.clear();
							this._intervals.clear();
							return this.manager.destroy();
						}

						/**
						 * Requests a sync of guild data with Discord.
						 * <info>This can be done automatically every 30 seconds by enabling {@link ClientOptions#sync}.</info>
						 * <warn>This is only available when using a user account.</warn>
						 * @param {Guild[]|Collection<Snowflake, Guild>} [guilds=this.guilds] An array or collection of guilds to sync
						 */
						syncGuilds(guilds = this.guilds) {
							if (this.user.bot) return;
							this.ws.send({
								op: 12,
								d:
									guilds instanceof Collection
										? guilds.keyArray()
										: guilds.map((g) => g.id),
							});
						}

						/**
						 * Obtains a user from Discord, or the user cache if it's already available.
						 * <warn>This is only available when using a bot account.</warn>
						 * @param {Snowflake} id ID of the user
						 * @param {boolean} [cache=true] Whether to cache the new user object if it isn't already
						 * @returns {Promise<User>}
						 */
						fetchUser(id, cache = true) {
							if (this.users.has(id))
								return Promise.resolve(this.users.get(id));
							return this.rest.methods.getUser(id, cache);
						}

						/**
						 * Obtains an invite from Discord.
						 * @param {InviteResolvable} invite Invite code or URL
						 * @returns {Promise<Invite>}
						 * @example
						 * client.fetchInvite('https://discord.gg/bRCvFy9')
						 *   .then(invite => console.log(`Obtained invite with code: ${invite.code}`)
						 *   .catch(console.error);
						 */
						fetchInvite(invite) {
							const code = this.resolver.resolveInviteCode(
								invite
							);
							return this.rest.methods.getInvite(code);
						}

						/**
						 * Obtains a webhook from Discord.
						 * @param {Snowflake} id ID of the webhook
						 * @param {string} [token] Token for the webhook
						 * @returns {Promise<Webhook>}
						 * @example
						 * client.fetchWebhook('id', 'token')
						 *   .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))
						 *   .catch(console.error);
						 */
						fetchWebhook(id, token) {
							return this.rest.methods.getWebhook(id, token);
						}

						/**
						 * Obtains the available voice regions from Discord.
						 * @returns {Collection<string, VoiceRegion>}
						 * @example
						 * client.fetchVoiceRegions()
						 *   .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))
						 *   .catch(console.error);
						 */
						fetchVoiceRegions() {
							return this.rest.methods.fetchVoiceRegions();
						}

						/**
						 * Sweeps all text-based channels' messages and removes the ones older than the max message lifetime.
						 * If the message has been edited, the time of the edit is used rather than the time of the original message.
						 * @param {number} [lifetime=this.options.messageCacheLifetime] Messages that are older than this (in seconds)
						 * will be removed from the caches. The default is based on {@link ClientOptions#messageCacheLifetime}
						 * @returns {number} Amount of messages that were removed from the caches,
						 * or -1 if the message cache lifetime is unlimited
						 */
						sweepMessages(
							lifetime = this.options.messageCacheLifetime
						) {
							if (typeof lifetime !== "number" || isNaN(lifetime))
								throw new TypeError(
									"The lifetime must be a number."
								);
							if (lifetime <= 0) {
								this.emit(
									"debug",
									"Didn't sweep messages - lifetime is unlimited"
								);
								return -1;
							}

							const lifetimeMs = lifetime * 1000;
							const now = Date.now();
							let channels = 0;
							let messages = 0;

							for (const channel of this.channels.values()) {
								if (!channel.messages) continue;
								channels++;

								messages += channel.messages.sweep(
									(message) =>
										now -
											(message.editedTimestamp ||
												message.createdTimestamp) >
										lifetimeMs
								);
							}

							this.emit(
								"debug",
								`Swept ${messages} messages older than ${lifetime} seconds in ${channels} text-based channels`
							);
							return messages;
						}

						/**
						 * Obtains the OAuth Application of the bot from Discord.
						 * <warn>Bots can only fetch their own profile.</warn>
						 * @param {Snowflake} [id='@me'] ID of application to fetch
						 * @returns {Promise<OAuth2Application>}
						 * client.fetchApplication()
						 *   .then(application => console.log(`Obtained application with name: ${application.name}`)
						 *   .catch(console.error);
						 */
						fetchApplication(id = "@me") {
							if (id !== "@me")
								process.emitWarning(
									'fetchApplication: use "@me" as an argument',
									"DeprecationWarning"
								);
							return this.rest.methods.getApplication(id);
						}

						/**
						 * Generates a link that can be used to invite the bot to a guild.
						 * <warn>This is only available when using a bot account.</warn>
						 * @param {PermissionResolvable} [permissions] Permissions to request
						 * @returns {Promise<string>}
						 * @example
						 * client.generateInvite(['SEND_MESSAGES', 'MANAGE_GUILD', 'MENTION_EVERYONE'])
						 *   .then(link => console.log(`Generated bot invite link: ${link}`))
						 *   .catch(console.error);
						 */
						generateInvite(permissions) {
							permissions =
								typeof permissions === "undefined"
									? 0
									: Permissions.resolve(permissions);
							return this.fetchApplication().then(
								(application) =>
									`https://discordapp.com/oauth2/authorize?client_id=${
										application.id
									}&permissions=${permissions}&scope=bot`
							);
						}

						/**
						 * Sets a timeout that will be automatically cancelled if the client is destroyed.
						 * @param {Function} fn Function to execute
						 * @param {number} delay Time to wait before executing (in milliseconds)
						 * @param {...*} args Arguments for the function
						 * @returns {Timeout}
						 */
						setTimeout(fn, delay, ...args) {
							const timeout = setTimeout(() => {
								fn(...args);
								this._timeouts.delete(timeout);
							}, delay);
							this._timeouts.add(timeout);
							return timeout;
						}

						/**
						 * Clears a timeout.
						 * @param {Timeout} timeout Timeout to cancel
						 */
						clearTimeout(timeout) {
							clearTimeout(timeout);
							this._timeouts.delete(timeout);
						}

						/**
						 * Sets an interval that will be automatically cancelled if the client is destroyed.
						 * @param {Function} fn Function to execute
						 * @param {number} delay Time to wait before executing (in milliseconds)
						 * @param {...*} args Arguments for the function
						 * @returns {Timeout}
						 */
						setInterval(fn, delay, ...args) {
							const interval = setInterval(fn, delay, ...args);
							this._intervals.add(interval);
							return interval;
						}

						/**
						 * Clears an interval.
						 * @param {Timeout} interval Interval to cancel
						 */
						clearInterval(interval) {
							clearInterval(interval);
							this._intervals.delete(interval);
						}

						/**
						 * Adds a ping to {@link Client#pings}.
						 * @param {number} startTime Starting time of the ping
						 * @private
						 */
						_pong(startTime) {
							this.pings.unshift(Date.now() - startTime);
							if (this.pings.length > 3) this.pings.length = 3;
							this.ws.lastHeartbeatAck = true;
						}

						/**
						 * Adds/updates a friend's presence in {@link Client#presences}.
						 * @param {Snowflake} id ID of the user
						 * @param {Object} presence Raw presence object from Discord
						 * @private
						 */
						_setPresence(id, presence) {
							if (this.presences.has(id)) {
								this.presences.get(id).update(presence);
								return;
							}
							this.presences.set(
								id,
								new Presence(presence, this)
							);
						}

						/**
						 * Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script
						 * with the client as `this`.
						 * @param {string} script Script to eval
						 * @returns {*}
						 * @private
						 */
						_eval(script) {
							return eval(script);
						}

						/**
						 * Validates the client options.
						 * @param {ClientOptions} [options=this.options] Options to validate
						 * @private
						 */
						_validateOptions(options = this.options) {
							if (
								typeof options.shardCount !== "number" ||
								isNaN(options.shardCount)
							) {
								throw new TypeError(
									"The shardCount option must be a number."
								);
							}
							if (
								typeof options.shardId !== "number" ||
								isNaN(options.shardId)
							) {
								throw new TypeError(
									"The shardId option must be a number."
								);
							}
							if (options.shardCount < 0)
								throw new RangeError(
									"The shardCount option must be at least 0."
								);
							if (options.shardId < 0)
								throw new RangeError(
									"The shardId option must be at least 0."
								);
							if (
								options.shardId !== 0 &&
								options.shardId >= options.shardCount
							) {
								throw new RangeError(
									"The shardId option must be less than shardCount."
								);
							}
							if (
								typeof options.messageCacheMaxSize !==
									"number" ||
								isNaN(options.messageCacheMaxSize)
							) {
								throw new TypeError(
									"The messageCacheMaxSize option must be a number."
								);
							}
							if (
								typeof options.messageCacheLifetime !==
									"number" ||
								isNaN(options.messageCacheLifetime)
							) {
								throw new TypeError(
									"The messageCacheLifetime option must be a number."
								);
							}
							if (
								typeof options.messageSweepInterval !==
									"number" ||
								isNaN(options.messageSweepInterval)
							) {
								throw new TypeError(
									"The messageSweepInterval option must be a number."
								);
							}
							if (typeof options.fetchAllMembers !== "boolean") {
								throw new TypeError(
									"The fetchAllMembers option must be a boolean."
								);
							}
							if (typeof options.disableEveryone !== "boolean") {
								throw new TypeError(
									"The disableEveryone option must be a boolean."
								);
							}
							if (
								typeof options.restWsBridgeTimeout !==
									"number" ||
								isNaN(options.restWsBridgeTimeout)
							) {
								throw new TypeError(
									"The restWsBridgeTimeout option must be a number."
								);
							}
							if (!(options.disabledEvents instanceof Array))
								throw new TypeError(
									"The disabledEvents option must be an Array."
								);
						}
					}

					module.exports = Client;

					/**
					 * Emitted for general warnings.
					 * @event Client#warn
					 * @param {string} info The warning
					 */

					/**
					 * Emitted for general debugging information.
					 * @event Client#debug
					 * @param {string} info The debug information
					 */

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../../process/browser.js */ "./node_modules/process/browser.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/ClientDataManager.js":
			/*!*****************************************************************!*\
  !*** ./node_modules/discord.js/src/client/ClientDataManager.js ***!
  \*****************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Constants = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Util = __webpack_require__(
					/*! ../util/Util */ "./node_modules/discord.js/src/util/Util.js"
				);
				const Guild = __webpack_require__(
					/*! ../structures/Guild */ "./node_modules/discord.js/src/structures/Guild.js"
				);
				const User = __webpack_require__(
					/*! ../structures/User */ "./node_modules/discord.js/src/structures/User.js"
				);
				const CategoryChannel = __webpack_require__(
					/*! ../structures/CategoryChannel */ "./node_modules/discord.js/src/structures/CategoryChannel.js"
				);
				const DMChannel = __webpack_require__(
					/*! ../structures/DMChannel */ "./node_modules/discord.js/src/structures/DMChannel.js"
				);
				const Emoji = __webpack_require__(
					/*! ../structures/Emoji */ "./node_modules/discord.js/src/structures/Emoji.js"
				);
				const TextChannel = __webpack_require__(
					/*! ../structures/TextChannel */ "./node_modules/discord.js/src/structures/TextChannel.js"
				);
				const VoiceChannel = __webpack_require__(
					/*! ../structures/VoiceChannel */ "./node_modules/discord.js/src/structures/VoiceChannel.js"
				);
				const GuildChannel = __webpack_require__(
					/*! ../structures/GuildChannel */ "./node_modules/discord.js/src/structures/GuildChannel.js"
				);
				const GroupDMChannel = __webpack_require__(
					/*! ../structures/GroupDMChannel */ "./node_modules/discord.js/src/structures/GroupDMChannel.js"
				);

				class ClientDataManager {
					constructor(client) {
						this.client = client;
					}

					get pastReady() {
						return (
							this.client.ws.connection.status ===
							Constants.Status.READY
						);
					}

					newGuild(data) {
						const already = this.client.guilds.has(data.id);
						const guild = new Guild(this.client, data);
						this.client.guilds.set(guild.id, guild);
						if (this.pastReady && !already) {
							/**
							 * Emitted whenever the client joins a guild.
							 * @event Client#guildCreate
							 * @param {Guild} guild The created guild
							 */
							if (this.client.options.fetchAllMembers) {
								guild.fetchMembers().then(() => {
									this.client.emit(
										Constants.Events.GUILD_CREATE,
										guild
									);
								});
							} else {
								this.client.emit(
									Constants.Events.GUILD_CREATE,
									guild
								);
							}
						}

						return guild;
					}

					newUser(data, cache = true) {
						if (this.client.users.has(data.id))
							return this.client.users.get(data.id);
						const user = new User(this.client, data);
						if (cache) this.client.users.set(user.id, user);
						return user;
					}

					newChannel(data, guild) {
						const already = this.client.channels.has(data.id);
						let channel;
						if (data.type === Constants.ChannelTypes.DM) {
							channel = new DMChannel(this.client, data);
						} else if (
							data.type === Constants.ChannelTypes.GROUP_DM
						) {
							channel = new GroupDMChannel(this.client, data);
						} else {
							guild =
								guild || this.client.guilds.get(data.guild_id);
							if (already) {
								channel = this.client.channels.get(data.id);
							} else if (guild) {
								if (data.type === Constants.ChannelTypes.TEXT) {
									channel = new TextChannel(guild, data);
									guild.channels.set(channel.id, channel);
								} else if (
									data.type === Constants.ChannelTypes.VOICE
								) {
									channel = new VoiceChannel(guild, data);
									guild.channels.set(channel.id, channel);
								} else if (
									data.type ===
									Constants.ChannelTypes.CATEGORY
								) {
									channel = new CategoryChannel(guild, data);
									guild.channels.set(channel.id, channel);
								}
							}
						}

						if (channel && !already) {
							if (this.pastReady)
								this.client.emit(
									Constants.Events.CHANNEL_CREATE,
									channel
								);
							this.client.channels.set(channel.id, channel);
							return channel;
						} else if (already) {
							return channel;
						}

						return null;
					}

					newEmoji(data, guild) {
						const already = guild.emojis.has(data.id);
						if (data && !already) {
							let emoji = new Emoji(guild, data);
							this.client.emit(
								Constants.Events.GUILD_EMOJI_CREATE,
								emoji
							);
							guild.emojis.set(emoji.id, emoji);
							return emoji;
						} else if (already) {
							return guild.emojis.get(data.id);
						}

						return null;
					}

					killEmoji(emoji) {
						if (!(emoji instanceof Emoji && emoji.guild)) return;
						this.client.emit(
							Constants.Events.GUILD_EMOJI_DELETE,
							emoji
						);
						emoji.guild.emojis.delete(emoji.id);
					}

					killGuild(guild) {
						const already = this.client.guilds.has(guild.id);
						this.client.guilds.delete(guild.id);
						if (already && this.pastReady)
							this.client.emit(
								Constants.Events.GUILD_DELETE,
								guild
							);
					}

					killUser(user) {
						this.client.users.delete(user.id);
					}

					killChannel(channel) {
						this.client.channels.delete(channel.id);
						if (channel instanceof GuildChannel)
							channel.guild.channels.delete(channel.id);
					}

					updateGuild(currentGuild, newData) {
						const oldGuild = Util.cloneObject(currentGuild);
						currentGuild.setup(newData);
						if (this.pastReady)
							this.client.emit(
								Constants.Events.GUILD_UPDATE,
								oldGuild,
								currentGuild
							);
					}

					updateChannel(currentChannel, newData) {
						currentChannel.setup(newData);
					}

					updateEmoji(currentEmoji, newData) {
						const oldEmoji = Util.cloneObject(currentEmoji);
						currentEmoji.setup(newData);
						this.client.emit(
							Constants.Events.GUILD_EMOJI_UPDATE,
							oldEmoji,
							currentEmoji
						);
						return currentEmoji;
					}
				}

				module.exports = ClientDataManager;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/ClientDataResolver.js":
			/*!******************************************************************!*\
  !*** ./node_modules/discord.js/src/client/ClientDataResolver.js ***!
  \******************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(Buffer) {
					const path = __webpack_require__(
						/*! path */ "./node_modules/path-browserify/index.js"
					);
					const fs = __webpack_require__(
						!(function webpackMissingModule() {
							var e = new Error("Cannot find module 'fs'");
							e.code = "MODULE_NOT_FOUND";
							throw e;
						})()
					);
					const snekfetch = __webpack_require__(
						/*! snekfetch */ "./node_modules/snekfetch/esm.mjs"
					);

					const Constants = __webpack_require__(
						/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
					);
					const convertToBuffer = __webpack_require__(
						/*! ../util/Util */ "./node_modules/discord.js/src/util/Util.js"
					).convertToBuffer;
					const User = __webpack_require__(
						/*! ../structures/User */ "./node_modules/discord.js/src/structures/User.js"
					);
					const Message = __webpack_require__(
						/*! ../structures/Message */ "./node_modules/discord.js/src/structures/Message.js"
					);
					const Guild = __webpack_require__(
						/*! ../structures/Guild */ "./node_modules/discord.js/src/structures/Guild.js"
					);
					const Channel = __webpack_require__(
						/*! ../structures/Channel */ "./node_modules/discord.js/src/structures/Channel.js"
					);
					const GuildMember = __webpack_require__(
						/*! ../structures/GuildMember */ "./node_modules/discord.js/src/structures/GuildMember.js"
					);
					const Emoji = __webpack_require__(
						/*! ../structures/Emoji */ "./node_modules/discord.js/src/structures/Emoji.js"
					);
					const ReactionEmoji = __webpack_require__(
						/*! ../structures/ReactionEmoji */ "./node_modules/discord.js/src/structures/ReactionEmoji.js"
					);
					const Role = __webpack_require__(
						/*! ../structures/Role */ "./node_modules/discord.js/src/structures/Role.js"
					);

					/**
					 * The DataResolver identifies different objects and tries to resolve a specific piece of information from them, e.g.
					 * extracting a User from a Message object.
					 * @private
					 */
					class ClientDataResolver {
						/**
						 * @param {Client} client The client the resolver is for
						 */
						constructor(client) {
							this.client = client;
						}

						/**
						 * Data that resolves to give a User object. This can be:
						 * * A User object
						 * * A Snowflake
						 * * A Message object (resolves to the message author)
						 * * A Guild object (owner of the guild)
						 * * A GuildMember object
						 * @typedef {User|Snowflake|Message|Guild|GuildMember} UserResolvable
						 */

						/**
						 * Resolves a UserResolvable to a User object.
						 * @param {UserResolvable} user The UserResolvable to identify
						 * @returns {?User}
						 */
						resolveUser(user) {
							if (user instanceof User) return user;
							if (typeof user === "string")
								return this.client.users.get(user) || null;
							if (user instanceof GuildMember) return user.user;
							if (user instanceof Message) return user.author;
							if (user instanceof Guild) return user.owner;
							return null;
						}

						/**
						 * Resolves a UserResolvable to a user ID string.
						 * @param {UserResolvable} user The UserResolvable to identify
						 * @returns {?Snowflake}
						 */
						resolveUserID(user) {
							if (
								user instanceof User ||
								user instanceof GuildMember
							)
								return user.id;
							if (typeof user === "string") return user || null;
							if (user instanceof Message) return user.author.id;
							if (user instanceof Guild) return user.ownerID;
							return null;
						}

						/**
						 * Data that resolves to give a Guild object. This can be:
						 * * A Guild object
						 * * A Snowflake
						 * @typedef {Guild|Snowflake} GuildResolvable
						 */

						/**
						 * Resolves a GuildResolvable to a Guild object.
						 * @param {GuildResolvable} guild The GuildResolvable to identify
						 * @returns {?Guild}
						 */
						resolveGuild(guild) {
							if (guild instanceof Guild) return guild;
							if (typeof guild === "string")
								return this.client.guilds.get(guild) || null;
							return null;
						}

						/**
						 * Data that resolves to give a GuildMember object. This can be:
						 * * A GuildMember object
						 * * A User object
						 * @typedef {GuildMember|User} GuildMemberResolvable
						 */

						/**
						 * Resolves a GuildMemberResolvable to a GuildMember object.
						 * @param {GuildResolvable} guild The guild that the member is part of
						 * @param {UserResolvable} user The user that is part of the guild
						 * @returns {?GuildMember}
						 */
						resolveGuildMember(guild, user) {
							if (user instanceof GuildMember) return user;
							guild = this.resolveGuild(guild);
							user = this.resolveUser(user);
							if (!guild || !user) return null;
							return guild.members.get(user.id) || null;
						}

						/**
						 * Data that can be resolved to a Role object. This can be:
						 * * A Role
						 * * A Snowflake
						 * @typedef {Role|Snowflake} RoleResolvable
						 */

						/**
						 * Resolves a RoleResolvable to a Role object.
						 * @param {GuildResolvable} guild The guild that this role is part of
						 * @param {RoleResolvable} role The role resolvable to resolve
						 * @returns {?Role}
						 */
						resolveRole(guild, role) {
							if (role instanceof Role) return role;
							guild = this.resolveGuild(guild);
							if (!guild) return null;
							if (typeof role === "string")
								return guild.roles.get(role);
							return null;
						}

						/**
						 * Data that can be resolved to give a Channel object. This can be:
						 * * A Channel object
						 * * A Message object (the channel the message was sent in)
						 * * A Guild object (the #general channel)
						 * * A Snowflake
						 * @typedef {Channel|Guild|Message|Snowflake} ChannelResolvable
						 */

						/**
						 * Resolves a ChannelResolvable to a Channel object.
						 * @param {ChannelResolvable} channel The channel resolvable to resolve
						 * @returns {?Channel}
						 */
						resolveChannel(channel) {
							if (channel instanceof Channel) return channel;
							if (typeof channel === "string")
								return (
									this.client.channels.get(channel) || null
								);
							if (channel instanceof Message)
								return channel.channel;
							if (channel instanceof Guild)
								return channel.channels.get(channel.id) || null;
							return null;
						}

						/**
						 * Resolves a ChannelResolvable to a channel ID.
						 * @param {ChannelResolvable} channel The channel resolvable to resolve
						 * @returns {?Snowflake}
						 */
						resolveChannelID(channel) {
							if (channel instanceof Channel) return channel.id;
							if (typeof channel === "string") return channel;
							if (channel instanceof Message)
								return channel.channel.id;
							if (channel instanceof Guild)
								return channel.defaultChannel.id;
							return null;
						}

						/**
						 * Data that can be resolved to give an invite code. This can be:
						 * * An invite code
						 * * An invite URL
						 * @typedef {string} InviteResolvable
						 */

						/**
						 * Resolves InviteResolvable to an invite code.
						 * @param {InviteResolvable} data The invite resolvable to resolve
						 * @returns {string}
						 */
						resolveInviteCode(data) {
							const inviteRegex = /discord(?:app\.com\/invite|\.gg(?:\/invite)?)\/([\w-]{2,255})/i;
							const match = inviteRegex.exec(data);
							if (match && match[1]) return match[1];
							return data;
						}

						/**
						 * Data that can be resolved to give a string. This can be:
						 * * A string
						 * * An array (joined with a new line delimiter to give a string)
						 * * Any value
						 * @typedef {string|Array|*} StringResolvable
						 */

						/**
						 * Resolves a StringResolvable to a string.
						 * @param {StringResolvable} data The string resolvable to resolve
						 * @returns {string}
						 */
						resolveString(data) {
							if (typeof data === "string") return data;
							if (data instanceof Array) return data.join("\n");
							return String(data);
						}

						/**
						 * Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.
						 * @param {BufferResolvable|Base64Resolvable} image The image to be resolved
						 * @returns {Promise<?string>}
						 */
						resolveImage(image) {
							if (!image) return Promise.resolve(null);
							if (
								typeof image === "string" &&
								image.startsWith("data:")
							) {
								return Promise.resolve(image);
							}
							return this.resolveFile(image).then(
								this.resolveBase64
							);
						}

						/**
						 * Data that resolves to give a Base64 string, typically for image uploading. This can be:
						 * * A Buffer
						 * * A base64 string
						 * @typedef {Buffer|string} Base64Resolvable
						 */

						/**
						 * Resolves a Base64Resolvable to a Base 64 image.
						 * @param {Base64Resolvable} data The base 64 resolvable you want to resolve
						 * @returns {?string}
						 */
						resolveBase64(data) {
							if (data instanceof Buffer)
								return `data:image/jpg;base64,${data.toString(
									"base64"
								)}`;
							return data;
						}

						/**
						 * Data that can be resolved to give a Buffer. This can be:
						 * * A Buffer
						 * * The path to a local file
						 * * A URL
						 * * A Stream
						 * @typedef {string|Buffer} BufferResolvable
						 */

						/**
						 * @external Stream
						 * @see {@link https://nodejs.org/api/stream.html}
						 */

						/**
						 * Resolves a BufferResolvable to a Buffer.
						 * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve
						 * @returns {Promise<Buffer>}
						 */
						resolveFile(resource) {
							if (resource instanceof Buffer)
								return Promise.resolve(resource);
							if (
								this.client.browser &&
								resource instanceof ArrayBuffer
							)
								return Promise.resolve(
									convertToBuffer(resource)
								);

							if (typeof resource === "string") {
								if (/^https?:\/\//.test(resource)) {
									return snekfetch
										.get(resource)
										.then((res) =>
											res.body instanceof Buffer
												? res.body
												: Buffer.from(res.text)
										);
								}
								return new Promise((resolve, reject) => {
									const file = path.resolve(resource);
									fs.stat(file, (err, stats) => {
										if (err) return reject(err);
										if (!stats || !stats.isFile())
											return reject(
												new Error(
													`The file could not be found: ${file}`
												)
											);
										fs.readFile(file, (err2, data) => {
											if (err2) reject(err2);
											else resolve(data);
										});
										return null;
									});
								});
							} else if (
								resource &&
								resource.pipe &&
								typeof resource.pipe === "function"
							) {
								return new Promise((resolve, reject) => {
									const buffers = [];
									resource.once("error", reject);
									resource.on("data", (data) =>
										buffers.push(data)
									);
									resource.once("end", () =>
										resolve(Buffer.concat(buffers))
									);
								});
							}

							return Promise.reject(
								new TypeError(
									"The resource must be a string or Buffer."
								)
							);
						}

						/**
						 * Data that can be resolved to give an emoji identifier. This can be:
						 * * The unicode representation of an emoji
						 * * A custom emoji ID
						 * * An Emoji object
						 * * A ReactionEmoji object
						 * @typedef {string|Emoji|ReactionEmoji} EmojiIdentifierResolvable
						 */

						/**
						 * Resolves an EmojiResolvable to an emoji identifier.
						 * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve
						 * @returns {?string}
						 */
						resolveEmojiIdentifier(emoji) {
							if (
								emoji instanceof Emoji ||
								emoji instanceof ReactionEmoji
							)
								return emoji.identifier;
							if (typeof emoji === "string") {
								if (this.client.emojis.has(emoji))
									return this.client.emojis.get(emoji)
										.identifier;
								else if (!emoji.includes("%"))
									return encodeURIComponent(emoji);
								else return emoji;
							}
							return null;
						}

						/**
						 * Can be a Hex Literal, Hex String, Number, RGB Array, or one of the following
						 * ```
						 * [
						 *   'DEFAULT',
						 *   'AQUA',
						 *   'GREEN',
						 *   'BLUE',
						 *   'PURPLE',
						 *   'LUMINOUS_VIVID_PINK',
						 *   'GOLD',
						 *   'ORANGE',
						 *   'RED',
						 *   'GREY',
						 *   'DARKER_GREY',
						 *   'NAVY',
						 *   'DARK_AQUA',
						 *   'DARK_GREEN',
						 *   'DARK_BLUE',
						 *   'DARK_PURPLE',
						 *   'DARK_VIVID_PINK',
						 *   'DARK_GOLD',
						 *   'DARK_ORANGE',
						 *   'DARK_RED',
						 *   'DARK_GREY',
						 *   'LIGHT_GREY',
						 *   'DARK_NAVY',
						 *   'RANDOM',
						 * ]
						 * ```
						 * or something like
						 * ```
						 * [255, 0, 255]
						 * ```
						 * for purple
						 * @typedef {string|number|Array} ColorResolvable
						 */

						/**
						 * Resolves a ColorResolvable into a color number.
						 * @param {ColorResolvable} color Color to resolve
						 * @returns {number} A color
						 */
						static resolveColor(color) {
							if (typeof color === "string") {
								if (color === "RANDOM")
									return Math.floor(
										Math.random() * (0xffffff + 1)
									);
								if (color === "DEFAULT") return 0;
								color =
									Constants.Colors[color] ||
									parseInt(color.replace("#", ""), 16);
							} else if (color instanceof Array) {
								color =
									(color[0] << 16) +
									(color[1] << 8) +
									color[2];
							}

							if (color < 0 || color > 0xffffff) {
								throw new RangeError(
									"Color must be within the range 0 - 16777215 (0xFFFFFF)."
								);
							} else if (color && isNaN(color)) {
								throw new TypeError(
									"Unable to convert color to a number."
								);
							}

							return color;
						}

						/**
						 * @param {ColorResolvable} color Color to resolve
						 * @returns {number} A color
						 */
						resolveColor(color) {
							return this.constructor.resolveColor(color);
						}
					}

					module.exports = ClientDataResolver;

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js"
					).Buffer
				));

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/ClientManager.js":
			/*!*************************************************************!*\
  !*** ./node_modules/discord.js/src/client/ClientManager.js ***!
  \*************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Constants = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const WebSocketConnection = __webpack_require__(
					/*! ./websocket/WebSocketConnection */ "./node_modules/discord.js/src/client/websocket/WebSocketConnection.js"
				);

				/**
				 * Manages the state and background tasks of the client.
				 * @private
				 */
				class ClientManager {
					constructor(client) {
						/**
						 * The client that instantiated this Manager
						 * @type {Client}
						 */
						this.client = client;

						/**
						 * The heartbeat interval
						 * @type {?number}
						 */
						this.heartbeatInterval = null;
					}

					/**
					 * The status of the client
					 * @type {number}
					 */
					get status() {
						return this.connection
							? this.connection.status
							: Constants.Status.IDLE;
					}

					/**
					 * Connects the client to the WebSocket.
					 * @param {string} token The authorization token
					 * @param {Function} resolve Function to run when connection is successful
					 * @param {Function} reject Function to run when connection fails
					 */
					connectToWebSocket(token, resolve, reject) {
						this.client.emit(
							Constants.Events.DEBUG,
							`Authenticated using token ${token}`
						);
						this.client.token = token;
						const timeout = this.client.setTimeout(
							() =>
								reject(
									new Error(Constants.Errors.TOOK_TOO_LONG)
								),
							1000 * 300
						);
						this.client.rest.methods.getGateway().then((res) => {
							const protocolVersion =
								Constants.DefaultOptions.ws.version;
							const gateway = `${
								res.url
							}/?v=${protocolVersion}&encoding=${
								WebSocketConnection.ENCODING
							}`;
							this.client.emit(
								Constants.Events.DEBUG,
								`Using gateway ${gateway}`
							);
							this.client.ws.connect(gateway);
							this.client.ws.connection.once("error", reject);
							this.client.ws.connection.once("close", (event) => {
								if (event.code === 4004)
									reject(
										new Error(Constants.Errors.BAD_LOGIN)
									);
								if (event.code === 4010)
									reject(
										new Error(
											Constants.Errors.INVALID_SHARD
										)
									);
								if (event.code === 4011)
									reject(
										new Error(
											Constants.Errors.SHARDING_REQUIRED
										)
									);
							});
							this.client.once(Constants.Events.READY, () => {
								resolve(token);
								this.client.clearTimeout(timeout);
							});
						}, reject);
					}

					destroy() {
						this.client.ws.destroy();
						this.client.rest.destroy();
						if (!this.client.user) return Promise.resolve();
						if (this.client.user.bot) {
							this.client.token = null;
							return Promise.resolve();
						} else {
							return this.client.rest.methods
								.logout()
								.then(() => {
									this.client.token = null;
								});
						}
					}
				}

				module.exports = ClientManager;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/WebhookClient.js":
			/*!*************************************************************!*\
  !*** ./node_modules/discord.js/src/client/WebhookClient.js ***!
  \*************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Webhook = __webpack_require__(
					/*! ../structures/Webhook */ "./node_modules/discord.js/src/structures/Webhook.js"
				);
				const RESTManager = __webpack_require__(
					/*! ./rest/RESTManager */ "./node_modules/discord.js/src/client/rest/RESTManager.js"
				);
				const ClientDataResolver = __webpack_require__(
					/*! ./ClientDataResolver */ "./node_modules/discord.js/src/client/ClientDataResolver.js"
				);
				const Constants = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Util = __webpack_require__(
					/*! ../util/Util */ "./node_modules/discord.js/src/util/Util.js"
				);

				/**
				 * The webhook client.
				 * @extends {Webhook}
				 */
				class WebhookClient extends Webhook {
					/**
					 * @param {Snowflake} id ID of the webhook
					 * @param {string} token Token of the webhook
					 * @param {ClientOptions} [options] Options for the client
					 * @example
					 * // Create a new webhook and send a message
					 * const hook = new Discord.WebhookClient('1234', 'abcdef');
					 * hook.sendMessage('This will send a message').catch(console.error);
					 */
					constructor(id, token, options) {
						super(null, id, token);

						/**
						 * The options the client was instantiated with
						 * @type {ClientOptions}
						 */
						this.options = Util.mergeDefault(
							Constants.DefaultOptions,
							options
						);

						/**
						 * The REST manager of the client
						 * @type {RESTManager}
						 * @private
						 */
						this.rest = new RESTManager(this);

						/**
						 * The data resolver of the client
						 * @type {ClientDataResolver}
						 * @private
						 */
						this.resolver = new ClientDataResolver(this);

						/**
						 * Timeouts set by {@link WebhookClient#setTimeout} that are still active
						 * @type {Set<Timeout>}
						 * @private
						 */
						this._timeouts = new Set();

						/**
						 * Intervals set by {@link WebhookClient#setInterval} that are still active
						 * @type {Set<Timeout>}
						 * @private
						 */
						this._intervals = new Set();
					}

					/**
					 * Sets a timeout that will be automatically cancelled if the client is destroyed.
					 * @param {Function} fn Function to execute
					 * @param {number} delay Time to wait before executing (in milliseconds)
					 * @param {...*} args Arguments for the function
					 * @returns {Timeout}
					 */
					setTimeout(fn, delay, ...args) {
						const timeout = setTimeout(() => {
							fn(...args);
							this._timeouts.delete(timeout);
						}, delay);
						this._timeouts.add(timeout);
						return timeout;
					}

					/**
					 * Clears a timeout.
					 * @param {Timeout} timeout Timeout to cancel
					 */
					clearTimeout(timeout) {
						clearTimeout(timeout);
						this._timeouts.delete(timeout);
					}

					/**
					 * Sets an interval that will be automatically cancelled if the client is destroyed.
					 * @param {Function} fn Function to execute
					 * @param {number} delay Time to wait before executing (in milliseconds)
					 * @param {...*} args Arguments for the function
					 * @returns {Timeout}
					 */
					setInterval(fn, delay, ...args) {
						const interval = setInterval(fn, delay, ...args);
						this._intervals.add(interval);
						return interval;
					}

					/**
					 * Clears an interval.
					 * @param {Timeout} interval Interval to cancel
					 */
					clearInterval(interval) {
						clearInterval(interval);
						this._intervals.delete(interval);
					}

					/**
					 * Destroys the client.
					 */
					destroy() {
						for (const t of this._timeouts) clearTimeout(t);
						for (const i of this._intervals) clearInterval(i);
						this._timeouts.clear();
						this._intervals.clear();
					}
				}

				module.exports = WebhookClient;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/Action.js":
			/*!**************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/Action.js ***!
  \**************************************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/*

ABOUT ACTIONS

Actions are similar to WebSocket Packet Handlers, but since introducing
the REST API methods, in order to prevent rewriting code to handle data,
"actions" have been introduced. They're basically what Packet Handlers
used to be but they're strictly for manipulating data and making sure
that WebSocket events don't clash with REST methods.

*/

				class GenericAction {
					constructor(client) {
						this.client = client;
					}

					handle(data) {
						return data;
					}
				}

				module.exports = GenericAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/ActionsManager.js":
			/*!**********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/ActionsManager.js ***!
  \**********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				class ActionsManager {
					constructor(client) {
						this.client = client;

						this.register(
							__webpack_require__(
								/*! ./MessageCreate */ "./node_modules/discord.js/src/client/actions/MessageCreate.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./MessageDelete */ "./node_modules/discord.js/src/client/actions/MessageDelete.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./MessageDeleteBulk */ "./node_modules/discord.js/src/client/actions/MessageDeleteBulk.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./MessageUpdate */ "./node_modules/discord.js/src/client/actions/MessageUpdate.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./MessageReactionAdd */ "./node_modules/discord.js/src/client/actions/MessageReactionAdd.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./MessageReactionRemove */ "./node_modules/discord.js/src/client/actions/MessageReactionRemove.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./MessageReactionRemoveAll */ "./node_modules/discord.js/src/client/actions/MessageReactionRemoveAll.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./ChannelCreate */ "./node_modules/discord.js/src/client/actions/ChannelCreate.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./ChannelDelete */ "./node_modules/discord.js/src/client/actions/ChannelDelete.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./ChannelUpdate */ "./node_modules/discord.js/src/client/actions/ChannelUpdate.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./GuildDelete */ "./node_modules/discord.js/src/client/actions/GuildDelete.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./GuildUpdate */ "./node_modules/discord.js/src/client/actions/GuildUpdate.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./GuildMemberGet */ "./node_modules/discord.js/src/client/actions/GuildMemberGet.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./GuildMemberRemove */ "./node_modules/discord.js/src/client/actions/GuildMemberRemove.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./GuildBanRemove */ "./node_modules/discord.js/src/client/actions/GuildBanRemove.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./GuildRoleCreate */ "./node_modules/discord.js/src/client/actions/GuildRoleCreate.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./GuildRoleDelete */ "./node_modules/discord.js/src/client/actions/GuildRoleDelete.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./GuildRoleUpdate */ "./node_modules/discord.js/src/client/actions/GuildRoleUpdate.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./UserGet */ "./node_modules/discord.js/src/client/actions/UserGet.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./UserUpdate */ "./node_modules/discord.js/src/client/actions/UserUpdate.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./UserNoteUpdate */ "./node_modules/discord.js/src/client/actions/UserNoteUpdate.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./GuildSync */ "./node_modules/discord.js/src/client/actions/GuildSync.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./GuildEmojiCreate */ "./node_modules/discord.js/src/client/actions/GuildEmojiCreate.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./GuildEmojiDelete */ "./node_modules/discord.js/src/client/actions/GuildEmojiDelete.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./GuildEmojiUpdate */ "./node_modules/discord.js/src/client/actions/GuildEmojiUpdate.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./GuildEmojisUpdate */ "./node_modules/discord.js/src/client/actions/GuildEmojisUpdate.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./GuildRolesPositionUpdate */ "./node_modules/discord.js/src/client/actions/GuildRolesPositionUpdate.js"
							)
						);
						this.register(
							__webpack_require__(
								/*! ./GuildChannelsPositionUpdate */ "./node_modules/discord.js/src/client/actions/GuildChannelsPositionUpdate.js"
							)
						);
					}

					register(Action) {
						this[Action.name.replace(/Action$/, "")] = new Action(
							this.client
						);
					}
				}

				module.exports = ActionsManager;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/ChannelCreate.js":
			/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/ChannelCreate.js ***!
  \*********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);

				class ChannelCreateAction extends Action {
					handle(data) {
						const client = this.client;
						const channel = client.dataManager.newChannel(data);
						return {channel};
					}
				}

				module.exports = ChannelCreateAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/ChannelDelete.js":
			/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/ChannelDelete.js ***!
  \*********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);

				class ChannelDeleteAction extends Action {
					constructor(client) {
						super(client);
						this.deleted = new Map();
					}

					handle(data) {
						const client = this.client;

						let channel = client.channels.get(data.id);
						if (channel) {
							client.dataManager.killChannel(channel);
							this.deleted.set(channel.id, channel);
							this.scheduleForDeletion(channel.id);
						} else {
							channel = this.deleted.get(data.id) || null;
						}
						if (channel) channel.deleted = true;

						return {channel};
					}

					scheduleForDeletion(id) {
						this.client.setTimeout(
							() => this.deleted.delete(id),
							this.client.options.restWsBridgeTimeout
						);
					}
				}

				module.exports = ChannelDeleteAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/ChannelUpdate.js":
			/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/ChannelUpdate.js ***!
  \*********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Util = __webpack_require__(
					/*! ../../util/Util */ "./node_modules/discord.js/src/util/Util.js"
				);

				class ChannelUpdateAction extends Action {
					handle(data) {
						const client = this.client;

						const channel = client.channels.get(data.id);
						if (channel) {
							const oldChannel = Util.cloneObject(channel);
							channel.setup(data);
							client.emit(
								Constants.Events.CHANNEL_UPDATE,
								oldChannel,
								channel
							);
							return {
								old: oldChannel,
								updated: channel,
							};
						}

						return {
							old: null,
							updated: null,
						};
					}
				}

				/**
				 * Emitted whenever a channel is updated - e.g. name change, topic change.
				 * @event Client#channelUpdate
				 * @param {Channel} oldChannel The channel before the update
				 * @param {Channel} newChannel The channel after the update
				 */

				module.exports = ChannelUpdateAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/GuildBanRemove.js":
			/*!**********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildBanRemove.js ***!
  \**********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class GuildBanRemove extends Action {
					handle(data) {
						const client = this.client;
						const guild = client.guilds.get(data.guild_id);
						const user = client.dataManager.newUser(data.user);
						if (guild && user)
							client.emit(
								Constants.Events.GUILD_BAN_REMOVE,
								guild,
								user
							);
					}
				}

				module.exports = GuildBanRemove;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/GuildChannelsPositionUpdate.js":
			/*!***********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildChannelsPositionUpdate.js ***!
  \***********************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);

				class GuildChannelsPositionUpdate extends Action {
					handle(data) {
						const client = this.client;

						const guild = client.guilds.get(data.guild_id);
						if (guild) {
							for (const partialChannel of data.channels) {
								const channel = guild.channels.get(
									partialChannel.id
								);
								if (channel)
									channel.position = partialChannel.position;
							}
						}

						return {guild};
					}
				}

				module.exports = GuildChannelsPositionUpdate;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/GuildDelete.js":
			/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildDelete.js ***!
  \*******************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class GuildDeleteAction extends Action {
					constructor(client) {
						super(client);
						this.deleted = new Map();
					}

					handle(data) {
						const client = this.client;

						let guild = client.guilds.get(data.id);
						if (guild) {
							for (const channel of guild.channels.values()) {
								if (channel.type === "text")
									channel.stopTyping(true);
							}

							if (guild.available && data.unavailable) {
								// Guild is unavailable
								guild.available = false;
								client.emit(
									Constants.Events.GUILD_UNAVAILABLE,
									guild
								);

								// Stops the GuildDelete packet thinking a guild was actually deleted,
								// handles emitting of event itself
								return {
									guild: null,
								};
							}

							for (const channel of guild.channels.values())
								this.client.channels.delete(channel.id);
							if (guild.voiceConnection)
								guild.voiceConnection.disconnect();

							// Delete guild
							client.guilds.delete(guild.id);
							this.deleted.set(guild.id, guild);
							this.scheduleForDeletion(guild.id);
						} else {
							guild = this.deleted.get(data.id) || null;
						}
						if (guild) guild.deleted = true;

						return {guild};
					}

					scheduleForDeletion(id) {
						this.client.setTimeout(
							() => this.deleted.delete(id),
							this.client.options.restWsBridgeTimeout
						);
					}
				}

				/**
				 * Emitted whenever a guild becomes unavailable, likely due to a server outage.
				 * @event Client#guildUnavailable
				 * @param {Guild} guild The guild that has become unavailable
				 */

				module.exports = GuildDeleteAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/GuildEmojiCreate.js":
			/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildEmojiCreate.js ***!
  \************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);

				class GuildEmojiCreateAction extends Action {
					handle(guild, createdEmoji) {
						const client = this.client;
						const emoji = client.dataManager.newEmoji(
							createdEmoji,
							guild
						);
						return {emoji};
					}
				}

				/**
				 * Emitted whenever a custom emoji is created in a guild.
				 * @event Client#emojiCreate
				 * @param {Emoji} emoji The emoji that was created
				 */

				module.exports = GuildEmojiCreateAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/GuildEmojiDelete.js":
			/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildEmojiDelete.js ***!
  \************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);

				class GuildEmojiDeleteAction extends Action {
					handle(emoji) {
						const client = this.client;
						client.dataManager.killEmoji(emoji);
						emoji.deleted = true;
						return {emoji};
					}
				}

				/**
				 * Emitted whenever a custom guild emoji is deleted.
				 * @event Client#emojiDelete
				 * @param {Emoji} emoji The emoji that was deleted
				 */

				module.exports = GuildEmojiDeleteAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/GuildEmojiUpdate.js":
			/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildEmojiUpdate.js ***!
  \************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);

				class GuildEmojiUpdateAction extends Action {
					handle(oldEmoji, newEmoji) {
						const emoji = this.client.dataManager.updateEmoji(
							oldEmoji,
							newEmoji
						);
						return {emoji};
					}
				}

				/**
				 * Emitted whenever a custom guild emoji is updated.
				 * @event Client#emojiUpdate
				 * @param {Emoji} oldEmoji The old emoji
				 * @param {Emoji} newEmoji The new emoji
				 */

				module.exports = GuildEmojiUpdateAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/GuildEmojisUpdate.js":
			/*!*************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildEmojisUpdate.js ***!
  \*************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);

				function mappify(iterable) {
					const map = new Map();
					for (const x of iterable) map.set(...x);
					return map;
				}

				class GuildEmojisUpdateAction extends Action {
					handle(data) {
						const guild = this.client.guilds.get(data.guild_id);
						if (!guild || !guild.emojis) return;

						const deletions = mappify(guild.emojis.entries());

						for (const emoji of data.emojis) {
							// Determine type of emoji event
							const cachedEmoji = guild.emojis.get(emoji.id);
							if (cachedEmoji) {
								deletions.delete(emoji.id);
								if (!cachedEmoji.equals(emoji, true)) {
									// Emoji updated
									this.client.actions.GuildEmojiUpdate.handle(
										cachedEmoji,
										emoji
									);
								}
							} else {
								// Emoji added
								this.client.actions.GuildEmojiCreate.handle(
									guild,
									emoji
								);
							}
						}

						for (const emoji of deletions.values()) {
							// Emoji deleted
							this.client.actions.GuildEmojiDelete.handle(emoji);
						}
					}
				}

				module.exports = GuildEmojisUpdateAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/GuildMemberGet.js":
			/*!**********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildMemberGet.js ***!
  \**********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);

				class GuildMemberGetAction extends Action {
					handle(guild, data) {
						const member = guild._addMember(data, false);
						return {member};
					}
				}

				module.exports = GuildMemberGetAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/GuildMemberRemove.js":
			/*!*************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildMemberRemove.js ***!
  \*************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class GuildMemberRemoveAction extends Action {
					constructor(client) {
						super(client);
						this.deleted = new Map();
					}

					handle(data) {
						const client = this.client;
						const guild = client.guilds.get(data.guild_id);
						let member = null;
						if (guild) {
							member = guild.members.get(data.user.id);
							guild.memberCount--;
							if (member) {
								guild._removeMember(member);
								this.deleted.set(
									guild.id + data.user.id,
									member
								);
								if (client.status === Constants.Status.READY)
									client.emit(
										Constants.Events.GUILD_MEMBER_REMOVE,
										member
									);
								this.scheduleForDeletion(
									guild.id,
									data.user.id
								);
							} else {
								member =
									this.deleted.get(guild.id + data.user.id) ||
									null;
							}
							if (member) member.deleted = true;
						}
						return {guild, member};
					}

					scheduleForDeletion(guildID, userID) {
						this.client.setTimeout(
							() => this.deleted.delete(guildID + userID),
							this.client.options.restWsBridgeTimeout
						);
					}
				}

				/**
				 * Emitted whenever a member leaves a guild, or is kicked.
				 * @event Client#guildMemberRemove
				 * @param {GuildMember} member The member that has left/been kicked from the guild
				 */

				module.exports = GuildMemberRemoveAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/GuildRoleCreate.js":
			/*!***********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildRoleCreate.js ***!
  \***********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Role = __webpack_require__(
					/*! ../../structures/Role */ "./node_modules/discord.js/src/structures/Role.js"
				);

				class GuildRoleCreate extends Action {
					handle(data) {
						const client = this.client;
						const guild = client.guilds.get(data.guild_id);
						let role;
						if (guild) {
							const already = guild.roles.has(data.role.id);
							role = new Role(guild, data.role);
							guild.roles.set(role.id, role);
							if (!already)
								client.emit(
									Constants.Events.GUILD_ROLE_CREATE,
									role
								);
						}
						return {role};
					}
				}

				/**
				 * Emitted whenever a role is created.
				 * @event Client#roleCreate
				 * @param {Role} role The role that was created
				 */

				module.exports = GuildRoleCreate;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/GuildRoleDelete.js":
			/*!***********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildRoleDelete.js ***!
  \***********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class GuildRoleDeleteAction extends Action {
					constructor(client) {
						super(client);
						this.deleted = new Map();
					}

					handle(data) {
						const client = this.client;
						const guild = client.guilds.get(data.guild_id);
						let role;

						if (guild) {
							role = guild.roles.get(data.role_id);
							if (role) {
								guild.roles.delete(data.role_id);
								this.deleted.set(guild.id + data.role_id, role);
								this.scheduleForDeletion(
									guild.id,
									data.role_id
								);
								client.emit(
									Constants.Events.GUILD_ROLE_DELETE,
									role
								);
							} else {
								role =
									this.deleted.get(guild.id + data.role_id) ||
									null;
							}
							if (role) role.deleted = true;
						}

						return {role};
					}

					scheduleForDeletion(guildID, roleID) {
						this.client.setTimeout(
							() => this.deleted.delete(guildID + roleID),
							this.client.options.restWsBridgeTimeout
						);
					}
				}

				/**
				 * Emitted whenever a guild role is deleted.
				 * @event Client#roleDelete
				 * @param {Role} role The role that was deleted
				 */

				module.exports = GuildRoleDeleteAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/GuildRoleUpdate.js":
			/*!***********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildRoleUpdate.js ***!
  \***********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Util = __webpack_require__(
					/*! ../../util/Util */ "./node_modules/discord.js/src/util/Util.js"
				);

				class GuildRoleUpdateAction extends Action {
					handle(data) {
						const client = this.client;
						const guild = client.guilds.get(data.guild_id);

						if (guild) {
							const roleData = data.role;
							let oldRole = null;

							const role = guild.roles.get(roleData.id);
							if (role) {
								oldRole = Util.cloneObject(role);
								role.setup(data.role);
								client.emit(
									Constants.Events.GUILD_ROLE_UPDATE,
									oldRole,
									role
								);
							}

							return {
								old: oldRole,
								updated: role,
							};
						}

						return {
							old: null,
							updated: null,
						};
					}
				}

				/**
				 * Emitted whenever a guild role is updated.
				 * @event Client#roleUpdate
				 * @param {Role} oldRole The role before the update
				 * @param {Role} newRole The role after the update
				 */

				module.exports = GuildRoleUpdateAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/GuildRolesPositionUpdate.js":
			/*!********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildRolesPositionUpdate.js ***!
  \********************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);

				class GuildRolesPositionUpdate extends Action {
					handle(data) {
						const client = this.client;

						const guild = client.guilds.get(data.guild_id);
						if (guild) {
							for (const partialRole of data.roles) {
								const role = guild.roles.get(partialRole.id);
								if (role) role.position = partialRole.position;
							}
						}

						return {guild};
					}
				}

				module.exports = GuildRolesPositionUpdate;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/GuildSync.js":
			/*!*****************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildSync.js ***!
  \*****************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);

				class GuildSync extends Action {
					handle(data) {
						const client = this.client;

						const guild = client.guilds.get(data.id);
						if (guild) {
							if (data.presences) {
								for (const presence of data.presences)
									guild._setPresence(
										presence.user.id,
										presence
									);
							}

							if (data.members) {
								for (const syncMember of data.members) {
									const member = guild.members.get(
										syncMember.user.id
									);
									if (member) {
										guild._updateMember(member, syncMember);
									} else {
										guild._addMember(syncMember, false);
									}
								}
							}

							if ("large" in data) guild.large = data.large;
						}
					}
				}

				module.exports = GuildSync;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/GuildUpdate.js":
			/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildUpdate.js ***!
  \*******************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Util = __webpack_require__(
					/*! ../../util/Util */ "./node_modules/discord.js/src/util/Util.js"
				);

				class GuildUpdateAction extends Action {
					handle(data) {
						const client = this.client;

						const guild = client.guilds.get(data.id);
						if (guild) {
							const oldGuild = Util.cloneObject(guild);
							guild.setup(data);
							client.emit(
								Constants.Events.GUILD_UPDATE,
								oldGuild,
								guild
							);
							return {
								old: oldGuild,
								updated: guild,
							};
						}

						return {
							old: null,
							updated: null,
						};
					}
				}

				/**
				 * Emitted whenever a guild is updated - e.g. name change.
				 * @event Client#guildUpdate
				 * @param {Guild} oldGuild The guild before the update
				 * @param {Guild} newGuild The guild after the update
				 */

				module.exports = GuildUpdateAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/MessageCreate.js":
			/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageCreate.js ***!
  \*********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);
				const Message = __webpack_require__(
					/*! ../../structures/Message */ "./node_modules/discord.js/src/structures/Message.js"
				);

				class MessageCreateAction extends Action {
					handle(data) {
						const client = this.client;

						const channel = client.channels.get(
							(data instanceof Array ? data[0] : data).channel_id
						);
						const user = client.users.get(
							(data instanceof Array ? data[0] : data).author.id
						);
						if (channel) {
							const member = channel.guild
								? channel.guild.member(user)
								: null;
							if (data instanceof Array) {
								const messages = new Array(data.length);
								for (let i = 0; i < data.length; i++) {
									messages[i] = channel._cacheMessage(
										new Message(channel, data[i], client)
									);
								}
								const lastMessage =
									messages[messages.length - 1];
								channel.lastMessageID = lastMessage.id;
								channel.lastMessage = lastMessage;
								if (user) {
									user.lastMessageID = lastMessage.id;
									user.lastMessage = lastMessage;
								}
								if (member) {
									member.lastMessageID = lastMessage.id;
									member.lastMessage = lastMessage;
								}
								return {
									messages,
								};
							} else {
								const message = channel._cacheMessage(
									new Message(channel, data, client)
								);
								channel.lastMessageID = data.id;
								channel.lastMessage = message;
								if (user) {
									user.lastMessageID = data.id;
									user.lastMessage = message;
								}
								if (member) {
									member.lastMessageID = data.id;
									member.lastMessage = message;
								}
								return {
									message,
								};
							}
						}

						return {
							message: null,
						};
					}
				}

				module.exports = MessageCreateAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/MessageDelete.js":
			/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageDelete.js ***!
  \*********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);

				class MessageDeleteAction extends Action {
					constructor(client) {
						super(client);
						this.deleted = new Map();
					}

					handle(data) {
						const client = this.client;
						const channel = client.channels.get(data.channel_id);
						let message;

						if (channel) {
							message = channel.messages.get(data.id);
							if (message) {
								channel.messages.delete(message.id);
								this.deleted.set(
									channel.id + message.id,
									message
								);
								this.scheduleForDeletion(
									channel.id,
									message.id
								);
							} else {
								message =
									this.deleted.get(channel.id + data.id) ||
									null;
							}
							if (message) message.deleted = true;
						}

						return {message};
					}

					scheduleForDeletion(channelID, messageID) {
						this.client.setTimeout(
							() => this.deleted.delete(channelID + messageID),
							this.client.options.restWsBridgeTimeout
						);
					}
				}

				module.exports = MessageDeleteAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/MessageDeleteBulk.js":
			/*!*************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageDeleteBulk.js ***!
  \*************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);
				const Collection = __webpack_require__(
					/*! ../../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class MessageDeleteBulkAction extends Action {
					handle(data) {
						const messages = new Collection();
						const channel = this.client.channels.get(
							data.channel_id
						);

						if (channel) {
							for (const id of data.ids) {
								const message = channel.messages.get(id);
								if (message) {
									message.deleted = true;
									messages.set(message.id, message);
									channel.messages.delete(id);
								}
							}
						}

						if (messages.size > 0)
							this.client.emit(
								Constants.Events.MESSAGE_BULK_DELETE,
								messages
							);
						return {messages};
					}
				}

				module.exports = MessageDeleteBulkAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/MessageReactionAdd.js":
			/*!**************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageReactionAdd.js ***!
  \**************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				/*
{ user_id: 'id',
     message_id: 'id',
     emoji: { name: '�', id: null },
     channel_id: 'id' } }
*/

				class MessageReactionAdd extends Action {
					handle(data) {
						const user = this.client.users.get(data.user_id);
						if (!user) return false;
						// Verify channel
						const channel = this.client.channels.get(
							data.channel_id
						);
						if (!channel || channel.type === "voice") return false;
						// Verify message
						const message = channel.messages.get(data.message_id);
						if (!message) return false;
						if (!data.emoji) return false;
						// Verify reaction
						const reaction = message._addReaction(data.emoji, user);
						if (reaction)
							this.client.emit(
								Constants.Events.MESSAGE_REACTION_ADD,
								reaction,
								user
							);

						return {message, reaction, user};
					}
				}

				/**
				 * Emitted whenever a reaction is added to a cached message.
				 * @event Client#messageReactionAdd
				 * @param {MessageReaction} messageReaction The reaction object
				 * @param {User} user The user that applied the emoji or reaction emoji
				 */

				module.exports = MessageReactionAdd;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/MessageReactionRemove.js":
			/*!*****************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageReactionRemove.js ***!
  \*****************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				/*
{ user_id: 'id',
     message_id: 'id',
     emoji: { name: '�', id: null },
     channel_id: 'id' } }
*/

				class MessageReactionRemove extends Action {
					handle(data) {
						const user = this.client.users.get(data.user_id);
						if (!user) return false;
						// Verify channel
						const channel = this.client.channels.get(
							data.channel_id
						);
						if (!channel || channel.type === "voice") return false;
						// Verify message
						const message = channel.messages.get(data.message_id);
						if (!message) return false;
						if (!data.emoji) return false;
						// Verify reaction
						const reaction = message._removeReaction(
							data.emoji,
							user
						);
						if (reaction)
							this.client.emit(
								Constants.Events.MESSAGE_REACTION_REMOVE,
								reaction,
								user
							);

						return {message, reaction, user};
					}
				}

				/**
				 * Emitted whenever a reaction is removed from a cached message.
				 * @event Client#messageReactionRemove
				 * @param {MessageReaction} messageReaction The reaction object
				 * @param {User} user The user whose emoji or reaction emoji was removed
				 */

				module.exports = MessageReactionRemove;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/MessageReactionRemoveAll.js":
			/*!********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageReactionRemoveAll.js ***!
  \********************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class MessageReactionRemoveAll extends Action {
					handle(data) {
						const channel = this.client.channels.get(
							data.channel_id
						);
						if (!channel || channel.type === "voice") return false;

						const message = channel.messages.get(data.message_id);
						if (!message) return false;

						message._clearReactions();
						this.client.emit(
							Constants.Events.MESSAGE_REACTION_REMOVE_ALL,
							message
						);

						return {message};
					}
				}

				/**
				 * Emitted whenever all reactions are removed from a cached message.
				 * @event Client#messageReactionRemoveAll
				 * @param {Message} message The message the reactions were removed from
				 */

				module.exports = MessageReactionRemoveAll;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/MessageUpdate.js":
			/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageUpdate.js ***!
  \*********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class MessageUpdateAction extends Action {
					handle(data) {
						const client = this.client;

						const channel = client.channels.get(data.channel_id);
						if (channel) {
							const message = channel.messages.get(data.id);
							if (message) {
								message.patch(data);
								client.emit(
									Constants.Events.MESSAGE_UPDATE,
									message._edits[0],
									message
								);
								return {
									old: message._edits[0],
									updated: message,
								};
							}

							return {
								old: message,
								updated: message,
							};
						}

						return {
							old: null,
							updated: null,
						};
					}
				}

				/**
				 * Emitted whenever a message is updated - e.g. embed or content change.
				 * @event Client#messageUpdate
				 * @param {Message} oldMessage The message before the update
				 * @param {Message} newMessage The message after the update
				 */

				module.exports = MessageUpdateAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/UserGet.js":
			/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/UserGet.js ***!
  \***************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);

				class UserGetAction extends Action {
					handle(data) {
						const client = this.client;
						const user = client.dataManager.newUser(data);
						return {user};
					}
				}

				module.exports = UserGetAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/UserNoteUpdate.js":
			/*!**********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/UserNoteUpdate.js ***!
  \**********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class UserNoteUpdateAction extends Action {
					handle(data) {
						const client = this.client;

						const oldNote = client.user.notes.get(data.id);
						const note = data.note.length ? data.note : null;

						client.user.notes.set(data.id, note);

						client.emit(
							Constants.Events.USER_NOTE_UPDATE,
							data.id,
							oldNote,
							note
						);

						return {
							old: oldNote,
							updated: note,
						};
					}
				}

				/**
				 * Emitted whenever a note is updated.
				 * @event Client#userNoteUpdate
				 * @param {User} user The user the note belongs to
				 * @param {string} oldNote The note content before the update
				 * @param {string} newNote The note content after the update
				 */

				module.exports = UserNoteUpdateAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/actions/UserUpdate.js":
			/*!******************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/UserUpdate.js ***!
  \******************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Action = __webpack_require__(
					/*! ./Action */ "./node_modules/discord.js/src/client/actions/Action.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Util = __webpack_require__(
					/*! ../../util/Util */ "./node_modules/discord.js/src/util/Util.js"
				);

				class UserUpdateAction extends Action {
					handle(data) {
						const client = this.client;

						if (client.user) {
							if (client.user.equals(data)) {
								return {
									old: client.user,
									updated: client.user,
								};
							}

							const oldUser = Util.cloneObject(client.user);
							client.user.patch(data);
							client.emit(
								Constants.Events.USER_UPDATE,
								oldUser,
								client.user
							);
							return {
								old: oldUser,
								updated: client.user,
							};
						}

						return {
							old: null,
							updated: null,
						};
					}
				}

				module.exports = UserUpdateAction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/rest/APIRequest.js":
			/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/client/rest/APIRequest.js ***!
  \***************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const snekfetch = __webpack_require__(
					/*! snekfetch */ "./node_modules/snekfetch/esm.mjs"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class APIRequest {
					constructor(rest, method, path, auth, data, files, reason) {
						this.rest = rest;
						this.client = rest.client;
						this.method = method;
						this.path = path.toString();
						this.auth = auth;
						this.data = data;
						this.files = files;
						this.route = this.getRoute(this.path);
						this.reason = reason;
					}

					getRoute(url) {
						let route = url.split("?")[0];
						if (
							route.includes("/channels/") ||
							route.includes("/guilds/")
						) {
							const startInd = route.includes("/channels/")
								? route.indexOf("/channels/")
								: route.indexOf("/guilds/");
							const majorID = route
								.substring(startInd)
								.split("/")[2];
							route = route
								.replace(/(\d{8,})/g, ":id")
								.replace(":id", majorID);
						}
						return route;
					}

					getAuth() {
						if (
							this.client.token &&
							this.client.user &&
							this.client.user.bot
						) {
							return `Bot ${this.client.token}`;
						} else if (this.client.token) {
							return this.client.token;
						}
						throw new Error(Constants.Errors.NO_TOKEN);
					}

					gen() {
						const API = `${this.client.options.http.host}/api/v${
							this.client.options.http.version
						}`;
						const request = snekfetch[this.method](
							`${API}${this.path}`
						);
						if (this.auth)
							request.set("Authorization", this.getAuth());
						if (this.reason)
							request.set(
								"X-Audit-Log-Reason",
								encodeURIComponent(this.reason)
							);
						if (!this.rest.client.browser)
							request.set(
								"User-Agent",
								this.rest.userAgentManager.userAgent
							);
						if (this.files) {
							for (const file of this.files)
								if (file && file.file)
									request.attach(
										file.name,
										file.file,
										file.name
									);
							if (typeof this.data !== "undefined")
								request.attach(
									"payload_json",
									JSON.stringify(this.data)
								);
						} else if (this.data) {
							request.send(this.data);
						}
						return request;
					}
				}

				module.exports = APIRequest;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/rest/DiscordAPIError.js":
			/*!********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/rest/DiscordAPIError.js ***!
  \********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/**
				 * Represents an error from the Discord API.
				 * @extends Error
				 */
				class DiscordAPIError extends Error {
					constructor(path, error, method) {
						super();
						const flattened = this.constructor
							.flattenErrors(error.errors || error)
							.join("\n");
						this.name = "DiscordAPIError";
						this.message =
							error.message && flattened
								? `${error.message}\n${flattened}`
								: error.message || flattened;

						/**
						 * The path of the request relative to the HTTP endpoint
						 * @type {string}
						 */
						this.path = path;

						/**
						 * HTTP error code returned by Discord
						 * @type {number}
						 */
						this.code = error.code;

						/**
						 * The HTTP method used for the request
						 * @type {string}
						 */
						this.method = method;
					}

					/**
					 * Flattens an errors object returned from the API into an array.
					 * @param {Object} obj Discord errors object
					 * @param {string} [key] Used internally to determine key names of nested fields
					 * @returns {string[]}
					 * @private
					 */
					static flattenErrors(obj, key = "") {
						let messages = [];

						for (const k of Object.keys(obj)) {
							if (k === "message") continue;
							const newKey = key
								? isNaN(k)
									? `${key}.${k}`
									: `${key}[${k}]`
								: k;

							if (obj[k]._errors) {
								messages.push(
									`${newKey}: ${obj[k]._errors
										.map((e) => e.message)
										.join(" ")}`
								);
							} else if (obj[k].code || obj[k].message) {
								messages.push(
									`${
										obj[k].code ? `${obj[k].code}: ` : ""
									}: ${obj[k].message}`.trim()
								);
							} else if (typeof obj[k] === "string") {
								messages.push(obj[k]);
							} else {
								messages = messages.concat(
									this.flattenErrors(obj[k], newKey)
								);
							}
						}

						return messages;
					}
				}

				module.exports = DiscordAPIError;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/rest/RESTManager.js":
			/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/client/rest/RESTManager.js ***!
  \****************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const UserAgentManager = __webpack_require__(
					/*! ./UserAgentManager */ "./node_modules/discord.js/src/client/rest/UserAgentManager.js"
				);
				const RESTMethods = __webpack_require__(
					/*! ./RESTMethods */ "./node_modules/discord.js/src/client/rest/RESTMethods.js"
				);
				const SequentialRequestHandler = __webpack_require__(
					/*! ./RequestHandlers/Sequential */ "./node_modules/discord.js/src/client/rest/RequestHandlers/Sequential.js"
				);
				const BurstRequestHandler = __webpack_require__(
					/*! ./RequestHandlers/Burst */ "./node_modules/discord.js/src/client/rest/RequestHandlers/Burst.js"
				);
				const APIRequest = __webpack_require__(
					/*! ./APIRequest */ "./node_modules/discord.js/src/client/rest/APIRequest.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class RESTManager {
					constructor(client) {
						this.client = client;
						this.handlers = {};
						this.userAgentManager = new UserAgentManager(this);
						this.methods = new RESTMethods(this);
						this.rateLimitedEndpoints = {};
						this.globallyRateLimited = false;
					}

					destroy() {
						for (const handlerKey of Object.keys(this.handlers)) {
							const handler = this.handlers[handlerKey];
							if (handler.destroy) handler.destroy();
						}
					}

					push(handler, apiRequest) {
						return new Promise((resolve, reject) => {
							handler.push({
								request: apiRequest,
								resolve,
								reject,
							});
						});
					}

					getRequestHandler() {
						switch (this.client.options.apiRequestMethod) {
							case "sequential":
								return SequentialRequestHandler;
							case "burst":
								return BurstRequestHandler;
							default:
								throw new Error(
									Constants.Errors.INVALID_RATE_LIMIT_METHOD
								);
						}
					}

					makeRequest(method, url, auth, data, file, reason) {
						const apiRequest = new APIRequest(
							this,
							method,
							url,
							auth,
							data,
							file,
							reason
						);
						if (!this.handlers[apiRequest.route]) {
							const RequestHandlerType = this.getRequestHandler();
							this.handlers[
								apiRequest.route
							] = new RequestHandlerType(this, apiRequest.route);
						}

						return this.push(
							this.handlers[apiRequest.route],
							apiRequest
						);
					}
				}

				module.exports = RESTManager;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/rest/RESTMethods.js":
			/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/client/rest/RESTMethods.js ***!
  \****************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const querystring = __webpack_require__(
					/*! querystring */ "./node_modules/querystring-es3/index.js"
				);
				const long = __webpack_require__(
					/*! long */ "./node_modules/long/src/long.js"
				);
				const Permissions = __webpack_require__(
					/*! ../../util/Permissions */ "./node_modules/discord.js/src/util/Permissions.js"
				);
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Endpoints = Constants.Endpoints;
				const Collection = __webpack_require__(
					/*! ../../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);
				const Util = __webpack_require__(
					/*! ../../util/Util */ "./node_modules/discord.js/src/util/Util.js"
				);
				const resolvePermissions = __webpack_require__(
					/*! ../../structures/shared/resolvePermissions */ "./node_modules/discord.js/src/structures/shared/resolvePermissions.js"
				);

				const RichEmbed = __webpack_require__(
					/*! ../../structures/RichEmbed */ "./node_modules/discord.js/src/structures/RichEmbed.js"
				);
				const User = __webpack_require__(
					/*! ../../structures/User */ "./node_modules/discord.js/src/structures/User.js"
				);
				const GuildMember = __webpack_require__(
					/*! ../../structures/GuildMember */ "./node_modules/discord.js/src/structures/GuildMember.js"
				);
				const Message = __webpack_require__(
					/*! ../../structures/Message */ "./node_modules/discord.js/src/structures/Message.js"
				);
				const Role = __webpack_require__(
					/*! ../../structures/Role */ "./node_modules/discord.js/src/structures/Role.js"
				);
				const Invite = __webpack_require__(
					/*! ../../structures/Invite */ "./node_modules/discord.js/src/structures/Invite.js"
				);
				const Webhook = __webpack_require__(
					/*! ../../structures/Webhook */ "./node_modules/discord.js/src/structures/Webhook.js"
				);
				const UserProfile = __webpack_require__(
					/*! ../../structures/UserProfile */ "./node_modules/discord.js/src/structures/UserProfile.js"
				);
				const OAuth2Application = __webpack_require__(
					/*! ../../structures/OAuth2Application */ "./node_modules/discord.js/src/structures/OAuth2Application.js"
				);
				const Channel = __webpack_require__(
					/*! ../../structures/Channel */ "./node_modules/discord.js/src/structures/Channel.js"
				);
				const GroupDMChannel = __webpack_require__(
					/*! ../../structures/GroupDMChannel */ "./node_modules/discord.js/src/structures/GroupDMChannel.js"
				);
				const Guild = __webpack_require__(
					/*! ../../structures/Guild */ "./node_modules/discord.js/src/structures/Guild.js"
				);
				const VoiceRegion = __webpack_require__(
					/*! ../../structures/VoiceRegion */ "./node_modules/discord.js/src/structures/VoiceRegion.js"
				);
				const GuildAuditLogs = __webpack_require__(
					/*! ../../structures/GuildAuditLogs */ "./node_modules/discord.js/src/structures/GuildAuditLogs.js"
				);

				class RESTMethods {
					constructor(restManager) {
						this.rest = restManager;
						this.client = restManager.client;
						this._ackToken = null;
					}

					login(token = this.client.token) {
						return new Promise((resolve, reject) => {
							if (!token || typeof token !== "string")
								throw new Error(Constants.Errors.INVALID_TOKEN);
							token = token.replace(/^Bot\s*/i, "");
							this.client.manager.connectToWebSocket(
								token,
								resolve,
								reject
							);
						}).catch((e) => {
							this.client.destroy();
							return Promise.reject(e);
						});
					}

					logout() {
						return this.rest.makeRequest(
							"post",
							Endpoints.logout,
							true,
							{}
						);
					}

					getGateway(bot = false) {
						return this.rest.makeRequest(
							"get",
							bot ? Endpoints.gateway.bot : Endpoints.gateway,
							true
						);
					}

					fetchVoiceRegions(guildID) {
						let endpoint;
						if (guildID)
							endpoint = Endpoints.Guild(guildID).voiceRegions;
						else endpoint = Endpoints.voiceRegions;
						return this.rest
							.makeRequest("get", endpoint, true)
							.then((res) => {
								const regions = new Collection();
								for (const region of res)
									regions.set(
										region.id,
										new VoiceRegion(region)
									);
								return regions;
							});
					}

					sendMessage(
						channel,
						content,
						{
							tts,
							nonce,
							embed,
							disableEveryone,
							split,
							code,
							reply,
						} = {},
						files = null
					) {
						return new Promise((resolve, reject) => {
							// eslint-disable-line complexity
							if (typeof content !== "undefined")
								content = this.client.resolver.resolveString(
									content
								);

							// The nonce has to be a uint64 :<
							if (typeof nonce !== "undefined") {
								nonce = parseInt(nonce);
								if (isNaN(nonce) || nonce < 0)
									throw new RangeError(
										"Message nonce must fit in an unsigned 64-bit integer."
									);
							}

							if (content) {
								if (split && typeof split !== "object")
									split = {};

								// Wrap everything in a code block
								if (
									typeof code !== "undefined" &&
									(typeof code !== "boolean" || code === true)
								) {
									content = Util.escapeMarkdown(
										this.client.resolver.resolveString(
											content
										),
										true
									);
									content = `\`\`\`${
										typeof code !== "boolean"
											? code || ""
											: ""
									}\n${content}\n\`\`\``;
									if (split) {
										split.prepend = `\`\`\`${
											typeof code !== "boolean"
												? code || ""
												: ""
										}\n`;
										split.append = "\n```";
									}
								}

								// Add zero-width spaces to @everyone/@here
								if (
									disableEveryone ||
									(typeof disableEveryone === "undefined" &&
										this.client.options.disableEveryone)
								) {
									content = content.replace(
										/@(everyone|here)/g,
										"@\u200b$1"
									);
								}

								// Add the reply prefix
								if (
									reply &&
									!(
										channel instanceof User ||
										channel instanceof GuildMember
									) &&
									channel.type !== "dm"
								) {
									const id = this.client.resolver.resolveUserID(
										reply
									);
									const mention = `<@${
										reply instanceof GuildMember &&
										reply.nickname
											? "!"
											: ""
									}${id}>`;
									content = `${mention}${
										content ? `, ${content}` : ""
									}`;
									if (split)
										split.prepend = `${mention}, ${split.prepend ||
											""}`;
								}

								// Split the content
								if (split)
									content = Util.splitMessage(content, split);
							} else if (
								reply &&
								!(
									channel instanceof User ||
									channel instanceof GuildMember
								) &&
								channel.type !== "dm"
							) {
								const id = this.client.resolver.resolveUserID(
									reply
								);
								content = `<@${
									reply instanceof GuildMember &&
									reply.nickname
										? "!"
										: ""
								}${id}>`;
							}

							const send = (chan) => {
								if (content instanceof Array) {
									const messages = [];
									(function sendChunk(list, index) {
										const options =
											index === list.length - 1
												? {tts, embed, files}
												: {tts};
										chan.send(list[index], options)
											.then((message) => {
												messages.push(message);
												if (index >= list.length - 1)
													return resolve(messages);
												return sendChunk(list, ++index);
											})
											.catch(reject);
									})(content, 0);
								} else {
									this.rest
										.makeRequest(
											"post",
											Endpoints.Channel(chan).messages,
											true,
											{
												content,
												tts,
												nonce,
												embed,
											},
											files
										)
										.then(
											(data) =>
												resolve(
													this.client.actions.MessageCreate.handle(
														data
													).message
												),
											reject
										);
								}
							};

							if (
								channel instanceof User ||
								channel instanceof GuildMember
							)
								this.createDM(channel).then(send, reject);
							else send(channel);
						});
					}

					updateMessage(message, content, {embed, code, reply} = {}) {
						if (typeof content !== "undefined")
							content = this.client.resolver.resolveString(
								content
							);

						// Wrap everything in a code block
						if (
							typeof code !== "undefined" &&
							(typeof code !== "boolean" || code === true)
						) {
							content = Util.escapeMarkdown(
								this.client.resolver.resolveString(content),
								true
							);
							content = `\`\`\`${
								typeof code !== "boolean" ? code || "" : ""
							}\n${content}\n\`\`\``;
						}

						// Add the reply prefix
						if (reply && message.channel.type !== "dm") {
							const id = this.client.resolver.resolveUserID(
								reply
							);
							const mention = `<@${
								reply instanceof GuildMember && reply.nickname
									? "!"
									: ""
							}${id}>`;
							content = `${mention}${
								content ? `, ${content}` : ""
							}`;
						}

						if (embed instanceof RichEmbed)
							embed = embed._apiTransform();

						return this.rest
							.makeRequest(
								"patch",
								Endpoints.Message(message),
								true,
								{
									content,
									embed,
								}
							)
							.then(
								(data) =>
									this.client.actions.MessageUpdate.handle(
										data
									).updated
							);
					}

					deleteMessage(message) {
						return this.rest
							.makeRequest(
								"delete",
								Endpoints.Message(message),
								true
							)
							.then(
								() =>
									this.client.actions.MessageDelete.handle({
										id: message.id,
										channel_id: message.channel.id,
									}).message
							);
					}

					ackMessage(message) {
						return this.rest
							.makeRequest(
								"post",
								Endpoints.Message(message).ack,
								true,
								{token: this._ackToken}
							)
							.then((res) => {
								if (res.token) this._ackToken = res.token;
								return message;
							});
					}

					ackTextChannel(channel) {
						return this.rest
							.makeRequest(
								"post",
								Endpoints.Channel(channel).Message(
									channel.lastMessageID
								).ack,
								true,
								{
									token: this._ackToken,
								}
							)
							.then((res) => {
								if (res.token) this._ackToken = res.token;
								return channel;
							});
					}

					ackGuild(guild) {
						return this.rest
							.makeRequest(
								"post",
								Endpoints.Guild(guild).ack,
								true
							)
							.then(() => guild);
					}

					bulkDeleteMessages(channel, messages) {
						return this.rest
							.makeRequest(
								"post",
								Endpoints.Channel(channel).messages.bulkDelete,
								true,
								{
									messages: messages,
								}
							)
							.then(
								() =>
									this.client.actions.MessageDeleteBulk.handle(
										{
											channel_id: channel.id,
											ids: messages,
										}
									).messages
							);
					}

					search(target, options) {
						if (typeof options === "string")
							options = {content: options};
						if (options.before) {
							if (!(options.before instanceof Date))
								options.before = new Date(options.before);
							options.maxID = long
								.fromNumber(
									options.before.getTime() - 14200704e5
								)
								.shiftLeft(22)
								.toString();
						}
						if (options.after) {
							if (!(options.after instanceof Date))
								options.after = new Date(options.after);
							options.minID = long
								.fromNumber(
									options.after.getTime() - 14200704e5
								)
								.shiftLeft(22)
								.toString();
						}
						if (options.during) {
							if (!(options.during instanceof Date))
								options.during = new Date(options.during);
							const t = options.during.getTime() - 14200704e5;
							options.minID = long
								.fromNumber(t)
								.shiftLeft(22)
								.toString();
							options.maxID = long
								.fromNumber(t + 86400000)
								.shiftLeft(22)
								.toString();
						}
						if (options.channel)
							options.channel = this.client.resolver.resolveChannelID(
								options.channel
							);
						if (options.author)
							options.author = this.client.resolver.resolveUserID(
								options.author
							);
						if (options.mentions)
							options.mentions = this.client.resolver.resolveUserID(
								options.options.mentions
							);
						options = {
							content: options.content,
							max_id: options.maxID,
							min_id: options.minID,
							has: options.has,
							channel_id: options.channel,
							author_id: options.author,
							author_type: options.authorType,
							context_size: options.contextSize,
							sort_by: options.sortBy,
							sort_order: options.sortOrder,
							limit: options.limit,
							offset: options.offset,
							mentions: options.mentions,
							mentions_everyone: options.mentionsEveryone,
							link_hostname: options.linkHostname,
							embed_provider: options.embedProvider,
							embed_type: options.embedType,
							attachment_filename: options.attachmentFilename,
							attachment_extension: options.attachmentExtension,
							include_nsfw: options.nsfw,
						};

						for (const key in options)
							if (options[key] === undefined) delete options[key];
						const queryString = (
							querystring
								.stringify(options)
								.match(/[^=&?]+=[^=&?]+/g) || []
						).join("&");

						let endpoint;
						if (target instanceof Channel) {
							endpoint = Endpoints.Channel(target).search;
						} else if (target instanceof Guild) {
							endpoint = Endpoints.Guild(target).search;
						} else {
							throw new TypeError(
								"Target must be a TextChannel, DMChannel, GroupDMChannel, or Guild."
							);
						}
						return this.rest
							.makeRequest(
								"get",
								`${endpoint}?${queryString}`,
								true
							)
							.then((body) => {
								const messages = body.messages.map((x) =>
									x.map(
										(m) =>
											new Message(
												this.client.channels.get(
													m.channel_id
												),
												m,
												this.client
											)
									)
								);
								return {
									totalResults: body.total_results,
									messages,
								};
							});
					}

					createChannel(
						guild,
						channelName,
						channelType,
						overwrites,
						reason
					) {
						return this.rest
							.makeRequest(
								"post",
								Endpoints.Guild(guild).channels,
								true,
								{
									name: channelName,
									type: channelType
										? Constants.ChannelTypes[
												channelType.toUpperCase()
										  ]
										: "text",
									permission_overwrites: resolvePermissions.call(
										this,
										overwrites,
										guild
									),
								},
								undefined,
								reason
							)
							.then(
								(data) =>
									this.client.actions.ChannelCreate.handle(
										data
									).channel
							);
					}

					createDM(recipient) {
						const dmChannel = this.getExistingDM(recipient);
						if (dmChannel) return Promise.resolve(dmChannel);
						return this.rest
							.makeRequest(
								"post",
								Endpoints.User(this.client.user).channels,
								true,
								{
									recipient_id: recipient.id,
								}
							)
							.then(
								(data) =>
									this.client.actions.ChannelCreate.handle(
										data
									).channel
							);
					}

					createGroupDM(options) {
						const data = this.client.user.bot
							? {
									access_tokens: options.accessTokens,
									nicks: options.nicks,
							  }
							: {recipients: options.recipients};
						return this.rest
							.makeRequest(
								"post",
								Endpoints.User("@me").channels,
								true,
								data
							)
							.then(
								(res) => new GroupDMChannel(this.client, res)
							);
					}

					addUserToGroupDM(channel, options) {
						const data = this.client.user.bot
							? {
									nick: options.nick,
									access_token: options.accessToken,
							  }
							: {recipient: options.id};
						return this.rest
							.makeRequest(
								"put",
								Endpoints.Channel(channel).Recipient(
									options.id
								),
								true,
								data
							)
							.then(() => channel);
					}

					removeUserFromGroupDM(channel, userId) {
						return this.rest
							.makeRequest(
								"delete",
								Endpoints.Channel(channel).Recipient(userId),
								true
							)
							.then(() => channel);
					}

					updateGroupDMChannel(channel, _data) {
						const data = {};
						data.name = _data.name;
						data.icon = _data.icon;
						return this.rest
							.makeRequest(
								"patch",
								Endpoints.Channel(channel),
								true,
								data
							)
							.then(() => channel);
					}

					getExistingDM(recipient) {
						return this.client.channels.find(
							(channel) =>
								channel.recipient &&
								channel.recipient.id === recipient.id
						);
					}

					deleteChannel(channel, reason) {
						if (
							channel instanceof User ||
							channel instanceof GuildMember
						)
							channel = this.getExistingDM(channel);
						if (!channel)
							return Promise.reject(
								new Error("No channel to delete.")
							);
						return this.rest
							.makeRequest(
								"delete",
								Endpoints.Channel(channel),
								true,
								undefined,
								undefined,
								reason
							)
							.then((data) => {
								data.id = channel.id;
								return this.client.actions.ChannelDelete.handle(
									data
								).channel;
							});
					}

					updateChannel(channel, _data, reason) {
						const data = {};
						data.name = (_data.name || channel.name).trim();
						data.topic =
							typeof _data.topic === "undefined"
								? channel.topic
								: _data.topic;
						data.nsfw =
							typeof _data.nsfw === "undefined"
								? channel.nsfw
								: _data.nsfw;
						data.position = _data.position || channel.position;
						data.bitrate =
							_data.bitrate ||
							(channel.bitrate
								? channel.bitrate * 1000
								: undefined);
						data.user_limit =
							typeof _data.userLimit !== "undefined"
								? _data.userLimit
								: channel.userLimit;
						data.parent_id = _data.parent;
						data.permission_overwrites = _data.permissionOverwrites
							? resolvePermissions.call(
									this,
									_data.permissionOverwrites,
									channel.guild
							  )
							: undefined;
						return this.rest
							.makeRequest(
								"patch",
								Endpoints.Channel(channel),
								true,
								data,
								undefined,
								reason
							)
							.then(
								(newData) =>
									this.client.actions.ChannelUpdate.handle(
										newData
									).updated
							);
					}

					leaveGuild(guild) {
						if (guild.ownerID === this.client.user.id)
							return Promise.reject(
								new Error("Guild is owned by the client.")
							);
						return this.rest
							.makeRequest(
								"delete",
								Endpoints.User("@me").Guild(guild.id),
								true
							)
							.then(
								() =>
									this.client.actions.GuildDelete.handle({
										id: guild.id,
									}).guild
							);
					}

					createGuild(options) {
						options.icon =
							this.client.resolver.resolveBase64(options.icon) ||
							null;
						options.region = options.region || "us-central";
						return new Promise((resolve, reject) => {
							this.rest
								.makeRequest(
									"post",
									Endpoints.guilds,
									true,
									options
								)
								.then((data) => {
									if (this.client.guilds.has(data.id))
										return resolve(
											this.client.guilds.get(data.id)
										);

									const handleGuild = (guild) => {
										if (guild.id === data.id) {
											this.client.removeListener(
												Constants.Events.GUILD_CREATE,
												handleGuild
											);
											this.client.clearTimeout(timeout);
											resolve(guild);
										}
									};
									this.client.on(
										Constants.Events.GUILD_CREATE,
										handleGuild
									);

									const timeout = this.client.setTimeout(
										() => {
											this.client.removeListener(
												Constants.Events.GUILD_CREATE,
												handleGuild
											);
											reject(
												new Error(
													"Took too long to receive guild data."
												)
											);
										},
										10000
									);
									return undefined;
								}, reject);
						});
					}

					// Untested but probably will work
					deleteGuild(guild) {
						return this.rest
							.makeRequest("delete", Endpoints.Guild(guild), true)
							.then(
								() =>
									this.client.actions.GuildDelete.handle({
										id: guild.id,
									}).guild
							);
					}

					getUser(userID, cache) {
						return this.rest
							.makeRequest("get", Endpoints.User(userID), true)
							.then((data) => {
								if (cache)
									return this.client.actions.UserGet.handle(
										data
									).user;
								else return new User(this.client, data);
							});
					}

					updateCurrentUser(_data, password) {
						const user = this.client.user;
						const data = {};
						data.username = _data.username || user.username;
						data.avatar =
							typeof _data.avatar === "undefined"
								? user.avatar
								: this.client.resolver.resolveBase64(
										_data.avatar
								  );
						if (!user.bot) {
							data.email = _data.email || user.email;
							data.password = password;
							if (_data.new_password)
								data.new_password = _data.newPassword;
						}
						return this.rest
							.makeRequest(
								"patch",
								Endpoints.User("@me"),
								true,
								data
							)
							.then(
								(newData) =>
									this.client.actions.UserUpdate.handle(
										newData
									).updated
							);
					}

					updateGuild(guild, data, reason) {
						return this.rest
							.makeRequest(
								"patch",
								Endpoints.Guild(guild),
								true,
								data,
								undefined,
								reason
							)
							.then(
								(newData) =>
									this.client.actions.GuildUpdate.handle(
										newData
									).updated
							);
					}

					kickGuildMember(guild, member, reason) {
						return this.rest
							.makeRequest(
								"delete",
								Endpoints.Guild(guild).Member(member),
								true,
								undefined,
								undefined,
								reason
							)
							.then(() => member);
					}

					createGuildRole(guild, data, reason) {
						if (data.color)
							data.color = this.client.resolver.resolveColor(
								data.color
							);
						if (data.permissions)
							data.permissions = Permissions.resolve(
								data.permissions
							);
						return this.rest
							.makeRequest(
								"post",
								Endpoints.Guild(guild).roles,
								true,
								data,
								undefined,
								reason
							)
							.then((r) => {
								const {
									role,
								} = this.client.actions.GuildRoleCreate.handle({
									guild_id: guild.id,
									role: r,
								});
								if (data.position)
									return role.setPosition(
										data.position,
										reason
									);
								return role;
							});
					}

					deleteGuildRole(role, reason) {
						return this.rest
							.makeRequest(
								"delete",
								Endpoints.Guild(role.guild).Role(role.id),
								true,
								undefined,
								undefined,
								reason
							)
							.then(
								() =>
									this.client.actions.GuildRoleDelete.handle({
										guild_id: role.guild.id,
										role_id: role.id,
									}).role
							);
					}

					setChannelOverwrite(channel, payload) {
						return this.rest.makeRequest(
							"put",
							`${Endpoints.Channel(channel).permissions}/${
								payload.id
							}`,
							true,
							payload
						);
					}

					deletePermissionOverwrites(overwrite, reason) {
						return this.rest
							.makeRequest(
								"delete",
								`${
									Endpoints.Channel(overwrite.channel)
										.permissions
								}/${overwrite.id}`,
								true,
								undefined,
								undefined,
								reason
							)
							.then(() => overwrite);
					}

					getChannelMessages(channel, payload = {}) {
						const params = [];
						if (payload.limit)
							params.push(`limit=${payload.limit}`);
						if (payload.around)
							params.push(`around=${payload.around}`);
						else if (payload.before)
							params.push(`before=${payload.before}`);
						else if (payload.after)
							params.push(`after=${payload.after}`);

						let endpoint = Endpoints.Channel(channel).messages;
						if (params.length > 0)
							endpoint += `?${params.join("&")}`;
						return this.rest.makeRequest("get", endpoint, true);
					}

					getChannelMessage(channel, messageID) {
						const msg = channel.messages.get(messageID);
						if (msg) return Promise.resolve(msg);
						return this.rest.makeRequest(
							"get",
							Endpoints.Channel(channel).Message(messageID),
							true
						);
					}

					putGuildMember(guild, user, options) {
						options.access_token = options.accessToken;
						if (options.roles) {
							const roles = options.roles;
							if (
								roles instanceof Collection ||
								(roles instanceof Array &&
									roles[0] instanceof Role)
							) {
								options.roles = roles.map((role) => role.id);
							}
						}
						return this.rest
							.makeRequest(
								"put",
								Endpoints.Guild(guild).Member(user.id),
								true,
								options
							)
							.then(
								(data) =>
									this.client.actions.GuildMemberGet.handle(
										guild,
										data
									).member
							);
					}

					getGuildMember(guild, user, cache) {
						return this.rest
							.makeRequest(
								"get",
								Endpoints.Guild(guild).Member(user.id),
								true
							)
							.then((data) => {
								if (cache)
									return this.client.actions.GuildMemberGet.handle(
										guild,
										data
									).member;
								else return new GuildMember(guild, data);
							});
					}

					updateGuildMember(member, data, reason) {
						if (data.channel) {
							data.channel_id = this.client.resolver.resolveChannel(
								data.channel
							).id;
							data.channel = null;
						}
						if (data.roles)
							data.roles = data.roles.map((role) =>
								role instanceof Role ? role.id : role
							);

						let endpoint = Endpoints.Member(member);
						// Fix your endpoints, discord ;-;
						if (member.id === this.client.user.id) {
							const keys = Object.keys(data);
							if (keys.length === 1 && keys[0] === "nick") {
								endpoint = Endpoints.Member(member).nickname;
							}
						}

						return this.rest
							.makeRequest(
								"patch",
								endpoint,
								true,
								data,
								undefined,
								reason
							)
							.then(
								(newData) =>
									member.guild._updateMember(member, newData)
										.mem
							);
					}

					addMemberRole(member, role, reason) {
						return new Promise((resolve, reject) => {
							if (member._roles.includes(role.id))
								return resolve(member);

							const listener = (oldMember, newMember) => {
								if (
									newMember.id === member.id &&
									!oldMember._roles.includes(role.id) &&
									newMember._roles.includes(role.id)
								) {
									this.client.removeListener(
										Constants.Events.GUILD_MEMBER_UPDATE,
										listener
									);
									resolve(newMember);
								}
							};

							this.client.on(
								Constants.Events.GUILD_MEMBER_UPDATE,
								listener
							);
							const timeout = this.client.setTimeout(() => {
								this.client.removeListener(
									Constants.Events.GUILD_MEMBER_UPDATE,
									listener
								);
								reject(new Error("Adding the role timed out."));
							}, 10e3);

							return this.rest
								.makeRequest(
									"put",
									Endpoints.Member(member).Role(role.id),
									true,
									undefined,
									undefined,
									reason
								)
								.catch((err) => {
									this.client.removeListener(
										Constants.Events.GUILD_MEMBER_UPDATE,
										listener
									);
									this.client.clearTimeout(timeout);
									reject(err);
								});
						});
					}

					removeMemberRole(member, role, reason) {
						return new Promise((resolve, reject) => {
							if (!member._roles.includes(role.id))
								return resolve(member);

							const listener = (oldMember, newMember) => {
								if (
									newMember.id === member.id &&
									oldMember._roles.includes(role.id) &&
									!newMember._roles.includes(role.id)
								) {
									this.client.removeListener(
										Constants.Events.GUILD_MEMBER_UPDATE,
										listener
									);
									resolve(newMember);
								}
							};

							this.client.on(
								Constants.Events.GUILD_MEMBER_UPDATE,
								listener
							);
							const timeout = this.client.setTimeout(() => {
								this.client.removeListener(
									Constants.Events.GUILD_MEMBER_UPDATE,
									listener
								);
								reject(
									new Error("Removing the role timed out.")
								);
							}, 10e3);

							return this.rest
								.makeRequest(
									"delete",
									Endpoints.Member(member).Role(role.id),
									true,
									undefined,
									undefined,
									reason
								)
								.catch((err) => {
									this.client.removeListener(
										Constants.Events.GUILD_MEMBER_UPDATE,
										listener
									);
									this.client.clearTimeout(timeout);
									reject(err);
								});
						});
					}

					sendTyping(channelID) {
						return this.rest.makeRequest(
							"post",
							Endpoints.Channel(channelID).typing,
							true
						);
					}

					banGuildMember(guild, member, options) {
						const id = this.client.resolver.resolveUserID(member);
						if (!id)
							return Promise.reject(
								new Error(
									"Couldn't resolve the user ID to ban."
								)
							);

						const url = `${
							Endpoints.Guild(guild).bans
						}/${id}?${querystring.stringify(options)}`;
						return this.rest
							.makeRequest("put", url, true)
							.then(() => {
								if (member instanceof GuildMember)
									return member;
								const user = this.client.resolver.resolveUser(
									id
								);
								if (user) {
									member = this.client.resolver.resolveGuildMember(
										guild,
										user
									);
									return member || user;
								}
								return id;
							});
					}

					unbanGuildMember(guild, member, reason) {
						return new Promise((resolve, reject) => {
							const id = this.client.resolver.resolveUserID(
								member
							);
							if (!id)
								throw new Error(
									"Couldn't resolve the user ID to unban."
								);

							const listener = (eGuild, eUser) => {
								if (eGuild.id === guild.id && eUser.id === id) {
									this.client.removeListener(
										Constants.Events.GUILD_BAN_REMOVE,
										listener
									);
									this.client.clearTimeout(timeout);
									resolve(eUser);
								}
							};
							this.client.on(
								Constants.Events.GUILD_BAN_REMOVE,
								listener
							);

							const timeout = this.client.setTimeout(() => {
								this.client.removeListener(
									Constants.Events.GUILD_BAN_REMOVE,
									listener
								);
								reject(
									new Error(
										"Took too long to receive the ban remove event."
									)
								);
							}, 10000);

							this.rest
								.makeRequest(
									"delete",
									`${Endpoints.Guild(guild).bans}/${id}`,
									true,
									undefined,
									undefined,
									reason
								)
								.catch((err) => {
									this.client.removeListener(
										Constants.Events.GUILD_BAN_REMOVE,
										listener
									);
									this.client.clearTimeout(timeout);
									reject(err);
								});
						});
					}

					getGuildBans(guild) {
						return this.rest
							.makeRequest(
								"get",
								Endpoints.Guild(guild).bans,
								true
							)
							.then((bans) =>
								bans.reduce((collection, ban) => {
									collection.set(ban.user.id, {
										reason: ban.reason,
										user: this.client.dataManager.newUser(
											ban.user
										),
									});
									return collection;
								}, new Collection())
							);
					}

					updateGuildRole(role, _data, reason) {
						const data = {};
						data.name = _data.name || role.name;
						data.position =
							typeof _data.position !== "undefined"
								? _data.position
								: role.position;
						data.color =
							_data.color === null
								? null
								: this.client.resolver.resolveColor(
										_data.color || role.color
								  );
						data.hoist =
							typeof _data.hoist !== "undefined"
								? _data.hoist
								: role.hoist;
						data.mentionable =
							typeof _data.mentionable !== "undefined"
								? _data.mentionable
								: role.mentionable;

						if (typeof _data.permissions !== "undefined")
							data.permissions = Permissions.resolve(
								_data.permissions
							);
						else data.permissions = role.permissions;

						return this.rest
							.makeRequest(
								"patch",
								Endpoints.Guild(role.guild).Role(role.id),
								true,
								data,
								undefined,
								reason
							)
							.then(
								(_role) =>
									this.client.actions.GuildRoleUpdate.handle({
										role: _role,
										guild_id: role.guild.id,
									}).updated
							);
					}

					pinMessage(message) {
						return this.rest
							.makeRequest(
								"put",
								Endpoints.Channel(message.channel).Pin(
									message.id
								),
								true
							)
							.then(() => message);
					}

					unpinMessage(message) {
						return this.rest
							.makeRequest(
								"delete",
								Endpoints.Channel(message.channel).Pin(
									message.id
								),
								true
							)
							.then(() => message);
					}

					getChannelPinnedMessages(channel) {
						return this.rest.makeRequest(
							"get",
							Endpoints.Channel(channel).pins,
							true
						);
					}

					createChannelInvite(channel, options, reason) {
						const payload = {};
						payload.temporary = options.temporary;
						payload.max_age = options.maxAge;
						payload.max_uses = options.maxUses;
						payload.unique = options.unique;
						return this.rest
							.makeRequest(
								"post",
								Endpoints.Channel(channel).invites,
								true,
								payload,
								undefined,
								reason
							)
							.then((invite) => new Invite(this.client, invite));
					}

					deleteInvite(invite, reason) {
						return this.rest
							.makeRequest(
								"delete",
								Endpoints.Invite(invite.code),
								true,
								undefined,
								undefined,
								reason
							)
							.then(() => invite);
					}

					getInvite(code) {
						return this.rest
							.makeRequest("get", Endpoints.Invite(code), true)
							.then((invite) => new Invite(this.client, invite));
					}

					getGuildInvites(guild) {
						return this.rest
							.makeRequest(
								"get",
								Endpoints.Guild(guild).invites,
								true
							)
							.then((inviteItems) => {
								const invites = new Collection();
								for (const inviteItem of inviteItems) {
									const invite = new Invite(
										this.client,
										inviteItem
									);
									invites.set(invite.code, invite);
								}
								return invites;
							});
					}

					pruneGuildMembers(guild, days, dry, reason) {
						return this.rest
							.makeRequest(
								dry ? "get" : "post",
								`${Endpoints.Guild(guild).prune}?days=${days}`,
								true,
								undefined,
								undefined,
								reason
							)
							.then((data) => data.pruned);
					}

					createEmoji(guild, image, name, roles, reason) {
						const data = {image, name};
						if (roles)
							data.roles = roles.map((r) => (r.id ? r.id : r));
						return this.rest
							.makeRequest(
								"post",
								Endpoints.Guild(guild).emojis,
								true,
								data,
								undefined,
								reason
							)
							.then(
								(emoji) =>
									this.client.actions.GuildEmojiCreate.handle(
										guild,
										emoji
									).emoji
							);
					}

					updateEmoji(emoji, _data, reason) {
						const data = {};
						if (_data.name) data.name = _data.name;
						if (_data.roles)
							data.roles = _data.roles.map((r) =>
								r.id ? r.id : r
							);
						return this.rest
							.makeRequest(
								"patch",
								Endpoints.Guild(emoji.guild).Emoji(emoji.id),
								true,
								data,
								undefined,
								reason
							)
							.then(
								(newEmoji) =>
									this.client.actions.GuildEmojiUpdate.handle(
										emoji,
										newEmoji
									).emoji
							);
					}

					deleteEmoji(emoji, reason) {
						return this.rest
							.makeRequest(
								"delete",
								Endpoints.Guild(emoji.guild).Emoji(emoji.id),
								true,
								undefined,
								reason
							)
							.then(
								() =>
									this.client.actions.GuildEmojiDelete.handle(
										emoji
									).data
							);
					}

					getGuildAuditLogs(guild, options = {}) {
						if (
							options.before &&
							options.before instanceof GuildAuditLogs.Entry
						)
							options.before = options.before.id;
						if (
							options.after &&
							options.after instanceof GuildAuditLogs.Entry
						)
							options.after = options.after.id;
						if (typeof options.type === "string")
							options.type = GuildAuditLogs.Actions[options.type];

						const queryString = (
							querystring
								.stringify({
									before: options.before,
									after: options.after,
									limit: options.limit,
									user_id: this.client.resolver.resolveUserID(
										options.user
									),
									action_type: options.type,
								})
								.match(/[^=&?]+=[^=&?]+/g) || []
						).join("&");

						return this.rest
							.makeRequest(
								"get",
								`${
									Endpoints.Guild(guild).auditLogs
								}?${queryString}`,
								true
							)
							.then((data) => GuildAuditLogs.build(guild, data));
					}

					getWebhook(id, token) {
						return this.rest
							.makeRequest(
								"get",
								Endpoints.Webhook(id, token),
								!token
							)
							.then((data) => new Webhook(this.client, data));
					}

					getGuildWebhooks(guild) {
						return this.rest
							.makeRequest(
								"get",
								Endpoints.Guild(guild).webhooks,
								true
							)
							.then((data) => {
								const hooks = new Collection();
								for (const hook of data)
									hooks.set(
										hook.id,
										new Webhook(this.client, hook)
									);
								return hooks;
							});
					}

					getChannelWebhooks(channel) {
						return this.rest
							.makeRequest(
								"get",
								Endpoints.Channel(channel).webhooks,
								true
							)
							.then((data) => {
								const hooks = new Collection();
								for (const hook of data)
									hooks.set(
										hook.id,
										new Webhook(this.client, hook)
									);
								return hooks;
							});
					}

					createWebhook(channel, name, avatar, reason) {
						return this.rest
							.makeRequest(
								"post",
								Endpoints.Channel(channel).webhooks,
								true,
								{name, avatar},
								undefined,
								reason
							)
							.then((data) => new Webhook(this.client, data));
					}

					editWebhook(webhook, name, avatar) {
						return this.rest
							.makeRequest(
								"patch",
								Endpoints.Webhook(webhook.id, webhook.token),
								false,
								{
									name,
									avatar,
								}
							)
							.then((data) => {
								webhook.name = data.name;
								webhook.avatar = data.avatar;
								return webhook;
							});
					}

					deleteWebhook(webhook, reason) {
						return this.rest.makeRequest(
							"delete",
							Endpoints.Webhook(webhook.id, webhook.token),
							false,
							undefined,
							undefined,
							reason
						);
					}

					sendWebhookMessage(
						webhook,
						content,
						{avatarURL, tts, embeds, username} = {},
						files = null
					) {
						return new Promise((resolve, reject) => {
							username = username || webhook.name;

							if (content instanceof Array) {
								const messages = [];
								(function sendChunk(list, index) {
									const options =
										index === list.length - 1
											? {tts, embeds, files}
											: {tts};
									webhook
										.send(list[index], options)
										.then((message) => {
											messages.push(message);
											if (index >= list.length - 1)
												return resolve(messages);
											return sendChunk(list, ++index);
										})
										.catch(reject);
								})(content, 0);
							} else {
								this.rest
									.makeRequest(
										"post",
										`${Endpoints.Webhook(
											webhook.id,
											webhook.token
										)}?wait=true`,
										false,
										{
											username,
											avatar_url: avatarURL,
											content,
											tts,
											embeds,
										},
										files
									)
									.then((data) => {
										if (!this.client.channels)
											resolve(data);
										else
											resolve(
												this.client.actions.MessageCreate.handle(
													data
												).message
											);
									}, reject);
							}
						});
					}

					sendSlackWebhookMessage(webhook, body) {
						return this.rest.makeRequest(
							"post",
							`${Endpoints.Webhook(
								webhook.id,
								webhook.token
							)}/slack?wait=true`,
							false,
							body
						);
					}

					fetchUserProfile(user) {
						return this.rest
							.makeRequest(
								"get",
								Endpoints.User(user).profile,
								true
							)
							.then((data) => new UserProfile(user, data));
					}

					fetchMentions(options) {
						if (options.guild instanceof Guild)
							options.guild = options.guild.id;
						Util.mergeDefault(
							{
								limit: 25,
								roles: true,
								everyone: true,
								guild: null,
							},
							options
						);

						return this.rest
							.makeRequest(
								"get",
								Endpoints.User("@me").Mentions(
									options.limit,
									options.roles,
									options.everyone,
									options.guild
								),
								true
							)
							.then((data) =>
								data.map(
									(m) =>
										new Message(
											this.client.channels.get(
												m.channel_id
											),
											m,
											this.client
										)
								)
							);
					}

					addFriend(user) {
						return this.rest
							.makeRequest("post", Endpoints.User("@me"), true, {
								username: user.username,
								discriminator: user.discriminator,
							})
							.then(() => user);
					}

					removeFriend(user) {
						return this.rest
							.makeRequest(
								"delete",
								Endpoints.User("@me").Relationship(user.id),
								true
							)
							.then(() => user);
					}

					blockUser(user) {
						return this.rest
							.makeRequest(
								"put",
								Endpoints.User("@me").Relationship(user.id),
								true,
								{type: 2}
							)
							.then(() => user);
					}

					unblockUser(user) {
						return this.rest
							.makeRequest(
								"delete",
								Endpoints.User("@me").Relationship(user.id),
								true
							)
							.then(() => user);
					}

					updateChannelPositions(guildID, channels) {
						const data = new Array(channels.length);
						for (let i = 0; i < channels.length; i++) {
							data[i] = {
								id: this.client.resolver.resolveChannelID(
									channels[i].channel
								),
								position: channels[i].position,
							};
						}

						return this.rest
							.makeRequest(
								"patch",
								Endpoints.Guild(guildID).channels,
								true,
								data
							)
							.then(
								() =>
									this.client.actions.GuildChannelsPositionUpdate.handle(
										{
											guild_id: guildID,
											channels,
										}
									).guild
							);
					}

					setRolePositions(guildID, roles) {
						return this.rest
							.makeRequest(
								"patch",
								Endpoints.Guild(guildID).roles,
								true,
								roles
							)
							.then(
								() =>
									this.client.actions.GuildRolesPositionUpdate.handle(
										{
											guild_id: guildID,
											roles,
										}
									).guild
							);
					}

					setChannelPositions(guildID, channels) {
						return this.rest
							.makeRequest(
								"patch",
								Endpoints.Guild(guildID).channels,
								true,
								channels
							)
							.then(
								() =>
									this.client.actions.GuildChannelsPositionUpdate.handle(
										{
											guild_id: guildID,
											channels,
										}
									).guild
							);
					}

					addMessageReaction(message, emoji) {
						return this.rest
							.makeRequest(
								"put",
								Endpoints.Message(message)
									.Reaction(emoji)
									.User("@me"),
								true
							)
							.then(() =>
								message._addReaction(
									Util.parseEmoji(emoji),
									message.client.user
								)
							);
					}

					removeMessageReaction(message, emoji, userID) {
						const endpoint = Endpoints.Message(message)
							.Reaction(emoji)
							.User(
								userID === this.client.user.id ? "@me" : userID
							);
						return this.rest
							.makeRequest("delete", endpoint, true)
							.then(
								() =>
									this.client.actions.MessageReactionRemove.handle(
										{
											user_id: userID,
											message_id: message.id,
											emoji: Util.parseEmoji(emoji),
											channel_id: message.channel.id,
										}
									).reaction
							);
					}

					removeMessageReactions(message) {
						return this.rest
							.makeRequest(
								"delete",
								Endpoints.Message(message).reactions,
								true
							)
							.then(() => message);
					}

					getMessageReactionUsers(message, emoji, options) {
						const queryString = (
							querystring
								.stringify(options)
								.match(/[^=&?]+=[^=&?]+/g) || []
						).join("&");

						return this.rest.makeRequest(
							"get",
							`${Endpoints.Message(message).Reaction(
								emoji
							)}?${queryString}`,
							true
						);
					}

					getApplication(id) {
						return this.rest
							.makeRequest(
								"get",
								Endpoints.OAUTH2.Application(id),
								true
							)
							.then(
								(app) => new OAuth2Application(this.client, app)
							);
					}

					resetApplication(id) {
						return this.rest
							.makeRequest(
								"post",
								Endpoints.OAUTH2.Application(id).resetToken,
								true
							)
							.then(() =>
								this.rest.makeRequest(
									"post",
									Endpoints.OAUTH2.Application(id)
										.resetSecret,
									true
								)
							)
							.then(
								(app) => new OAuth2Application(this.client, app)
							);
					}

					setNote(user, note) {
						return this.rest
							.makeRequest(
								"put",
								Endpoints.User(user).note,
								true,
								{note}
							)
							.then(() => user);
					}

					acceptInvite(code) {
						if (code.id) code = code.id;
						return new Promise((resolve, reject) =>
							this.rest
								.makeRequest(
									"post",
									Endpoints.Invite(code),
									true
								)
								.then((res) => {
									const handler = (guild) => {
										if (guild.id === res.id) {
											resolve(guild);
											this.client.removeListener(
												Constants.Events.GUILD_CREATE,
												handler
											);
										}
									};
									this.client.on(
										Constants.Events.GUILD_CREATE,
										handler
									);
									this.client.setTimeout(() => {
										this.client.removeListener(
											Constants.Events.GUILD_CREATE,
											handler
										);
										reject(
											new Error(
												"Accepting invite timed out"
											)
										);
									}, 120e3);
								})
						);
					}

					patchUserSettings(data) {
						return this.rest.makeRequest(
							"patch",
							Constants.Endpoints.User("@me").settings,
							true,
							data
						);
					}

					patchClientUserGuildSettings(guildID, data) {
						return this.rest.makeRequest(
							"patch",
							Constants.Endpoints.User("@me").Guild(guildID)
								.settings,
							true,
							data
						);
					}
				}

				module.exports = RESTMethods;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/rest/RequestHandlers/Burst.js":
			/*!**************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/rest/RequestHandlers/Burst.js ***!
  \**************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const RequestHandler = __webpack_require__(
					/*! ./RequestHandler */ "./node_modules/discord.js/src/client/rest/RequestHandlers/RequestHandler.js"
				);
				const DiscordAPIError = __webpack_require__(
					/*! ../DiscordAPIError */ "./node_modules/discord.js/src/client/rest/DiscordAPIError.js"
				);
				const {
					Events: {RATE_LIMIT},
				} = __webpack_require__(
					/*! ../../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class BurstRequestHandler extends RequestHandler {
					constructor(restManager, endpoint) {
						super(restManager, endpoint);

						this.client = restManager.client;

						this.limit = Infinity;
						this.resetTime = null;
						this.remaining = 1;
						this.timeDifference = 0;

						this.resetTimeout = null;
					}

					push(request) {
						super.push(request);
						this.handle();
					}

					execute(item) {
						if (!item) return;
						item.request.gen().end((err, res) => {
							if (res && res.headers) {
								this.limit = Number(
									res.headers["x-ratelimit-limit"]
								);
								this.resetTime =
									Number(res.headers["x-ratelimit-reset"]) *
									1000;
								this.remaining = Number(
									res.headers["x-ratelimit-remaining"]
								);
								this.timeDifference =
									Date.now() -
									new Date(res.headers.date).getTime();
							}
							if (err) {
								if (err.status === 429) {
									this.queue.unshift(item);
									if (res.headers["x-ratelimit-global"])
										this.globalLimit = true;
									if (this.resetTimeout) return;
									this.resetTimeout = this.client.setTimeout(
										() => {
											this.remaining = this.limit;
											this.globalLimit = false;
											this.handle();
											this.resetTimeout = null;
										},
										Number(res.headers["retry-after"]) +
											this.client.options.restTimeOffset
									);
								} else if (
									err.status >= 500 &&
									err.status < 600
								) {
									this.queue.unshift(item);
									this.resetTimeout = this.client.setTimeout(
										() => {
											this.handle();
											this.resetTimeout = null;
										},
										1e3 + this.client.options.restTimeOffset
									);
								} else {
									item.reject(
										err.status >= 400 && err.status < 500
											? new DiscordAPIError(
													res.request.path,
													res.body,
													res.request.method
											  )
											: err
									);
									this.handle();
								}
							} else {
								if (this.remaining === 0) {
									if (this.client.listenerCount(RATE_LIMIT)) {
										this.client.emit(RATE_LIMIT, {
											limit: this.limit,
											timeDifference: this.timeDifference,
											path: item.request.path,
											method: item.request.method,
										});
									}
								}
								this.globalLimit = false;
								const data = res && res.body ? res.body : {};
								item.resolve(data);
								this.handle();
							}
						});
					}

					handle() {
						super.handle();
						if (this.queue.length === 0) return;
						if (
							(this.remaining <= 0 || this.globalLimit) &&
							Date.now() - this.timeDifference < this.resetTime
						)
							return;
						this.execute(this.queue.shift());
						this.remaining--;
						this.handle();
					}
				}

				module.exports = BurstRequestHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/rest/RequestHandlers/RequestHandler.js":
			/*!***********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/rest/RequestHandlers/RequestHandler.js ***!
  \***********************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/**
				 * A base class for different types of rate limiting handlers for the REST API.
				 * @private
				 */
				class RequestHandler {
					/**
					 * @param {RESTManager} restManager The REST manager to use
					 */
					constructor(restManager) {
						/**
						 * The RESTManager that instantiated this RequestHandler
						 * @type {RESTManager}
						 */
						this.restManager = restManager;

						/**
						 * A list of requests that have yet to be processed
						 * @type {APIRequest[]}
						 */
						this.queue = [];
					}

					/**
					 * Whether or not the client is being rate limited on every endpoint
					 * @type {boolean}
					 * @readonly
					 */
					get globalLimit() {
						return this.restManager.globallyRateLimited;
					}

					set globalLimit(value) {
						this.restManager.globallyRateLimited = value;
					}

					/**
					 * Push a new API request into this bucket.
					 * @param {APIRequest} request The new request to push into the queue
					 */
					push(request) {
						this.queue.push(request);
					}

					/**
					 * Attempts to get this RequestHandler to process its current queue.
					 */
					handle() {} // eslint-disable-line no-empty-function

					destroy() {
						this.queue = [];
					}
				}

				module.exports = RequestHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/rest/RequestHandlers/Sequential.js":
			/*!*******************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/rest/RequestHandlers/Sequential.js ***!
  \*******************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const RequestHandler = __webpack_require__(
					/*! ./RequestHandler */ "./node_modules/discord.js/src/client/rest/RequestHandlers/RequestHandler.js"
				);
				const DiscordAPIError = __webpack_require__(
					/*! ../DiscordAPIError */ "./node_modules/discord.js/src/client/rest/DiscordAPIError.js"
				);
				const {
					Events: {RATE_LIMIT},
				} = __webpack_require__(
					/*! ../../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				/**
				 * Handles API Requests sequentially, i.e. we wait until the current request is finished before moving onto
				 * the next. This plays a _lot_ nicer in terms of avoiding 429's when there is more than one session of the account,
				 * but it can be slower.
				 * @extends {RequestHandler}
				 * @private
				 */
				class SequentialRequestHandler extends RequestHandler {
					/**
					 * @param {RESTManager} restManager The REST manager to use
					 * @param {string} endpoint The endpoint to handle
					 */
					constructor(restManager, endpoint) {
						super(restManager, endpoint);

						/**
						 * The client that instantiated this handler
						 * @type {Client}
						 */
						this.client = restManager.client;

						/**
						 * The endpoint that this handler is handling
						 * @type {string}
						 */
						this.endpoint = endpoint;

						/**
						 * The time difference between Discord's Dates and the local computer's Dates. A positive number means the local
						 * computer's time is ahead of Discord's
						 * @type {number}
						 */
						this.timeDifference = 0;

						/**
						 * Whether the queue is being processed or not
						 * @type {boolean}
						 */
						this.busy = false;
					}

					push(request) {
						super.push(request);
						this.handle();
					}

					/**
					 * Performs a request then resolves a promise to indicate its readiness for a new request.
					 * @param {APIRequest} item The item to execute
					 * @returns {Promise<?Object|Error>}
					 */
					execute(item) {
						this.busy = true;
						return new Promise((resolve) => {
							item.request.gen().end((err, res) => {
								if (res && res.headers) {
									this.requestLimit = Number(
										res.headers["x-ratelimit-limit"]
									);
									this.requestResetTime =
										Number(
											res.headers["x-ratelimit-reset"]
										) * 1000;
									this.requestRemaining = Number(
										res.headers["x-ratelimit-remaining"]
									);
									this.timeDifference =
										Date.now() -
										new Date(res.headers.date).getTime();
								}
								if (err) {
									if (err.status === 429) {
										this.queue.unshift(item);
										this.restManager.client.setTimeout(
											() => {
												this.globalLimit = false;
												resolve();
											},
											Number(res.headers["retry-after"]) +
												this.restManager.client.options
													.restTimeOffset
										);
										if (res.headers["x-ratelimit-global"])
											this.globalLimit = true;
									} else if (
										err.status >= 500 &&
										err.status < 600
									) {
										this.queue.unshift(item);
										this.restManager.client.setTimeout(
											resolve,
											1e3 +
												this.restManager.client.options
													.restTimeOffset
										);
									} else {
										item.reject(
											err.status >= 400 &&
												err.status < 500
												? new DiscordAPIError(
														res.request.path,
														res.body,
														res.request.method
												  )
												: err
										);
										resolve(err);
									}
								} else {
									this.globalLimit = false;
									const data =
										res && res.body ? res.body : {};
									item.resolve(data);
									if (this.requestRemaining === 0) {
										if (
											this.client.listenerCount(
												RATE_LIMIT
											)
										) {
											/**
											 * Emitted when the client hits a rate limit while making a request
											 * @event Client#rateLimit
											 * @param {Object} rateLimitInfo Object containing the rate limit info
											 * @param {number} rateLimitInfo.requestLimit Number of requests that can be made to this endpoint
											 * @param {number} rateLimitInfo.timeDifference Delta-T in ms between your system and Discord servers
											 * @param {string} rateLimitInfo.method HTTP method used for request that triggered this event
											 * @param {string} rateLimitInfo.path Path used for request that triggered this event
											 */
											this.client.emit(RATE_LIMIT, {
												limit: this.requestLimit,
												timeDifference: this
													.timeDifference,
												path: item.request.path,
												method: item.request.method,
											});
										}
										this.restManager.client.setTimeout(
											() => resolve(data),
											this.requestResetTime -
												Date.now() +
												this.timeDifference +
												this.restManager.client.options
													.restTimeOffset
										);
									} else {
										resolve(data);
									}
								}
							});
						});
					}

					handle() {
						super.handle();
						if (
							this.busy ||
							this.remaining === 0 ||
							this.queue.length === 0 ||
							this.globalLimit
						)
							return;
						this.execute(this.queue.shift()).then(() => {
							this.busy = false;
							this.handle();
						});
					}
				}

				module.exports = SequentialRequestHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/rest/UserAgentManager.js":
			/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/rest/UserAgentManager.js ***!
  \*********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(process) {
					const Constants = __webpack_require__(
						/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
					);

					class UserAgentManager {
						constructor() {
							this.build(this.constructor.DEFAULT);
						}

						set({url, version} = {}) {
							this.build({
								url: url || this.constructor.DFEAULT.url,
								version:
									version || this.constructor.DEFAULT.version,
							});
						}

						build(ua) {
							this.userAgent = `DiscordBot (${ua.url}, ${
								ua.version
							}) Node.js/${process.version}`;
						}
					}

					UserAgentManager.DEFAULT = {
						url: Constants.Package.homepage.split("#")[0],
						version: Constants.Package.version,
					};

					module.exports = UserAgentManager;

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../../../process/browser.js */ "./node_modules/process/browser.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/WebSocketConnection.js":
			/*!*****************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/WebSocketConnection.js ***!
  \*****************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(Buffer) {
					const browser = typeof window !== "undefined";
					const EventEmitter = __webpack_require__(
						/*! events */ "./node_modules/events/events.js"
					);
					const Constants = __webpack_require__(
						/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
					);
					const zlib = __webpack_require__(
						/*! zlib */ "./node_modules/browserify-zlib/lib/index.js"
					);
					const PacketManager = __webpack_require__(
						/*! ./packets/WebSocketPacketManager */ "./node_modules/discord.js/src/client/websocket/packets/WebSocketPacketManager.js"
					);
					const erlpack = (function findErlpack() {
						try {
							const e = __webpack_require__(/*! erlpack */ 4);
							if (!e.pack) return null;
							return e;
						} catch (e) {
							return null;
						}
					})();

					const WebSocket = (function findWebSocket() {
						if (browser) return window.WebSocket; // eslint-disable-line no-undef
						try {
							return __webpack_require__(/*! uws */ 5);
						} catch (e) {
							return __webpack_require__(/*! ws */ 6);
						}
					})();

					/**
					 * Abstracts a WebSocket connection with decoding/encoding for the Discord gateway.
					 * @private
					 */
					class WebSocketConnection extends EventEmitter {
						/**
						 * @param {WebSocketManager} manager The WebSocket manager
						 * @param {string} gateway The WebSocket gateway to connect to
						 */
						constructor(manager, gateway) {
							super();
							/**
							 * The WebSocket Manager of this connection
							 * @type {WebSocketManager}
							 */
							this.manager = manager;

							/**
							 * The client this belongs to
							 * @type {Client}
							 */
							this.client = manager.client;

							/**
							 * The WebSocket connection itself
							 * @type {WebSocket}
							 */
							this.ws = null;

							/**
							 * The current sequence of the WebSocket
							 * @type {number}
							 */
							this.sequence = -1;

							/**
							 * The current status of the client
							 * @type {number}
							 */
							this.status = Constants.Status.IDLE;

							/**
							 * The Packet Manager of the connection
							 * @type {WebSocketPacketManager}
							 */
							this.packetManager = new PacketManager(this);

							/**
							 * The last time a ping was sent (a timestamp)
							 * @type {number}
							 */
							this.lastPingTimestamp = 0;

							/**
							 * Contains the rate limit queue and metadata
							 * @type {Object}
							 */
							this.ratelimit = {
								queue: [],
								remaining: 120,
								total: 120,
								time: 60e3,
								resetTimer: null,
							};
							this.connect(gateway);

							/**
							 * Events that are disabled (will not be processed)
							 * @type {Object}
							 */
							this.disabledEvents = {};

							/**
							 * The sequence on WebSocket close
							 * @type {number}
							 */
							this.closeSequence = 0;

							/**
							 * Whether or not the WebSocket is expecting to be closed
							 * @type {boolean}
							 */
							this.expectingClose = false;
							for (const event of this.client.options
								.disabledEvents)
								this.disabledEvents[event] = true;
						}

						/**
						 * Causes the client to be marked as ready and emits the ready event.
						 * @returns {void}
						 */
						triggerReady() {
							if (this.status === Constants.Status.READY) {
								this.debug(
									"Tried to mark self as ready, but already ready"
								);
								return;
							}
							/**
							 * Emitted when the client becomes ready to start working.
							 * @event Client#ready
							 */
							this.status = Constants.Status.READY;
							this.client.emit(Constants.Events.READY);
							this.packetManager.handleQueue();
						}

						/**
						 * Checks whether the client is ready to be marked as ready.
						 * @returns {void}
						 */
						checkIfReady() {
							if (
								this.status === Constants.Status.READY ||
								this.status === Constants.Status.NEARLY
							)
								return false;
							let unavailableGuilds = 0;
							for (const guild of this.client.guilds.values()) {
								if (!guild.available) unavailableGuilds++;
							}
							if (unavailableGuilds === 0) {
								this.status = Constants.Status.NEARLY;
								if (!this.client.options.fetchAllMembers)
									return this.triggerReady();
								// Fetch all members before marking self as ready
								const promises = this.client.guilds.map((g) =>
									g.fetchMembers()
								);
								Promise.all(promises)
									.then(() => this.triggerReady())
									.catch((e) => {
										this.debug(
											`Failed to fetch all members before ready! ${e}`
										);
										this.triggerReady();
									});
							}
							return true;
						}

						// Util
						/**
						 * Emits a debug message.
						 * @param {string} message Debug message
						 * @returns {void}
						 */
						debug(message) {
							if (message instanceof Error)
								message = message.stack;
							return this.manager.debug(
								`[connection] ${message}`
							);
						}

						/**
						 * Attempts to serialise data from the WebSocket.
						 * @param {string|Object} data Data to unpack
						 * @returns {Object}
						 */
						unpack(data) {
							if (data instanceof ArrayBuffer)
								data = Buffer.from(new Uint8Array(data));

							if (erlpack && typeof data !== "string")
								return erlpack.unpack(data);
							else if (data instanceof Buffer)
								data = zlib.inflateSync(data).toString();

							return JSON.parse(data);
						}

						/**
						 * Packs an object ready to be sent.
						 * @param {Object} data Data to pack
						 * @returns {string|Buffer}
						 */
						pack(data) {
							return erlpack
								? erlpack.pack(data)
								: JSON.stringify(data);
						}

						/**
						 * Processes the current WebSocket queue.
						 */
						processQueue() {
							if (this.ratelimit.remaining === 0) return;
							if (this.ratelimit.queue.length === 0) return;
							if (
								this.ratelimit.remaining ===
								this.ratelimit.total
							) {
								this.ratelimit.resetTimer = this.client.setTimeout(
									() => {
										this.ratelimit.remaining = this.ratelimit.total;
										this.processQueue();
									},
									this.ratelimit.time
								);
							}
							while (this.ratelimit.remaining > 0) {
								const item = this.ratelimit.queue.shift();
								if (!item) return;
								this._send(item);
								this.ratelimit.remaining--;
							}
						}

						/**
						 * Sends data, bypassing the queue.
						 * @param {Object} data Packet to send
						 * @returns {void}
						 */
						_send(data) {
							if (
								!this.ws ||
								this.ws.readyState !== WebSocket.OPEN
							) {
								this.debug(
									`Tried to send packet ${data} but no WebSocket is available!`
								);
								return;
							}
							this.ws.send(this.pack(data));
						}

						/**
						 * Adds data to the queue to be sent.
						 * @param {Object} data Packet to send
						 * @returns {void}
						 */
						send(data) {
							if (
								!this.ws ||
								this.ws.readyState !== WebSocket.OPEN
							) {
								this.debug(
									`Tried to send packet ${data} but no WebSocket is available!`
								);
								return;
							}
							this.ratelimit.queue.push(data);
							this.processQueue();
						}

						/**
						 * Creates a connection to a gateway.
						 * @param {string} gateway The gateway to connect to
						 * @param {number} [after=0] How long to wait before connecting
						 * @param {boolean} [force=false] Whether or not to force a new connection even if one already exists
						 * @returns {boolean}
						 */
						connect(
							gateway = this.gateway,
							after = 0,
							force = false
						) {
							if (after)
								return this.client.setTimeout(
									() => this.connect(gateway, 0, force),
									after
								); // eslint-disable-line
							if (this.ws && !force) {
								this.debug(
									"WebSocket connection already exists"
								);
								return false;
							} else if (typeof gateway !== "string") {
								this.debug(
									`Tried to connect to an invalid gateway: ${gateway}`
								);
								return false;
							}
							this.expectingClose = false;
							this.gateway = gateway;
							this.debug(`Connecting to ${gateway}`);
							const ws = (this.ws = new WebSocket(gateway));
							if (browser) ws.binaryType = "arraybuffer";
							ws.onmessage = this.onMessage.bind(this);
							ws.onopen = this.onOpen.bind(this);
							ws.onerror = this.onError.bind(this);
							ws.onclose = this.onClose.bind(this);
							this.status = Constants.Status.CONNECTING;
							return true;
						}

						/**
						 * Destroys the connection.
						 * @returns {boolean}
						 */
						destroy() {
							const ws = this.ws;
							if (!ws) {
								this.debug(
									"Attempted to destroy WebSocket but no connection exists!"
								);
								return false;
							}
							this.heartbeat(-1);
							this.expectingClose = true;
							ws.close(1000);
							this.packetManager.handleQueue();
							this.ws = null;
							this.status = Constants.Status.DISCONNECTED;
							this.ratelimit.remaining = this.ratelimit.total;
							return true;
						}

						/**
						 * Called whenever a message is received.
						 * @param {Event} event Event received
						 * @returns {boolean}
						 */
						onMessage(event) {
							let data;
							try {
								data = this.unpack(event.data);
							} catch (err) {
								this.emit("debug", err);
							}
							return this.onPacket(data);
						}

						/**
						 * Sets the current sequence of the connection.
						 * @param {number} s New sequence
						 */
						setSequence(s) {
							this.sequence =
								s > this.sequence ? s : this.sequence;
						}

						/**
						 * Called whenever a packet is received.
						 * @param {Object} packet Received packet
						 * @returns {boolean}
						 */
						onPacket(packet) {
							if (!packet) {
								this.debug("Received null packet");
								return false;
							}
							this.client.emit("raw", packet);
							switch (packet.op) {
								case Constants.OPCodes.HELLO:
									return this.heartbeat(
										packet.d.heartbeat_interval
									);
								case Constants.OPCodes.RECONNECT:
									return this.reconnect();
								case Constants.OPCodes.INVALID_SESSION:
									if (!packet.d) this.sessionID = null;
									this.sequence = -1;
									this.debug(
										"Session invalidated -- will identify with a new session"
									);
									return this.identify(packet.d ? 2500 : 0);
								case Constants.OPCodes.HEARTBEAT_ACK:
									return this.ackHeartbeat();
								case Constants.OPCodes.HEARTBEAT:
									return this.heartbeat();
								default:
									return this.packetManager.handle(packet);
							}
						}

						/**
						 * Called whenever a connection is opened to the gateway.
						 * @param {Event} event Received open event
						 */
						onOpen(event) {
							if (event && event.target && event.target.url)
								this.gateway = event.target.url;
							this.debug(`Connected to gateway ${this.gateway}`);
							this.identify();
						}

						/**
						 * Causes a reconnection to the gateway.
						 */
						reconnect() {
							this.debug("Attemping to reconnect in 5500ms...");
							/**
							 * Emitted whenever the client tries to reconnect to the WebSocket.
							 * @event Client#reconnecting
							 */
							this.client.emit(Constants.Events.RECONNECTING);
							this.connect(this.gateway, 5500, true);
						}

						/**
						 * Called whenever an error occurs with the WebSocket.
						 * @param {Error} error The error that occurred
						 */
						onError(error) {
							if (
								error &&
								error.message === "uWs client connection error"
							) {
								this.reconnect();
								return;
							}
							/**
							 * Emitted whenever the client's WebSocket encounters a connection error.
							 * @event Client#error
							 * @param {Error} error The encountered error
							 */
							this.client.emit(Constants.Events.ERROR, error);
						}

						/**
						 * @external CloseEvent
						 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}
						 */

						/**
						 * Called whenever a connection to the gateway is closed.
						 * @param {CloseEvent} event Close event that was received
						 */
						onClose(event) {
							this.debug(
								`${
									this.expectingClose ? "Client" : "Server"
								} closed the WebSocket connection: ${
									event.code
								}`
							);
							this.closeSequence = this.sequence;
							// Reset the state before trying to fix anything
							this.emit("close", event);
							this.heartbeat(-1);
							// Should we reconnect?
							if (
								event.code === 1000
									? this.expectingClose
									: Constants.WSCodes[event.code]
							) {
								this.expectingClose = false;
								/**
								 * Emitted when the client's WebSocket disconnects and will no longer attempt to reconnect.
								 * @event Client#disconnect
								 * @param {CloseEvent} event The WebSocket close event
								 */
								this.client.emit(
									Constants.Events.DISCONNECT,
									event
								);
								this.debug(Constants.WSCodes[event.code]);
								this.destroy();
								return;
							}
							this.expectingClose = false;
							this.reconnect();
						}

						// Heartbeat
						/**
						 * Acknowledges a heartbeat.
						 */
						ackHeartbeat() {
							this.debug(
								`Heartbeat acknowledged, latency of ${Date.now() -
									this.lastPingTimestamp}ms`
							);
							this.client._pong(this.lastPingTimestamp);
						}

						/**
						 * Sends a heartbeat or sets an interval for sending heartbeats.
						 * @param {number} [time] If -1, clears the interval, any other number sets an interval
						 * If no value is given, a heartbeat will be sent instantly
						 */
						heartbeat(time) {
							if (!isNaN(time)) {
								if (time === -1) {
									this.debug("Clearing heartbeat interval");
									this.client.clearInterval(
										this.heartbeatInterval
									);
									this.heartbeatInterval = null;
								} else {
									this.debug(
										`Setting a heartbeat interval for ${time}ms`
									);
									this.heartbeatInterval = this.client.setInterval(
										() => this.heartbeat(),
										time
									);
								}
								return;
							}
							this.debug("Sending a heartbeat");
							this.lastPingTimestamp = Date.now();
							this.send({
								op: Constants.OPCodes.HEARTBEAT,
								d: this.sequence,
							});
						}

						// Identification
						/**
						 * Identifies the client on a connection.
						 * @param {number} [after] How long to wait before identifying
						 * @returns {void}
						 */
						identify(after) {
							if (after)
								return this.client.setTimeout(
									this.identify.bind(this),
									after
								);
							return this.sessionID
								? this.identifyResume()
								: this.identifyNew();
						}

						/**
						 * Identifies as a new connection on the gateway.
						 * @returns {void}
						 */
						identifyNew() {
							if (!this.client.token) {
								this.debug(
									"No token available to identify a new session with"
								);
								return;
							}
							// Clone the generic payload and assign the token
							const d = Object.assign(
								{token: this.client.token},
								this.client.options.ws
							);

							// Sharding stuff
							const {shardId, shardCount} = this.client.options;
							if (shardCount > 0)
								d.shard = [Number(shardId), Number(shardCount)];

							// Send the payload
							this.debug("Identifying as a new session");
							this.send({op: Constants.OPCodes.IDENTIFY, d});
						}

						/**
						 * Resumes a session on the gateway.
						 * @returns {void}
						 */
						identifyResume() {
							if (!this.sessionID) {
								this.debug(
									"Warning: wanted to resume but session ID not available; identifying as a new session instead"
								);
								return this.identifyNew();
							}
							this.debug(
								`Attempting to resume session ${this.sessionID}`
							);

							const d = {
								token: this.client.token,
								session_id: this.sessionID,
								seq: this.sequence,
							};

							return this.send({
								op: Constants.OPCodes.RESUME,
								d,
							});
						}
					}

					/**
					 * Encoding the WebSocket connections will use.
					 * @type {string}
					 */
					WebSocketConnection.ENCODING = erlpack ? "etf" : "json";
					WebSocketConnection.WebSocket = WebSocket;

					module.exports = WebSocketConnection;

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../../../buffer/index.js */ "./node_modules/buffer/index.js"
					).Buffer
				));

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/WebSocketManager.js":
			/*!**************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/WebSocketManager.js ***!
  \**************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const EventEmitter = __webpack_require__(
					/*! events */ "./node_modules/events/events.js"
				).EventEmitter;
				const Constants = __webpack_require__(
					/*! ../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const WebSocketConnection = __webpack_require__(
					/*! ./WebSocketConnection */ "./node_modules/discord.js/src/client/websocket/WebSocketConnection.js"
				);

				/**
				 * WebSocket Manager of the client.
				 * @private
				 */
				class WebSocketManager extends EventEmitter {
					constructor(client) {
						super();
						/**
						 * The client that instantiated this WebSocketManager
						 * @type {Client}
						 */
						this.client = client;

						/**
						 * The WebSocket connection of this manager
						 * @type {?WebSocketConnection}
						 */
						this.connection = null;
					}

					/**
					 * Sends a heartbeat on the available connection.
					 * @returns {void}
					 */
					heartbeat() {
						if (!this.connection)
							return this.debug("No connection to heartbeat");
						return this.connection.heartbeat();
					}

					/**
					 * Emits a debug event.
					 * @param {string} message Debug message
					 * @returns {void}
					 */
					debug(message) {
						return this.client.emit("debug", `[ws] ${message}`);
					}

					/**
					 * Destroy the client.
					 * @returns {void} Whether or not destruction was successful
					 */
					destroy() {
						if (!this.connection) {
							this.debug(
								"Attempted to destroy WebSocket but no connection exists!"
							);
							return false;
						}
						return this.connection.destroy();
					}

					/**
					 * Send a packet on the available WebSocket.
					 * @param {Object} packet Packet to send
					 * @returns {void}
					 */
					send(packet) {
						if (!this.connection) {
							this.debug("No connection to websocket");
							return;
						}
						this.connection.send(packet);
					}

					/**
					 * Connects the client to a gateway.
					 * @param {string} gateway The gateway to connect to
					 * @returns {boolean}
					 */
					connect(gateway) {
						if (!this.connection) {
							this.connection = new WebSocketConnection(
								this,
								gateway
							);
							return true;
						}
						switch (this.connection.status) {
							case Constants.Status.IDLE:
							case Constants.Status.DISCONNECTED:
								this.connection.connect(gateway, 5500);
								return true;
							default:
								this.debug(
									`Couldn't connect to ${gateway} as the websocket is at state ${
										this.connection.status
									}`
								);
								return false;
						}
					}
				}

				module.exports = WebSocketManager;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/WebSocketPacketManager.js":
			/*!****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/WebSocketPacketManager.js ***!
  \****************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Constants = __webpack_require__(
					/*! ../../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				const BeforeReadyWhitelist = [
					Constants.WSEvents.READY,
					Constants.WSEvents.RESUMED,
					Constants.WSEvents.GUILD_CREATE,
					Constants.WSEvents.GUILD_DELETE,
					Constants.WSEvents.GUILD_MEMBERS_CHUNK,
					Constants.WSEvents.GUILD_MEMBER_ADD,
					Constants.WSEvents.GUILD_MEMBER_REMOVE,
				];

				class WebSocketPacketManager {
					constructor(connection) {
						this.ws = connection;
						this.handlers = {};
						this.queue = [];

						this.register(
							Constants.WSEvents.READY,
							__webpack_require__(
								/*! ./handlers/Ready */ "./node_modules/discord.js/src/client/websocket/packets/handlers/Ready.js"
							)
						);
						this.register(
							Constants.WSEvents.RESUMED,
							__webpack_require__(
								/*! ./handlers/Resumed */ "./node_modules/discord.js/src/client/websocket/packets/handlers/Resumed.js"
							)
						);
						this.register(
							Constants.WSEvents.GUILD_CREATE,
							__webpack_require__(
								/*! ./handlers/GuildCreate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildCreate.js"
							)
						);
						this.register(
							Constants.WSEvents.GUILD_DELETE,
							__webpack_require__(
								/*! ./handlers/GuildDelete */ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildDelete.js"
							)
						);
						this.register(
							Constants.WSEvents.GUILD_UPDATE,
							__webpack_require__(
								/*! ./handlers/GuildUpdate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildUpdate.js"
							)
						);
						this.register(
							Constants.WSEvents.GUILD_BAN_ADD,
							__webpack_require__(
								/*! ./handlers/GuildBanAdd */ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildBanAdd.js"
							)
						);
						this.register(
							Constants.WSEvents.GUILD_BAN_REMOVE,
							__webpack_require__(
								/*! ./handlers/GuildBanRemove */ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildBanRemove.js"
							)
						);
						this.register(
							Constants.WSEvents.GUILD_MEMBER_ADD,
							__webpack_require__(
								/*! ./handlers/GuildMemberAdd */ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildMemberAdd.js"
							)
						);
						this.register(
							Constants.WSEvents.GUILD_MEMBER_REMOVE,
							__webpack_require__(
								/*! ./handlers/GuildMemberRemove */ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildMemberRemove.js"
							)
						);
						this.register(
							Constants.WSEvents.GUILD_MEMBER_UPDATE,
							__webpack_require__(
								/*! ./handlers/GuildMemberUpdate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildMemberUpdate.js"
							)
						);
						this.register(
							Constants.WSEvents.GUILD_ROLE_CREATE,
							__webpack_require__(
								/*! ./handlers/GuildRoleCreate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildRoleCreate.js"
							)
						);
						this.register(
							Constants.WSEvents.GUILD_ROLE_DELETE,
							__webpack_require__(
								/*! ./handlers/GuildRoleDelete */ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildRoleDelete.js"
							)
						);
						this.register(
							Constants.WSEvents.GUILD_ROLE_UPDATE,
							__webpack_require__(
								/*! ./handlers/GuildRoleUpdate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildRoleUpdate.js"
							)
						);
						this.register(
							Constants.WSEvents.GUILD_EMOJIS_UPDATE,
							__webpack_require__(
								/*! ./handlers/GuildEmojisUpdate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildEmojisUpdate.js"
							)
						);
						this.register(
							Constants.WSEvents.GUILD_MEMBERS_CHUNK,
							__webpack_require__(
								/*! ./handlers/GuildMembersChunk */ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildMembersChunk.js"
							)
						);
						this.register(
							Constants.WSEvents.CHANNEL_CREATE,
							__webpack_require__(
								/*! ./handlers/ChannelCreate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/ChannelCreate.js"
							)
						);
						this.register(
							Constants.WSEvents.CHANNEL_DELETE,
							__webpack_require__(
								/*! ./handlers/ChannelDelete */ "./node_modules/discord.js/src/client/websocket/packets/handlers/ChannelDelete.js"
							)
						);
						this.register(
							Constants.WSEvents.CHANNEL_UPDATE,
							__webpack_require__(
								/*! ./handlers/ChannelUpdate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/ChannelUpdate.js"
							)
						);
						this.register(
							Constants.WSEvents.CHANNEL_PINS_UPDATE,
							__webpack_require__(
								/*! ./handlers/ChannelPinsUpdate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/ChannelPinsUpdate.js"
							)
						);
						this.register(
							Constants.WSEvents.PRESENCE_UPDATE,
							__webpack_require__(
								/*! ./handlers/PresenceUpdate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/PresenceUpdate.js"
							)
						);
						this.register(
							Constants.WSEvents.USER_UPDATE,
							__webpack_require__(
								/*! ./handlers/UserUpdate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/UserUpdate.js"
							)
						);
						this.register(
							Constants.WSEvents.USER_NOTE_UPDATE,
							__webpack_require__(
								/*! ./handlers/UserNoteUpdate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/UserNoteUpdate.js"
							)
						);
						this.register(
							Constants.WSEvents.USER_SETTINGS_UPDATE,
							__webpack_require__(
								/*! ./handlers/UserSettingsUpdate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/UserSettingsUpdate.js"
							)
						);
						this.register(
							Constants.WSEvents.USER_GUILD_SETTINGS_UPDATE,
							__webpack_require__(
								/*! ./handlers/UserGuildSettingsUpdate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/UserGuildSettingsUpdate.js"
							)
						);
						this.register(
							Constants.WSEvents.VOICE_STATE_UPDATE,
							__webpack_require__(
								/*! ./handlers/VoiceStateUpdate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/VoiceStateUpdate.js"
							)
						);
						this.register(
							Constants.WSEvents.TYPING_START,
							__webpack_require__(
								/*! ./handlers/TypingStart */ "./node_modules/discord.js/src/client/websocket/packets/handlers/TypingStart.js"
							)
						);
						this.register(
							Constants.WSEvents.MESSAGE_CREATE,
							__webpack_require__(
								/*! ./handlers/MessageCreate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/MessageCreate.js"
							)
						);
						this.register(
							Constants.WSEvents.MESSAGE_DELETE,
							__webpack_require__(
								/*! ./handlers/MessageDelete */ "./node_modules/discord.js/src/client/websocket/packets/handlers/MessageDelete.js"
							)
						);
						this.register(
							Constants.WSEvents.MESSAGE_UPDATE,
							__webpack_require__(
								/*! ./handlers/MessageUpdate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/MessageUpdate.js"
							)
						);
						this.register(
							Constants.WSEvents.MESSAGE_DELETE_BULK,
							__webpack_require__(
								/*! ./handlers/MessageDeleteBulk */ "./node_modules/discord.js/src/client/websocket/packets/handlers/MessageDeleteBulk.js"
							)
						);
						this.register(
							Constants.WSEvents.VOICE_SERVER_UPDATE,
							__webpack_require__(
								/*! ./handlers/VoiceServerUpdate */ "./node_modules/discord.js/src/client/websocket/packets/handlers/VoiceServerUpdate.js"
							)
						);
						this.register(
							Constants.WSEvents.GUILD_SYNC,
							__webpack_require__(
								/*! ./handlers/GuildSync */ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildSync.js"
							)
						);
						this.register(
							Constants.WSEvents.RELATIONSHIP_ADD,
							__webpack_require__(
								/*! ./handlers/RelationshipAdd */ "./node_modules/discord.js/src/client/websocket/packets/handlers/RelationshipAdd.js"
							)
						);
						this.register(
							Constants.WSEvents.RELATIONSHIP_REMOVE,
							__webpack_require__(
								/*! ./handlers/RelationshipRemove */ "./node_modules/discord.js/src/client/websocket/packets/handlers/RelationshipRemove.js"
							)
						);
						this.register(
							Constants.WSEvents.MESSAGE_REACTION_ADD,
							__webpack_require__(
								/*! ./handlers/MessageReactionAdd */ "./node_modules/discord.js/src/client/websocket/packets/handlers/MessageReactionAdd.js"
							)
						);
						this.register(
							Constants.WSEvents.MESSAGE_REACTION_REMOVE,
							__webpack_require__(
								/*! ./handlers/MessageReactionRemove */ "./node_modules/discord.js/src/client/websocket/packets/handlers/MessageReactionRemove.js"
							)
						);
						this.register(
							Constants.WSEvents.MESSAGE_REACTION_REMOVE_ALL,
							__webpack_require__(
								/*! ./handlers/MessageReactionRemoveAll */ "./node_modules/discord.js/src/client/websocket/packets/handlers/MessageReactionRemoveAll.js"
							)
						);
					}

					get client() {
						return this.ws.client;
					}

					register(event, Handler) {
						this.handlers[event] = new Handler(this);
					}

					handleQueue() {
						this.queue.forEach((element, index) => {
							this.handle(this.queue[index], true);
							this.queue.splice(index, 1);
						});
					}

					handle(packet, queue = false) {
						if (packet.op === Constants.OPCodes.HEARTBEAT_ACK) {
							this.ws.client._pong(this.ws.client._pingTimestamp);
							this.ws.lastHeartbeatAck = true;
							this.ws.client.emit(
								"debug",
								"Heartbeat acknowledged"
							);
						} else if (packet.op === Constants.OPCodes.HEARTBEAT) {
							this.client.ws.send({
								op: Constants.OPCodes.HEARTBEAT,
								d: this.client.ws.sequence,
							});
							this.ws.client.emit(
								"debug",
								"Received gateway heartbeat"
							);
						}

						if (this.ws.status === Constants.Status.RECONNECTING) {
							this.ws.reconnecting = false;
							this.ws.checkIfReady();
						}

						this.ws.setSequence(packet.s);

						if (this.ws.disabledEvents[packet.t] !== undefined)
							return false;

						if (this.ws.status !== Constants.Status.READY) {
							if (BeforeReadyWhitelist.indexOf(packet.t) === -1) {
								this.queue.push(packet);
								return false;
							}
						}

						if (!queue && this.queue.length > 0) this.handleQueue();
						if (this.handlers[packet.t])
							return this.handlers[packet.t].handle(packet);
						return false;
					}
				}

				module.exports = WebSocketPacketManager;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js":
			/*!******************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js ***!
  \******************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				class AbstractHandler {
					constructor(packetManager) {
						this.packetManager = packetManager;
					}

					handle(packet) {
						return packet;
					}
				}

				module.exports = AbstractHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/ChannelCreate.js":
			/*!****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/ChannelCreate.js ***!
  \****************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class ChannelCreateHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.actions.ChannelCreate.handle(data);
					}
				}

				/**
				 * Emitted whenever a channel is created.
				 * @event Client#channelCreate
				 * @param {Channel} channel The channel that was created
				 */

				module.exports = ChannelCreateHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/ChannelDelete.js":
			/*!****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/ChannelDelete.js ***!
  \****************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				const Constants = __webpack_require__(
					/*! ../../../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class ChannelDeleteHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						const response = client.actions.ChannelDelete.handle(
							data
						);
						if (response.channel)
							client.emit(
								Constants.Events.CHANNEL_DELETE,
								response.channel
							);
					}
				}

				/**
				 * Emitted whenever a channel is deleted.
				 * @event Client#channelDelete
				 * @param {Channel} channel The channel that was deleted
				 */

				module.exports = ChannelDeleteHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/ChannelPinsUpdate.js":
			/*!********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/ChannelPinsUpdate.js ***!
  \********************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);
				const Constants = __webpack_require__(
					/*! ../../../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				/*
{ t: 'CHANNEL_PINS_UPDATE',
  s: 666,
  op: 0,
  d:
   { last_pin_timestamp: '2016-08-28T17:37:13.171774+00:00',
     channel_id: '314866471639044027' } }
*/

				class ChannelPinsUpdate extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						const channel = client.channels.get(data.channel_id);
						const time = new Date(data.last_pin_timestamp);
						if (channel && time)
							client.emit(
								Constants.Events.CHANNEL_PINS_UPDATE,
								channel,
								time
							);
					}
				}

				/**
				 * Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event, not much information
				 * can be provided easily here - you need to manually check the pins yourself.
				 * @event Client#channelPinsUpdate
				 * @param {Channel} channel The channel that the pins update occured in
				 * @param {Date} time The time of the pins update
				 */

				module.exports = ChannelPinsUpdate;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/ChannelUpdate.js":
			/*!****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/ChannelUpdate.js ***!
  \****************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class ChannelUpdateHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.actions.ChannelUpdate.handle(data);
					}
				}

				module.exports = ChannelUpdateHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildBanAdd.js":
			/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildBanAdd.js ***!
  \**************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				// ##untested handler##

				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);
				const Constants = __webpack_require__(
					/*! ../../../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class GuildBanAddHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						const guild = client.guilds.get(data.guild_id);
						const user = client.users.get(data.user.id);
						if (guild && user)
							client.emit(
								Constants.Events.GUILD_BAN_ADD,
								guild,
								user
							);
					}
				}

				/**
				 * Emitted whenever a member is banned from a guild.
				 * @event Client#guildBanAdd
				 * @param {Guild} guild The guild that the ban occurred in
				 * @param {User} user The user that was banned
				 */

				module.exports = GuildBanAddHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildBanRemove.js":
			/*!*****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildBanRemove.js ***!
  \*****************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				// ##untested handler##

				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class GuildBanRemoveHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.actions.GuildBanRemove.handle(data);
					}
				}

				/**
				 * Emitted whenever a member is unbanned from a guild.
				 * @event Client#guildBanRemove
				 * @param {Guild} guild The guild that the unban occurred in
				 * @param {User} user The user that was unbanned
				 */

				module.exports = GuildBanRemoveHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildCreate.js":
			/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildCreate.js ***!
  \**************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class GuildCreateHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;

						const guild = client.guilds.get(data.id);
						if (guild) {
							if (!guild.available && !data.unavailable) {
								// A newly available guild
								guild.setup(data);
								this.packetManager.ws.checkIfReady();
							}
						} else {
							// A new guild
							client.dataManager.newGuild(data);
						}
					}
				}

				module.exports = GuildCreateHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildDelete.js":
			/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildDelete.js ***!
  \**************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);
				const Constants = __webpack_require__(
					/*! ../../../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class GuildDeleteHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						const response = client.actions.GuildDelete.handle(
							data
						);
						if (response.guild)
							client.emit(
								Constants.Events.GUILD_DELETE,
								response.guild
							);
					}
				}

				/**
				 * Emitted whenever a guild is deleted/left.
				 * @event Client#guildDelete
				 * @param {Guild} guild The guild that was deleted
				 */

				module.exports = GuildDeleteHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildEmojisUpdate.js":
			/*!********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildEmojisUpdate.js ***!
  \********************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class GuildEmojisUpdate extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.actions.GuildEmojisUpdate.handle(data);
					}
				}

				module.exports = GuildEmojisUpdate;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildMemberAdd.js":
			/*!*****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildMemberAdd.js ***!
  \*****************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				// ##untested handler##

				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class GuildMemberAddHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						const guild = client.guilds.get(data.guild_id);
						if (guild) {
							guild.memberCount++;
							guild._addMember(data);
						}
					}
				}

				module.exports = GuildMemberAddHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildMemberRemove.js":
			/*!********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildMemberRemove.js ***!
  \********************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				// ##untested handler##

				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class GuildMemberRemoveHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.actions.GuildMemberRemove.handle(data);
					}
				}

				module.exports = GuildMemberRemoveHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildMemberUpdate.js":
			/*!********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildMemberUpdate.js ***!
  \********************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				// ##untested handler##

				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class GuildMemberUpdateHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;

						const guild = client.guilds.get(data.guild_id);
						if (guild) {
							const member = guild.members.get(data.user.id);
							if (member) guild._updateMember(member, data);
						}
					}
				}

				module.exports = GuildMemberUpdateHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildMembersChunk.js":
			/*!********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildMembersChunk.js ***!
  \********************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);
				const Constants = __webpack_require__(
					/*! ../../../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				// Uncomment in v12
				// const Collection = require('../../../../util/Collection');

				class GuildMembersChunkHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						const guild = client.guilds.get(data.guild_id);
						if (!guild) return;

						// Uncomment in v12
						// const members = new Collection();
						//
						// for (const member of data.members) members.set(member.id, guild._addMember(member, false));

						const members = data.members.map((member) =>
							guild._addMember(member, false)
						);

						client.emit(
							Constants.Events.GUILD_MEMBERS_CHUNK,
							members,
							guild
						);

						client.ws.lastHeartbeatAck = true;
					}
				}

				/**
				 * Emitted whenever a chunk of guild members is received (all members come from the same guild).
				 * @event Client#guildMembersChunk
				 * @param {GuildMember[]} members The members in the chunk
				 * @param {Guild} guild The guild related to the member chunk
				 */

				module.exports = GuildMembersChunkHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildRoleCreate.js":
			/*!******************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildRoleCreate.js ***!
  \******************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class GuildRoleCreateHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.actions.GuildRoleCreate.handle(data);
					}
				}

				module.exports = GuildRoleCreateHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildRoleDelete.js":
			/*!******************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildRoleDelete.js ***!
  \******************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class GuildRoleDeleteHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.actions.GuildRoleDelete.handle(data);
					}
				}

				module.exports = GuildRoleDeleteHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildRoleUpdate.js":
			/*!******************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildRoleUpdate.js ***!
  \******************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class GuildRoleUpdateHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.actions.GuildRoleUpdate.handle(data);
					}
				}

				module.exports = GuildRoleUpdateHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildSync.js":
			/*!************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildSync.js ***!
  \************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class GuildSyncHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.actions.GuildSync.handle(data);
					}
				}

				module.exports = GuildSyncHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/GuildUpdate.js":
			/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildUpdate.js ***!
  \**************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class GuildUpdateHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.actions.GuildUpdate.handle(data);
					}
				}

				module.exports = GuildUpdateHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/MessageCreate.js":
			/*!****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/MessageCreate.js ***!
  \****************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);
				const Constants = __webpack_require__(
					/*! ../../../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class MessageCreateHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						const response = client.actions.MessageCreate.handle(
							data
						);
						if (response.message)
							client.emit(
								Constants.Events.MESSAGE_CREATE,
								response.message
							);
					}
				}

				/**
				 * Emitted whenever a message is created.
				 * @event Client#message
				 * @param {Message} message The created message
				 */

				module.exports = MessageCreateHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/MessageDelete.js":
			/*!****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/MessageDelete.js ***!
  \****************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);
				const Constants = __webpack_require__(
					/*! ../../../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class MessageDeleteHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						const response = client.actions.MessageDelete.handle(
							data
						);
						if (response.message)
							client.emit(
								Constants.Events.MESSAGE_DELETE,
								response.message
							);
					}
				}

				/**
				 * Emitted whenever a message is deleted.
				 * @event Client#messageDelete
				 * @param {Message} message The deleted message
				 */

				module.exports = MessageDeleteHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/MessageDeleteBulk.js":
			/*!********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/MessageDeleteBulk.js ***!
  \********************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class MessageDeleteBulkHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.actions.MessageDeleteBulk.handle(data);
					}
				}

				/**
				 * Emitted whenever messages are deleted in bulk.
				 * @event Client#messageDeleteBulk
				 * @param {Collection<Snowflake, Message>} messages The deleted messages, mapped by their ID
				 */

				module.exports = MessageDeleteBulkHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/MessageReactionAdd.js":
			/*!*********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/MessageReactionAdd.js ***!
  \*********************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class MessageReactionAddHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.actions.MessageReactionAdd.handle(data);
					}
				}

				module.exports = MessageReactionAddHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/MessageReactionRemove.js":
			/*!************************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/MessageReactionRemove.js ***!
  \************************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class MessageReactionRemove extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.actions.MessageReactionRemove.handle(data);
					}
				}

				module.exports = MessageReactionRemove;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/MessageReactionRemoveAll.js":
			/*!***************************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/MessageReactionRemoveAll.js ***!
  \***************************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class MessageReactionRemoveAll extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.actions.MessageReactionRemoveAll.handle(data);
					}
				}

				module.exports = MessageReactionRemoveAll;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/MessageUpdate.js":
			/*!****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/MessageUpdate.js ***!
  \****************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class MessageUpdateHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.actions.MessageUpdate.handle(data);
					}
				}

				module.exports = MessageUpdateHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/PresenceUpdate.js":
			/*!*****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/PresenceUpdate.js ***!
  \*****************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);
				const Constants = __webpack_require__(
					/*! ../../../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Util = __webpack_require__(
					/*! ../../../../util/Util */ "./node_modules/discord.js/src/util/Util.js"
				);

				class PresenceUpdateHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						let user = client.users.get(data.user.id);
						const guild = client.guilds.get(data.guild_id);

						// Step 1
						if (!user) {
							if (data.user.username) {
								user = client.dataManager.newUser(data.user);
							} else {
								return;
							}
						}

						const oldUser = Util.cloneObject(user);
						user.patch(data.user);
						if (!user.equals(oldUser)) {
							client.emit(
								Constants.Events.USER_UPDATE,
								oldUser,
								user
							);
						}

						if (guild) {
							let member = guild.members.get(user.id);
							if (!member && data.status !== "offline") {
								member = guild._addMember(
									{
										user,
										roles: data.roles,
										deaf: false,
										mute: false,
									},
									false
								);
								client.emit(
									Constants.Events.GUILD_MEMBER_AVAILABLE,
									member
								);
							}
							if (member) {
								if (
									client.listenerCount(
										Constants.Events.PRESENCE_UPDATE
									) === 0
								) {
									guild._setPresence(user.id, data);
									return;
								}
								const oldMember = Util.cloneObject(member);
								if (member.presence) {
									oldMember.frozenPresence = Util.cloneObject(
										member.presence
									);
								}
								guild._setPresence(user.id, data);
								client.emit(
									Constants.Events.PRESENCE_UPDATE,
									oldMember,
									member
								);
							} else {
								guild._setPresence(user.id, data);
							}
						}
					}
				}

				/**
				 * Emitted whenever a guild member's presence changes, or they change one of their details.
				 * @event Client#presenceUpdate
				 * @param {GuildMember} oldMember The member before the presence update
				 * @param {GuildMember} newMember The member after the presence update
				 */

				/**
				 * Emitted whenever a user's details (e.g. username) are changed.
				 * @event Client#userUpdate
				 * @param {User} oldUser The user before the update
				 * @param {User} newUser The user after the update
				 */

				/**
				 * Emitted whenever a member becomes available in a large guild.
				 * @event Client#guildMemberAvailable
				 * @param {GuildMember} member The member that became available
				 */

				module.exports = PresenceUpdateHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/Ready.js":
			/*!********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/Ready.js ***!
  \********************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				const ClientUser = __webpack_require__(
					/*! ../../../../structures/ClientUser */ "./node_modules/discord.js/src/structures/ClientUser.js"
				);

				class ReadyHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;

						client.ws.heartbeat();

						data.user.user_settings = data.user_settings;
						data.user.user_guild_settings =
							data.user_guild_settings;

						const clientUser = new ClientUser(client, data.user);
						client.user = clientUser;
						client.readyAt = new Date();
						client.users.set(clientUser.id, clientUser);

						for (const guild of data.guilds)
							if (!client.guilds.has(guild.id))
								client.dataManager.newGuild(guild);
						for (const privateDM of data.private_channels)
							client.dataManager.newChannel(privateDM);

						for (const relation of data.relationships) {
							const user = client.dataManager.newUser(
								relation.user
							);
							if (relation.type === 1) {
								client.user.friends.set(user.id, user);
							} else if (relation.type === 2) {
								client.user.blocked.set(user.id, user);
							}
						}

						data.presences = data.presences || [];
						for (const presence of data.presences) {
							client.dataManager.newUser(presence.user);
							client._setPresence(presence.user.id, presence);
						}

						if (data.notes) {
							for (const user in data.notes) {
								let note = data.notes[user];
								if (!note.length) note = null;

								client.user.notes.set(user, note);
							}
						}

						if (!client.user.bot && client.options.sync)
							client.setInterval(
								client.syncGuilds.bind(client),
								30000
							);

						if (!client.users.has("1")) {
							client.dataManager.newUser({
								id: "1",
								username: "Clyde",
								discriminator: "0000",
								avatar:
									"https://discordapp.com/assets/f78426a064bc9dd24847519259bc42af.png",
								bot: true,
								status: "online",
								game: null,
								verified: true,
							});
						}

						const t = client.setTimeout(() => {
							client.ws.connection.triggerReady();
						}, 1200 * data.guilds.length);

						client.setMaxListeners(data.guilds.length + 10);

						client.once("ready", () => {
							client.syncGuilds();
							client.setMaxListeners(10);
							client.clearTimeout(t);
						});

						const ws = this.packetManager.ws;

						ws.sessionID = data.session_id;
						ws._trace = data._trace;
						client.emit(
							"debug",
							`READY ${ws._trace.join(" -> ")} ${ws.sessionID}`
						);
						ws.checkIfReady();
					}
				}

				module.exports = ReadyHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/RelationshipAdd.js":
			/*!******************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/RelationshipAdd.js ***!
  \******************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class RelationshipAddHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						if (data.type === 1) {
							client.fetchUser(data.id).then((user) => {
								client.user.friends.set(user.id, user);
							});
						} else if (data.type === 2) {
							client.fetchUser(data.id).then((user) => {
								client.user.blocked.set(user.id, user);
							});
						}
					}
				}

				module.exports = RelationshipAddHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/RelationshipRemove.js":
			/*!*********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/RelationshipRemove.js ***!
  \*********************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class RelationshipRemoveHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						if (data.type === 2) {
							if (client.user.blocked.has(data.id)) {
								client.user.blocked.delete(data.id);
							}
						} else if (data.type === 1) {
							if (client.user.friends.has(data.id)) {
								client.user.friends.delete(data.id);
							}
						}
					}
				}

				module.exports = RelationshipRemoveHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/Resumed.js":
			/*!**********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/Resumed.js ***!
  \**********************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);
				const Constants = __webpack_require__(
					/*! ../../../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class ResumedHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const ws = client.ws.connection;

						ws._trace = packet.d._trace;

						ws.status = Constants.Status.READY;
						this.packetManager.handleQueue();

						const replayed = ws.sequence - ws.closeSequence;

						ws.debug(
							`RESUMED ${ws._trace.join(
								" -> "
							)} | replayed ${replayed} events.`
						);
						client.emit(Constants.Events.RESUME, replayed);
						ws.heartbeat();
					}
				}

				/**
				 * Emitted whenever a WebSocket resumes.
				 * @event Client#resume
				 * @param {number} replayed The number of events that were replayed
				 */

				module.exports = ResumedHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/TypingStart.js":
			/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/TypingStart.js ***!
  \**************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);
				const Constants = __webpack_require__(
					/*! ../../../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class TypingStartHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						const channel = client.channels.get(data.channel_id);
						const user = client.users.get(data.user_id);
						const timestamp = new Date(data.timestamp * 1000);

						if (channel && user) {
							if (channel.type === "voice") {
								client.emit(
									Constants.Events.WARN,
									`Discord sent a typing packet to voice channel ${
										channel.id
									}`
								);
								return;
							}
							if (channel._typing.has(user.id)) {
								const typing = channel._typing.get(user.id);
								typing.lastTimestamp = timestamp;
								typing.resetTimeout(tooLate(channel, user));
							} else {
								channel._typing.set(
									user.id,
									new TypingData(
										client,
										timestamp,
										timestamp,
										tooLate(channel, user)
									)
								);
								client.emit(
									Constants.Events.TYPING_START,
									channel,
									user
								);
							}
						}
					}
				}

				class TypingData {
					constructor(client, since, lastTimestamp, _timeout) {
						this.client = client;
						this.since = since;
						this.lastTimestamp = lastTimestamp;
						this._timeout = _timeout;
					}

					resetTimeout(_timeout) {
						this.client.clearTimeout(this._timeout);
						this._timeout = _timeout;
					}

					get elapsedTime() {
						return Date.now() - this.since;
					}
				}

				function tooLate(channel, user) {
					return channel.client.setTimeout(() => {
						channel.client.emit(
							Constants.Events.TYPING_STOP,
							channel,
							user,
							channel._typing.get(user.id)
						);
						channel._typing.delete(user.id);
					}, 6000);
				}

				/**
				 * Emitted whenever a user starts typing in a channel.
				 * @event Client#typingStart
				 * @param {Channel} channel The channel the user started typing in
				 * @param {User} user The user that started typing
				 */

				/**
				 * Emitted whenever a user stops typing in a channel.
				 * @event Client#typingStop
				 * @param {Channel} channel The channel the user stopped typing in
				 * @param {User} user The user that stopped typing
				 */

				module.exports = TypingStartHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/UserGuildSettingsUpdate.js":
			/*!**************************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/UserGuildSettingsUpdate.js ***!
  \**************************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);
				const Constants = __webpack_require__(
					/*! ../../../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const ClientUserGuildSettings = __webpack_require__(
					/*! ../../../../structures/ClientUserGuildSettings */ "./node_modules/discord.js/src/structures/ClientUserGuildSettings.js"
				);

				class UserGuildSettingsUpdateHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const settings = client.user.guildSettings.get(
							packet.d.guild_id
						);
						if (settings) settings.patch(packet.d);
						else
							client.user.guildSettings.set(
								packet.d.guild_id,
								new ClientUserGuildSettings(packet.d, client)
							);
						client.emit(
							Constants.Events.USER_GUILD_SETTINGS_UPDATE,
							client.user.guildSettings.get(packet.d.guild_id)
						);
					}
				}

				/**
				 * Emitted whenever the client user's settings update.
				 * @event Client#clientUserGuildSettingsUpdate
				 * @param {ClientUserGuildSettings} clientUserGuildSettings The new client user guild settings
				 */

				module.exports = UserGuildSettingsUpdateHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/UserNoteUpdate.js":
			/*!*****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/UserNoteUpdate.js ***!
  \*****************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class UserNoteUpdateHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;

						client.actions.UserNoteUpdate.handle(data);
					}
				}

				module.exports = UserNoteUpdateHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/UserSettingsUpdate.js":
			/*!*********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/UserSettingsUpdate.js ***!
  \*********************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);
				const Constants = __webpack_require__(
					/*! ../../../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				class UserSettingsUpdateHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						client.user.settings.patch(packet.d);
						client.emit(
							Constants.Events.USER_SETTINGS_UPDATE,
							client.user.settings
						);
					}
				}

				/**
				 * Emitted when the client user's settings update.
				 * @event Client#clientUserSettingsUpdate
				 * @param {ClientUserSettings} clientUserSettings The new client user settings
				 */

				module.exports = UserSettingsUpdateHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/UserUpdate.js":
			/*!*************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/UserUpdate.js ***!
  \*************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				class UserUpdateHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.actions.UserUpdate.handle(data);
					}
				}

				module.exports = UserUpdateHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/VoiceServerUpdate.js":
			/*!********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/VoiceServerUpdate.js ***!
  \********************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				/*
{
    "token": "my_token",
    "guild_id": "41771983423143937",
    "endpoint": "smart.loyal.discord.gg"
}
*/

				class VoiceServerUpdate extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;
						client.emit("self.voiceServer", data);
					}
				}

				module.exports = VoiceServerUpdate;

				/***/
			},

		/***/ "./node_modules/discord.js/src/client/websocket/packets/handlers/VoiceStateUpdate.js":
			/*!*******************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/VoiceStateUpdate.js ***!
  \*******************************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const AbstractHandler = __webpack_require__(
					/*! ./AbstractHandler */ "./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js"
				);

				const Constants = __webpack_require__(
					/*! ../../../../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Util = __webpack_require__(
					/*! ../../../../util/Util */ "./node_modules/discord.js/src/util/Util.js"
				);

				class VoiceStateUpdateHandler extends AbstractHandler {
					handle(packet) {
						const client = this.packetManager.client;
						const data = packet.d;

						const guild = client.guilds.get(data.guild_id);
						if (guild) {
							const member = guild.members.get(data.user_id);
							if (member) {
								const oldVoiceChannelMember = Util.cloneObject(
									member
								);
								if (
									member.voiceChannel &&
									member.voiceChannel.id !== data.channel_id
								) {
									member.voiceChannel.members.delete(
										oldVoiceChannelMember.id
									);
								}

								// If the member left the voice channel, unset their speaking property
								if (!data.channel_id) member.speaking = null;

								if (
									member.user.id === client.user.id &&
									data.channel_id
								) {
									client.emit("self.voiceStateUpdate", data);
								}

								const newChannel = client.channels.get(
									data.channel_id
								);
								if (newChannel) {
									newChannel.members.set(member.id, member);
									member.guild.channels.set(
										data.channel_id,
										newChannel
									);
								}

								member.serverMute = data.mute;
								member.serverDeaf = data.deaf;
								member.selfMute = data.self_mute;
								member.selfDeaf = data.self_deaf;
								member.voiceSessionID = data.session_id;
								member.voiceChannelID = data.channel_id;
								client.emit(
									Constants.Events.VOICE_STATE_UPDATE,
									oldVoiceChannelMember,
									member
								);
							}
						}
					}
				}

				/**
				 * Emitted whenever a user changes voice state - e.g. joins/leaves a channel, mutes/unmutes.
				 * @event Client#voiceStateUpdate
				 * @param {GuildMember} oldMember The member before the voice state update
				 * @param {GuildMember} newMember The member after the voice state update
				 */

				module.exports = VoiceStateUpdateHandler;

				/***/
			},

		/***/ "./node_modules/discord.js/src/index.js":
			/*!**********************************************!*\
  !*** ./node_modules/discord.js/src/index.js ***!
  \**********************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Util = __webpack_require__(
					/*! ./util/Util */ "./node_modules/discord.js/src/util/Util.js"
				);

				module.exports = {
					// "Root" classes (starting points)
					Client: __webpack_require__(
						/*! ./client/Client */ "./node_modules/discord.js/src/client/Client.js"
					),
					Shard: __webpack_require__(/*! ./sharding/Shard */ 10),
					ShardClientUtil: __webpack_require__(
						/*! ./sharding/ShardClientUtil */ 11
					),
					ShardingManager: __webpack_require__(
						/*! ./sharding/ShardingManager */ 12
					),
					WebhookClient: __webpack_require__(
						/*! ./client/WebhookClient */ "./node_modules/discord.js/src/client/WebhookClient.js"
					),

					// Utilities
					Collection: __webpack_require__(
						/*! ./util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
					),
					Constants: __webpack_require__(
						/*! ./util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
					),
					DiscordAPIError: __webpack_require__(
						/*! ./client/rest/DiscordAPIError */ "./node_modules/discord.js/src/client/rest/DiscordAPIError.js"
					),
					EvaluatedPermissions: __webpack_require__(
						/*! ./util/Permissions */ "./node_modules/discord.js/src/util/Permissions.js"
					),
					Permissions: __webpack_require__(
						/*! ./util/Permissions */ "./node_modules/discord.js/src/util/Permissions.js"
					),
					Snowflake: __webpack_require__(
						/*! ./util/Snowflake */ "./node_modules/discord.js/src/util/Snowflake.js"
					),
					SnowflakeUtil: __webpack_require__(
						/*! ./util/Snowflake */ "./node_modules/discord.js/src/util/Snowflake.js"
					),
					Util: Util,
					util: Util,
					version: __webpack_require__(
						/*! ../package */ "./node_modules/discord.js/package.json"
					).version,

					// Shortcuts to Util methods
					escapeMarkdown: Util.escapeMarkdown,
					fetchRecommendedShards: Util.fetchRecommendedShards,
					splitMessage: Util.splitMessage,

					// Structures
					Attachment: __webpack_require__(
						/*! ./structures/Attachment */ "./node_modules/discord.js/src/structures/Attachment.js"
					),
					CategoryChannel: __webpack_require__(
						/*! ./structures/CategoryChannel */ "./node_modules/discord.js/src/structures/CategoryChannel.js"
					),
					Channel: __webpack_require__(
						/*! ./structures/Channel */ "./node_modules/discord.js/src/structures/Channel.js"
					),
					ClientUser: __webpack_require__(
						/*! ./structures/ClientUser */ "./node_modules/discord.js/src/structures/ClientUser.js"
					),
					ClientUserSettings: __webpack_require__(
						/*! ./structures/ClientUserSettings */ "./node_modules/discord.js/src/structures/ClientUserSettings.js"
					),
					Collector: __webpack_require__(
						/*! ./structures/interfaces/Collector */ "./node_modules/discord.js/src/structures/interfaces/Collector.js"
					),
					DMChannel: __webpack_require__(
						/*! ./structures/DMChannel */ "./node_modules/discord.js/src/structures/DMChannel.js"
					),
					Emoji: __webpack_require__(
						/*! ./structures/Emoji */ "./node_modules/discord.js/src/structures/Emoji.js"
					),
					Game: __webpack_require__(
						/*! ./structures/Presence */ "./node_modules/discord.js/src/structures/Presence.js"
					).Game,
					GroupDMChannel: __webpack_require__(
						/*! ./structures/GroupDMChannel */ "./node_modules/discord.js/src/structures/GroupDMChannel.js"
					),
					Guild: __webpack_require__(
						/*! ./structures/Guild */ "./node_modules/discord.js/src/structures/Guild.js"
					),
					GuildAuditLogs: __webpack_require__(
						/*! ./structures/GuildAuditLogs */ "./node_modules/discord.js/src/structures/GuildAuditLogs.js"
					),
					GuildChannel: __webpack_require__(
						/*! ./structures/GuildChannel */ "./node_modules/discord.js/src/structures/GuildChannel.js"
					),
					GuildMember: __webpack_require__(
						/*! ./structures/GuildMember */ "./node_modules/discord.js/src/structures/GuildMember.js"
					),
					Invite: __webpack_require__(
						/*! ./structures/Invite */ "./node_modules/discord.js/src/structures/Invite.js"
					),
					Message: __webpack_require__(
						/*! ./structures/Message */ "./node_modules/discord.js/src/structures/Message.js"
					),
					MessageAttachment: __webpack_require__(
						/*! ./structures/MessageAttachment */ "./node_modules/discord.js/src/structures/MessageAttachment.js"
					),
					MessageCollector: __webpack_require__(
						/*! ./structures/MessageCollector */ "./node_modules/discord.js/src/structures/MessageCollector.js"
					),
					MessageEmbed: __webpack_require__(
						/*! ./structures/MessageEmbed */ "./node_modules/discord.js/src/structures/MessageEmbed.js"
					),
					MessageMentions: __webpack_require__(
						/*! ./structures/MessageMentions */ "./node_modules/discord.js/src/structures/MessageMentions.js"
					),
					MessageReaction: __webpack_require__(
						/*! ./structures/MessageReaction */ "./node_modules/discord.js/src/structures/MessageReaction.js"
					),
					OAuth2Application: __webpack_require__(
						/*! ./structures/OAuth2Application */ "./node_modules/discord.js/src/structures/OAuth2Application.js"
					),
					ClientOAuth2Application: __webpack_require__(
						/*! ./structures/OAuth2Application */ "./node_modules/discord.js/src/structures/OAuth2Application.js"
					),
					PartialGuild: __webpack_require__(
						/*! ./structures/PartialGuild */ "./node_modules/discord.js/src/structures/PartialGuild.js"
					),
					PartialGuildChannel: __webpack_require__(
						/*! ./structures/PartialGuildChannel */ "./node_modules/discord.js/src/structures/PartialGuildChannel.js"
					),
					PermissionOverwrites: __webpack_require__(
						/*! ./structures/PermissionOverwrites */ "./node_modules/discord.js/src/structures/PermissionOverwrites.js"
					),
					Presence: __webpack_require__(
						/*! ./structures/Presence */ "./node_modules/discord.js/src/structures/Presence.js"
					).Presence,
					ReactionEmoji: __webpack_require__(
						/*! ./structures/ReactionEmoji */ "./node_modules/discord.js/src/structures/ReactionEmoji.js"
					),
					ReactionCollector: __webpack_require__(
						/*! ./structures/ReactionCollector */ "./node_modules/discord.js/src/structures/ReactionCollector.js"
					),
					RichEmbed: __webpack_require__(
						/*! ./structures/RichEmbed */ "./node_modules/discord.js/src/structures/RichEmbed.js"
					),
					Role: __webpack_require__(
						/*! ./structures/Role */ "./node_modules/discord.js/src/structures/Role.js"
					),
					TextChannel: __webpack_require__(
						/*! ./structures/TextChannel */ "./node_modules/discord.js/src/structures/TextChannel.js"
					),
					User: __webpack_require__(
						/*! ./structures/User */ "./node_modules/discord.js/src/structures/User.js"
					),
					VoiceChannel: __webpack_require__(
						/*! ./structures/VoiceChannel */ "./node_modules/discord.js/src/structures/VoiceChannel.js"
					),
					Webhook: __webpack_require__(
						/*! ./structures/Webhook */ "./node_modules/discord.js/src/structures/Webhook.js"
					),
				};

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/Attachment.js":
			/*!**************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Attachment.js ***!
  \**************************************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/**
				 * Represents an attachment in a message.
				 * @param {BufferResolvable|Stream} file The file
				 * @param {string} [name] The name of the file, if any
				 */
				class Attachment {
					constructor(file, name) {
						this.file = null;
						if (name) this.setAttachment(file, name);
						else this._attach(file);
					}

					/**
					 * The name of the file
					 * @type {?string}
					 * @readonly
					 */
					get name() {
						return this.file.name;
					}

					/**
					 * The file
					 * @type {?BufferResolvable|Stream}
					 * @readonly
					 */
					get attachment() {
						return this.file.attachment;
					}

					/**
					 * Set the file of this attachment.
					 * @param {BufferResolvable|Stream} file The file
					 * @param {string} name The name of the file
					 * @returns {Attachment} This attachment
					 */
					setAttachment(file, name) {
						this.file = {attachment: file, name};
						return this;
					}

					/**
					 * Set the file of this attachment.
					 * @param {BufferResolvable|Stream} attachment The file
					 * @returns {Attachment} This attachment
					 */
					setFile(attachment) {
						this.file = {attachment};
						return this;
					}

					/**
					 * Set the name of this attachment.
					 * @param {string} name The name of the image
					 * @returns {Attachment} This attachment
					 */
					setName(name) {
						this.file.name = name;
						return this;
					}

					/**
					 * Set the file of this attachment.
					 * @param {BufferResolvable|Stream} file The file
					 * @param {string} name The name of the file
					 * @returns {void}
					 * @private
					 */
					_attach(file, name) {
						if (typeof file === "string") this.file = file;
						else this.setAttachment(file, name);
					}
				}

				module.exports = Attachment;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/CategoryChannel.js":
			/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/CategoryChannel.js ***!
  \*******************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const GuildChannel = __webpack_require__(
					/*! ./GuildChannel */ "./node_modules/discord.js/src/structures/GuildChannel.js"
				);

				/**
				 * Represents a guild category channel on Discord.
				 * @extends {GuildChannel}
				 */
				class CategoryChannel extends GuildChannel {
					constructor(guild, data) {
						super(guild, data);
						this.type = "category";
					}
					/**
					 * The channels that are part of this category
					 * @type {?Collection<Snowflake, GuildChannel>}
					 * @readonly
					 */
					get children() {
						return this.guild.channels.filter(
							(c) => c.parentID === this.id
						);
					}
				}

				module.exports = CategoryChannel;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/Channel.js":
			/*!***********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Channel.js ***!
  \***********************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Snowflake = __webpack_require__(
					/*! ../util/Snowflake */ "./node_modules/discord.js/src/util/Snowflake.js"
				);

				/**
				 * Represents any channel on Discord.
				 */
				class Channel {
					constructor(client, data) {
						/**
						 * The client that instantiated the Channel
						 * @name Channel#client
						 * @type {Client}
						 * @readonly
						 */
						Object.defineProperty(this, "client", {value: client});

						/**
						 * The type of the channel, either:
						 * * `dm` - a DM channel
						 * * `group` - a Group DM channel
						 * * `text` - a guild text channel
						 * * `voice` - a guild voice channel
						 * * `category` - a guild category channel
						 * @type {string}
						 */
						this.type = null;

						/**
						 * Whether the channel has been deleted
						 * @type {boolean}
						 */
						this.deleted = false;

						if (data) this.setup(data);
					}

					setup(data) {
						/**
						 * The unique ID of the channel
						 * @type {Snowflake}
						 */
						this.id = data.id;
					}

					/**
					 * The timestamp the channel was created at
					 * @type {number}
					 * @readonly
					 */
					get createdTimestamp() {
						return Snowflake.deconstruct(this.id).timestamp;
					}

					/**
					 * The time the channel was created
					 * @type {Date}
					 * @readonly
					 */
					get createdAt() {
						return new Date(this.createdTimestamp);
					}

					/**
					 * Deletes the channel.
					 * @returns {Promise<Channel>}
					 * @example
					 * // Delete the channel
					 * channel.delete()
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					delete() {
						return this.client.rest.methods.deleteChannel(this);
					}
				}

				module.exports = Channel;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/ClientUser.js":
			/*!**************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ClientUser.js ***!
  \**************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const User = __webpack_require__(
					/*! ./User */ "./node_modules/discord.js/src/structures/User.js"
				);
				const Collection = __webpack_require__(
					/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);
				const ClientUserSettings = __webpack_require__(
					/*! ./ClientUserSettings */ "./node_modules/discord.js/src/structures/ClientUserSettings.js"
				);
				const ClientUserGuildSettings = __webpack_require__(
					/*! ./ClientUserGuildSettings */ "./node_modules/discord.js/src/structures/ClientUserGuildSettings.js"
				);
				const Constants = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const util = __webpack_require__(
					/*! util */ "./node_modules/util/util.js"
				);

				/**
				 * Represents the logged in client's Discord user.
				 * @extends {User}
				 */
				class ClientUser extends User {
					setup(data) {
						super.setup(data);

						/**
						 * Whether or not this account has been verified
						 * @type {boolean}
						 */
						this.verified = data.verified;

						/**
						 * The email of this account
						 * <warn>This is only filled when using a user account.</warn>
						 * @type {?string}
						 */
						this.email = data.email;
						this.localPresence = {};
						this._typing = new Map();

						/**
						 * A Collection of friends for the logged in user
						 * <warn>This is only filled when using a user account.</warn>
						 * @type {Collection<Snowflake, User>}
						 */
						this.friends = new Collection();

						/**
						 * A Collection of blocked users for the logged in user
						 * <warn>This is only filled when using a user account.</warn>
						 * @type {Collection<Snowflake, User>}
						 */
						this.blocked = new Collection();

						/**
						 * A Collection of notes for the logged in user
						 * <warn>This is only filled when using a user account.</warn>
						 * @type {Collection<Snowflake, string>}
						 */
						this.notes = new Collection();

						/**
						 * If the user has Discord premium (nitro)
						 * <warn>This is only filled when using a user account.</warn>
						 * @type {?boolean}
						 */
						this.premium =
							typeof data.premium === "boolean"
								? data.premium
								: null;

						/**
						 * If the user has MFA enabled on their account
						 * <warn>This is only filled when using a user account.</warn>
						 * @type {?boolean}
						 */
						this.mfaEnabled =
							typeof data.mfa_enabled === "boolean"
								? data.mfa_enabled
								: null;

						/**
						 * If the user has ever used a mobile device on Discord
						 * <warn>This is only filled when using a user account.</warn>
						 * @type {?boolean}
						 */
						this.mobile =
							typeof data.mobile === "boolean"
								? data.mobile
								: null;

						/**
						 * Various settings for this user
						 * <warn>This is only filled when using a user account.</warn>
						 * @type {?ClientUserSettings}
						 */
						this.settings = data.user_settings
							? new ClientUserSettings(this, data.user_settings)
							: null;

						/**
						 * All of the user's guild settings
						 * <warn>This is only filled when using a user account</warn>
						 * @type {Collection<Snowflake, ClientUserGuildSettings>}
						 */
						this.guildSettings = new Collection();
						if (data.user_guild_settings) {
							for (const settings of data.user_guild_settings) {
								this.guildSettings.set(
									settings.guild_id,
									new ClientUserGuildSettings(
										settings,
										this.client
									)
								);
							}
						}
					}

					edit(data) {
						return this.client.rest.methods.updateCurrentUser(data);
					}

					/**
					 * Set the username of the logged in client.
					 * <info>Changing usernames in Discord is heavily rate limited, with only 2 requests
					 * every hour. Use this sparingly!</info>
					 * @param {string} username The new username
					 * @param {string} [password] Current password (only for user accounts)
					 * @returns {Promise<ClientUser>}
					 * @example
					 * // Set username
					 * client.user.setUsername('discordjs')
					 *   .then(user => console.log(`My new username is ${user.username}`))
					 *   .catch(console.error);
					 */
					setUsername(username, password) {
						return this.client.rest.methods.updateCurrentUser(
							{username},
							password
						);
					}

					/**
					 * Changes the email for the client user's account.
					 * <warn>This is only available when using a user account.</warn>
					 * @param {string} email New email to change to
					 * @param {string} password Current password
					 * @returns {Promise<ClientUser>}
					 * @example
					 * // Set email
					 * client.user.setEmail('bob@gmail.com', 'some amazing password 123')
					 *   .then(user => console.log(`My new email is ${user.email}`))
					 *   .catch(console.error);
					 */
					setEmail(email, password) {
						return this.client.rest.methods.updateCurrentUser(
							{email},
							password
						);
					}

					/**
					 * Changes the password for the client user's account.
					 * <warn>This is only available when using a user account.</warn>
					 * @param {string} newPassword New password to change to
					 * @param {string} oldPassword Current password
					 * @returns {Promise<ClientUser>}
					 * @example
					 * // Set password
					 * client.user.setPassword('some new amazing password 456', 'some amazing password 123')
					 *   .then(user => console.log('New password set!'))
					 *   .catch(console.error);
					 */
					setPassword(newPassword, oldPassword) {
						return this.client.rest.methods.updateCurrentUser(
							{password: newPassword},
							oldPassword
						);
					}

					/**
					 * Set the avatar of the logged in client.
					 * @param {BufferResolvable|Base64Resolvable} avatar The new avatar
					 * @returns {Promise<ClientUser>}
					 * @example
					 * // Set avatar
					 * client.user.setAvatar('./avatar.png')
					 *   .then(user => console.log(`New avatar set!`))
					 *   .catch(console.error);
					 */
					setAvatar(avatar) {
						return this.client.resolver
							.resolveImage(avatar)
							.then((data) =>
								this.client.rest.methods.updateCurrentUser({
									avatar: data,
								})
							);
					}

					/**
					 * Data resembling a raw Discord presence.
					 * @typedef {Object} PresenceData
					 * @property {PresenceStatus} [status] Status of the user
					 * @property {boolean} [afk] Whether the user is AFK
					 * @property {Object} [game] Game the user is playing
					 * @property {string} [game.name] Name of the game
					 * @property {string} [game.url] Twitch stream URL
					 * @property {?ActivityType|number} [game.type] Type of the activity
					 */

					/**
					 * Sets the full presence of the client user.
					 * @param {PresenceData} data Data for the presence
					 * @returns {Promise<ClientUser>}
					 * @example
					 * // Set the client user's presence
					 * client.user.setPresence({ game: { name: 'with discord.js' }, status: 'idle' })
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					setPresence(data) {
						// {"op":3,"d":{"status":"dnd","since":0,"game":null,"afk":false}}
						return new Promise((resolve) => {
							let status =
								this.localPresence.status ||
								this.presence.status;
							let game = this.localPresence.game;
							let afk =
								this.localPresence.afk || this.presence.afk;

							if (!game && this.presence.game) {
								game = {
									name: this.presence.game.name,
									type: this.presence.game.type,
									url: this.presence.game.url,
								};
							}

							if (data.status) {
								if (typeof data.status !== "string")
									throw new TypeError(
										"Status must be a string"
									);
								if (this.bot) {
									status = data.status;
								} else {
									this.settings.update(
										Constants.UserSettingsMap.status,
										data.status
									);
									status = "invisible";
								}
							}

							if (data.game) {
								game = data.game;
								game.type =
									game.url && typeof game.type === "undefined"
										? 1
										: game.type || 0;
								if (typeof game.type === "string") {
									game.type = Constants.ActivityTypes.indexOf(
										game.type.toUpperCase()
									);
								}
							} else if (typeof data.game !== "undefined") {
								game = null;
							}

							if (typeof data.afk !== "undefined") afk = data.afk;
							afk = Boolean(afk);

							this.localPresence = {status, game, afk};
							this.localPresence.since = 0;
							this.localPresence.game =
								this.localPresence.game || null;

							this.client.ws.send({
								op: 3,
								d: this.localPresence,
							});

							this.client._setPresence(
								this.id,
								this.localPresence
							);

							resolve(this);
						});
					}

					/**
					 * A user's status. Must be one of:
					 * * `online`
					 * * `idle`
					 * * `invisible`
					 * * `dnd` (do not disturb)
					 * @typedef {string} PresenceStatus
					 */

					/**
					 * Sets the status of the client user.
					 * @param {PresenceStatus} status Status to change to
					 * @returns {Promise<ClientUser>}
					 * @example
					 * // Set the client user's status
					 * client.user.setStatus('idle')
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					setStatus(status) {
						return this.setPresence({status});
					}

					/**
					 * Sets the game the client user is playing.
					 * @param {?string} game Game being played
					 * @param {?string} [streamingURL] Twitch stream URL
					 * @returns {Promise<ClientUser>}
					 * @deprecated
					 */
					setGame(game, streamingURL) {
						if (!game) return this.setPresence({game: null});
						return this.setPresence({
							game: {
								name: game,
								url: streamingURL,
							},
						});
					}

					/**
					 * Sets the activity the client user is playing.
					 * @param {?string} name Activity being played
					 * @param {Object} [options] Options for setting the activity
					 * @param {string} [options.url] Twitch stream URL
					 * @param {ActivityType|number} [options.type] Type of the activity
					 * @returns {Promise<Presence>}
					 * @example
					 * client.user.setActivity('YouTube', { type: 'WATCHING' })
					 *   .then(presence => console.log(`Activity set to ${presence.game ? presence.game.name : 'none'}`))
					 *   .catch(console.error);
					 */
					setActivity(name, {url, type} = {}) {
						if (!name) return this.setPresence({game: null});
						return this.setPresence({
							game: {name, type, url},
						}).then((clientUser) => clientUser.presence);
					}

					/**
					 * Sets/removes the AFK flag for the client user.
					 * @param {boolean} afk Whether or not the user is AFK
					 * @returns {Promise<ClientUser>}
					 */
					setAFK(afk) {
						return this.setPresence({afk});
					}

					/**
					 * Fetches messages that mentioned the client's user.
					 * <warn>This is only available when using a user account.</warn>
					 * @param {Object} [options] Options for the fetch
					 * @param {number} [options.limit=25] Maximum number of mentions to retrieve
					 * @param {boolean} [options.roles=true] Whether to include role mentions
					 * @param {boolean} [options.everyone=true] Whether to include everyone/here mentions
					 * @param {GuildResolvable} [options.guild] Limit the search to a specific guild
					 * @returns {Promise<Message[]>}
					 * @example
					 * // Fetch mentions
					 * client.user.fetchMentions()
					 *   .then(console.log)
					 *   .catch(console.error);
					 * @example
					 * // Fetch mentions from a guild
					 * client.user.fetchMentions({ guild: '222078108977594368' })
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					fetchMentions(options = {}) {
						return this.client.rest.methods.fetchMentions(options);
					}

					/**
					 * Send a friend request.
					 * <warn>This is only available when using a user account.</warn>
					 * @param {UserResolvable} user The user to send the friend request to
					 * @returns {Promise<User>} The user the friend request was sent to
					 */
					addFriend(user) {
						user = this.client.resolver.resolveUser(user);
						return this.client.rest.methods.addFriend(user);
					}

					/**
					 * Remove a friend.
					 * <warn>This is only available when using a user account.</warn>
					 * @param {UserResolvable} user The user to remove from your friends
					 * @returns {Promise<User>} The user that was removed
					 */
					removeFriend(user) {
						user = this.client.resolver.resolveUser(user);
						return this.client.rest.methods.removeFriend(user);
					}

					/**
					 * Creates a guild.
					 * <warn>This is only available to bots in less than 10 guilds and user accounts.</warn>
					 * @param {string} name The name of the guild
					 * @param {string} [region] The region for the server
					 * @param {BufferResolvable|Base64Resolvable} [icon=null] The icon for the guild
					 * @returns {Promise<Guild>} The guild that was created
					 */
					createGuild(name, region, icon = null) {
						if (
							typeof icon === "string" &&
							icon.startsWith("data:")
						) {
							return this.client.rest.methods.createGuild({
								name,
								icon,
								region,
							});
						} else {
							return this.client.resolver
								.resolveImage(icon)
								.then((data) =>
									this.client.rest.methods.createGuild({
										name,
										icon: data,
										region,
									})
								);
						}
					}

					/**
					 * An object containing either a user or access token, and an optional nickname.
					 * @typedef {Object} GroupDMRecipientOptions
					 * @property {UserResolvable|Snowflake} [user] User to add to the Group DM
					 * (only available if a user is creating the DM)
					 * @property {string} [accessToken] Access token to use to add a user to the Group DM
					 * (only available if a bot is creating the DM)
					 * @property {string} [nick] Permanent nickname (only available if a bot is creating the DM)
					 */

					/**
					 * Creates a Group DM.
					 * @param {GroupDMRecipientOptions[]} recipients The recipients
					 * @returns {Promise<GroupDMChannel>}
					 * @example
					 * // Create a Group DM with a token provided from OAuth
					 * client.user.createGroupDM([{
					 *   user: '66564597481480192',
					 *   accessToken: token
					 * }])
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					createGroupDM(recipients) {
						return this.client.rest.methods.createGroupDM({
							recipients: recipients.map((u) =>
								this.client.resolver.resolveUserID(u.user)
							),
							accessTokens: recipients.map((u) => u.accessToken),
							nicks: recipients.reduce((o, r) => {
								if (r.nick)
									o[r.user ? r.user.id : r.id] = r.nick;
								return o;
							}, {}),
						});
					}

					/**
					 * Accepts an invite to join a guild.
					 * <warn>This is only available when using a user account.</warn>
					 * @param {Invite|string} invite Invite or code to accept
					 * @returns {Promise<Guild>} Joined guild
					 */
					acceptInvite(invite) {
						return this.client.rest.methods.acceptInvite(invite);
					}
				}

				ClientUser.prototype.setGame = util.deprecate(
					ClientUser.prototype.setGame,
					"ClientUser#setGame: use ClientUser#setActivity instead"
				);

				ClientUser.prototype.addFriend = util.deprecate(
					ClientUser.prototype.addFriend,
					"ClientUser#addFriend: userbot methods will be removed"
				);

				ClientUser.prototype.removeFriend = util.deprecate(
					ClientUser.prototype.removeFriend,
					"ClientUser#removeFriend: userbot methods will be removed"
				);

				ClientUser.prototype.setPassword = util.deprecate(
					ClientUser.prototype.setPassword,
					"ClientUser#setPassword: userbot methods will be removed"
				);

				ClientUser.prototype.setEmail = util.deprecate(
					ClientUser.prototype.setEmail,
					"ClientUser#setEmail: userbot methods will be removed"
				);

				ClientUser.prototype.fetchMentions = util.deprecate(
					ClientUser.prototype.fetchMentions,
					"ClientUser#fetchMentions: userbot methods will be removed"
				);

				module.exports = ClientUser;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/ClientUserChannelOverride.js":
			/*!*****************************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ClientUserChannelOverride.js ***!
  \*****************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Constants = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				/**
				 * A wrapper around the ClientUser's channel overrides.
				 */
				class ClientUserChannelOverride {
					constructor(data) {
						this.patch(data);
					}

					/**
					 * Patch the data contained in this class with new partial data.
					 * @param {Object} data Data to patch this with
					 * @returns {void}
					 * @private
					 */
					patch(data) {
						for (const key of Object.keys(
							Constants.UserChannelOverrideMap
						)) {
							const value = Constants.UserChannelOverrideMap[key];
							if (!data.hasOwnProperty(key)) continue;
							if (typeof value === "function") {
								this[value.name] = value(data[key]);
							} else {
								this[value] = data[key];
							}
						}
					}
				}

				module.exports = ClientUserChannelOverride;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/ClientUserGuildSettings.js":
			/*!***************************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ClientUserGuildSettings.js ***!
  \***************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Constants = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Collection = __webpack_require__(
					/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);
				const ClientUserChannelOverride = __webpack_require__(
					/*! ./ClientUserChannelOverride */ "./node_modules/discord.js/src/structures/ClientUserChannelOverride.js"
				);

				/**
				 * A wrapper around the ClientUser's guild settings.
				 */
				class ClientUserGuildSettings {
					constructor(data, client) {
						/**
						 * The client that created the instance of the ClientUserGuildSettings
						 * @name ClientUserGuildSettings#client
						 * @type {Client}
						 * @readonly
						 */
						Object.defineProperty(this, "client", {value: client});
						/**
						 * The ID of the guild this settings are for
						 * @type {Snowflake}
						 */
						this.guildID = data.guild_id;
						this.channelOverrides = new Collection();
						this.patch(data);
					}

					/**
					 * Patch the data contained in this class with new partial data.
					 * @param {Object} data Data to patch this with
					 * @returns {void}
					 * @private
					 */
					patch(data) {
						for (const key of Object.keys(
							Constants.UserGuildSettingsMap
						)) {
							const value = Constants.UserGuildSettingsMap[key];
							if (!data.hasOwnProperty(key)) continue;
							if (key === "channel_overrides") {
								for (const channel of data[key]) {
									this.channelOverrides.set(
										channel.channel_id,
										new ClientUserChannelOverride(channel)
									);
								}
							} else if (typeof value === "function") {
								this[value.name] = value(data[key]);
							} else {
								this[value] = data[key];
							}
						}
					}

					/**
					 * Update a specific property of the guild settings.
					 * @param {string} name Name of property
					 * @param {value} value Value to patch
					 * @returns {Promise<Object>}
					 */
					update(name, value) {
						return this.client.rest.methods.patchClientUserGuildSettings(
							this.guildID,
							{[name]: value}
						);
					}
				}

				module.exports = ClientUserGuildSettings;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/ClientUserSettings.js":
			/*!**********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ClientUserSettings.js ***!
  \**********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Constants = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Util = __webpack_require__(
					/*! ../util/Util */ "./node_modules/discord.js/src/util/Util.js"
				);

				/**
				 * A wrapper around the ClientUser's settings.
				 */
				class ClientUserSettings {
					constructor(user, data) {
						this.user = user;
						this.patch(data);
					}

					/**
					 * Patch the data contained in this class with new partial data.
					 * @param {Object} data Data to patch this with
					 * @returns {void}
					 * @private
					 */
					patch(data) {
						for (const key of Object.keys(
							Constants.UserSettingsMap
						)) {
							const value = Constants.UserSettingsMap[key];
							if (!data.hasOwnProperty(key)) continue;
							if (typeof value === "function") {
								this[value.name] = value(data[key]);
							} else {
								this[value] = data[key];
							}
						}
					}

					/**
					 * Update a specific property of of user settings.
					 * @param {string} name Name of property
					 * @param {*} value Value to patch
					 * @returns {Promise<Object>}
					 */
					update(name, value) {
						return this.user.client.rest.methods.patchUserSettings({
							[name]: value,
						});
					}

					/**
					 * Sets the position at which this guild will appear in the Discord client.
					 * @param {Guild} guild The guild to move
					 * @param {number} position Absolute or relative position
					 * @param {boolean} [relative=false] Whether to position relatively or absolutely
					 * @returns {Promise<Guild>}
					 */
					setGuildPosition(guild, position, relative) {
						const temp = Object.assign([], this.guildPositions);
						Util.moveElementInArray(
							temp,
							guild.id,
							position,
							relative
						);
						return this.update("guild_positions", temp).then(
							() => guild
						);
					}

					/**
					 * Add a guild to the list of restricted guilds.
					 * @param {Guild} guild The guild to add
					 * @returns {Promise<Guild>}
					 */
					addRestrictedGuild(guild) {
						const temp = Object.assign([], this.restrictedGuilds);
						if (temp.includes(guild.id))
							return Promise.reject(
								new Error("Guild is already restricted")
							);
						temp.push(guild.id);
						return this.update("restricted_guilds", temp).then(
							() => guild
						);
					}

					/**
					 * Remove a guild from the list of restricted guilds.
					 * @param {Guild} guild The guild to remove
					 * @returns {Promise<Guild>}
					 */
					removeRestrictedGuild(guild) {
						const temp = Object.assign([], this.restrictedGuilds);
						const index = temp.indexOf(guild.id);
						if (index < 0)
							return Promise.reject(
								new Error("Guild is not restricted")
							);
						temp.splice(index, 1);
						return this.update("restricted_guilds", temp).then(
							() => guild
						);
					}
				}

				module.exports = ClientUserSettings;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/DMChannel.js":
			/*!*************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/DMChannel.js ***!
  \*************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Channel = __webpack_require__(
					/*! ./Channel */ "./node_modules/discord.js/src/structures/Channel.js"
				);
				const TextBasedChannel = __webpack_require__(
					/*! ./interfaces/TextBasedChannel */ "./node_modules/discord.js/src/structures/interfaces/TextBasedChannel.js"
				);
				const Collection = __webpack_require__(
					/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);

				/**
				 * Represents a direct message channel between two users.
				 * @extends {Channel}
				 * @implements {TextBasedChannel}
				 */
				class DMChannel extends Channel {
					constructor(client, data) {
						super(client, data);
						this.type = "dm";
						this.messages = new Collection();
						this._typing = new Map();
					}

					setup(data) {
						super.setup(data);

						/**
						 * The recipient on the other end of the DM
						 * @type {User}
						 */
						this.recipient = this.client.dataManager.newUser(
							data.recipients[0]
						);

						/**
						 * The ID of the last message in the channel, if one was sent
						 * @type {?Snowflake}
						 */
						this.lastMessageID = data.last_message_id;
					}

					/**
					 * When concatenated with a string, this automatically concatenates the recipient's mention instead of the
					 * DM channel object.
					 * @returns {string}
					 */
					toString() {
						return this.recipient.toString();
					}

					// These are here only for documentation purposes - they are implemented by TextBasedChannel
					/* eslint-disable no-empty-function */
					send() {}
					sendMessage() {}
					sendEmbed() {}
					sendFile() {}
					sendFiles() {}
					sendCode() {}
					fetchMessage() {}
					fetchMessages() {}
					fetchPinnedMessages() {}
					search() {}
					startTyping() {}
					stopTyping() {}
					get typing() {}
					get typingCount() {}
					createCollector() {}
					createMessageCollector() {}
					awaitMessages() {}
					// Doesn't work on DM channels; bulkDelete() {}
					acknowledge() {}
					_cacheMessage() {}
				}

				TextBasedChannel.applyToClass(DMChannel, true, ["bulkDelete"]);

				module.exports = DMChannel;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/Emoji.js":
			/*!*********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Emoji.js ***!
  \*********************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Constants = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Collection = __webpack_require__(
					/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);
				const Permissions = __webpack_require__(
					/*! ../util/Permissions */ "./node_modules/discord.js/src/util/Permissions.js"
				);
				const Snowflake = __webpack_require__(
					/*! ../util/Snowflake */ "./node_modules/discord.js/src/util/Snowflake.js"
				);

				/**
				 * Represents a custom emoji.
				 */
				class Emoji {
					constructor(guild, data) {
						/**
						 * The client that instantiated this object
						 * @name Emoji#client
						 * @type {Client}
						 * @readonly
						 */
						Object.defineProperty(this, "client", {
							value: guild.client,
						});

						/**
						 * The guild this emoji is part of
						 * @type {Guild}
						 */
						this.guild = guild;

						/**
						 * Whether this emoji has been deleted
						 * @type {boolean}
						 */
						this.deleted = false;

						this.setup(data);
					}

					setup(data) {
						/**
						 * The ID of the emoji
						 * @type {Snowflake}
						 */
						this.id = data.id;

						/**
						 * The name of the emoji
						 * @type {string}
						 */
						this.name = data.name;

						/**
						 * Whether or not this emoji requires colons surrounding it
						 * @type {boolean}
						 */
						this.requiresColons = data.require_colons;

						/**
						 * Whether this emoji is managed by an external service
						 * @type {boolean}
						 */
						this.managed = data.managed;

						/**
						 * Whether this emoji is animated
						 * @type {boolean}
						 */
						this.animated = data.animated;

						this._roles = data.roles;
					}

					/**
					 * The timestamp the emoji was created at
					 * @type {number}
					 * @readonly
					 */
					get createdTimestamp() {
						return Snowflake.deconstruct(this.id).timestamp;
					}

					/**
					 * The time the emoji was created
					 * @type {Date}
					 * @readonly
					 */
					get createdAt() {
						return new Date(this.createdTimestamp);
					}

					/**
					 * Whether the moej is deletable by the client user
					 * @type {boolean}
					 * @readonly
					 */
					get deletable() {
						return (
							!this.managed &&
							this.guild.me.hasPermission(
								Permissions.FLAGS.MANAGE_EMOJIS
							)
						);
					}

					/**
					 * A collection of roles this emoji is active for (empty if all), mapped by role ID
					 * @type {Collection<Snowflake, Role>}
					 * @readonly
					 */
					get roles() {
						const roles = new Collection();
						for (const role of this._roles) {
							if (this.guild.roles.has(role))
								roles.set(role, this.guild.roles.get(role));
						}
						return roles;
					}

					/**
					 * The URL to the emoji file
					 * @type {string}
					 * @readonly
					 */
					get url() {
						return Constants.Endpoints.CDN(
							this.client.options.http.cdn
						).Emoji(this.id, this.animated ? "gif" : "png");
					}

					/**
					 * The identifier of this emoji, used for message reactions
					 * @type {string}
					 * @readonly
					 */
					get identifier() {
						if (this.id) return `${this.name}:${this.id}`;
						return encodeURIComponent(this.name);
					}

					/**
					 * Data for editing an emoji.
					 * @typedef {Object} EmojiEditData
					 * @property {string} [name] The name of the emoji
					 * @property {Collection<Snowflake, Role>|Array<Snowflake|Role>} [roles] Roles to restrict emoji to
					 */

					/**
					 * Edits the emoji.
					 * @param {EmojiEditData} data The new data for the emoji
					 * @param {string} [reason] Reason for editing this emoji
					 * @returns {Promise<Emoji>}
					 * @example
					 * // Edit an emoji
					 * emoji.edit({name: 'newemoji'})
					 *   .then(e => console.log(`Edited emoji ${e}`))
					 *   .catch(console.error);
					 */
					edit(data, reason) {
						return this.client.rest.methods.updateEmoji(
							this,
							data,
							reason
						);
					}

					/**
					 * Set the name of the emoji.
					 * @param {string} name The new name for the emoji
					 * @param {string} [reason] The reason for changing the emoji's name
					 * @returns {Promise<Emoji>}
					 */
					setName(name, reason) {
						return this.edit({name}, reason);
					}

					/**
					 * Fetches the author for this emoji
					 * @returns {Promise<User>}
					 */
					fetchAuthor() {
						if (this.managed)
							return Promise.reject(
								new Error("Emoji is managed and has no Author.")
							);
						return this.client.rest
							.makeRequest(
								"get",
								Constants.Endpoints.Guild(this.guild).Emoji(
									this.id
								),
								true
							)
							.then((emoji) =>
								this.client.dataManager.newUser(emoji.user)
							);
					}

					/**
					 * Add a role to the list of roles that can use this emoji.
					 * @param {Role} role The role to add
					 * @returns {Promise<Emoji>}
					 */
					addRestrictedRole(role) {
						return this.addRestrictedRoles([role]);
					}

					/**
					 * Add multiple roles to the list of roles that can use this emoji.
					 * @param {Role[]} roles Roles to add
					 * @returns {Promise<Emoji>}
					 */
					addRestrictedRoles(roles) {
						const newRoles = new Collection(this.roles);
						for (const role of roles) {
							if (this.guild.roles.has(role.id))
								newRoles.set(role.id, role);
						}
						return this.edit({roles: newRoles});
					}

					/**
					 * Remove a role from the list of roles that can use this emoji.
					 * @param {Role} role The role to remove
					 * @returns {Promise<Emoji>}
					 */
					removeRestrictedRole(role) {
						return this.removeRestrictedRoles([role]);
					}

					/**
					 * Remove multiple roles from the list of roles that can use this emoji.
					 * @param {Role[]} roles Roles to remove
					 * @returns {Promise<Emoji>}
					 */
					removeRestrictedRoles(roles) {
						const newRoles = new Collection(this.roles);
						for (const role of roles) {
							if (newRoles.has(role.id)) newRoles.delete(role.id);
						}
						return this.edit({roles: newRoles});
					}

					/**
					 * When concatenated with a string, this automatically returns the emoji mention rather than the object.
					 * @returns {string}
					 * @example
					 * // Send an emoji:
					 * const emoji = guild.emojis.first();
					 * msg.reply(`Hello! ${emoji}`);
					 */
					toString() {
						if (!this.id || !this.requiresColons) {
							return this.name;
						}

						return `<${this.animated ? "a" : ""}:${this.name}:${
							this.id
						}>`;
					}

					/**
					 * Whether this emoji is the same as another one.
					 * @param {Emoji|Object} other The emoji to compare it to
					 * @returns {boolean} Whether the emoji is equal to the given emoji or not
					 */
					equals(other) {
						if (other instanceof Emoji) {
							return (
								other.id === this.id &&
								other.name === this.name &&
								other.managed === this.managed &&
								other.requiresColons === this.requiresColons
							);
						} else {
							return (
								other.id === this.id && other.name === this.name
							);
						}
					}
				}

				module.exports = Emoji;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/GroupDMChannel.js":
			/*!******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/GroupDMChannel.js ***!
  \******************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Channel = __webpack_require__(
					/*! ./Channel */ "./node_modules/discord.js/src/structures/Channel.js"
				);
				const TextBasedChannel = __webpack_require__(
					/*! ./interfaces/TextBasedChannel */ "./node_modules/discord.js/src/structures/interfaces/TextBasedChannel.js"
				);
				const Collection = __webpack_require__(
					/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);
				const Constants = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				/*
{ type: 3,
  recipients:
   [ { username: 'Charlie',
       id: '123',
       discriminator: '6631',
       avatar: '123' },
     { username: 'Ben',
       id: '123',
       discriminator: '2055',
       avatar: '123' },
     { username: 'Adam',
       id: '123',
       discriminator: '2406',
       avatar: '123' } ],
  owner_id: '123',
  name: null,
  last_message_id: '123',
  id: '123',
  icon: null }
*/

				/**
				 * Represents a Group DM on Discord.
				 * @extends {Channel}
				 * @implements {TextBasedChannel}
				 */
				class GroupDMChannel extends Channel {
					constructor(client, data) {
						super(client, data);
						this.type = "group";
						this.messages = new Collection();
						this._typing = new Map();
					}

					setup(data) {
						super.setup(data);

						/**
						 * The name of this Group DM, can be null if one isn't set
						 * @type {string}
						 */
						this.name = data.name;

						/**
						 * A hash of this Group DM icon
						 * @type {?string}
						 */
						this.icon = data.icon;

						/**
						 * The user ID of this Group DM's owner
						 * @type {string}
						 */
						this.ownerID = data.owner_id;

						/**
						 * If the DM is managed by an application
						 * @type {boolean}
						 */
						this.managed = data.managed;

						/**
						 * Application ID of the application that made this Group DM, if applicable
						 * @type {?string}
						 */
						this.applicationID = data.application_id;

						if (data.nicks) {
							/**
							 * Nicknames for group members
							 * @type {?Collection<Snowflake, string>}
							 */
							this.nicks = new Collection(
								data.nicks.map((n) => [n.id, n.nick])
							);
						}

						if (!this.recipients) {
							/**
							 * A collection of the recipients of this DM, mapped by their ID
							 * @type {Collection<Snowflake, User>}
							 */
							this.recipients = new Collection();
						}

						if (data.recipients) {
							for (const recipient of data.recipients) {
								const user = this.client.dataManager.newUser(
									recipient
								);
								this.recipients.set(user.id, user);
							}
						}

						/**
						 * The ID of the last message in the channel, if one was sent
						 * @type {?Snowflake}
						 */
						this.lastMessageID = data.last_message_id;
					}

					/**
					 * The owner of this Group DM
					 * @type {User}
					 * @readonly
					 */
					get owner() {
						return this.client.users.get(this.ownerID);
					}

					/**
					 * The URL to this guild's icon
					 * @type {?string}
					 * @readonly
					 */
					get iconURL() {
						if (!this.icon) return null;
						return Constants.Endpoints.Channel(this).Icon(
							this.client.options.http.cdn,
							this.icon
						);
					}

					edit(data) {
						const _data = {};
						if (data.name) _data.name = data.name;
						if (typeof data.icon !== "undefined")
							_data.icon = data.icon;
						return this.client.rest.methods.updateGroupDMChannel(
							this,
							_data
						);
					}

					/**
					 * Whether this channel equals another channel. It compares all properties, so for most operations
					 * it is advisable to just compare `channel.id === channel2.id` as it is much faster and is often
					 * what most users need.
					 * @param {GroupDMChannel} channel Channel to compare with
					 * @returns {boolean}
					 */
					equals(channel) {
						const equal =
							channel &&
							this.id === channel.id &&
							this.name === channel.name &&
							this.icon === channel.icon &&
							this.ownerID === channel.ownerID;

						if (equal) {
							return this.recipients.equals(channel.recipients);
						}

						return equal;
					}

					/**
					 * Add a user to the DM
					 * @param {UserResolvable|string} accessTokenOrID Access token or user resolvable
					 * @param {string} [nick] Permanent nickname to give the user (only available if a bot is creating the DM)
					 * @returns {Promise<GroupDMChannel>}
					 */

					addUser(accessTokenOrID, nick) {
						return this.client.rest.methods.addUserToGroupDM(this, {
							nick,
							id: this.client.resolver.resolveUserID(
								accessTokenOrID
							),
							accessToken: accessTokenOrID,
						});
					}

					/**
					 * Set a new GroupDMChannel icon.
					 * @param {Base64Resolvable|BufferResolvable} icon The new icon of the group dm
					 * @returns {Promise<GroupDMChannel>}
					 * @example
					 * // Edit the group dm icon
					 * channel.setIcon('./icon.png')
					 *  .then(updated => console.log('Updated the channel icon'))
					 *  .catch(console.error);
					 */
					setIcon(icon) {
						return this.client.resolver
							.resolveImage(icon)
							.then((data) => this.edit({icon: data}));
					}

					/**
					 * Sets a new name for this Group DM.
					 * @param {string} name New name for this Group DM
					 * @returns {Promise<GroupDMChannel>}
					 */
					setName(name) {
						return this.edit({name});
					}

					/**
					 * Removes a user from this Group DM.
					 * @param {UserResolvable} user User to remove
					 * @returns {Promise<GroupDMChannel>}
					 */
					removeUser(user) {
						const id = this.client.resolver.resolveUserID(user);
						return this.client.rest.methods.removeUserFromGroupDM(
							this,
							id
						);
					}

					/**
					 * When concatenated with a string, this automatically concatenates the channel's name instead of the Channel object.
					 * @returns {string}
					 * @example
					 * // Logs: Hello from My Group DM!
					 * console.log(`Hello from ${channel}!`);
					 * @example
					 * // Logs: Hello from My Group DM!
					 * console.log(`Hello from ' + channel + '!');
					 */
					toString() {
						return this.name;
					}

					// These are here only for documentation purposes - they are implemented by TextBasedChannel
					/* eslint-disable no-empty-function */
					send() {}
					sendMessage() {}
					sendEmbed() {}
					sendFile() {}
					sendFiles() {}
					sendCode() {}
					fetchMessage() {}
					fetchMessages() {}
					fetchPinnedMessages() {}
					search() {}
					startTyping() {}
					stopTyping() {}
					get typing() {}
					get typingCount() {}
					createCollector() {}
					createMessageCollector() {}
					awaitMessages() {}
					// Doesn't work on Group DMs; bulkDelete() {}
					acknowledge() {}
					_cacheMessage() {}
				}

				TextBasedChannel.applyToClass(GroupDMChannel, true, [
					"bulkDelete",
				]);

				module.exports = GroupDMChannel;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/Guild.js":
			/*!*********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Guild.js ***!
  \*********************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const util = __webpack_require__(
					/*! util */ "./node_modules/util/util.js"
				);
				const Long = __webpack_require__(
					/*! long */ "./node_modules/long/src/long.js"
				);
				const User = __webpack_require__(
					/*! ./User */ "./node_modules/discord.js/src/structures/User.js"
				);
				const Role = __webpack_require__(
					/*! ./Role */ "./node_modules/discord.js/src/structures/Role.js"
				);
				const Emoji = __webpack_require__(
					/*! ./Emoji */ "./node_modules/discord.js/src/structures/Emoji.js"
				);
				const Presence = __webpack_require__(
					/*! ./Presence */ "./node_modules/discord.js/src/structures/Presence.js"
				).Presence;
				const GuildMember = __webpack_require__(
					/*! ./GuildMember */ "./node_modules/discord.js/src/structures/GuildMember.js"
				);
				const Constants = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Collection = __webpack_require__(
					/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);
				const Util = __webpack_require__(
					/*! ../util/Util */ "./node_modules/discord.js/src/util/Util.js"
				);
				const Snowflake = __webpack_require__(
					/*! ../util/Snowflake */ "./node_modules/discord.js/src/util/Snowflake.js"
				);

				/**
				 * Represents a guild (or a server) on Discord.
				 * <info>It's recommended to see if a guild is available before performing operations or reading data from it. You can
				 * check this with `guild.available`.</info>
				 */
				class Guild {
					constructor(client, data) {
						/**
						 * The client that created the instance of the guild
						 * @name Guild#client
						 * @type {Client}
						 * @readonly
						 */
						Object.defineProperty(this, "client", {value: client});

						/**
						 * A collection of members that are in this guild. The key is the member's ID, the value is the member
						 * @type {Collection<Snowflake, GuildMember>}
						 */
						this.members = new Collection();

						/**
						 * A collection of channels that are in this guild. The key is the channel's ID, the value is the channel
						 * @type {Collection<Snowflake, GuildChannel>}
						 */
						this.channels = new Collection();

						/**
						 * A collection of roles that are in this guild. The key is the role's ID, the value is the role
						 * @type {Collection<Snowflake, Role>}
						 */
						this.roles = new Collection();

						/**
						 * A collection of presences in this guild
						 * @type {Collection<Snowflake, Presence>}
						 */
						this.presences = new Collection();

						/**
						 * Whether the bot has been removed from the guild
						 * @type {boolean}
						 */
						this.deleted = false;

						if (!data) return;
						if (data.unavailable) {
							/**
							 * Whether the guild is available to access. If it is not available, it indicates a server outage
							 * @type {boolean}
							 */
							this.available = false;

							/**
							 * The Unique ID of the guild, useful for comparisons
							 * @type {Snowflake}
							 */
							this.id = data.id;
						} else {
							this.setup(data);
							if (!data.channels) this.available = false;
						}
					}

					/* eslint-disable complexity */
					/**
					 * Sets up the guild.
					 * @param {*} data The raw data of the guild
					 * @private
					 */
					setup(data) {
						/**
						 * The name of the guild
						 * @type {string}
						 */
						this.name = data.name;

						/**
						 * The hash of the guild icon
						 * @type {?string}
						 */
						this.icon = data.icon;

						/**
						 * The hash of the guild splash image (VIP only)
						 * @type {?string}
						 */
						this.splash = data.splash;

						/**
						 * The region the guild is located in
						 * @type {string}
						 */
						this.region = data.region;

						/**
						 * The full amount of members in this guild as of `READY`
						 * @type {number}
						 */
						this.memberCount =
							data.member_count || this.memberCount;

						/**
						 * Whether the guild is "large" (has more than 250 members)
						 * @type {boolean}
						 */
						this.large = Boolean(
							"large" in data ? data.large : this.large
						);

						/**
						 * An array of guild features
						 * @type {Object[]}
						 */
						this.features = data.features;

						/**
						 * The ID of the application that created this guild (if applicable)
						 * @type {?Snowflake}
						 */
						this.applicationID = data.application_id;

						/**
						 * The time in seconds before a user is counted as "away from keyboard"
						 * @type {?number}
						 */
						this.afkTimeout = data.afk_timeout;

						/**
						 * The ID of the voice channel where AFK members are moved
						 * @type {?string}
						 */
						this.afkChannelID = data.afk_channel_id;

						/**
						 * The ID of the system channel
						 * @type {?Snowflake}
						 */
						this.systemChannelID = data.system_channel_id;

						/**
						 * Whether embedded images are enabled on this guild
						 * @type {boolean}
						 */
						this.embedEnabled = data.embed_enabled;

						/**
						 * The verification level of the guild
						 * @type {number}
						 */
						this.verificationLevel = data.verification_level;

						/**
						 * The explicit content filter level of the guild
						 * @type {number}
						 */
						this.explicitContentFilter =
							data.explicit_content_filter;

						/**
						 * The required MFA level for the guild
						 * @type {number}
						 */
						this.mfaLevel = data.mfa_level;

						/**
						 * The timestamp the client user joined the guild at
						 * @type {number}
						 */
						this.joinedTimestamp = data.joined_at
							? new Date(data.joined_at).getTime()
							: this.joinedTimestamp;

						/**
						 * The value set for a guild's default message notifications
						 * @type {DefaultMessageNotifications|number}
						 */
						this.defaultMessageNotifications =
							Constants.DefaultMessageNotifications[
								data.default_message_notifications
							] || data.default_message_notifications;

						this.id = data.id;
						this.available = !data.unavailable;
						this.features = data.features || this.features || [];

						if (data.members) {
							this.members.clear();
							for (const guildUser of data.members)
								this._addMember(guildUser, false);
						}

						if (data.owner_id) {
							/**
							 * The user ID of this guild's owner
							 * @type {Snowflake}
							 */
							this.ownerID = data.owner_id;
						}

						if (data.channels) {
							this.channels.clear();
							for (const channel of data.channels)
								this.client.dataManager.newChannel(
									channel,
									this
								);
						}

						if (data.roles) {
							this.roles.clear();
							for (const role of data.roles) {
								const newRole = new Role(this, role);
								this.roles.set(newRole.id, newRole);
							}
						}

						if (data.presences) {
							for (const presence of data.presences) {
								this._setPresence(presence.user.id, presence);
							}
						}

						this._rawVoiceStates = new Collection();
						if (data.voice_states) {
							for (const voiceState of data.voice_states) {
								this._rawVoiceStates.set(
									voiceState.user_id,
									voiceState
								);
								const member = this.members.get(
									voiceState.user_id
								);
								if (member) {
									member.serverMute = voiceState.mute;
									member.serverDeaf = voiceState.deaf;
									member.selfMute = voiceState.self_mute;
									member.selfDeaf = voiceState.self_deaf;
									member.voiceSessionID =
										voiceState.session_id;
									member.voiceChannelID =
										voiceState.channel_id;
									this.channels
										.get(voiceState.channel_id)
										.members.set(member.user.id, member);
								}
							}
						}

						if (!this.emojis) {
							/**
							 * A collection of emojis that are in this guild
							 * The key is the emoji's ID, the value is the emoji
							 * @type {Collection<Snowflake, Emoji>}
							 */
							this.emojis = new Collection();
							for (const emoji of data.emojis)
								this.emojis.set(
									emoji.id,
									new Emoji(this, emoji)
								);
						} else {
							this.client.actions.GuildEmojisUpdate.handle({
								guild_id: this.id,
								emojis: data.emojis,
							});
						}
					}

					/**
					 * The timestamp the guild was created at
					 * @type {number}
					 * @readonly
					 */
					get createdTimestamp() {
						return Snowflake.deconstruct(this.id).timestamp;
					}

					/**
					 * The time the guild was created
					 * @type {Date}
					 * @readonly
					 */
					get createdAt() {
						return new Date(this.createdTimestamp);
					}

					/**
					 * The time the client user joined the guild
					 * @type {Date}
					 * @readonly
					 */
					get joinedAt() {
						return new Date(this.joinedTimestamp);
					}

					/**
					 * If this guild is verified
					 * @type {boolean}
					 * @readonly
					 */
					get verified() {
						return this.features.includes("VERIFIED");
					}

					/**
					 * The URL to this guild's icon
					 * @type {?string}
					 * @readonly
					 */
					get iconURL() {
						if (!this.icon) return null;
						return Constants.Endpoints.Guild(this).Icon(
							this.client.options.http.cdn,
							this.icon
						);
					}

					/**
					 * The acronym that shows up in place of a guild icon.
					 * @type {string}
					 * @readonly
					 */
					get nameAcronym() {
						return this.name
							.replace(/\w+/g, (name) => name[0])
							.replace(/\s/g, "");
					}

					/**
					 * The URL to this guild's splash
					 * @type {?string}
					 * @readonly
					 */
					get splashURL() {
						if (!this.splash) return null;
						return Constants.Endpoints.Guild(this).Splash(
							this.client.options.http.cdn,
							this.splash
						);
					}

					/**
					 * The owner of the guild
					 * @type {?GuildMember}
					 * @readonly
					 */
					get owner() {
						return this.members.get(this.ownerID);
					}

					/**
					 * AFK voice channel for this guild
					 * @type {?VoiceChannel}
					 * @readonly
					 */
					get afkChannel() {
						return (
							this.client.channels.get(this.afkChannelID) || null
						);
					}

					/**
					 * System channel for this guild
					 * @type {?GuildChannel}
					 * @readonly
					 */
					get systemChannel() {
						return (
							this.client.channels.get(this.systemChannelID) ||
							null
						);
					}

					/**
					 * If the client is connected to any voice channel in this guild, this will be the relevant VoiceConnection
					 * @type {?VoiceConnection}
					 * @readonly
					 */
					get voiceConnection() {
						if (this.client.browser) return null;
						return (
							this.client.voice.connections.get(this.id) || null
						);
					}

					/**
					 * The position of this guild
					 * <warn>This is only available when using a user account.</warn>
					 * @type {?number}
					 * @readonly
					 */
					get position() {
						if (this.client.user.bot) return null;
						if (!this.client.user.settings.guildPositions)
							return null;
						return this.client.user.settings.guildPositions.indexOf(
							this.id
						);
					}

					/**
					 * Whether the guild is muted
					 * <warn>This is only available when using a user account.</warn>
					 * @type {?boolean}
					 * @readonly
					 */
					get muted() {
						if (this.client.user.bot) return null;
						try {
							return this.client.user.guildSettings.get(this.id)
								.muted;
						} catch (err) {
							return false;
						}
					}

					/**
					 * The type of message that should notify you
					 * <warn>This is only available when using a user account.</warn>
					 * @type {?MessageNotificationType}
					 * @readonly
					 */
					get messageNotifications() {
						if (this.client.user.bot) return null;
						try {
							return this.client.user.guildSettings.get(this.id)
								.messageNotifications;
						} catch (err) {
							return null;
						}
					}

					/**
					 * Whether to receive mobile push notifications
					 * <warn>This is only available when using a user account.</warn>
					 * @type {?boolean}
					 * @readonly
					 */
					get mobilePush() {
						if (this.client.user.bot) return null;
						try {
							return this.client.user.guildSettings.get(this.id)
								.mobilePush;
						} catch (err) {
							return false;
						}
					}

					/**
					 * Whether to suppress everyone messages
					 * <warn>This is only available when using a user account.</warn>
					 * @type {?boolean}
					 * @readonly
					 */
					get suppressEveryone() {
						if (this.client.user.bot) return null;
						try {
							return this.client.user.guildSettings.get(this.id)
								.suppressEveryone;
						} catch (err) {
							return null;
						}
					}

					/**
					 * The `@everyone` role of the guild
					 * @type {Role}
					 * @readonly
					 */
					get defaultRole() {
						return this.roles.get(this.id);
					}

					/**
					 * The client user as a GuildMember of this guild
					 * @type {?GuildMember}
					 * @readonly
					 */
					get me() {
						return this.members.get(this.client.user.id);
					}

					/**
					 * Fetches a collection of roles in the current guild sorted by position
					 * @type {Collection<Snowflake, Role>}
					 * @readonly
					 * @private
					 */
					get _sortedRoles() {
						return this._sortPositionWithID(this.roles);
					}

					/**
					 * Returns the GuildMember form of a User object, if the user is present in the guild.
					 * @param {UserResolvable} user The user that you want to obtain the GuildMember of
					 * @returns {?GuildMember}
					 * @example
					 * // Get the guild member of a user
					 * const member = guild.member(message.author);
					 */
					member(user) {
						return this.client.resolver.resolveGuildMember(
							this,
							user
						);
					}

					/**
					 * Fetch a collection of banned users in this guild.
					 * @returns {Promise<Collection<Snowflake, User>>}
					 * @example
					 * // Fetch bans in guild
					 * guild.fetchBans()
					 *   .then(bans => console.log(`This guild has ${bans.size} bans`))
					 *   .catch(console.error);
					 */
					fetchBans() {
						return this.client.rest.methods
							.getGuildBans(this)
							.then((bans) => {
								const users = new Collection();
								for (const ban of bans.values())
									users.set(ban.user.id, ban.user);
								return users;
							});
					}

					/**
					 * Fetch a collection of invites to this guild.
					 * Resolves with a collection mapping invites by their codes.
					 * @returns {Promise<Collection<string, Invite>>}
					 * @example
					 * // Fetch invites
					 * guild.fetchInvites()
					 *   .then(invites => console.log(`Fetched ${invites.size} invites`))
					 *   .catch(console.error);
					 * @example
					 * // Fetch invite creator by their id
					 * guild.fetchInvites()
					 *  .then(invites => console.log(invites.find(invite => invite.inviter.id === '84484653687267328')))
					 *  .catch(console.error);
					 */
					fetchInvites() {
						return this.client.rest.methods.getGuildInvites(this);
					}

					/**
					 * Fetch all webhooks for the guild.
					 * @returns {Promise<Collection<Snowflake, Webhook>>}
					 * @example
					 * // Fetch webhooks
					 * guild.fetchWebhooks()
					 *   .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))
					 *   .catch(console.error);
					 */
					fetchWebhooks() {
						return this.client.rest.methods.getGuildWebhooks(this);
					}

					/**
					 * Fetch available voice regions.
					 * @returns {Promise<Collection<string, VoiceRegion>>}
					 * @example
					 * // Fetch voice regions
					 * guild.fetchVoiceRegions()
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					fetchVoiceRegions() {
						return this.client.rest.methods.fetchVoiceRegions(
							this.id
						);
					}

					/**
					 * Fetch audit logs for this guild.
					 * @param {Object} [options={}] Options for fetching audit logs
					 * @param {Snowflake|GuildAuditLogsEntry} [options.before] Limit to entries from before specified entry
					 * @param {Snowflake|GuildAuditLogsEntry} [options.after] Limit to entries from after specified entry
					 * @param {number} [options.limit] Limit number of entries
					 * @param {UserResolvable} [options.user] Only show entries involving this user
					 * @param {string|number} [options.type] Only show entries involving this action type
					 * @returns {Promise<GuildAuditLogs>}
					 * @example
					 * // Output audit log entries
					 * guild.fetchAuditLogs()
					 *   .then(audit => console.log(audit.entries.first()))
					 *   .catch(console.error);
					 */
					fetchAuditLogs(options) {
						return this.client.rest.methods.getGuildAuditLogs(
							this,
							options
						);
					}

					/**
					 * Adds a user to the guild using OAuth2. Requires the `CREATE_INSTANT_INVITE` permission.
					 * @param {UserResolvable} user User to add to the guild
					 * @param {Object} options Options for the addition
					 * @param {string} options.accessToken An OAuth2 access token for the user with the `guilds.join` scope granted to the
					 * bot's application
					 * @param {string} [options.nick] Nickname to give the member (requires `MANAGE_NICKNAMES`)
					 * @param {Collection<Snowflake, Role>|Role[]|Snowflake[]} [options.roles] Roles to add to the member
					 * (requires `MANAGE_ROLES`)
					 * @param {boolean} [options.mute] Whether the member should be muted (requires `MUTE_MEMBERS`)
					 * @param {boolean} [options.deaf] Whether the member should be deafened (requires `DEAFEN_MEMBERS`)
					 * @returns {Promise<GuildMember>}
					 */
					addMember(user, options) {
						if (this.members.has(user.id))
							return Promise.resolve(this.members.get(user.id));
						return this.client.rest.methods.putGuildMember(
							this,
							user,
							options
						);
					}

					/**
					 * Fetch a single guild member from a user.
					 * @param {UserResolvable} user The user to fetch the member for
					 * @param {boolean} [cache=true] Insert the member into the members cache
					 * @returns {Promise<GuildMember>}
					 * @example
					 * // Fetch a guild member
					 * guild.fetchMember(message.author)
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					fetchMember(user, cache = true) {
						user = this.client.resolver.resolveUser(user);
						if (!user)
							return Promise.reject(
								new Error("Invalid or uncached id provided.")
							);
						const member = this.members.get(user.id);
						if (member && member.joinedTimestamp)
							return Promise.resolve(member);
						return this.client.rest.methods.getGuildMember(
							this,
							user,
							cache
						);
					}

					/**
					 * Fetches all the members in the guild, even if they are offline. If the guild has less than 250 members,
					 * this should not be necessary.
					 * @param {string} [query=''] Limit fetch to members with similar usernames
					 * @param {number} [limit=0] Maximum number of members to request
					 * @returns {Promise<Guild>}
					 * @example
					 * // Fetch guild members
					 * guild.fetchMembers()
					 *   .then(console.log)
					 *   .catch(console.error);
					 * @example
					 * // Fetches a maximum of 1 member with the given query
					 * guild.fetchMembers('hydrabolt', 1)
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					fetchMembers(query = "", limit = 0) {
						return new Promise((resolve, reject) => {
							if (this.memberCount === this.members.size) {
								resolve(this);
								return;
							}
							this.client.ws.send({
								op: Constants.OPCodes.REQUEST_GUILD_MEMBERS,
								d: {
									guild_id: this.id,
									query,
									limit,
								},
							});
							const handler = (members, guild) => {
								if (guild.id !== this.id) return;
								if (
									this.memberCount === this.members.size ||
									members.length < 1000
								) {
									this.client.removeListener(
										Constants.Events.GUILD_MEMBERS_CHUNK,
										handler
									);
									resolve(this);
								}
							};
							this.client.on(
								Constants.Events.GUILD_MEMBERS_CHUNK,
								handler
							);
							this.client.setTimeout(
								() =>
									reject(
										new Error(
											"Members didn't arrive in time."
										)
									),
								120 * 1000
							);
						});
					}

					/**
					 * Performs a search within the entire guild.
					 * <warn>This is only available when using a user account.</warn>
					 * @param {MessageSearchOptions} [options={}] Options to pass to the search
					 * @returns {Promise<MessageSearchResult>}
					 * @example
					 * guild.search({
					 *   content: 'discord.js',
					 *   before: '2016-11-17'
					 * })
					 *   .then(res => {
					 *     const hit = res.messages[0].find(m => m.hit).content;
					 *     console.log(`I found: **${hit}**, total results: ${res.totalResults}`);
					 *   })
					 *   .catch(console.error);
					 */
					search(options = {}) {
						return this.client.rest.methods.search(this, options);
					}

					/**
					 * The data for editing a guild.
					 * @typedef {Object} GuildEditData
					 * @property {string} [name] The name of the guild
					 * @property {string} [region] The region of the guild
					 * @property {number} [verificationLevel] The verification level of the guild
					 * @property {number} [explicitContentFilter] The level of the explicit content filter
					 * @property {ChannelResolvable} [afkChannel] The AFK channel of the guild
					 * @property {ChannelResolvable} [systemChannel] The system channel of the guild
					 * @property {number} [afkTimeout] The AFK timeout of the guild
					 * @property {Base64Resolvable} [icon] The icon of the guild
					 * @property {GuildMemberResolvable} [owner] The owner of the guild
					 * @property {Base64Resolvable} [splash] The splash screen of the guild
					 */

					/**
					 * Updates the guild with new information - e.g. a new name.
					 * @param {GuildEditData} data The data to update the guild with
					 * @param {string} [reason] Reason for editing the guild
					 * @returns {Promise<Guild>}
					 * @example
					 * // Set the guild name and region
					 * guild.edit({
					 *   name: 'Discord Guild',
					 *   region: 'london',
					 * })
					 *   .then(g => console.log(`Changed guild name to ${g} and region to ${g.region}`))
					 *   .catch(console.error);
					 */
					edit(data, reason) {
						const _data = {};
						if (data.name) _data.name = data.name;
						if (data.region) _data.region = data.region;
						if (typeof data.verificationLevel !== "undefined")
							_data.verification_level = Number(
								data.verificationLevel
							);
						if (typeof data.afkChannel !== "undefined") {
							_data.afk_channel_id = this.client.resolver.resolveChannelID(
								data.afkChannel
							);
						}
						if (typeof data.systemChannel !== "undefined") {
							_data.system_channel_id = this.client.resolver.resolveChannelID(
								data.systemChannel
							);
						}
						if (data.afkTimeout)
							_data.afk_timeout = Number(data.afkTimeout);
						if (typeof data.icon !== "undefined")
							_data.icon = data.icon;
						if (data.owner)
							_data.owner_id = this.client.resolver.resolveUser(
								data.owner
							).id;
						if (typeof data.splash !== "undefined")
							_data.splash = data.splash;
						if (typeof data.explicitContentFilter !== "undefined") {
							_data.explicit_content_filter = Number(
								data.explicitContentFilter
							);
						}
						if (
							typeof data.defaultMessageNotifications !==
							"undefined"
						) {
							_data.default_message_notifications =
								typeof data.defaultMessageNotifications ===
								"string"
									? Constants.DefaultMessageNotifications.indexOf(
											data.defaultMessageNotifications
									  )
									: Number(data.defaultMessageNotifications);
						}
						return this.client.rest.methods.updateGuild(
							this,
							_data,
							reason
						);
					}

					/**
					 * Edit the level of the explicit content filter.
					 * @param {number} explicitContentFilter The new level of the explicit content filter
					 * @param {string} [reason] Reason for changing the level of the guild's explicit content filter
					 * @returns {Promise<Guild>}
					 */
					setExplicitContentFilter(explicitContentFilter, reason) {
						return this.edit({explicitContentFilter}, reason);
					}

					/**
					 * Edits the setting of the default message notifications of the guild.
					 * @param {DefaultMessageNotifications|number} defaultMessageNotifications
					 * The new setting for the default message notifications
					 * @param {string} [reason] Reason for changing the setting of the default message notifications
					 * @returns {Promise<Guild>}
					 */
					setDefaultMessageNotifications(
						defaultMessageNotifications,
						reason
					) {
						return this.edit({defaultMessageNotifications}, reason);
					}

					/**
					 * Edit the name of the guild.
					 * @param {string} name The new name of the guild
					 * @param {string} [reason] Reason for changing the guild's name
					 * @returns {Promise<Guild>}
					 * @example
					 * // Edit the guild name
					 * guild.setName('Discord Guild')
					 *  .then(g => console.log(`Updated guild name to ${g}`))
					 *  .catch(console.error);
					 */
					setName(name, reason) {
						return this.edit({name}, reason);
					}

					/**
					 * Edit the region of the guild.
					 * @param {string} region The new region of the guild
					 * @param {string} [reason] Reason for changing the guild's region
					 * @returns {Promise<Guild>}
					 * @example
					 * // Edit the guild region
					 * guild.setRegion('london')
					 *  .then(g => console.log(`Updated guild region to ${g.region}`))
					 *  .catch(console.error);
					 */
					setRegion(region, reason) {
						return this.edit({region}, reason);
					}

					/**
					 * Edit the verification level of the guild.
					 * @param {number} verificationLevel The new verification level of the guild
					 * @param {string} [reason] Reason for changing the guild's verification level
					 * @returns {Promise<Guild>}
					 * @example
					 * // Edit the guild verification level
					 * guild.setVerificationLevel(1)
					 *  .then(g => console.log(`Updated guild verification level to ${g.verificationLevel}`))
					 *  .catch(console.error);
					 */
					setVerificationLevel(verificationLevel, reason) {
						return this.edit({verificationLevel}, reason);
					}

					/**
					 * Edit the AFK channel of the guild.
					 * @param {ChannelResolvable} afkChannel The new AFK channel
					 * @param {string} [reason] Reason for changing the guild's AFK channel
					 * @returns {Promise<Guild>}
					 * @example
					 * // Edit the guild AFK channel
					 * guild.setAFKChannel(channel)
					 *  .then(g => console.log(`Updated guild AFK channel to ${g.afkChannel.name}`))
					 *  .catch(console.error);
					 */
					setAFKChannel(afkChannel, reason) {
						return this.edit({afkChannel}, reason);
					}

					/**
					 * Edit the system channel of the guild.
					 * @param {ChannelResolvable} systemChannel The new system channel
					 * @param {string} [reason] Reason for changing the guild's system channel
					 * @returns {Promise<Guild>}
					 */
					setSystemChannel(systemChannel, reason) {
						return this.edit({systemChannel}, reason);
					}

					/**
					 * Edit the AFK timeout of the guild.
					 * @param {number} afkTimeout The time in seconds that a user must be idle to be considered AFK
					 * @param {string} [reason] Reason for changing the guild's AFK timeout
					 * @returns {Promise<Guild>}
					 * @example
					 * // Edit the guild AFK channel
					 * guild.setAFKTimeout(60)
					 *  .then(g => console.log(`Updated guild AFK timeout to ${g.afkTimeout}`))
					 *  .catch(console.error);
					 */
					setAFKTimeout(afkTimeout, reason) {
						return this.edit({afkTimeout}, reason);
					}

					/**
					 * Set a new guild icon.
					 * @param {Base64Resolvable|BufferResolvable} icon The new icon of the guild
					 * @param {string} [reason] Reason for changing the guild's icon
					 * @returns {Promise<Guild>}
					 * @example
					 * // Edit the guild icon
					 * guild.setIcon('./icon.png')
					 *  .then(console.log)
					 *  .catch(console.error);
					 */
					setIcon(icon, reason) {
						return this.client.resolver
							.resolveImage(icon)
							.then((data) => this.edit({icon: data, reason}));
					}

					/**
					 * Sets a new owner of the guild.
					 * @param {GuildMemberResolvable} owner The new owner of the guild
					 * @param {string} [reason] Reason for setting the new owner
					 * @returns {Promise<Guild>}
					 * @example
					 * // Edit the guild owner
					 * guild.setOwner(guild.members.first())
					 *  .then(g => console.log(`Updated the guild owner to ${g.owner.displayName}`))
					 *  .catch(console.error);
					 */
					setOwner(owner, reason) {
						return this.edit({owner}, reason);
					}

					/**
					 * Set a new guild splash screen.
					 * @param {BufferResolvable|Base64Resolvable} splash The new splash screen of the guild
					 * @param {string} [reason] Reason for changing the guild's splash screen
					 * @returns {Promise<Guild>}
					 * @example
					 * // Edit the guild splash
					 * guild.setSplash('./splash.png')
					 *  .then(console.log)
					 *  .catch(console.error);
					 */
					setSplash(splash) {
						return this.client.resolver
							.resolveImage(splash)
							.then((data) => this.edit({splash: data}));
					}

					/**
					 * Sets the position of the guild in the guild listing.
					 * <warn>This is only available when using a user account.</warn>
					 * @param {number} position Absolute or relative position
					 * @param {boolean} [relative=false] Whether to position relatively or absolutely
					 * @returns {Promise<Guild>}
					 */
					setPosition(position, relative) {
						if (this.client.user.bot) {
							return Promise.reject(
								new Error(
									"Setting guild position is only available for user accounts"
								)
							);
						}
						return this.client.user.settings.setGuildPosition(
							this,
							position,
							relative
						);
					}

					/**
					 * Marks all messages in this guild as read.
					 * <warn>This is only available when using a user account.</warn>
					 * @returns {Promise<Guild>}
					 */
					acknowledge() {
						return this.client.rest.methods.ackGuild(this);
					}

					/**
					 * Allow direct messages from guild members.
					 * <warn>This is only available when using a user account.</warn>
					 * @param {boolean} allow Whether to allow direct messages
					 * @returns {Promise<Guild>}
					 */
					allowDMs(allow) {
						const settings = this.client.user.settings;
						if (allow) return settings.removeRestrictedGuild(this);
						else return settings.addRestrictedGuild(this);
					}

					/**
					 * Bans a user from the guild.
					 * @param {UserResolvable} user The user to ban
					 * @param {Object|number|string} [options] Ban options. If a number, the number of days to delete messages for, if a
					 * string, the ban reason. Supplying an object allows you to do both.
					 * @param {number} [options.days=0] Number of days of messages to delete
					 * @param {string} [options.reason] Reason for banning
					 * @returns {Promise<GuildMember|User|string>} Result object will be resolved as specifically as possible.
					 * If the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot
					 * be resolved, the user ID will be the result.
					 * @example
					 * // Ban a user by ID
					 * guild.ban('some user ID')
					 *   .then(user => console.log(`Banned ${user.username || user.id || user} from ${guild}`))
					 *   .catch(console.error);
					 * @example
					 * // Ban a user by object with reason and days
					 * guild.ban(user, { days: 7, reason: 'He needed to go' })
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					ban(user, options = {}) {
						if (typeof options === "number") {
							options = {
								reason: null,
								"delete-message-days": options,
							};
						} else if (typeof options === "string") {
							options = {
								reason: options,
								"delete-message-days": 0,
							};
						}
						if (options.days)
							options["delete-message-days"] = options.days;
						return this.client.rest.methods.banGuildMember(
							this,
							user,
							options
						);
					}

					/**
					 * Unbans a user from the guild.
					 * @param {UserResolvable} user The user to unban
					 * @param {string} [reason] Reason for unbanning the user
					 * @returns {Promise<User>}
					 * @example
					 * // Unban a user by ID (or with a user/guild member object)
					 * guild.unban('some user ID')
					 *   .then(user => console.log(`Unbanned ${user.username} from ${guild}`))
					 *   .catch(console.error);
					 */
					unban(user, reason) {
						return this.client.rest.methods.unbanGuildMember(
							this,
							user,
							reason
						);
					}

					/**
					 * Prunes members from the guild based on how long they have been inactive.
					 * @param {number} days Number of days of inactivity required to kick
					 * @param {boolean} [dry=false] If true, will return number of users that will be kicked, without actually doing it
					 * @param {string} [reason] Reason for this prune
					 * @returns {Promise<number>} The number of members that were/will be kicked
					 * @example
					 * // See how many members will be pruned
					 * guild.pruneMembers(12, true)
					 *   .then(pruned => console.log(`This will prune ${pruned} people!`))
					 *   .catch(console.error);
					 * @example
					 * // Actually prune the members
					 * guild.pruneMembers(12)
					 *   .then(pruned => console.log(`I just pruned ${pruned} people!`))
					 *   .catch(console.error);
					 */
					pruneMembers(days, dry = false, reason) {
						if (typeof days !== "number")
							throw new TypeError("Days must be a number.");
						return this.client.rest.methods.pruneGuildMembers(
							this,
							days,
							dry,
							reason
						);
					}

					/**
					 * Syncs this guild (already done automatically every 30 seconds).
					 * <warn>This is only available when using a user account.</warn>
					 */
					sync() {
						if (!this.client.user.bot)
							this.client.syncGuilds([this]);
					}

					/**
					 * Overwrites to use when creating a channel or replacing overwrites
					 * @typedef {Object} ChannelCreationOverwrites
					 * @property {PermissionResolvable} [allow] The permissions to allow
					 * **(deprecated)**
					 * @property {PermissionResolvable} [allowed] The permissions to allow
					 * @property {PermissionResolvable} [deny] The permissions to deny
					 * **(deprecated)**
					 * @property {PermissionResolvable} [denied] The permissions to deny
					 * @property {GuildMemberResolvable|RoleResolvable} memberOrRole Member or role this overwrite is for
					 */

					/**
					 * Creates a new channel in the guild.
					 * @param {string} name The name of the new channel
					 * @param {string} [type='text'] The type of the new channel, either `text` or `voice` or `category`
					 * @param {ChannelCreationOverwrites[]|Collection<Snowflake, PermissionOverwrites>} [overwrites] Permission overwrites
					 * @param {string} [reason] Reason for creating this channel
					 * @returns {Promise<CategoryChannel|TextChannel|VoiceChannel>}
					 * @example
					 * // Create a new text channel
					 * guild.createChannel('new-general', 'text')
					 *   .then(console.log)
					 *   .catch(console.error);
					 * @example
					 * // Create a new category channel with permission overwrites
					 * guild.createChannel('new-category', 'category', [{
					 *   id: guild.id,
					 *   deny: ['MANAGE_MESSAGES'],
					 *   allow: ['SEND_MESSAGES']
					 * }])
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					createChannel(name, type, overwrites, reason) {
						return this.client.rest.methods.createChannel(
							this,
							name,
							type,
							overwrites,
							reason
						);
					}

					/**
					 * The data needed for updating a channel's position.
					 * @typedef {Object} ChannelPosition
					 * @property {ChannelResolvable} channel Channel to update
					 * @property {number} position New position for the channel
					 */

					/**
					 * Batch-updates the guild's channels' positions.
					 * @param {ChannelPosition[]} channelPositions Channel positions to update
					 * @returns {Promise<Guild>}
					 * @example
					 * guild.updateChannels([{ channel: channelID, position: newChannelIndex }])
					 *   .then(g => console.log(`Updated channel positions for ${g}`))
					 *   .catch(console.error);
					 */
					setChannelPositions(channelPositions) {
						return this.client.rest.methods.updateChannelPositions(
							this.id,
							channelPositions
						);
					}

					/**
					 * Creates a new role in the guild with given information.
					 * @param {RoleData} [data] The data to update the role with
					 * @param {string} [reason] Reason for creating this role
					 * @returns {Promise<Role>}
					 * @example
					 * // Create a new role
					 * guild.createRole()
					 *   .then(role => console.log(`Created new role with name ${role.name}`))
					 *   .catch(console.error);
					 * @example
					 * // Create a new role with data
					 * guild.createRole({
					 *   name: 'Super Cool People',
					 *   color: 'BLUE',
					 * })
					 *   .then(role => console.log(`Created new role with name ${role.name} and color ${role.color}`))
					 *   .catch(console.error)
					 */
					createRole(data = {}, reason) {
						return this.client.rest.methods.createGuildRole(
							this,
							data,
							reason
						);
					}

					/**
					 * Creates a new custom emoji in the guild.
					 * @param {BufferResolvable|Base64Resolvable} attachment The image for the emoji
					 * @param {string} name The name for the emoji
					 * @param {Collection<Snowflake, Role>|Role[]} [roles] Roles to limit the emoji to
					 * @param {string} [reason] Reason for creating the emoji
					 * @returns {Promise<Emoji>} The created emoji
					 * @example
					 * // Create a new emoji from a url
					 * guild.createEmoji('https://i.imgur.com/w3duR07.png', 'rip')
					 *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}`))
					 *   .catch(console.error);
					 * @example
					 * // Create a new emoji from a file on your computer
					 * guild.createEmoji('./memes/banana.png', 'banana')
					 *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}`))
					 *   .catch(console.error);
					 */
					createEmoji(attachment, name, roles, reason) {
						if (
							typeof attachment === "string" &&
							attachment.startsWith("data:")
						) {
							return this.client.rest.methods.createEmoji(
								this,
								attachment,
								name,
								roles,
								reason
							);
						} else {
							return this.client.resolver
								.resolveImage(attachment)
								.then((data) =>
									this.client.rest.methods.createEmoji(
										this,
										data,
										name,
										roles,
										reason
									)
								);
						}
					}

					/**
					 * Delete an emoji.
					 * @param {Emoji|string} emoji The emoji to delete
					 * @param {string} [reason] Reason for deleting the emoji
					 * @returns {Promise}
					 */
					deleteEmoji(emoji, reason) {
						if (!(emoji instanceof Emoji))
							emoji = this.emojis.get(emoji);
						return this.client.rest.methods.deleteEmoji(
							emoji,
							reason
						);
					}

					/**
					 * Causes the client to leave the guild.
					 * @returns {Promise<Guild>}
					 * @example
					 * // Leave a guild
					 * guild.leave()
					 *   .then(g => console.log(`Left the guild ${g}`))
					 *   .catch(console.error);
					 */
					leave() {
						return this.client.rest.methods.leaveGuild(this);
					}

					/**
					 * Causes the client to delete the guild.
					 * @returns {Promise<Guild>}
					 * @example
					 * // Delete a guild
					 * guild.delete()
					 *   .then(g => console.log(`Deleted the guild ${g}`))
					 *   .catch(console.error);
					 */
					delete() {
						return this.client.rest.methods.deleteGuild(this);
					}

					/**
					 * Whether this guild equals another guild. It compares all properties, so for most operations
					 * it is advisable to just compare `guild.id === guild2.id` as it is much faster and is often
					 * what most users need.
					 * @param {Guild} guild The guild to compare with
					 * @returns {boolean}
					 */
					equals(guild) {
						let equal =
							guild &&
							this.id === guild.id &&
							this.available === !guild.unavailable &&
							this.splash === guild.splash &&
							this.region === guild.region &&
							this.name === guild.name &&
							this.memberCount === guild.member_count &&
							this.large === guild.large &&
							this.icon === guild.icon &&
							Util.arraysEqual(this.features, guild.features) &&
							this.ownerID === guild.owner_id &&
							this.verificationLevel ===
								guild.verification_level &&
							this.embedEnabled === guild.embed_enabled;

						if (equal) {
							if (this.embedChannel) {
								if (
									this.embedChannel.id !==
									guild.embed_channel_id
								)
									equal = false;
							} else if (guild.embed_channel_id) {
								equal = false;
							}
						}

						return equal;
					}

					/**
					 * When concatenated with a string, this automatically concatenates the guild's name instead of the guild object.
					 * @returns {string}
					 * @example
					 * // Logs: Hello from My Guild!
					 * console.log(`Hello from ${guild}!`);
					 * @example
					 * // Logs: Hello from My Guild!
					 * console.log('Hello from ' + guild + '!');
					 */
					toString() {
						return this.name;
					}

					_addMember(guildUser, emitEvent = true) {
						const existing = this.members.has(guildUser.user.id);
						if (!(guildUser.user instanceof User))
							guildUser.user = this.client.dataManager.newUser(
								guildUser.user
							);

						guildUser.joined_at = guildUser.joined_at || 0;
						const member = new GuildMember(this, guildUser);
						this.members.set(member.id, member);

						if (
							this._rawVoiceStates &&
							this._rawVoiceStates.has(member.user.id)
						) {
							const voiceState = this._rawVoiceStates.get(
								member.user.id
							);
							member.serverMute = voiceState.mute;
							member.serverDeaf = voiceState.deaf;
							member.selfMute = voiceState.self_mute;
							member.selfDeaf = voiceState.self_deaf;
							member.voiceSessionID = voiceState.session_id;
							member.voiceChannelID = voiceState.channel_id;
							if (
								this.client.channels.has(voiceState.channel_id)
							) {
								this.client.channels
									.get(voiceState.channel_id)
									.members.set(member.user.id, member);
							} else {
								this.client.emit(
									"warn",
									`Member ${member.id} added in guild ${
										this.id
									} with an uncached voice channel`
								);
							}
						}

						/**
						 * Emitted whenever a user joins a guild.
						 * @event Client#guildMemberAdd
						 * @param {GuildMember} member The member that has joined a guild
						 */
						if (
							this.client.ws.connection.status ===
								Constants.Status.READY &&
							emitEvent &&
							!existing
						) {
							this.client.emit(
								Constants.Events.GUILD_MEMBER_ADD,
								member
							);
						}

						return member;
					}

					_updateMember(member, data) {
						const oldMember = Util.cloneObject(member);

						if (data.roles) member._roles = data.roles;
						if (typeof data.nick !== "undefined")
							member.nickname = data.nick;

						const notSame =
							member.nickname !== oldMember.nickname ||
							!Util.arraysEqual(member._roles, oldMember._roles);

						if (
							this.client.ws.connection.status ===
								Constants.Status.READY &&
							notSame
						) {
							/**
							 * Emitted whenever a guild member changes - i.e. new role, removed role, nickname.
							 * @event Client#guildMemberUpdate
							 * @param {GuildMember} oldMember The member before the update
							 * @param {GuildMember} newMember The member after the update
							 */
							this.client.emit(
								Constants.Events.GUILD_MEMBER_UPDATE,
								oldMember,
								member
							);
						}

						return {
							old: oldMember,
							mem: member,
						};
					}

					_removeMember(guildMember) {
						this.members.delete(guildMember.id);
					}

					_memberSpeakUpdate(user, speaking) {
						const member = this.members.get(user);
						if (member && member.speaking !== speaking) {
							member.speaking = speaking;
							/**
							 * Emitted once a guild member starts/stops speaking.
							 * @event Client#guildMemberSpeaking
							 * @param {GuildMember} member The member that started/stopped speaking
							 * @param {boolean} speaking Whether or not the member is speaking
							 */
							this.client.emit(
								Constants.Events.GUILD_MEMBER_SPEAKING,
								member,
								speaking
							);
						}
					}

					_setPresence(id, presence) {
						if (this.presences.get(id)) {
							this.presences.get(id).update(presence);
							return;
						}
						this.presences.set(
							id,
							new Presence(presence, this.client)
						);
					}

					/**
					 * Set the position of a role in this guild.
					 * @param {string|Role} role The role to edit, can be a role object or a role ID
					 * @param {number} position The new position of the role
					 * @param {boolean} [relative=false] Position Moves the role relative to its current position
					 * @returns {Promise<Guild>}
					 */
					setRolePosition(role, position, relative = false) {
						if (typeof role === "string") {
							role = this.roles.get(role);
							if (!role)
								return Promise.reject(
									new Error(
										"Supplied role is not a role or snowflake."
									)
								);
						}

						position = Number(position);
						if (isNaN(position))
							return Promise.reject(
								new Error("Supplied position is not a number.")
							);

						let updatedRoles = this._sortedRoles.array();

						Util.moveElementInArray(
							updatedRoles,
							role,
							position,
							relative
						);

						updatedRoles = updatedRoles.map((r, i) => ({
							id: r.id,
							position: i,
						}));
						return this.client.rest.methods.setRolePositions(
							this.id,
							updatedRoles
						);
					}

					/**
					 * Set the position of a channel in this guild.
					 * @param {string|GuildChannel} channel The channel to edit, can be a channel object or a channel ID
					 * @param {number} position The new position of the channel
					 * @param {boolean} [relative=false] Position Moves the channel relative to its current position
					 * @returns {Promise<Guild>}
					 */
					setChannelPosition(channel, position, relative = false) {
						if (typeof channel === "string") {
							channel = this.channels.get(channel);
							if (!channel)
								return Promise.reject(
									new Error(
										"Supplied channel is not a channel or snowflake."
									)
								);
						}

						position = Number(position);
						if (isNaN(position))
							return Promise.reject(
								new Error("Supplied position is not a number.")
							);

						let updatedChannels = this._sortedChannels(
							channel.type
						).array();

						Util.moveElementInArray(
							updatedChannels,
							channel,
							position,
							relative
						);

						updatedChannels = updatedChannels.map((r, i) => ({
							id: r.id,
							position: i,
						}));
						return this.client.rest.methods.setChannelPositions(
							this.id,
							updatedChannels
						);
					}

					/**
					 * Fetches a collection of channels in the current guild sorted by position.
					 * @param {string} type The channel type
					 * @returns {Collection<Snowflake, GuildChannel>}
					 * @private
					 */
					_sortedChannels(type) {
						return this._sortPositionWithID(
							this.channels.filter((c) => {
								if (type === "voice" && c.type === "voice")
									return true;
								else if (type !== "voice" && c.type !== "voice")
									return true;
								else return type === c.type;
							})
						);
					}

					/**
					 * Sorts a collection by object position or ID if the positions are equivalent.
					 * Intended to be identical to Discord's sorting method.
					 * @param {Collection} collection The collection to sort
					 * @returns {Collection}
					 * @private
					 */
					_sortPositionWithID(collection) {
						return collection.sort((a, b) =>
							a.position !== b.position
								? a.position - b.position
								: Long.fromString(a.id)
										.sub(Long.fromString(b.id))
										.toNumber()
						);
					}
				}

				/**
				 * The `#general` TextChannel of the guild
				 * @name Guild#defaultChannel
				 * @type {TextChannel}
				 * @readonly
				 * @deprecated
				 */
				Object.defineProperty(Guild.prototype, "defaultChannel", {
					get: util.deprecate(function defaultChannel() {
						return this.channels.get(this.id);
					}, "Guild#defaultChannel: This property is obsolete, will be removed in v12.0.0, and may not function as expected."),
				});

				Guild.prototype.acknowledge = util.deprecate(
					Guild.prototype.acknowledge,
					"Guild#acknowledge: userbot methods will be removed"
				);

				Guild.prototype.setPosition = util.deprecate(
					Guild.prototype.setPosition,
					"Guild#setPosition: userbot methods will be removed"
				);

				Guild.prototype.search = util.deprecate(
					Guild.prototype.search,
					"Guild#search: userbot methods will be removed"
				);

				Guild.prototype.sync = util.deprecate(
					Guild.prototype.sync,
					"Guild#sync:, userbot methods will be removed"
				);

				module.exports = Guild;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/GuildAuditLogs.js":
			/*!******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/GuildAuditLogs.js ***!
  \******************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Collection = __webpack_require__(
					/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);
				const Snowflake = __webpack_require__(
					/*! ../util/Snowflake */ "./node_modules/discord.js/src/util/Snowflake.js"
				);
				const Webhook = __webpack_require__(
					/*! ./Webhook */ "./node_modules/discord.js/src/structures/Webhook.js"
				);
				const Invite = __webpack_require__(
					/*! ./Invite */ "./node_modules/discord.js/src/structures/Invite.js"
				);

				/**
				 * The target type of an entry, e.g. `GUILD`. Here are the available types:
				 * * GUILD
				 * * CHANNEL
				 * * USER
				 * * ROLE
				 * * INVITE
				 * * WEBHOOK
				 * * EMOJI
				 * * MESSAGE
				 * @typedef {string} AuditLogTargetType
				 */

				/**
				 * Key mirror of all available audit log targets.
				 * @name GuildAuditLogs.Targets
				 * @type {AuditLogTargetType}
				 */
				const Targets = {
					ALL: "ALL",
					GUILD: "GUILD",
					CHANNEL: "CHANNEL",
					USER: "USER",
					ROLE: "ROLE",
					INVITE: "INVITE",
					WEBHOOK: "WEBHOOK",
					EMOJI: "EMOJI",
					MESSAGE: "MESSAGE",
				};

				/**
				 * The action of an entry. Here are the available actions:
				 * * ALL: null
				 * * GUILD_UPDATE: 1
				 * * CHANNEL_CREATE: 10
				 * * CHANNEL_UPDATE: 11
				 * * CHANNEL_DELETE: 12
				 * * CHANNEL_OVERWRITE_CREATE: 13
				 * * CHANNEL_OVERWRITE_UPDATE: 14
				 * * CHANNEL_OVERWRITE_DELETE: 15
				 * * MEMBER_KICK: 20
				 * * MEMBER_PRUNE: 21
				 * * MEMBER_BAN_ADD: 22
				 * * MEMBER_BAN_REMOVE: 23
				 * * MEMBER_UPDATE: 24
				 * * MEMBER_ROLE_UPDATE: 25
				 * * ROLE_CREATE: 30
				 * * ROLE_UPDATE: 31
				 * * ROLE_DELETE: 32
				 * * INVITE_CREATE: 40
				 * * INVITE_UPDATE: 41
				 * * INVITE_DELETE: 42
				 * * WEBHOOK_CREATE: 50
				 * * WEBHOOK_UPDATE: 51
				 * * WEBHOOK_DELETE: 52
				 * * EMOJI_CREATE: 60
				 * * EMOJI_UPDATE: 61
				 * * EMOJI_DELETE: 62
				 * * MESSAGE_DELETE: 72
				 * @typedef {?number|string} AuditLogAction
				 */

				/**
				 * All available actions keyed under their names to their numeric values.
				 * @name GuildAuditLogs.Actions
				 * @type {AuditLogAction}
				 */
				const Actions = {
					ALL: null,
					GUILD_UPDATE: 1,
					CHANNEL_CREATE: 10,
					CHANNEL_UPDATE: 11,
					CHANNEL_DELETE: 12,
					CHANNEL_OVERWRITE_CREATE: 13,
					CHANNEL_OVERWRITE_UPDATE: 14,
					CHANNEL_OVERWRITE_DELETE: 15,
					MEMBER_KICK: 20,
					MEMBER_PRUNE: 21,
					MEMBER_BAN_ADD: 22,
					MEMBER_BAN_REMOVE: 23,
					MEMBER_UPDATE: 24,
					MEMBER_ROLE_UPDATE: 25,
					ROLE_CREATE: 30,
					ROLE_UPDATE: 31,
					ROLE_DELETE: 32,
					INVITE_CREATE: 40,
					INVITE_UPDATE: 41,
					INVITE_DELETE: 42,
					WEBHOOK_CREATE: 50,
					WEBHOOK_UPDATE: 51,
					WEBHOOK_DELETE: 52,
					EMOJI_CREATE: 60,
					EMOJI_UPDATE: 61,
					EMOJI_DELETE: 62,
					MESSAGE_DELETE: 72,
				};

				/**
				 * Audit logs entries are held in this class.
				 */
				class GuildAuditLogs {
					constructor(guild, data) {
						if (data.users)
							for (const user of data.users)
								guild.client.dataManager.newUser(user);

						/**
						 * Cached webhooks
						 * @type {Collection<Snowflake, Webhook>}
						 * @private
						 */
						this.webhooks = new Collection();
						if (data.webhooks) {
							for (const hook of data.webhooks) {
								this.webhooks.set(
									hook.id,
									new Webhook(guild.client, hook)
								);
							}
						}

						/**
						 * The entries for this guild's audit logs
						 * @type {Collection<Snowflake, GuildAuditLogsEntry>}
						 */
						this.entries = new Collection();
						for (const item of data.audit_log_entries) {
							const entry = new GuildAuditLogsEntry(
								this,
								guild,
								item
							);
							this.entries.set(entry.id, entry);
						}
					}

					/**
					 * Handles possible promises for entry targets.
					 * @returns {Promise<GuildAuditLogs>}
					 */
					static build(...args) {
						const logs = new GuildAuditLogs(...args);
						return Promise.all(
							logs.entries.map((e) => e.target)
						).then(() => logs);
					}

					/**
					 * The target of an entry. It can be one of:
					 * * A guild
					 * * A user
					 * * A role
					 * * An emoji
					 * * An invite
					 * * A webhook
					 * * An object where the keys represent either the new value or the old value
					 * @typedef {?Object|Guild|User|Role|Emoji|Invite|Webhook} AuditLogEntryTarget
					 */

					/**
					 * Find target type from entry action.
					 * @param {number} target The action target
					 * @returns {?string}
					 */
					static targetType(target) {
						if (target < 10) return Targets.GUILD;
						if (target < 20) return Targets.CHANNEL;
						if (target < 30) return Targets.USER;
						if (target < 40) return Targets.ROLE;
						if (target < 50) return Targets.INVITE;
						if (target < 60) return Targets.WEBHOOK;
						if (target < 70) return Targets.EMOJI;
						if (target < 80) return Targets.MESSAGE;
						return null;
					}

					/**
					 * The action type of an entry, e.g. `CREATE`. Here are the available types:
					 * * CREATE
					 * * DELETE
					 * * UPDATE
					 * * ALL
					 * @typedef {string} AuditLogActionType
					 */

					/**
					 * Finds the action type from the entry action.
					 * @param {AuditLogAction} action The action target
					 * @returns {AuditLogActionType}
					 */
					static actionType(action) {
						if (
							[
								Actions.CHANNEL_CREATE,
								Actions.CHANNEL_OVERWRITE_CREATE,
								Actions.MEMBER_BAN_REMOVE,
								Actions.ROLE_CREATE,
								Actions.INVITE_CREATE,
								Actions.WEBHOOK_CREATE,
								Actions.EMOJI_CREATE,
							].includes(action)
						)
							return "CREATE";

						if (
							[
								Actions.CHANNEL_DELETE,
								Actions.CHANNEL_OVERWRITE_DELETE,
								Actions.MEMBER_KICK,
								Actions.MEMBER_PRUNE,
								Actions.MEMBER_BAN_ADD,
								Actions.ROLE_DELETE,
								Actions.INVITE_DELETE,
								Actions.WEBHOOK_DELETE,
								Actions.EMOJI_DELETE,
								Actions.MESSAGE_DELETE,
							].includes(action)
						)
							return "DELETE";

						if (
							[
								Actions.GUILD_UPDATE,
								Actions.CHANNEL_UPDATE,
								Actions.CHANNEL_OVERWRITE_UPDATE,
								Actions.MEMBER_UPDATE,
								Actions.MEMBER_ROLE_UPDATE,
								Actions.ROLE_UPDATE,
								Actions.INVITE_UPDATE,
								Actions.WEBHOOK_UPDATE,
								Actions.EMOJI_UPDATE,
							].includes(action)
						)
							return "UPDATE";

						return "ALL";
					}
				}

				/**
				 * Audit logs entry.
				 */
				class GuildAuditLogsEntry {
					constructor(logs, guild, data) {
						const targetType = GuildAuditLogs.targetType(
							data.action_type
						);
						/**
						 * The target type of this entry
						 * @type {AuditLogTargetType}
						 */
						this.targetType = targetType;

						/**
						 * The action type of this entry
						 * @type {AuditLogActionType}
						 */
						this.actionType = GuildAuditLogs.actionType(
							data.action_type
						);

						/**
						 * Specific action type of this entry in its string representation
						 * @type {AuditLogAction}
						 */
						this.action = Object.keys(Actions).find(
							(k) => Actions[k] === data.action_type
						);

						/**
						 * The reason of this entry
						 * @type {?string}
						 */
						this.reason = data.reason || null;

						/**
						 * The user that executed this entry
						 * @type {User}
						 */
						this.executor = guild.client.users.get(data.user_id);

						/**
						 * An entry in the audit log representing a specific change.
						 * @typedef {object} AuditLogChange
						 * @property {string} key The property that was changed, e.g. `nick` for nickname changes
						 * @property {*} [old] The old value of the change, e.g. for nicknames, the old nickname
						 * @property {*} [new] The new value of the change, e.g. for nicknames, the new nickname
						 */

						/**
						 * Specific property changes
						 * @type {AuditLogChange[]}
						 */
						this.changes = data.changes
							? data.changes.map((c) => ({
									key: c.key,
									old: c.old_value,
									new: c.new_value,
							  }))
							: null;

						/**
						 * The ID of this entry
						 * @type {Snowflake}
						 */
						this.id = data.id;

						/**
						 * Any extra data from the entry
						 * @type {?Object|Role|GuildMember}
						 */
						this.extra = null;
						if (data.options) {
							if (data.action_type === Actions.MEMBER_PRUNE) {
								this.extra = {
									removed: data.options.members_removed,
									days: data.options.delete_member_days,
								};
							} else if (
								data.action_type === Actions.MESSAGE_DELETE
							) {
								this.extra = {
									count: data.options.count,
									channel: guild.channels.get(
										data.options.channel_id
									),
								};
							} else {
								switch (data.options.type) {
									case "member":
										this.extra = guild.members.get(
											data.options.id
										);
										if (!this.extra)
											this.extra = {id: data.options.id};
										break;
									case "role":
										this.extra = guild.roles.get(
											data.options.id
										);
										if (!this.extra)
											this.extra = {
												id: data.options.id,
												name: data.options.role_name,
											};
										break;
									default:
										break;
								}
							}
						}

						if (
							[Targets.USER, Targets.GUILD].includes(targetType)
						) {
							/**
							 * The target of this entry
							 * @type {AuditLogEntryTarget}
							 */
							this.target = guild.client[
								`${targetType.toLowerCase()}s`
							].get(data.target_id);
						} else if (targetType === Targets.WEBHOOK) {
							this.target =
								logs.webhooks.get(data.target_id) ||
								new Webhook(
									guild.client,
									this.changes.reduce(
										(o, c) => {
											o[c.key] = c.new || c.old;
											return o;
										},
										{
											id: data.target_id,
											guild_id: guild.id,
										}
									)
								);
						} else if (targetType === Targets.INVITE) {
							const changes = this.changes.reduce(
								(o, c) => {
									o[c.key] = c.new || c.old;
									return o;
								},
								{
									id: data.target_id,
									guild,
								}
							);
							changes.channel = {id: changes.channel_id};
							this.target = new Invite(guild.client, changes);
						} else if (targetType === Targets.MESSAGE) {
							this.target = guild.client.users.get(
								data.target_id
							);
						} else {
							this.target = guild[
								`${targetType.toLowerCase()}s`
							].get(data.target_id);
						}
					}

					/**
					 * The timestamp this entry was created at
					 * @type {number}
					 * @readonly
					 */
					get createdTimestamp() {
						return Snowflake.deconstruct(this.id).timestamp;
					}

					/**
					 * The time this entry was created
					 * @type {Date}
					 * @readonly
					 */
					get createdAt() {
						return new Date(this.createdTimestamp);
					}
				}

				GuildAuditLogs.Actions = Actions;
				GuildAuditLogs.Targets = Targets;
				GuildAuditLogs.Entry = GuildAuditLogsEntry;

				module.exports = GuildAuditLogs;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/GuildChannel.js":
			/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/GuildChannel.js ***!
  \****************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Channel = __webpack_require__(
					/*! ./Channel */ "./node_modules/discord.js/src/structures/Channel.js"
				);
				const Role = __webpack_require__(
					/*! ./Role */ "./node_modules/discord.js/src/structures/Role.js"
				);
				const PermissionOverwrites = __webpack_require__(
					/*! ./PermissionOverwrites */ "./node_modules/discord.js/src/structures/PermissionOverwrites.js"
				);
				const Permissions = __webpack_require__(
					/*! ../util/Permissions */ "./node_modules/discord.js/src/util/Permissions.js"
				);
				const Collection = __webpack_require__(
					/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);
				const Constants = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Invite = __webpack_require__(
					/*! ./Invite */ "./node_modules/discord.js/src/structures/Invite.js"
				);

				/**
				 * Represents a guild channel (i.e. text channels and voice channels).
				 * @extends {Channel}
				 */
				class GuildChannel extends Channel {
					constructor(guild, data) {
						super(guild.client, data);

						/**
						 * The guild the channel is in
						 * @type {Guild}
						 */
						this.guild = guild;
					}

					setup(data) {
						super.setup(data);

						/**
						 * The name of the guild channel
						 * @type {string}
						 */
						this.name = data.name;

						/**
						 * The position of the channel in the list
						 * @type {number}
						 */
						this.position = data.position;

						/**
						 * The ID of the category parent of this channel
						 * @type {?Snowflake}
						 */
						this.parentID = data.parent_id;

						/**
						 * A map of permission overwrites in this channel for roles and users
						 * @type {Collection<Snowflake, PermissionOverwrites>}
						 */
						this.permissionOverwrites = new Collection();
						if (data.permission_overwrites) {
							for (const overwrite of data.permission_overwrites) {
								this.permissionOverwrites.set(
									overwrite.id,
									new PermissionOverwrites(this, overwrite)
								);
							}
						}
					}

					/**
					 * The position of the channel
					 * @type {number}
					 * @readonly
					 */
					get calculatedPosition() {
						const sorted = this.guild._sortedChannels(this.type);
						return sorted.array().indexOf(sorted.get(this.id));
					}

					/**
					 * The category parent of this channel
					 * @type {?CategoryChannel}
					 * @readonly
					 */
					get parent() {
						return this.guild.channels.get(this.parentID) || null;
					}

					/**
					 * Gets the overall set of permissions for a user in this channel, taking into account channel overwrites.
					 * @param {GuildMemberResolvable} member The user that you want to obtain the overall permissions for
					 * @returns {?Permissions}
					 */
					memberPermissions(member) {
						member = this.client.resolver.resolveGuildMember(
							this.guild,
							member
						);
						if (!member) return null;

						if (member.id === this.guild.ownerID)
							return new Permissions(member, Permissions.ALL);

						const roles = member.roles;
						const permissions = new Permissions(
							roles.map((role) => role.permissions)
						);

						if (permissions.has(Permissions.FLAGS.ADMINISTRATOR))
							return new Permissions(Permissions.ALL).freeze();

						const overwrites = this.overwritesFor(
							member,
							true,
							roles
						);

						return permissions
							.remove(
								overwrites.everyone
									? overwrites.everyone.deny
									: 0
							)
							.add(
								overwrites.everyone
									? overwrites.everyone.allow
									: 0
							)
							.remove(
								overwrites.roles.length > 0
									? overwrites.roles.map((role) => role.deny)
									: 0
							)
							.add(
								overwrites.roles.length > 0
									? overwrites.roles.map((role) => role.allow)
									: 0
							)
							.remove(
								overwrites.member ? overwrites.member.deny : 0
							)
							.add(
								overwrites.member ? overwrites.member.allow : 0
							)
							.freeze();
					}

					/**
					 * Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.
					 * @param {RoleResolvable} role The role that you want to obtain the overall permissions for
					 * @returns {?Permissions}
					 */
					rolePermissions(role) {
						if (role.permissions & Permissions.FLAGS.ADMINISTRATOR)
							return new Permissions(Permissions.ALL).freeze();

						const everyoneOverwrites = this.permissionOverwrites.get(
							this.guild.id
						);
						const roleOverwrites = this.permissionOverwrites.get(
							role.id
						);

						return new Permissions(role.permissions)
							.remove(
								everyoneOverwrites ? everyoneOverwrites.deny : 0
							)
							.add(
								everyoneOverwrites
									? everyoneOverwrites.allow
									: 0
							)
							.remove(roleOverwrites ? roleOverwrites.deny : 0)
							.add(roleOverwrites ? roleOverwrites.allow : 0)
							.freeze();
					}

					/**
					 * Get the overall set of permissions for a member or role in this channel, taking into account channel overwrites.
					 * @param {GuildMemberResolvable|RoleResolvable} memberOrRole The member or role to obtain the overall permissions for
					 * @returns {?Permissions}
					 */
					permissionsFor(memberOrRole) {
						const member = this.guild.member(memberOrRole);
						if (member) return this.memberPermissions(member);
						const role = this.client.resolver.resolveRole(
							this.guild,
							memberOrRole
						);
						if (role) return this.rolePermissions(role);
						return null;
					}

					overwritesFor(member, verified = false, roles = null) {
						if (!verified)
							member = this.client.resolver.resolveGuildMember(
								this.guild,
								member
							);
						if (!member) return [];

						roles = roles || member.roles;
						const roleOverwrites = [];
						let memberOverwrites;
						let everyoneOverwrites;

						for (const overwrite of this.permissionOverwrites.values()) {
							if (overwrite.id === this.guild.id) {
								everyoneOverwrites = overwrite;
							} else if (roles.has(overwrite.id)) {
								roleOverwrites.push(overwrite);
							} else if (overwrite.id === member.id) {
								memberOverwrites = overwrite;
							}
						}

						return {
							everyone: everyoneOverwrites,
							roles: roleOverwrites,
							member: memberOverwrites,
						};
					}

					/**
					 * Replaces the permission overwrites for a channel
					 * @param {Object} [options] Options
					 * @param {ChannelCreationOverwrites[]|Collection<Snowflake, PermissionOverwrites>} [options.overwrites]
					 * Permission overwrites
					 * @param {string} [options.reason] Reason for updating the channel overwrites
					 * @returns {Promise<GuildChannel>}
					 * @example
					 * channel.replacePermissionOverwrites({
					 * overwrites: [
					 *   {
					 *      id: message.author.id,
					 *      denied: ['VIEW_CHANNEL'],
					 *   },
					 * ],
					 *   reason: 'Needed to change permissions'
					 * });
					 */
					replacePermissionOverwrites({overwrites, reason} = {}) {
						return this.edit({
							permissionOverwrites: overwrites,
							reason,
						}).then(() => this);
					}

					/**
					 * An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).
					 * ```js
					 * {
					 *  'SEND_MESSAGES': true,
					 *  'EMBED_LINKS': null,
					 *  'ATTACH_FILES': false,
					 * }
					 * ```
					 * @typedef {Object} PermissionOverwriteOptions
					 */

					/**
					 * Overwrites the permissions for a user or role in this channel.
					 * @param {Role|Snowflake|UserResolvable} userOrRole The user or role to update
					 * @param {PermissionOverwriteOptions} options The configuration for the update
					 * @param {string} [reason] Reason for creating/editing this overwrite
					 * @returns {Promise<GuildChannel>}
					 * @example
					 * // Overwrite permissions for a message author
					 * message.channel.overwritePermissions(message.author, {
					 *   SEND_MESSAGES: false
					 * })
					 *   .then(updated => console.log(updated.permissionOverwrites.get(message.author.id)))
					 *   .catch(console.error);
					 * @example
					 * // Overwite permissions for a message author and reset some
					 * message.channel.overwritePermissions(message.author, {
					 *   VIEW_CHANNEL: false,
					 *   SEND_MESSAGES: null
					 * })
					 *   .then(updated => console.log(updated.permissionOverwrites.get(message.author.id)))
					 *   .catch(console.error);
					 */
					overwritePermissions(userOrRole, options, reason) {
						const payload = {
							allow: 0,
							deny: 0,
						};

						if (userOrRole instanceof Role) {
							payload.type = "role";
						} else if (this.guild.roles.has(userOrRole)) {
							userOrRole = this.guild.roles.get(userOrRole);
							payload.type = "role";
						} else {
							userOrRole = this.client.resolver.resolveUser(
								userOrRole
							);
							payload.type = "member";
							if (!userOrRole)
								return Promise.reject(
									new TypeError(
										"Supplied parameter was neither a User nor a Role."
									)
								);
						}

						payload.id = userOrRole.id;

						const prevOverwrite = this.permissionOverwrites.get(
							userOrRole.id
						);

						if (prevOverwrite) {
							payload.allow = prevOverwrite.allow;
							payload.deny = prevOverwrite.deny;
						}

						for (const perm in options) {
							if (options[perm] === true) {
								payload.allow |= Permissions.FLAGS[perm] || 0;
								payload.deny &= ~(Permissions.FLAGS[perm] || 0);
							} else if (options[perm] === false) {
								payload.allow &= ~(
									Permissions.FLAGS[perm] || 0
								);
								payload.deny |= Permissions.FLAGS[perm] || 0;
							} else if (options[perm] === null) {
								payload.allow &= ~(
									Permissions.FLAGS[perm] || 0
								);
								payload.deny &= ~(Permissions.FLAGS[perm] || 0);
							}
						}

						return this.client.rest.methods
							.setChannelOverwrite(this, payload, reason)
							.then(() => this);
					}

					/**
					 * Locks in the permission overwrites from the parent channel.
					 * @returns {Promise<GuildChannel>}
					 */
					lockPermissions() {
						if (!this.parent)
							return Promise.reject(
								new TypeError(
									"Could not find a parent to this guild channel."
								)
							);
						const permissionOverwrites = this.parent.permissionOverwrites.map(
							(overwrite) => ({
								deny: overwrite.deny.bitfield,
								allow: overwrite.allow.bitfield,
								id: overwrite.id,
								type: overwrite.type,
							})
						);
						return this.edit({permissionOverwrites});
					}

					/**
					 * The data for a guild channel.
					 * @typedef {Object} ChannelData
					 * @property {string} [name] The name of the channel
					 * @property {number} [position] The position of the channel
					 * @property {string} [topic] The topic of the text channel
					 * @property {boolean} [nsfw] Whether the channel is NSFW
					 * @property {number} [bitrate] The bitrate of the voice channel
					 * @property {number} [userLimit] The user limit of the channel
					 * @property {string} [parent] The parent ID of the channel
					 * @property {ChannelCreationOverwrites[]|Collection<Snowflake, PermissionOverwrites>} [overwrites]
					 * Overwrites of the channel
					 */

					/**
					 * Edits the channel.
					 * @param {ChannelData} data The new data for the channel
					 * @param {string} [reason] Reason for editing this channel
					 * @returns {Promise<GuildChannel>}
					 * @example
					 * // Edit a channel
					 * channel.edit({ name: 'new-channel' })
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					edit(data, reason) {
						return this.client.rest.methods
							.updateChannel(this, data, reason)
							.then(() => this);
					}

					/**
					 * Set a new name for the guild channel.
					 * @param {string} name The new name for the guild channel
					 * @param {string} [reason] Reason for changing the guild channel's name
					 * @returns {Promise<GuildChannel>}
					 * @example
					 * // Set a new channel name
					 * channel.setName('not_general')
					 *   .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))
					 *   .catch(console.error);
					 */
					setName(name, reason) {
						return this.edit({name}, reason);
					}

					/**
					 * Set a new position for the guild channel.
					 * @param {number} position The new position for the guild channel
					 * @param {boolean} [relative=false] Move the position relative to its current value
					 * @returns {Promise<GuildChannel>}
					 * @example
					 * // Set a new channel position
					 * channel.setPosition(2)
					 *   .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))
					 *   .catch(console.error);
					 */
					setPosition(position, relative) {
						return this.guild.setChannelPosition(
							this,
							position,
							relative
						);
					}

					/**
					 * Set a new parent for the guild channel.
					 * @param {CategoryChannel|SnowFlake} parent The new parent for the guild channel
					 * @param {string} [reason] Reason for changing the guild channel's parent
					 * @returns {Promise<GuildChannel>}
					 * @example
					 * // Sets the parent of a channel
					 * channel.setParent('174674066072928256')
					 *   .then(updated => console.log(`Set the category of ${updated.name} to ${updated.parent.name}`))
					 *   .catch(console.error);
					 */
					setParent(parent, reason) {
						parent = this.client.resolver.resolveChannelID(parent);
						return this.edit({parent}, reason);
					}

					/**
					 * Set a new topic for the guild channel.
					 * @param {string} topic The new topic for the guild channel
					 * @param {string} [reason] Reason for changing the guild channel's topic
					 * @returns {Promise<GuildChannel>}
					 * @example
					 * // Set a new channel topic
					 * channel.setTopic('Needs more rate limiting')
					 *   .then(updated => console.log(`Channel's new topic is ${updated.topic}`))
					 *   .catch(console.error);
					 */
					setTopic(topic, reason) {
						return this.edit({topic}, reason);
					}

					/**
					 * Create an invite to this guild channel.
					 * <warn>This is only available when using a bot account.</warn>
					 * @param {Object} [options={}] Options for the invite
					 * @param {boolean} [options.temporary=false] Whether members that joined via the invite should be automatically
					 * kicked after 24 hours if they have not yet received a role
					 * @param {number} [options.maxAge=86400] How long the invite should last (in seconds, 0 for forever)
					 * @param {number} [options.maxUses=0] Maximum number of uses
					 * @param {boolean} [options.unique=false] Create a unique invite, or use an existing one with similar settings
					 * @param {string} [reason] Reason for creating the invite
					 * @returns {Promise<Invite>}
					 * @example
					 * // Create an invite to a channel
					 * channel.createInvite()
					 *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))
					 *   .catch(console.error);
					 */
					createInvite(options = {}, reason) {
						return this.client.rest.methods.createChannelInvite(
							this,
							options,
							reason
						);
					}

					/**
					 * Clone this channel.
					 * @param {string} [name=this.name] Optional name for the new channel, otherwise it has the name of this channel
					 * @param {boolean} [withPermissions=true] Whether to clone the channel with this channel's permission overwrites
					 * @param {boolean} [withTopic=true] Whether to clone the channel with this channel's topic
					 * @param {string} [reason] Reason for cloning this channel
					 * @returns {Promise<GuildChannel>}
					 * @example
					 * // Clone a channel
					 * channel.clone(undefined, true, false, 'Needed a clone')
					 *   .then(clone => console.log(`Cloned ${channel.name} to make a channel called ${clone.name}`))
					 *   .catch(console.error);
					 */
					clone(
						name = this.name,
						withPermissions = true,
						withTopic = true,
						reason
					) {
						return this.guild
							.createChannel(
								name,
								this.type,
								withPermissions
									? this.permissionOverwrites
									: [],
								reason
							)
							.then((channel) =>
								withTopic
									? channel.setTopic(this.topic)
									: channel
							);
					}

					/**
					 * Fetches a collection of invites to this guild channel.
					 * Resolves with a collection mapping invites by their codes.
					 * @returns {Promise<Collection<string, Invite>>}
					 */
					fetchInvites() {
						return this.client.rest
							.makeRequest(
								"get",
								Constants.Endpoints.Channel(this.id).invites,
								true
							)
							.then((data) => {
								const invites = new Collection();
								for (let invite of data) {
									invite = new Invite(this.client, invite);
									invites.set(invite.code, invite);
								}

								return invites;
							});
					}

					/**
					 * Deletes this channel.
					 * @param {string} [reason] Reason for deleting this channel
					 * @returns {Promise<GuildChannel>}
					 * @example
					 * // Delete the channel
					 * channel.delete('Making room for new channels')
					 *   .then(deleted => console.log(`Deleted ${deleted.name} to make room for new channels`))
					 *   .catch(console.error);
					 */
					delete(reason) {
						return this.client.rest.methods.deleteChannel(
							this,
							reason
						);
					}

					/**
					 * Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.
					 * In most cases, a simple `channel.id === channel2.id` will do, and is much faster too.
					 * @param {GuildChannel} channel Channel to compare with
					 * @returns {boolean}
					 */
					equals(channel) {
						let equal =
							channel &&
							this.id === channel.id &&
							this.type === channel.type &&
							this.topic === channel.topic &&
							this.position === channel.position &&
							this.name === channel.name;

						if (equal) {
							if (
								this.permissionOverwrites &&
								channel.permissionOverwrites
							) {
								equal = this.permissionOverwrites.equals(
									channel.permissionOverwrites
								);
							} else {
								equal =
									!this.permissionOverwrites &&
									!channel.permissionOverwrites;
							}
						}

						return equal;
					}

					/**
					 * Whether the channel is deletable by the client user
					 * @type {boolean}
					 * @readonly
					 */
					get deletable() {
						return (
							this.id !== this.guild.id &&
							this.permissionsFor(this.client.user).has(
								Permissions.FLAGS.MANAGE_CHANNELS
							)
						);
					}

					/**
					 * Whether the channel is manageable by the client user
					 * @type {boolean}
					 * @readonly
					 */
					get manageable() {
						if (this.client.user.id === this.guild.ownerID)
							return true;
						const permissions = this.permissionsFor(
							this.client.user
						);
						if (!permissions) return false;
						return permissions.has([
							Permissions.FLAGS.MANAGE_CHANNELS,
							Permissions.FLAGS.VIEW_CHANNEL,
						]);
					}

					/**
					 * Whether the channel is muted
					 * <warn>This is only available when using a user account.</warn>
					 * @type {?boolean}
					 * @readonly
					 */
					get muted() {
						if (this.client.user.bot) return null;
						try {
							return this.client.user.guildSettings
								.get(this.guild.id)
								.channelOverrides.get(this.id).muted;
						} catch (err) {
							return false;
						}
					}

					/**
					 * The type of message that should notify you
					 * <warn>This is only available when using a user account.</warn>
					 * @type {?MessageNotificationType}
					 * @readonly
					 */
					get messageNotifications() {
						if (this.client.user.bot) return null;
						try {
							return this.client.user.guildSettings
								.get(this.guild.id)
								.channelOverrides.get(this.id)
								.messageNotifications;
						} catch (err) {
							return Constants.MessageNotificationTypes[3];
						}
					}

					/**
					 * When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.
					 * @returns {string}
					 * @example
					 * // Logs: Hello from <#123456789012345678>
					 * console.log(`Hello from ${channel}`);
					 * @example
					 * // Logs: Hello from <#123456789012345678>
					 * console.log('Hello from ' + channel);
					 */
					toString() {
						return `<#${this.id}>`;
					}
				}

				module.exports = GuildChannel;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/GuildMember.js":
			/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/GuildMember.js ***!
  \***************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const TextBasedChannel = __webpack_require__(
					/*! ./interfaces/TextBasedChannel */ "./node_modules/discord.js/src/structures/interfaces/TextBasedChannel.js"
				);
				const Role = __webpack_require__(
					/*! ./Role */ "./node_modules/discord.js/src/structures/Role.js"
				);
				const Permissions = __webpack_require__(
					/*! ../util/Permissions */ "./node_modules/discord.js/src/util/Permissions.js"
				);
				const Collection = __webpack_require__(
					/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);
				const {Presence} = __webpack_require__(
					/*! ./Presence */ "./node_modules/discord.js/src/structures/Presence.js"
				);
				const util = __webpack_require__(
					/*! util */ "./node_modules/util/util.js"
				);

				/**
				 * Represents a member of a guild on Discord.
				 * @implements {TextBasedChannel}
				 */
				class GuildMember {
					constructor(guild, data) {
						/**
						 * The client that instantiated this GuildMember
						 * @name GuildMember#client
						 * @type {Client}
						 * @readonly
						 */
						Object.defineProperty(this, "client", {
							value: guild.client,
						});

						/**
						 * The guild that this member is part of
						 * @type {Guild}
						 */
						this.guild = guild;

						/**
						 * The user that this member instance Represents
						 * @type {User}
						 */
						this.user = {};

						/**
						 * The timestamp this member joined the guild at
						 * @type {number}
						 */
						this.joinedTimestamp = null;

						this._roles = [];
						if (data) this.setup(data);

						/**
						 * The ID of the last message sent by this member in their guild, if one was sent
						 * @type {?Snowflake}
						 */
						this.lastMessageID = null;

						/**
						 * The Message object of the last message sent by this member in their guild, if one was sent
						 * @type {?Message}
						 */
						this.lastMessage = null;

						/**
						 * Whether the member has been removed from the guild
						 * @type {boolean}
						 */
						this.deleted = false;
					}

					setup(data) {
						/**
						 * Whether this member is deafened server-wide
						 * @type {boolean}
						 */
						this.serverDeaf = data.deaf;

						/**
						 * Whether this member is muted server-wide
						 * @type {boolean}
						 */
						this.serverMute = data.mute;

						/**
						 * Whether this member is self-muted
						 * @type {boolean}
						 */
						this.selfMute = data.self_mute;

						/**
						 * Whether this member is self-deafened
						 * @type {boolean}
						 */
						this.selfDeaf = data.self_deaf;

						/**
						 * The voice session ID of this member, if any
						 * @type {?Snowflake}
						 */
						this.voiceSessionID = data.session_id;

						/**
						 * The voice channel ID of this member, if any
						 * @type {?Snowflake}
						 */
						this.voiceChannelID = data.channel_id;

						/**
						 * Whether this member is speaking and the client is in the same channel
						 * @type {boolean}
						 */
						this.speaking = false;

						/**
						 * The nickname of this member, if they have one
						 * @type {?string}
						 */
						this.nickname = data.nick || null;

						if (data.joined_at)
							this.joinedTimestamp = new Date(
								data.joined_at
							).getTime();

						this.user = data.user;
						this._roles = data.roles;
					}

					/**
					 * The time this member joined the guild
					 * @type {?Date}
					 * @readonly
					 */
					get joinedAt() {
						return this.joinedTimestamp
							? new Date(this.joinedTimestamp)
							: null;
					}

					/**
					 * The presence of this member
					 * @type {Presence}
					 * @readonly
					 */
					get presence() {
						return (
							this.frozenPresence ||
							this.guild.presences.get(this.id) ||
							new Presence(undefined, this.client)
						);
					}

					/**
					 * A list of roles that are applied to this member, mapped by the role ID
					 * @type {Collection<Snowflake, Role>}
					 * @readonly
					 */
					get roles() {
						const list = new Collection();
						const everyoneRole = this.guild.roles.get(
							this.guild.id
						);

						if (everyoneRole)
							list.set(everyoneRole.id, everyoneRole);

						for (const roleID of this._roles) {
							const role = this.guild.roles.get(roleID);
							if (role) list.set(role.id, role);
						}

						return list;
					}

					/**
					 * The role of this member with the highest position
					 * @type {Role}
					 * @readonly
					 */
					get highestRole() {
						return this.roles.reduce((prev, role) =>
							!prev || role.comparePositionTo(prev) > 0
								? role
								: prev
						);
					}

					/**
					 * The role of this member used to set their color
					 * @type {?Role}
					 * @readonly
					 */
					get colorRole() {
						const coloredRoles = this.roles.filter(
							(role) => role.color
						);
						if (!coloredRoles.size) return null;
						return coloredRoles.reduce((prev, role) =>
							!prev || role.comparePositionTo(prev) > 0
								? role
								: prev
						);
					}

					/**
					 * The displayed color of this member in base 10
					 * @type {number}
					 * @readonly
					 */
					get displayColor() {
						const role = this.colorRole;
						return (role && role.color) || 0;
					}

					/**
					 * The displayed color of this member in hexadecimal
					 * @type {string}
					 * @readonly
					 */
					get displayHexColor() {
						const role = this.colorRole;
						return (role && role.hexColor) || "#000000";
					}

					/**
					 * The role of this member used to hoist them in a separate category in the users list
					 * @type {?Role}
					 * @readonly
					 */
					get hoistRole() {
						const hoistedRoles = this.roles.filter(
							(role) => role.hoist
						);
						if (!hoistedRoles.size) return null;
						return hoistedRoles.reduce((prev, role) =>
							!prev || role.comparePositionTo(prev) > 0
								? role
								: prev
						);
					}

					/**
					 * Whether this member is muted in any way
					 * @type {boolean}
					 * @readonly
					 */
					get mute() {
						return this.selfMute || this.serverMute;
					}

					/**
					 * Whether this member is deafened in any way
					 * @type {boolean}
					 * @readonly
					 */
					get deaf() {
						return this.selfDeaf || this.serverDeaf;
					}

					/**
					 * The voice channel this member is in, if any
					 * @type {?VoiceChannel}
					 * @readonly
					 */
					get voiceChannel() {
						return this.guild.channels.get(this.voiceChannelID);
					}

					/**
					 * The ID of this user
					 * @type {Snowflake}
					 * @readonly
					 */
					get id() {
						return this.user.id;
					}

					/**
					 * The nickname of this member, or their username if they don't have one
					 * @type {string}
					 * @readonly
					 */
					get displayName() {
						return this.nickname || this.user.username;
					}

					/**
					 * The overall set of permissions for this member, taking only roles into account
					 * @type {Permissions}
					 * @readonly
					 */
					get permissions() {
						if (this.user.id === this.guild.ownerID)
							return new Permissions(this, Permissions.ALL);

						let permissions = 0;
						const roles = this.roles;
						for (const role of roles.values())
							permissions |= role.permissions;

						return new Permissions(this, permissions);
					}

					/**
					 * Whether this member is manageable in terms of role hierarchy by the client user
					 * @type {boolean}
					 * @readonly
					 */
					get manageable() {
						if (this.user.id === this.guild.ownerID) return false;
						if (this.user.id === this.client.user.id) return false;
						return (
							this.guild.me.highestRole.comparePositionTo(
								this.highestRole
							) > 0
						);
					}

					/**
					 * Whether this member is kickable by the client user
					 * @type {boolean}
					 * @readonly
					 */
					get kickable() {
						return (
							this.manageable &&
							this.guild.me.permissions.has(
								Permissions.FLAGS.KICK_MEMBERS
							)
						);
					}

					/**
					 * Whether this member is bannable by the client user
					 * @type {boolean}
					 * @readonly
					 */
					get bannable() {
						return (
							this.manageable &&
							this.guild.me.permissions.has(
								Permissions.FLAGS.BAN_MEMBERS
							)
						);
					}

					/**
					 * Returns `channel.permissionsFor(guildMember)`. Returns permissions for this member in a guild channel,
					 * taking into account roles and permission overwrites.
					 * @param {ChannelResolvable} channel The guild channel to use as context
					 * @returns {?Permissions}
					 */
					permissionsIn(channel) {
						channel = this.client.resolver.resolveChannel(channel);
						if (!channel || !channel.guild)
							throw new Error(
								"Could not resolve channel to a guild channel."
							);
						return channel.permissionsFor(this);
					}

					/**
					 * Checks if any of this member's roles have a permission.
					 * @param {PermissionResolvable} permission Permission(s) to check for
					 * @param {boolean} [explicit=false] Whether to require the role to explicitly have the exact permission
					 * **(deprecated)**
					 * @param {boolean} [checkAdmin] Whether to allow the administrator permission to override
					 * (takes priority over `explicit`)
					 * @param {boolean} [checkOwner] Whether to allow being the guild's owner to override
					 * (takes priority over `explicit`)
					 * @returns {boolean}
					 */
					hasPermission(
						permission,
						explicit = false,
						checkAdmin,
						checkOwner
					) {
						if (typeof checkAdmin === "undefined")
							checkAdmin = !explicit;
						if (typeof checkOwner === "undefined")
							checkOwner = !explicit;
						if (checkOwner && this.user.id === this.guild.ownerID)
							return true;
						return this.roles.some((r) =>
							r.hasPermission(permission, undefined, checkAdmin)
						);
					}

					/**
					 * Checks whether the roles of this member allows them to perform specific actions.
					 * @param {PermissionResolvable} permissions The permissions to check for
					 * @param {boolean} [explicit=false] Whether to require the member to explicitly have the exact permissions
					 * @returns {boolean}
					 * @deprecated
					 */
					hasPermissions(permissions, explicit = false) {
						if (!explicit && this.user.id === this.guild.ownerID)
							return true;
						return this.hasPermission(permissions, explicit);
					}

					/**
					 * Checks whether the roles of this member allows them to perform specific actions, and lists any missing permissions.
					 * @param {PermissionResolvable} permissions The permissions to check for
					 * @param {boolean} [explicit=false] Whether to require the member to explicitly have the exact permissions
					 * @returns {PermissionResolvable}
					 */
					missingPermissions(permissions, explicit = false) {
						if (!(permissions instanceof Array))
							permissions = [permissions];
						return this.permissions.missing(permissions, explicit);
					}

					/**
					 * The data for editing this member.
					 * @typedef {Object} GuildMemberEditData
					 * @property {string} [nick] The nickname to set for the member
					 * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] The roles or role IDs to apply
					 * @property {boolean} [mute] Whether or not the member should be muted
					 * @property {boolean} [deaf] Whether or not the member should be deafened
					 * @property {ChannelResolvable} [channel] Channel to move member to (if they are connected to voice)
					 */

					/**
					 * Edits this member.
					 * @param {GuildMemberEditData} data The data to edit the member with
					 * @param {string} [reason] Reason for editing this user
					 * @returns {Promise<GuildMember>}
					 * @example
					 * // Set a member's nickname and clear their roles
					 * message.member.edit({
					 *   nick: 'Cool Name',
					 *   roles: []
					 * })
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					edit(data, reason) {
						return this.client.rest.methods.updateGuildMember(
							this,
							data,
							reason
						);
					}

					/**
					 * Mute/unmute this member.
					 * @param {boolean} mute Whether or not the member should be muted
					 * @param {string} [reason] Reason for muting or unmuting
					 * @returns {Promise<GuildMember>}
					 * @example
					 * // Mute a member with a reason
					 * message.member.setMute(true, 'It needed to be done')
					 *   .then(() => console.log(`Muted ${message.member.displayName}`)))
					 *   .catch(console.error);
					 */
					setMute(mute, reason) {
						return this.edit({mute}, reason);
					}

					/**
					 * Deafen/undeafen this member.
					 * @param {boolean} deaf Whether or not the member should be deafened
					 * @param {string} [reason] Reason for deafening or undeafening
					 * @returns {Promise<GuildMember>}
					 * @example
					 * // Deafen a member
					 * message.member.setDeaf(true)
					 *   .then(() => console.log(`Deafened ${message.member.displayName}`))
					 *   .catch(console.error);
					 */
					setDeaf(deaf, reason) {
						return this.edit({deaf}, reason);
					}

					/**
					 * Moves this member to the given channel.
					 * @param {ChannelResolvable} channel The channel to move the member to
					 * @returns {Promise<GuildMember>}
					 * @example
					 * // Moves a member to a voice channel
					 * member.setVoiceChannel('174674066072928256')
					 *   .then(() => console.log(`Moved ${member.displayName}`))
					 *   .catch(console.error);
					 */
					setVoiceChannel(channel) {
						return this.edit({channel});
					}

					/**
					 * Sets the roles applied to this member.
					 * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role IDs to apply
					 * @param {string} [reason] Reason for applying the roles
					 * @returns {Promise<GuildMember>}
					 * @example
					 * // Set the member's roles to a single role
					 * guildMember.setRoles(['391156570408615936'])
					 *   .then(console.log)
					 *   .catch(console.error);
					 * @example
					 * // Remove all of the member's roles
					 * guildMember.setRoles([])
					 *   .then(member => console.log(`${member.displayName} now has ${member.roles.size} roles`))
					 *   .catch(console.error);
					 */
					setRoles(roles, reason) {
						return this.edit({roles}, reason);
					}

					/**
					 * Adds a single role to this member.
					 * @param {RoleResolvable} role The role or ID of the role to add
					 * @param {string} [reason] Reason for adding the role
					 * @returns {Promise<GuildMember>}
					 * @example
					 * // Give a role to a member
					 * message.member.addRole('193654001089118208')
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					addRole(role, reason) {
						if (!(role instanceof Role))
							role = this.guild.roles.get(role);
						if (!role)
							return Promise.reject(
								new TypeError(
									"Supplied parameter was neither a Role nor a Snowflake."
								)
							);
						return this.client.rest.methods.addMemberRole(
							this,
							role,
							reason
						);
					}

					/**
					 * Adds multiple roles to this member.
					 * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role IDs to add
					 * @param {string} [reason] Reason for adding the roles
					 * @returns {Promise<GuildMember>}
					 * @example
					 * // Gives a member a few roles
					 * message.member.addRoles(['193654001089118208', '369308579892690945'])
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					addRoles(roles, reason) {
						let allRoles;
						if (roles instanceof Collection) {
							allRoles = this._roles.slice();
							for (const role of roles.values())
								allRoles.push(role.id);
						} else {
							allRoles = this._roles.concat(roles);
						}
						return this.edit({roles: allRoles}, reason);
					}

					/**
					 * Removes a single role from this member.
					 * @param {RoleResolvable} role The role or ID of the role to remove
					 * @param {string} [reason] Reason for removing the role
					 * @returns {Promise<GuildMember>}
					 * @example
					 * // Remove a role from a member
					 * message.member.removeRole('193654001089118208')
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					removeRole(role, reason) {
						if (!(role instanceof Role))
							role = this.guild.roles.get(role);
						if (!role)
							return Promise.reject(
								new TypeError(
									"Supplied parameter was neither a Role nor a Snowflake."
								)
							);
						return this.client.rest.methods.removeMemberRole(
							this,
							role,
							reason
						);
					}

					/**
					 * Removes multiple roles from this member.
					 * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role IDs to remove
					 * @param {string} [reason] Reason for removing the roles
					 * @returns {Promise<GuildMember>}
					 * @example
					 * // Removes a few roles from the member
					 * message.member.removeRoles(['193654001089118208', '369308579892690945'])
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					removeRoles(roles, reason) {
						const allRoles = this._roles.slice();
						if (roles instanceof Collection) {
							for (const role of roles.values()) {
								const index = allRoles.indexOf(role.id);
								if (index >= 0) allRoles.splice(index, 1);
							}
						} else {
							for (const role of roles) {
								const index = allRoles.indexOf(
									role instanceof Role ? role.id : role
								);
								if (index >= 0) allRoles.splice(index, 1);
							}
						}
						return this.edit({roles: allRoles}, reason);
					}

					/**
					 * Set the nickname for this member.
					 * @param {string} nick The nickname for the guild member
					 * @param {string} [reason] Reason for setting the nickname
					 * @returns {Promise<GuildMember>}
					 * @example
					 * // Update the member's nickname
					 * message.member.setNickname('Cool Name')
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					setNickname(nick, reason) {
						return this.edit({nick}, reason);
					}

					/**
					 * Creates a DM channel between the client and this member.
					 * @returns {Promise<DMChannel>}
					 */
					createDM() {
						return this.user.createDM();
					}

					/**
					 * Deletes any DMs with this guild member.
					 * @returns {Promise<DMChannel>}
					 */
					deleteDM() {
						return this.user.deleteDM();
					}

					/**
					 * Kick this member from the guild.
					 * @param {string} [reason] Reason for kicking user
					 * @returns {Promise<GuildMember>}
					 * @example
					 * // Kick a member
					 * member.kick()
					 *   .then(() => console.log(`Kicked ${member.displayName}`))
					 *   .catch(console.error);
					 */
					kick(reason) {
						return this.client.rest.methods.kickGuildMember(
							this.guild,
							this,
							reason
						);
					}

					/**
					 * Ban this member.
					 * @param {Object|number|string} [options] Ban options. If a number, the number of days to delete messages for, if a
					 * string, the ban reason. Supplying an object allows you to do both.
					 * @param {number} [options.days=0] Number of days of messages to delete
					 * @param {string} [options.reason] Reason for banning
					 * @returns {Promise<GuildMember>}
					 * @example
					 * // Ban a guild member
					 * member.ban(7)
					 *   .then(() => console.log(`Banned ${member.displayName}`))
					 *   .catch(console.error);
					 */
					ban(options) {
						return this.guild.ban(this, options);
					}

					/**
					 * When concatenated with a string, this automatically concatenates the user's mention instead of the Member object.
					 * @returns {string}
					 * @example
					 * // Logs: Hello from <@123456789>!
					 * console.log(`Hello from ${member}!`);
					 */
					toString() {
						return `<@${this.nickname ? "!" : ""}${this.user.id}>`;
					}

					// These are here only for documentation purposes - they are implemented by TextBasedChannel
					/* eslint-disable no-empty-function */
					send() {}
					sendMessage() {}
					sendEmbed() {}
					sendFile() {}
					sendCode() {}
				}

				TextBasedChannel.applyToClass(GuildMember);

				GuildMember.prototype.hasPermissions = util.deprecate(
					GuildMember.prototype.hasPermissions,
					"GuildMember#hasPermissions is deprecated - use GuildMember#hasPermission, it now takes an array"
				);

				module.exports = GuildMember;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/Invite.js":
			/*!**********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Invite.js ***!
  \**********************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const PartialGuild = __webpack_require__(
					/*! ./PartialGuild */ "./node_modules/discord.js/src/structures/PartialGuild.js"
				);
				const PartialGuildChannel = __webpack_require__(
					/*! ./PartialGuildChannel */ "./node_modules/discord.js/src/structures/PartialGuildChannel.js"
				);
				const Constants = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				/**
				 * Represents an invitation to a guild channel.
				 * <warn>The only guaranteed properties are `code`, `guild` and `channel`. Other properties can be missing.</warn>
				 */
				class Invite {
					constructor(client, data) {
						/**
						 * The client that instantiated the invite
						 * @name Invite#client
						 * @type {Client}
						 * @readonly
						 */
						Object.defineProperty(this, "client", {value: client});

						this.setup(data);
					}

					setup(data) {
						/**
						 * The guild the invite is for. If this guild is already known, this will be a guild object. If the guild is
						 * unknown, this will be a PartialGuild object
						 * @type {Guild|PartialGuild}
						 */
						this.guild =
							this.client.guilds.get(data.guild.id) ||
							new PartialGuild(this.client, data.guild);

						/**
						 * The code for this invite
						 * @type {string}
						 */
						this.code = data.code;

						/**
						 * The approximate number of online members of the guild this invite is for
						 * @type {number}
						 */
						this.presenceCount = data.approximate_presence_count;

						/**
						 * The approximate total number of members of the guild this invite is for
						 * @type {number}
						 */
						this.memberCount = data.approximate_member_count;

						/**
						 * The number of text channels the guild this invite goes to has
						 * @type {number}
						 */
						this.textChannelCount = data.guild.text_channel_count;

						/**
						 * The number of voice channels the guild this invite goes to has
						 * @type {number}
						 */
						this.voiceChannelCount = data.guild.voice_channel_count;

						/**
						 * Whether or not this invite is temporary
						 * @type {boolean}
						 */
						this.temporary = data.temporary;

						/**
						 * The maximum age of the invite, in seconds
						 * @type {?number}
						 */
						this.maxAge = data.max_age;

						/**
						 * How many times this invite has been used
						 * @type {number}
						 */
						this.uses = data.uses;

						/**
						 * The maximum uses of this invite
						 * @type {number}
						 */
						this.maxUses = data.max_uses;

						if (data.inviter) {
							/**
							 * The user who created this invite
							 * @type {?User}
							 */
							this.inviter = this.client.dataManager.newUser(
								data.inviter
							);
						}

						/**
						 * The channel the invite is for. If this channel is already known, this will be a GuildChannel object.
						 * If the channel is unknown, this will be a PartialGuildChannel object.
						 * @type {GuildChannel|PartialGuildChannel}
						 */
						this.channel =
							this.client.channels.get(data.channel.id) ||
							new PartialGuildChannel(this.client, data.channel);

						/**
						 * The timestamp the invite was created at
						 * @type {number}
						 */
						this.createdTimestamp = new Date(
							data.created_at
						).getTime();
					}

					/**
					 * The time the invite was created
					 * @type {Date}
					 * @readonly
					 */
					get createdAt() {
						return new Date(this.createdTimestamp);
					}

					/**
					 * The timestamp the invite will expire at
					 * @type {number}
					 * @readonly
					 */
					get expiresTimestamp() {
						return this.createdTimestamp + this.maxAge * 1000;
					}

					/**
					 * The time the invite will expire
					 * @type {Date}
					 * @readonly
					 */
					get expiresAt() {
						return new Date(this.expiresTimestamp);
					}

					/**
					 * The URL to the invite
					 * @type {string}
					 * @readonly
					 */
					get url() {
						return Constants.Endpoints.inviteLink(this.code);
					}

					/**
					 * Deletes this invite.
					 * @param {string} [reason] Reason for deleting this invite
					 * @returns {Promise<Invite>}
					 */
					delete(reason) {
						return this.client.rest.methods.deleteInvite(
							this,
							reason
						);
					}

					/**
					 * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.
					 * @returns {string}
					 * @example
					 * // Logs: Invite: https://discord.gg/A1b2C3
					 * console.log(`Invite: ${invite}`);
					 */
					toString() {
						return this.url;
					}
				}

				module.exports = Invite;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/Message.js":
			/*!***********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Message.js ***!
  \***********************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Mentions = __webpack_require__(
					/*! ./MessageMentions */ "./node_modules/discord.js/src/structures/MessageMentions.js"
				);
				const Attachment = __webpack_require__(
					/*! ./MessageAttachment */ "./node_modules/discord.js/src/structures/MessageAttachment.js"
				);
				const Embed = __webpack_require__(
					/*! ./MessageEmbed */ "./node_modules/discord.js/src/structures/MessageEmbed.js"
				);
				const RichEmbed = __webpack_require__(
					/*! ./RichEmbed */ "./node_modules/discord.js/src/structures/RichEmbed.js"
				);
				const MessageReaction = __webpack_require__(
					/*! ./MessageReaction */ "./node_modules/discord.js/src/structures/MessageReaction.js"
				);
				const ReactionCollector = __webpack_require__(
					/*! ./ReactionCollector */ "./node_modules/discord.js/src/structures/ReactionCollector.js"
				);
				const Util = __webpack_require__(
					/*! ../util/Util */ "./node_modules/discord.js/src/util/Util.js"
				);
				const Collection = __webpack_require__(
					/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);
				const Constants = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Permissions = __webpack_require__(
					/*! ../util/Permissions */ "./node_modules/discord.js/src/util/Permissions.js"
				);
				let GuildMember;

				/**
				 * Represents a message on Discord.
				 */
				class Message {
					constructor(channel, data, client) {
						/**
						 * The client that instantiated the Message
						 * @name Message#client
						 * @type {Client}
						 * @readonly
						 */
						Object.defineProperty(this, "client", {value: client});

						/**
						 * The channel that the message was sent in
						 * @type {TextChannel|DMChannel|GroupDMChannel}
						 */
						this.channel = channel;

						/**
						 * Whether this message has been deleted
						 * @type {boolean}
						 */
						this.deleted = false;

						if (data) this.setup(data);
					}

					setup(data) {
						// eslint-disable-line complexity
						/**
						 * The ID of the message
						 * @type {Snowflake}
						 */
						this.id = data.id;

						/**
						 * The type of the message
						 * @type {MessageType}
						 */
						this.type = Constants.MessageTypes[data.type];

						/**
						 * The content of the message
						 * @type {string}
						 */
						this.content = data.content;

						/**
						 * The author of the message
						 * @type {User}
						 */
						this.author = this.client.dataManager.newUser(
							data.author,
							!data.webhook_id
						);

						/**
						 * Represents the author of the message as a guild member
						 * Only available if the message comes from a guild where the author is still a member
						 * @type {?GuildMember}
						 */
						this.member = this.guild
							? this.guild.member(this.author) || null
							: null;

						/**
						 * Whether or not this message is pinned
						 * @type {boolean}
						 */
						this.pinned = data.pinned;

						/**
						 * Whether or not the message was Text-To-Speech
						 * @type {boolean}
						 */
						this.tts = data.tts;

						/**
						 * A random number or string used for checking message delivery
						 * @type {string}
						 */
						this.nonce = data.nonce;

						/**
						 * Whether or not this message was sent by Discord, not actually a user (e.g. pin notifications)
						 * @type {boolean}
						 */
						this.system = data.type === 6;

						/**
						 * A list of embeds in the message - e.g. YouTube Player
						 * @type {MessageEmbed[]}
						 */
						this.embeds = data.embeds.map(
							(e) => new Embed(this, e)
						);

						/**
						 * A collection of attachments in the message - e.g. Pictures - mapped by their ID
						 * @type {Collection<Snowflake, MessageAttachment>}
						 */
						this.attachments = new Collection();
						for (const attachment of data.attachments)
							this.attachments.set(
								attachment.id,
								new Attachment(this, attachment)
							);

						/**
						 * The timestamp the message was sent at
						 * @type {number}
						 */
						this.createdTimestamp = new Date(
							data.timestamp
						).getTime();

						/**
						 * The timestamp the message was last edited at (if applicable)
						 * @type {?number}
						 */
						this.editedTimestamp = data.edited_timestamp
							? new Date(data.edited_timestamp).getTime()
							: null;

						/**
						 * A collection of reactions to this message, mapped by the reaction ID
						 * @type {Collection<Snowflake, MessageReaction>}
						 */
						this.reactions = new Collection();
						if (data.reactions && data.reactions.length > 0) {
							for (const reaction of data.reactions) {
								const id = reaction.emoji.id
									? `${reaction.emoji.name}:${
											reaction.emoji.id
									  }`
									: reaction.emoji.name;
								this.reactions.set(
									id,
									new MessageReaction(
										this,
										reaction.emoji,
										reaction.count,
										reaction.me
									)
								);
							}
						}

						/**
						 * All valid mentions that the message contains
						 * @type {MessageMentions}
						 */
						this.mentions = new Mentions(
							this,
							data.mentions,
							data.mention_roles,
							data.mention_everyone
						);

						/**
						 * ID of the webhook that sent the message, if applicable
						 * @type {?Snowflake}
						 */
						this.webhookID = data.webhook_id || null;

						/**
						 * Whether this message is a hit in a search
						 * @type {?boolean}
						 */
						this.hit =
							typeof data.hit === "boolean" ? data.hit : null;

						/**
						 * The previous versions of the message, sorted with the most recent first
						 * @type {Message[]}
						 * @private
						 */
						this._edits = [];
					}

					/**
					 * Updates the message.
					 * @param {Object} data Raw Discord message update data
					 * @private
					 */
					patch(data) {
						const clone = Util.cloneObject(this);
						this._edits.unshift(clone);

						if ("editedTimestamp" in data)
							this.editedTimestamp = new Date(
								data.edited_timestamp
							).getTime();
						if ("content" in data) this.content = data.content;
						if ("pinned" in data) this.pinned = data.pinned;
						if ("tts" in data) this.tts = data.tts;
						if ("embeds" in data)
							this.embeds = data.embeds.map(
								(e) => new Embed(this, e)
							);
						else this.embeds = this.embeds.slice();

						if ("attachments" in data) {
							this.attachments = new Collection();
							for (const attachment of data.attachments)
								this.attachments.set(
									attachment.id,
									new Attachment(this, attachment)
								);
						} else {
							this.attachments = new Collection(this.attachments);
						}

						this.mentions = new Mentions(
							this,
							"mentions" in data
								? data.mentions
								: this.mentions.users,
							"mentions_roles" in data
								? data.mentions_roles
								: this.mentions.roles,
							"mention_everyone" in data
								? data.mention_everyone
								: this.mentions.everyone
						);
					}

					/**
					 * The time the message was sent
					 * @type {Date}
					 * @readonly
					 */
					get createdAt() {
						return new Date(this.createdTimestamp);
					}

					/**
					 * The time the message was last edited at (if applicable)
					 * @type {?Date}
					 * @readonly
					 */
					get editedAt() {
						return this.editedTimestamp
							? new Date(this.editedTimestamp)
							: null;
					}

					/**
					 * The guild the message was sent in (if in a guild channel)
					 * @type {?Guild}
					 * @readonly
					 */
					get guild() {
						return this.channel.guild || null;
					}

					/**
					 * The url to jump to the message
					 * @type {string}
					 * @readonly
					 */
					get url() {
						return `https://discordapp.com/channels/${
							this.guild ? this.guild.id : "@me"
						}/${this.channel.id}/${this.id}`;
					}

					/**
					 * The message contents with all mentions replaced by the equivalent text.
					 * If mentions cannot be resolved to a name, the relevant mention in the message content will not be converted.
					 * @type {string}
					 * @readonly
					 */
					get cleanContent() {
						return this.content
							.replace(/@(everyone|here)/g, "@\u200b$1")
							.replace(/<@!?[0-9]+>/g, (input) => {
								const id = input.replace(/<|!|>|@/g, "");
								if (
									this.channel.type === "dm" ||
									this.channel.type === "group"
								) {
									return this.client.users.has(id)
										? `@${
												this.client.users.get(id)
													.username
										  }`
										: input;
								}

								const member = this.channel.guild.members.get(
									id
								);
								if (member) {
									if (member.nickname)
										return `@${member.nickname}`;
									return `@${member.user.username}`;
								} else {
									const user = this.client.users.get(id);
									if (user) return `@${user.username}`;
									return input;
								}
							})
							.replace(/<#[0-9]+>/g, (input) => {
								const channel = this.client.channels.get(
									input.replace(/<|#|>/g, "")
								);
								if (channel) return `#${channel.name}`;
								return input;
							})
							.replace(/<@&[0-9]+>/g, (input) => {
								if (
									this.channel.type === "dm" ||
									this.channel.type === "group"
								)
									return input;
								const role = this.guild.roles.get(
									input.replace(/<|@|>|&/g, "")
								);
								if (role) return `@${role.name}`;
								return input;
							});
					}

					/**
					 * Creates a reaction collector.
					 * @param {CollectorFilter} filter The filter to apply
					 * @param {ReactionCollectorOptions} [options={}] Options to send to the collector
					 * @returns {ReactionCollector}
					 * @example
					 * // Create a reaction collector
					 * const filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someID'
					 * const collector = message.createReactionCollector(filter, { time: 15000 });
					 * collector.on('collect', r => console.log(`Collected ${r.emoji.name}`));
					 * collector.on('end', collected => console.log(`Collected ${collected.size} items`));
					 */
					createReactionCollector(filter, options = {}) {
						return new ReactionCollector(this, filter, options);
					}

					/**
					 * An object containing the same properties as CollectorOptions, but a few more:
					 * @typedef {ReactionCollectorOptions} AwaitReactionsOptions
					 * @property {string[]} [errors] Stop/end reasons that cause the promise to reject
					 */

					/**
					 * Similar to createMessageCollector but in promise form.
					 * Resolves with a collection of reactions that pass the specified filter.
					 * @param {CollectorFilter} filter The filter function to use
					 * @param {AwaitReactionsOptions} [options={}] Optional options to pass to the internal collector
					 * @returns {Promise<Collection<string, MessageReaction>>}
					 * @example
					 * // Create a reaction collector
					 * const filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someID'
					 * message.awaitReactions(filter, { time: 15000 })
					 *   .then(collected => console.log(`Collected ${collected.size} reactions`))
					 *   .catch(console.error);
					 */
					awaitReactions(filter, options = {}) {
						return new Promise((resolve, reject) => {
							const collector = this.createReactionCollector(
								filter,
								options
							);
							collector.once("end", (reactions, reason) => {
								if (
									options.errors &&
									options.errors.includes(reason)
								)
									reject(reactions);
								else resolve(reactions);
							});
						});
					}

					/**
					 * An array of cached versions of the message, including the current version
					 * Sorted from latest (first) to oldest (last)
					 * @type {Message[]}
					 * @readonly
					 */
					get edits() {
						const copy = this._edits.slice();
						copy.unshift(this);
						return copy;
					}

					/**
					 * Whether the message is editable by the client user
					 * @type {boolean}
					 * @readonly
					 */
					get editable() {
						return this.author.id === this.client.user.id;
					}

					/**
					 * Whether the message is deletable by the client user
					 * @type {boolean}
					 * @readonly
					 */
					get deletable() {
						return (
							!this.deleted &&
							(this.author.id === this.client.user.id ||
								(this.guild &&
									this.channel
										.permissionsFor(this.client.user)
										.has(
											Permissions.FLAGS.MANAGE_MESSAGES
										)))
						);
					}

					/**
					 * Whether the message is pinnable by the client user
					 * @type {boolean}
					 * @readonly
					 */
					get pinnable() {
						return (
							!this.guild ||
							this.channel
								.permissionsFor(this.client.user)
								.has(Permissions.FLAGS.MANAGE_MESSAGES)
						);
					}

					/**
					 * Whether or not a user, channel or role is mentioned in this message.
					 * @param {GuildChannel|User|Role|string} data Either a guild channel, user or a role object, or a string representing
					 * the ID of any of these
					 * @returns {boolean}
					 */
					isMentioned(data) {
						data = data && data.id ? data.id : data;
						return (
							this.mentions.users.has(data) ||
							this.mentions.channels.has(data) ||
							this.mentions.roles.has(data)
						);
					}

					/**
					 * Whether or not a guild member is mentioned in this message. Takes into account
					 * user mentions, role mentions, and @everyone/@here mentions.
					 * @param {GuildMember|User} member The member/user to check for a mention of
					 * @returns {boolean}
					 */
					isMemberMentioned(member) {
						// Lazy-loading is used here to get around a circular dependency that breaks things
						if (!GuildMember)
							GuildMember = __webpack_require__(
								/*! ./GuildMember */ "./node_modules/discord.js/src/structures/GuildMember.js"
							);
						if (this.mentions.everyone) return true;
						if (this.mentions.users.has(member.id)) return true;
						if (
							member instanceof GuildMember &&
							member.roles.some((r) =>
								this.mentions.roles.has(r.id)
							)
						)
							return true;
						return false;
					}

					/**
					 * Options that can be passed into editMessage.
					 * @typedef {Object} MessageEditOptions
					 * @property {Object} [embed] An embed to be added/edited
					 * @property {string|boolean} [code] Language for optional codeblock formatting to apply
					 */

					/**
					 * Edit the content of the message.
					 * @param {StringResolvable} [content] The new content for the message
					 * @param {MessageEditOptions|RichEmbed} [options] The options to provide
					 * @returns {Promise<Message>}
					 * @example
					 * // Update the content of a message
					 * message.edit('This is my new content!')
					 *   .then(msg => console.log(`New message content: ${msg}`))
					 *   .catch(console.error);
					 */
					edit(content, options) {
						if (
							!options &&
							typeof content === "object" &&
							!(content instanceof Array)
						) {
							options = content;
							content = "";
						} else if (!options) {
							options = {};
						}
						if (options instanceof RichEmbed)
							options = {embed: options};
						return this.client.rest.methods.updateMessage(
							this,
							content,
							options
						);
					}

					/**
					 * Edit the content of the message, with a code block.
					 * @param {string} lang The language for the code block
					 * @param {StringResolvable} content The new content for the message
					 * @returns {Promise<Message>}
					 * @deprecated
					 */
					editCode(lang, content) {
						content = Util.escapeMarkdown(
							this.client.resolver.resolveString(content),
							true
						);
						return this.edit(
							`\`\`\`${lang || ""}\n${content}\n\`\`\``
						);
					}

					/**
					 * Pins this message to the channel's pinned messages.
					 * @returns {Promise<Message>}
					 */
					pin() {
						return this.client.rest.methods.pinMessage(this);
					}

					/**
					 * Unpins this message from the channel's pinned messages.
					 * @returns {Promise<Message>}
					 */
					unpin() {
						return this.client.rest.methods.unpinMessage(this);
					}

					/**
					 * Add a reaction to the message.
					 * @param {string|Emoji|ReactionEmoji} emoji The emoji to react with
					 * @returns {Promise<MessageReaction>}
					 * @example
					 * // React to a message with a unicode emoji
					 * message.react('🤔')
					 *   .then(console.log)
					 *   .catch(console.error);
					 * @example
					 * // React to a message with a custom emoji
					 * message.react(message.guild.emojis.get('123456789012345678'))
					 *   .then(console.log)
					 *   .catch(console.error);
					 */
					react(emoji) {
						emoji = this.client.resolver.resolveEmojiIdentifier(
							emoji
						);
						if (!emoji)
							throw new TypeError(
								"Emoji must be a string or Emoji/ReactionEmoji"
							);

						return this.client.rest.methods.addMessageReaction(
							this,
							emoji
						);
					}

					/**
					 * Remove all reactions from a message.
					 * @returns {Promise<Message>}
					 */
					clearReactions() {
						return this.client.rest.methods.removeMessageReactions(
							this
						);
					}

					/**
					 * Deletes the message.
					 * @param {number} [timeout=0] How long to wait to delete the message in milliseconds
					 * @returns {Promise<Message>}
					 * @example
					 * // Delete a message
					 * message.delete()
					 *   .then(msg => console.log(`Deleted message from ${msg.author.username}`))
					 *   .catch(console.error);
					 */
					delete(timeout = 0) {
						if (timeout <= 0) {
							return this.client.rest.methods.deleteMessage(this);
						} else {
							return new Promise((resolve) => {
								this.client.setTimeout(() => {
									resolve(this.delete());
								}, timeout);
							});
						}
					}

					/**
					 * Reply to the message.
					 * @param {StringResolvable} [content] The content for the message
					 * @param {MessageOptions} [options] The options to provide
					 * @returns {Promise<Message|Message[]>}
					 * @example
					 * // Reply to a message
					 * message.reply('Hey, I\'m a reply!')
					 *   .then(sent => console.log(`Sent a reply to ${sent.author.username}`))
					 *   .catch(console.error);
					 */
					reply(content, options) {
						if (
							!options &&
							typeof content === "object" &&
							!(content instanceof Array)
						) {
							options = content;
							content = "";
						} else if (!options) {
							options = {};
						}
						return this.channel.send(
							content,
							Object.assign(options, {
								reply: this.member || this.author,
							})
						);
					}

					/**
					 * Marks the message as read.
					 * <warn>This is only available when using a user account.</warn>
					 * @returns {Promise<Message>}
					 */
					acknowledge() {
						return this.client.rest.methods.ackMessage(this);
					}

					/**
					 * Fetches the webhook used to create this message.
					 * @returns {Promise<?Webhook>}
					 */
					fetchWebhook() {
						if (!this.webhookID)
							return Promise.reject(
								new Error(
									"The message was not sent by a webhook."
								)
							);
						return this.client.fetchWebhook(this.webhookID);
					}

					/**
					 * Used mainly internally. Whether two messages are identical in properties. If you want to compare messages
					 * without checking all the properties, use `message.id === message2.id`, which is much more efficient. This
					 * method allows you to see if there are differences in content, embeds, attachments, nonce and tts properties.
					 * @param {Message} message The message to compare it to
					 * @param {Object} rawData Raw data passed through the WebSocket about this message
					 * @returns {boolean}
					 */
					equals(message, rawData) {
						if (!message) return false;
						const embedUpdate =
							!message.author && !message.attachments;
						if (embedUpdate)
							return (
								this.id === message.id &&
								this.embeds.length === message.embeds.length
							);

						let equal =
							this.id === message.id &&
							this.author.id === message.author.id &&
							this.content === message.content &&
							this.tts === message.tts &&
							this.nonce === message.nonce &&
							this.embeds.length === message.embeds.length &&
							this.attachments.length ===
								message.attachments.length;

						if (equal && rawData) {
							equal =
								this.mentions.everyone ===
									message.mentions.everyone &&
								this.createdTimestamp ===
									new Date(rawData.timestamp).getTime() &&
								this.editedTimestamp ===
									new Date(
										rawData.edited_timestamp
									).getTime();
						}

						return equal;
					}

					/**
					 * When concatenated with a string, this automatically concatenates the message's content instead of the object.
					 * @returns {string}
					 * @example
					 * // Logs: Message: This is a message!
					 * console.log(`Message: ${message}`);
					 */
					toString() {
						return this.content;
					}

					_addReaction(emoji, user) {
						const emojiID = emoji.id
							? `${emoji.name}:${emoji.id}`
							: emoji.name;
						let reaction;
						if (this.reactions.has(emojiID)) {
							reaction = this.reactions.get(emojiID);
							if (!reaction.me)
								reaction.me = user.id === this.client.user.id;
						} else {
							reaction = new MessageReaction(
								this,
								emoji,
								0,
								user.id === this.client.user.id
							);
							this.reactions.set(emojiID, reaction);
						}
						if (!reaction.users.has(user.id)) {
							reaction.users.set(user.id, user);
							reaction.count++;
						}
						return reaction;
					}

					_removeReaction(emoji, user) {
						const emojiID = emoji.id
							? `${emoji.name}:${emoji.id}`
							: emoji.name;
						if (this.reactions.has(emojiID)) {
							const reaction = this.reactions.get(emojiID);
							if (reaction.users.has(user.id)) {
								reaction.users.delete(user.id);
								reaction.count--;
								if (user.id === this.client.user.id)
									reaction.me = false;
								if (reaction.count <= 0)
									this.reactions.delete(emojiID);
								return reaction;
							}
						}
						return null;
					}

					_clearReactions() {
						this.reactions.clear();
					}
				}

				module.exports = Message;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/MessageAttachment.js":
			/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/MessageAttachment.js ***!
  \*********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/**
				 * Represents an attachment in a message.
				 */
				class MessageAttachment {
					constructor(message, data) {
						/**
						 * The client that instantiated this MessageAttachment
						 * @name MessageAttachment#client
						 * @type {Client}
						 * @readonly
						 */
						Object.defineProperty(this, "client", {
							value: message.client,
						});

						/**
						 * The message this attachment is part of
						 * @type {Message}
						 */
						this.message = message;

						this.setup(data);
					}

					setup(data) {
						/**
						 * The ID of this attachment
						 * @type {Snowflake}
						 */
						this.id = data.id;

						/**
						 * The file name of this attachment
						 * @type {string}
						 */
						this.filename = data.filename;

						/**
						 * The size of this attachment in bytes
						 * @type {number}
						 */
						this.filesize = data.size;

						/**
						 * The URL to this attachment
						 * @type {string}
						 */
						this.url = data.url;

						/**
						 * The Proxy URL to this attachment
						 * @type {string}
						 */
						this.proxyURL = data.proxy_url;

						/**
						 * The height of this attachment (if an image)
						 * @type {?number}
						 */
						this.height = data.height;

						/**
						 * The width of this attachment (if an image)
						 * @type {?number}
						 */
						this.width = data.width;
					}
				}

				module.exports = MessageAttachment;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/MessageCollector.js":
			/*!********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/MessageCollector.js ***!
  \********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Collector = __webpack_require__(
					/*! ./interfaces/Collector */ "./node_modules/discord.js/src/structures/interfaces/Collector.js"
				);
				const util = __webpack_require__(
					/*! util */ "./node_modules/util/util.js"
				);

				/**
				 * @typedef {CollectorOptions} MessageCollectorOptions
				 * @property {number} max The maximum amount of messages to process
				 * @property {number} maxMatches The maximum amount of messages to collect
				 */

				/**
				 * Collects messages on a channel.
				 * @extends {Collector}
				 */
				class MessageCollector extends Collector {
					/**
					 * @param {TextChannel|DMChannel|GroupDMChannel} channel The channel
					 * @param {CollectorFilter} filter The filter to be applied to this collector
					 * @param {MessageCollectorOptions} options The options to be applied to this collector
					 * @emits MessageCollector#message
					 */
					constructor(channel, filter, options = {}) {
						super(channel.client, filter, options);

						/**
						 * The channel
						 * @type {TextBasedChannel}
						 */
						this.channel = channel;

						/**
						 * Total number of messages that were received in the channel during message collection
						 * @type {number}
						 */
						this.received = 0;

						this.client.setMaxListeners(
							this.client.getMaxListeners() + 1
						);
						this.client.on("message", this.listener);

						// For backwards compatibility (remove in v12)
						if (this.options.max)
							this.options.maxProcessed = this.options.max;
						if (this.options.maxMatches)
							this.options.max = this.options.maxMatches;
						this._reEmitter = (message) => {
							/**
							 * Emitted when the collector receives a message.
							 * @event MessageCollector#message
							 * @param {Message} message The message
							 * @deprecated
							 */
							this.emit("message", message);
						};
						this.on("collect", this._reEmitter);
					}

					// Remove in v12
					on(eventName, listener) {
						if (eventName === "message") {
							listener = util.deprecate(
								listener,
								'MessageCollector will soon no longer emit "message", use "collect" instead'
							);
						}
						super.on(eventName, listener);
					}

					/**
					 * Handle an incoming message for possible collection.
					 * @param {Message} message The message that could be collected
					 * @returns {?{key: Snowflake, value: Message}}
					 * @private
					 */
					handle(message) {
						if (message.channel.id !== this.channel.id) return null;
						this.received++;
						return {
							key: message.id,
							value: message,
						};
					}

					/**
					 * Check after collection to see if the collector is done.
					 * @returns {?string} Reason to end the collector, if any
					 * @private
					 */
					postCheck() {
						// Consider changing the end reasons for v12
						if (
							this.options.maxMatches &&
							this.collected.size >= this.options.max
						)
							return "matchesLimit";
						if (
							this.options.max &&
							this.received >= this.options.maxProcessed
						)
							return "limit";
						return null;
					}

					/**
					 * Removes event listeners.
					 * @private
					 */
					cleanup() {
						this.removeListener("collect", this._reEmitter);
						this.client.removeListener("message", this.listener);
						this.client.setMaxListeners(
							this.client.getMaxListeners() - 1
						);
					}
				}

				module.exports = MessageCollector;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/MessageEmbed.js":
			/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/MessageEmbed.js ***!
  \****************************************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/**
				 * Represents an embed in a message (image/video preview, rich embed, etc.)
				 * <info>This class is only used for *recieved* embeds. If you wish to send one, use the {@link RichEmbed} class.</info>
				 */
				class MessageEmbed {
					constructor(message, data) {
						/**
						 * The client that instantiated this embed
						 * @name MessageEmbed#client
						 * @type {Client}
						 * @readonly
						 */
						Object.defineProperty(this, "client", {
							value: message.client,
						});

						/**
						 * The message this embed is part of
						 * @type {Message}
						 */
						this.message = message;

						this.setup(data);
					}

					setup(data) {
						/**
						 * The type of this embed
						 * @type {string}
						 */
						this.type = data.type;

						/**
						 * The title of this embed
						 * @type {?string}
						 */
						this.title = data.title;

						/**
						 * The description of this embed
						 * @type {?string}
						 */
						this.description = data.description;

						/**
						 * The URL of this embed
						 * @type {string}
						 */
						this.url = data.url;

						/**
						 * The color of the embed
						 * @type {number}
						 */
						this.color = data.color;

						/**
						 * The fields of this embed
						 * @type {MessageEmbedField[]}
						 */
						this.fields = [];
						if (data.fields)
							for (const field of data.fields)
								this.fields.push(
									new MessageEmbedField(this, field)
								);

						/**
						 * The timestamp of this embed
						 * @type {number}
						 */
						this.timestamp = data.timestamp;

						/**
						 * The thumbnail of this embed
						 * @type {?MessageEmbedThumbnail}
						 */
						this.thumbnail = data.thumbnail
							? new MessageEmbedThumbnail(this, data.thumbnail)
							: null;

						/**
						 * The image of this embed
						 * @type {?MessageEmbedImage}
						 */
						this.image = data.image
							? new MessageEmbedImage(this, data.image)
							: null;

						/**
						 * The video of this embed
						 * @type {?MessageEmbedVideo}
						 */
						this.video = data.video
							? new MessageEmbedVideo(this, data.video)
							: null;

						/**
						 * The author of this embed
						 * @type {?MessageEmbedAuthor}
						 */
						this.author = data.author
							? new MessageEmbedAuthor(this, data.author)
							: null;

						/**
						 * The provider of this embed
						 * @type {?MessageEmbedProvider}
						 */
						this.provider = data.provider
							? new MessageEmbedProvider(this, data.provider)
							: null;

						/**
						 * The footer of this embed
						 * @type {?MessageEmbedFooter}
						 */
						this.footer = data.footer
							? new MessageEmbedFooter(this, data.footer)
							: null;
					}

					/**
					 * The date this embed was created
					 * @type {Date}
					 * @readonly
					 */
					get createdAt() {
						return new Date(this.createdTimestamp);
					}

					/**
					 * The hexadecimal version of the embed color, with a leading hash
					 * @type {?string}
					 * @readonly
					 */
					get hexColor() {
						if (!this.color) return null;
						let col = this.color.toString(16);
						while (col.length < 6) col = `0${col}`;
						return `#${col}`;
					}
				}

				/**
				 * Represents a thumbnail for a message embed.
				 */
				class MessageEmbedThumbnail {
					constructor(embed, data) {
						/**
						 * The embed this thumbnail is part of
						 * @type {MessageEmbed}
						 */
						this.embed = embed;

						this.setup(data);
					}

					setup(data) {
						/**
						 * The URL for this thumbnail
						 * @type {string}
						 */
						this.url = data.url;

						/**
						 * The Proxy URL for this thumbnail
						 * @type {string}
						 */
						this.proxyURL = data.proxy_url;

						/**
						 * The height of the thumbnail
						 * @type {number}
						 */
						this.height = data.height;

						/**
						 * The width of the thumbnail
						 * @type {number}
						 */
						this.width = data.width;
					}
				}

				/**
				 * Represents an image for a message embed.
				 */
				class MessageEmbedImage {
					constructor(embed, data) {
						/**
						 * The embed this image is part of
						 * @type {MessageEmbed}
						 */
						this.embed = embed;

						this.setup(data);
					}

					setup(data) {
						/**
						 * The URL for this image
						 * @type {string}
						 */
						this.url = data.url;

						/**
						 * The Proxy URL for this image
						 * @type {string}
						 */
						this.proxyURL = data.proxy_url;

						/**
						 * The height of the image
						 * @type {number}
						 */
						this.height = data.height;

						/**
						 * The width of the image
						 * @type {number}
						 */
						this.width = data.width;
					}
				}

				/**
				 * Represents a video for a message embed.
				 */
				class MessageEmbedVideo {
					constructor(embed, data) {
						/**
						 * The embed this video is part of
						 * @type {MessageEmbed}
						 */
						this.embed = embed;

						this.setup(data);
					}

					setup(data) {
						/**
						 * The source URL for this video
						 * @type {string}
						 */
						this.url = data.url;

						/**
						 * The height of the video
						 * @type {number}
						 */
						this.height = data.height;

						/**
						 * The width of the video
						 * @type {number}
						 */
						this.width = data.width;
					}
				}

				/**
				 * Represents a provider for a message embed.
				 */
				class MessageEmbedProvider {
					constructor(embed, data) {
						/**
						 * The embed this provider is part of
						 * @type {MessageEmbed}
						 */
						this.embed = embed;

						this.setup(data);
					}

					setup(data) {
						/**
						 * The name of this provider
						 * @type {string}
						 */
						this.name = data.name;

						/**
						 * The URL of this provider
						 * @type {string}
						 */
						this.url = data.url;
					}
				}

				/**
				 * Represents an author for a message embed.
				 */
				class MessageEmbedAuthor {
					constructor(embed, data) {
						/**
						 * The embed this author is part of
						 * @type {MessageEmbed}
						 */
						this.embed = embed;

						this.setup(data);
					}

					setup(data) {
						/**
						 * The name of this author
						 * @type {string}
						 */
						this.name = data.name;

						/**
						 * The URL of this author
						 * @type {string}
						 */
						this.url = data.url;

						/**
						 * The icon URL of this author
						 * @type {string}
						 */
						this.iconURL = data.icon_url;
					}
				}

				/**
				 * Represents a field for a message embed.
				 */
				class MessageEmbedField {
					constructor(embed, data) {
						/**
						 * The embed this footer is part of
						 * @type {MessageEmbed}
						 */
						this.embed = embed;

						this.setup(data);
					}

					setup(data) {
						/**
						 * The name of this field
						 * @type {string}
						 */
						this.name = data.name;

						/**
						 * The value of this field
						 * @type {string}
						 */
						this.value = data.value;

						/**
						 * If this field is displayed inline
						 * @type {boolean}
						 */
						this.inline = data.inline;
					}
				}

				/**
				 * Represents the footer of a message embed.
				 */
				class MessageEmbedFooter {
					constructor(embed, data) {
						/**
						 * The embed this footer is part of
						 * @type {MessageEmbed}
						 */
						this.embed = embed;

						this.setup(data);
					}

					setup(data) {
						/**
						 * The text in this footer
						 * @type {string}
						 */
						this.text = data.text;

						/**
						 * The icon URL of this footer
						 * @type {string}
						 */
						this.iconURL = data.icon_url;

						/**
						 * The proxy icon URL of this footer
						 * @type {string}
						 */
						this.proxyIconUrl = data.proxy_icon_url;
					}
				}

				MessageEmbed.Thumbnail = MessageEmbedThumbnail;
				MessageEmbed.Image = MessageEmbedImage;
				MessageEmbed.Video = MessageEmbedVideo;
				MessageEmbed.Provider = MessageEmbedProvider;
				MessageEmbed.Author = MessageEmbedAuthor;
				MessageEmbed.Field = MessageEmbedField;
				MessageEmbed.Footer = MessageEmbedFooter;

				module.exports = MessageEmbed;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/MessageMentions.js":
			/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/MessageMentions.js ***!
  \*******************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Collection = __webpack_require__(
					/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);

				/**
				 * Keeps track of mentions in a {@link Message}.
				 */
				class MessageMentions {
					constructor(message, users, roles, everyone) {
						/**
						 * Whether `@everyone` or `@here` were mentioned
						 * @type {boolean}
						 */
						this.everyone = Boolean(everyone);

						if (users) {
							if (users instanceof Collection) {
								/**
								 * Any users that were mentioned
								 * @type {Collection<Snowflake, User>}
								 */
								this.users = new Collection(users);
							} else {
								this.users = new Collection();
								for (const mention of users) {
									let user = message.client.users.get(
										mention.id
									);
									if (!user)
										user = message.client.dataManager.newUser(
											mention
										);
									this.users.set(user.id, user);
								}
							}
						} else {
							this.users = new Collection();
						}

						if (roles) {
							if (roles instanceof Collection) {
								/**
								 * Any roles that were mentioned
								 * @type {Collection<Snowflake, Role>}
								 */
								this.roles = new Collection(roles);
							} else {
								this.roles = new Collection();
								for (const mention of roles) {
									const role = message.channel.guild.roles.get(
										mention
									);
									if (role) this.roles.set(role.id, role);
								}
							}
						} else {
							this.roles = new Collection();
						}

						/**
						 * Content of the message
						 * @type {Message}
						 * @private
						 */
						this._content = message.content;

						/**
						 * The client the message is from
						 * @type {Client}
						 * @private
						 */
						this._client = message.client;

						/**
						 * The guild the message is in
						 * @type {?Guild}
						 * @private
						 */
						this._guild = message.channel.guild;

						/**
						 * Cached members for {@MessageMention#members}
						 * @type {?Collection<Snowflake, GuildMember>}
						 * @private
						 */
						this._members = null;

						/**
						 * Cached channels for {@MessageMention#channels}
						 * @type {?Collection<Snowflake, GuildChannel>}
						 * @private
						 */
						this._channels = null;
					}

					/**
					 * Any members that were mentioned (only in {@link TextChannel}s)
					 * @type {?Collection<Snowflake, GuildMember>}
					 * @readonly
					 */
					get members() {
						if (this._members) return this._members;
						if (!this._guild) return null;
						this._members = new Collection();
						this.users.forEach((user) => {
							const member = this._guild.member(user);
							if (member)
								this._members.set(member.user.id, member);
						});
						return this._members;
					}

					/**
					 * Any channels that were mentioned
					 * @type {Collection<Snowflake, GuildChannel>}
					 * @readonly
					 */
					get channels() {
						if (this._channels) return this._channels;
						this._channels = new Collection();
						let matches;
						while (
							(matches = this.constructor.CHANNELS_PATTERN.exec(
								this._content
							)) !== null
						) {
							const chan = this._client.channels.get(matches[1]);
							if (chan) this._channels.set(chan.id, chan);
						}
						return this._channels;
					}
				}

				/**
				 * Regular expression that globally matches `@everyone` and `@here`
				 * @type {RegExp}
				 */
				MessageMentions.EVERYONE_PATTERN = /@(everyone|here)/g;

				/**
				 * Regular expression that globally matches user mentions like `<@81440962496172032>`
				 * @type {RegExp}
				 */
				MessageMentions.USERS_PATTERN = /<@!?[0-9]+>/g;

				/**
				 * Regular expression that globally matches role mentions like `<@&297577916114403338>`
				 * @type {RegExp}
				 */
				MessageMentions.ROLES_PATTERN = /<@&[0-9]+>/g;

				/**
				 * Regular expression that globally matches channel mentions like `<#222079895583457280>`
				 * @type {RegExp}
				 */
				MessageMentions.CHANNELS_PATTERN = /<#([0-9]+)>/g;

				module.exports = MessageMentions;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/MessageReaction.js":
			/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/MessageReaction.js ***!
  \*******************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Collection = __webpack_require__(
					/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);
				const Emoji = __webpack_require__(
					/*! ./Emoji */ "./node_modules/discord.js/src/structures/Emoji.js"
				);
				const ReactionEmoji = __webpack_require__(
					/*! ./ReactionEmoji */ "./node_modules/discord.js/src/structures/ReactionEmoji.js"
				);

				/**
				 * Represents a reaction to a message.
				 */
				class MessageReaction {
					constructor(message, emoji, count, me) {
						/**
						 * The message that this reaction refers to
						 * @type {Message}
						 */
						this.message = message;

						/**
						 * Whether the client has given this reaction
						 * @type {boolean}
						 */
						this.me = me;

						/**
						 * The number of people that have given the same reaction
						 * @type {number}
						 */
						this.count = count || 0;

						/**
						 * The users that have given this reaction, mapped by their ID
						 * @type {Collection<Snowflake, User>}
						 */
						this.users = new Collection();

						this._emoji = new ReactionEmoji(
							this,
							emoji.name,
							emoji.id
						);
					}

					/**
					 * The emoji of this reaction, either an Emoji object for known custom emojis, or a ReactionEmoji
					 * object which has fewer properties. Whatever the prototype of the emoji, it will still have
					 * `name`, `id`, `identifier` and `toString()`
					 * @type {Emoji|ReactionEmoji}
					 * @readonly
					 */
					get emoji() {
						if (this._emoji instanceof Emoji) return this._emoji;
						// Check to see if the emoji has become known to the client
						if (this._emoji.id) {
							const emojis = this.message.client.emojis;
							if (emojis.has(this._emoji.id)) {
								const emoji = emojis.get(this._emoji.id);
								this._emoji = emoji;
								return emoji;
							}
						}
						return this._emoji;
					}

					/**
					 * Removes a user from this reaction.
					 * @param {UserResolvable} [user=this.message.client.user] The user to remove the reaction of
					 * @returns {Promise<MessageReaction>}
					 */
					remove(user = this.message.client.user) {
						const message = this.message;
						const userID = this.message.client.resolver.resolveUserID(
							user
						);
						if (!userID)
							return Promise.reject(
								new Error(
									"Couldn't resolve the user ID to remove from the reaction."
								)
							);
						return message.client.rest.methods.removeMessageReaction(
							message,
							this.emoji.identifier,
							userID
						);
					}

					/**
					 * Fetch all the users that gave this reaction. Resolves with a collection of users, mapped by their IDs.
					 * @param {number} [limit=100] The maximum amount of users to fetch, defaults to 100
					 * @param {Object} [options] Options to fetch users
					 * @param {Snowflake} [options.before] Limit fetching users to those with an id lower than the supplied id
					 * @param {Snowflake} [options.after] Limit fetching users to those with an id greater than the supplied id
					 * @returns {Promise<Collection<Snowflake, User>>}
					 */
					fetchUsers(limit = 100, {after, before} = {}) {
						const message = this.message;
						return message.client.rest.methods
							.getMessageReactionUsers(
								message,
								this.emoji.identifier,
								{after, before, limit}
							)
							.then((data) => {
								const users = new Collection();
								for (const rawUser of data) {
									const user = this.message.client.dataManager.newUser(
										rawUser
									);
									this.users.set(user.id, user);
									users.set(user.id, user);
								}
								return users;
							});
					}
				}

				module.exports = MessageReaction;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/OAuth2Application.js":
			/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/OAuth2Application.js ***!
  \*********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Snowflake = __webpack_require__(
					/*! ../util/Snowflake */ "./node_modules/discord.js/src/util/Snowflake.js"
				);
				const util = __webpack_require__(
					/*! util */ "./node_modules/util/util.js"
				);

				/**
				 * Represents an OAuth2 Application.
				 */
				class OAuth2Application {
					constructor(client, data) {
						/**
						 * The client that instantiated the application
						 * @name OAuth2Application#client
						 * @type {Client}
						 * @readonly
						 */
						Object.defineProperty(this, "client", {value: client});

						this.setup(data);
					}

					setup(data) {
						/**
						 * The ID of the app
						 * @type {Snowflake}
						 */
						this.id = data.id;

						/**
						 * The name of the app
						 * @type {string}
						 */
						this.name = data.name;

						/**
						 * The app's description
						 * @type {string}
						 */
						this.description = data.description;

						/**
						 * The app's icon hash
						 * @type {?string}
						 */
						this.icon = data.icon;

						/**
						 * The app's icon URL
						 * @type {string}
						 */
						this.iconURL = `https://cdn.discordapp.com/app-icons/${
							this.id
						}/${this.icon}.jpg`;

						/**
						 * The app's RPC origins
						 * @type {?string[]}
						 */
						this.rpcOrigins = data.rpc_origins;

						/**
						 * The app's redirect URIs
						 * @type {string[]}
						 */
						this.redirectURIs = data.redirect_uris;

						/**
						 * If this app's bot requires a code grant when using the OAuth2 flow
						 * @type {boolean}
						 */
						this.botRequireCodeGrant = data.bot_require_code_grant;

						/**
						 * If this app's bot is public
						 * @type {boolean}
						 */
						this.botPublic = data.bot_public;

						/**
						 * If this app can use rpc
						 * @type {boolean}
						 */
						this.rpcApplicationState = data.rpc_application_state;

						/**
						 * Object containing basic info about this app's bot
						 * @type {Object}
						 */
						this.bot = data.bot;

						/**
						 * The flags for the app
						 * @type {number}
						 */
						this.flags = data.flags;

						/**
						 * OAuth2 secret for the application
						 * @type {boolean}
						 */
						this.secret = data.secret;

						if (data.owner) {
							/**
							 * The owner of this OAuth application
							 * @type {?User}
							 */
							this.owner = this.client.dataManager.newUser(
								data.owner
							);
						}
					}

					/**
					 * The timestamp the app was created at
					 * @type {number}
					 * @readonly
					 */
					get createdTimestamp() {
						return Snowflake.deconstruct(this.id).timestamp;
					}

					/**
					 * The time the app was created
					 * @type {Date}
					 * @readonly
					 */
					get createdAt() {
						return new Date(this.createdTimestamp);
					}

					/**
					 * Reset the app's secret and bot token.
					 * <warn>This is only available when using a user account.</warn>
					 * @returns {OAuth2Application}
					 */
					reset() {
						return this.client.rest.methods.resetApplication(
							this.id
						);
					}

					/**
					 * When concatenated with a string, this automatically concatenates the app name rather than the app object.
					 * @returns {string}
					 */
					toString() {
						return this.name;
					}
				}

				OAuth2Application.prototype.reset = util.deprecate(
					OAuth2Application.prototype.reset,
					"OAuth2Application#reset: userbot methods will be removed"
				);

				module.exports = OAuth2Application;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/PartialGuild.js":
			/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/PartialGuild.js ***!
  \****************************************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/*
{ splash: null,
     id: '123123123',
     icon: '123123123',
     name: 'name' }
*/

				/**
				 * Represents a guild that the client only has limited information for - e.g. from invites.
				 */
				class PartialGuild {
					constructor(client, data) {
						/**
						 * The client that instantiated this PartialGuild
						 * @name PartialGuild#client
						 * @type {Client}
						 * @readonly
						 */
						Object.defineProperty(this, "client", {value: client});

						this.setup(data);
					}

					setup(data) {
						/**
						 * The ID of this guild
						 * @type {Snowflake}
						 */
						this.id = data.id;

						/**
						 * The name of this guild
						 * @type {string}
						 */
						this.name = data.name;

						/**
						 * The hash of this guild's icon
						 * @type {?string}
						 */
						this.icon = data.icon;

						/**
						 * The hash of the guild splash image (VIP only)
						 * @type {?string}
						 */
						this.splash = data.splash;
					}
				}

				module.exports = PartialGuild;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/PartialGuildChannel.js":
			/*!***********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/PartialGuildChannel.js ***!
  \***********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Constants = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				/*
{ type: 0, id: '123123', name: 'heavy-testing' } }
*/

				/**
				 * Represents a guild channel that the client only has limited information for - e.g. from invites.
				 */
				class PartialGuildChannel {
					constructor(client, data) {
						/**
						 * The client that instantiated this PartialGuildChannel
						 * @name PartialGuildChannel#client
						 * @type {Client}
						 * @readonly
						 */
						Object.defineProperty(this, "client", {value: client});

						this.setup(data);
					}

					setup(data) {
						/**
						 * The ID of this guild channel
						 * @type {Snowflake}
						 */
						this.id = data.id;

						/**
						 * The name of this guild channel
						 * @type {string}
						 */
						this.name = data.name;

						/**
						 * The type of this guild channel - `text` or `voice`
						 * @type {string}
						 */
						this.type =
							Constants.ChannelTypes.TEXT === data.type
								? "text"
								: "voice";
					}
				}

				module.exports = PartialGuildChannel;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/PermissionOverwrites.js":
			/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/PermissionOverwrites.js ***!
  \************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Permissions = __webpack_require__(
					/*! ../util/Permissions */ "./node_modules/discord.js/src/util/Permissions.js"
				);

				/**
				 * Represents a permission overwrite for a role or member in a guild channel.
				 */
				class PermissionOverwrites {
					constructor(guildChannel, data) {
						/**
						 * The GuildChannel this overwrite is for
						 * @name PermissionOverwrites#channel
						 * @type {GuildChannel}
						 * @readonly
						 */
						Object.defineProperty(this, "channel", {
							value: guildChannel,
						});

						if (data) this.setup(data);
					}

					setup(data) {
						/**
						 * The ID of this overwrite, either a user ID or a role ID
						 * @type {Snowflake}
						 */
						this.id = data.id;

						/**
						 * The type of this overwrite
						 * @type {string}
						 */
						this.type = data.type;

						/**
						 * The permissions that are denied for the user or role as a bitfield.
						 * @type {number}
						 * @deprecated
						 */
						this.deny = data.deny;

						/**
						 * The permissions that are allowed for the user or role as a bitfield.
						 * @type {number}
						 * @deprecated
						 */
						this.allow = data.allow;

						/**
						 * The permissions that are denied for the user or role.
						 * @type {Permissions}
						 */
						this.denied = new Permissions(data.deny).freeze();

						/**
						 * The permissions that are allowed for the user or role.
						 * @type {Permissions}
						 */
						this.allowed = new Permissions(data.allow).freeze();
					}

					/**
					 * Delete this Permission Overwrite.
					 * @param {string} [reason] Reason for deleting this overwrite
					 * @returns {Promise<PermissionOverwrites>}
					 */
					delete(reason) {
						return this.channel.client.rest.methods.deletePermissionOverwrites(
							this,
							reason
						);
					}
				}

				module.exports = PermissionOverwrites;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/Presence.js":
			/*!************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Presence.js ***!
  \************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const {ActivityFlags, Endpoints} = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);

				/**
				 * Represents a user's presence.
				 */
				class Presence {
					constructor(data = {}, client) {
						Object.defineProperty(this, "client", {value: client});

						/**
						 * The status of the presence:
						 *
						 * * **`online`** - user is online
						 * * **`offline`** - user is offline or invisible
						 * * **`idle`** - user is AFK
						 * * **`dnd`** - user is in Do not Disturb
						 * @type {string}
						 */
						this.status = data.status || "offline";

						/**
						 * The game that the user is playing
						 * @type {?Game}
						 */
						this.game = data.game
							? new Game(data.game, this)
							: null;
					}

					update(data) {
						this.status = data.status || this.status;
						this.game = data.game
							? new Game(data.game, this)
							: null;
					}

					/**
					 * Whether this presence is equal to another
					 * @param {Presence} presence The presence to compare with
					 * @returns {boolean}
					 */
					equals(presence) {
						return (
							this === presence ||
							(presence &&
							this.status === presence.status &&
							this.game
								? this.game.equals(presence.game)
								: !presence.game)
						);
					}
				}

				/**
				 * Represents a game that is part of a user's presence.
				 */
				class Game {
					constructor(data, presence) {
						Object.defineProperty(this, "presence", {
							value: presence,
						});

						/**
						 * The name of the game being played
						 * @type {string}
						 */
						this.name = data.name;

						/**
						 * The type of the game status
						 * @type {number}
						 */
						this.type = data.type;

						/**
						 * If the game is being streamed, a link to the stream
						 * @type {?string}
						 */
						this.url = data.url || null;

						/**
						 * Details about the activity
						 * @type {?string}
						 */
						this.details = data.details || null;

						/**
						 * State of the activity
						 * @type {?string}
						 */
						this.state = data.state || null;

						/**
						 * Application ID associated with this activity
						 * @type {?Snowflake}
						 */
						this.applicationID = data.application_id || null;

						/**
						 * Timestamps for the activity
						 * @type {?Object}
						 * @prop {?Date} start When the activity started
						 * @prop {?Date} end When the activity will end
						 */
						this.timestamps = data.timestamps
							? {
									start: data.timestamps.start
										? new Date(
												Number(data.timestamps.start)
										  )
										: null,
									end: data.timestamps.end
										? new Date(Number(data.timestamps.end))
										: null,
							  }
							: null;

						/**
						 * Party of the activity
						 * @type {?Object}
						 * @prop {?string} id ID of the party
						 * @prop {number[]} size Size of the party as `[current, max]`
						 */
						this.party = data.party || null;

						/**
						 * Assets for rich presence
						 * @type {?RichPresenceAssets}
						 */
						this.assets = data.assets
							? new RichPresenceAssets(this, data.assets)
							: null;

						this.syncID = data.sync_id;
						this._flags = data.flags;
					}

					get flags() {
						const flags = [];
						for (const [name, flag] of Object.entries(
							ActivityFlags
						)) {
							if ((this._flags & flag) === flag) flags.push(name);
						}
						return flags;
					}

					/**
					 * Whether or not the game is being streamed
					 * @type {boolean}
					 * @readonly
					 */
					get streaming() {
						return this.type === 1;
					}

					/**
					 * When concatenated with a string, this automatically returns the game's name instead of the Game object.
					 * @returns {string}
					 */
					toString() {
						return this.name;
					}

					/**
					 * Whether this game is equal to another game
					 * @param {Game} game The game to compare with
					 * @returns {boolean}
					 */
					equals(game) {
						return (
							this === game ||
							(game &&
								this.name === game.name &&
								this.type === game.type &&
								this.url === game.url)
						);
					}
				}

				/**
				 * Assets for a rich presence
				 */
				class RichPresenceAssets {
					constructor(game, assets) {
						Object.defineProperty(this, "game", {value: game});

						/**
						 * Hover text for the large image
						 * @type {?string}
						 */
						this.largeText = assets.large_text || null;

						/**
						 * Hover text for the small image
						 * @type {?string}
						 */
						this.smallText = assets.small_text || null;

						/**
						 * ID of the large image asset
						 * @type {?Snowflake}
						 */
						this.largeImage = assets.large_image || null;

						/**
						 * ID of the small image asset
						 * @type {?Snowflake}
						 */
						this.smallImage = assets.small_image || null;
					}

					/**
					 * The URL of the small image asset
					 * @type {?string}
					 * @readonly
					 */
					get smallImageURL() {
						if (!this.smallImage) return null;
						return Endpoints.CDN(
							this.game.presence.client.options.http.cdn
						).AppAsset(this.game.applicationID, this.smallImage);
					}

					/**
					 * The URL of the large image asset
					 * @type {?string}
					 * @readonly
					 */
					get largeImageURL() {
						if (!this.largeImage) return null;
						if (/^spotify:/.test(this.largeImage)) {
							return `https://i.scdn.co/image/${this.largeImage.slice(
								8
							)}`;
						}
						return Endpoints.CDN(
							this.game.presence.client.options.http.cdn
						).AppAsset(this.game.applicationID, this.largeImage);
					}
				}

				exports.Presence = Presence;
				exports.Game = Game;
				exports.RichPresenceAssets = RichPresenceAssets;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/ReactionCollector.js":
			/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ReactionCollector.js ***!
  \*********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Collector = __webpack_require__(
					/*! ./interfaces/Collector */ "./node_modules/discord.js/src/structures/interfaces/Collector.js"
				);
				const Collection = __webpack_require__(
					/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);

				/**
				 * @typedef {CollectorOptions} ReactionCollectorOptions
				 * @property {number} max The maximum total amount of reactions to collect
				 * @property {number} maxEmojis The maximum number of emojis to collect
				 * @property {number} maxUsers The maximum number of users to react
				 */

				/**
				 * Collects reactions on messages.
				 * @extends {Collector}
				 */
				class ReactionCollector extends Collector {
					/**
					 * @param {Message} message The message upon which to collect reactions
					 * @param {CollectorFilter} filter The filter to apply to this collector
					 * @param {ReactionCollectorOptions} [options={}] The options to apply to this collector
					 */
					constructor(message, filter, options = {}) {
						super(message.client, filter, options);

						/**
						 * The message
						 * @type {Message}
						 */
						this.message = message;

						/**
						 * The users which have reacted
						 * @type {Collection}
						 */
						this.users = new Collection();

						/**
						 * The total number of reactions collected
						 * @type {number}
						 */
						this.total = 0;

						this.client.setMaxListeners(
							this.client.getMaxListeners() + 1
						);
						this.client.on("messageReactionAdd", this.listener);
					}

					/**
					 * Handle an incoming reaction for possible collection.
					 * @param {MessageReaction} reaction The reaction to possibly collect
					 * @returns {?{key: Snowflake, value: MessageReaction}}
					 * @private
					 */
					handle(reaction) {
						if (reaction.message.id !== this.message.id)
							return null;
						return {
							key: reaction.emoji.id || reaction.emoji.name,
							value: reaction,
						};
					}

					/**
					 * Check after collection to see if the collector is done.
					 * @param {MessageReaction} reaction The reaction that was collected
					 * @param {User} user The user that reacted
					 * @returns {?string} Reason to end the collector, if any
					 * @private
					 */
					postCheck(reaction, user) {
						this.users.set(user.id, user);
						if (
							this.options.max &&
							++this.total >= this.options.max
						)
							return "limit";
						if (
							this.options.maxEmojis &&
							this.collected.size >= this.options.maxEmojis
						)
							return "emojiLimit";
						if (
							this.options.maxUsers &&
							this.users.size >= this.options.maxUsers
						)
							return "userLimit";
						return null;
					}

					/**
					 * Remove event listeners.
					 * @private
					 */
					cleanup() {
						this.client.removeListener(
							"messageReactionAdd",
							this.listener
						);
						this.client.setMaxListeners(
							this.client.getMaxListeners() - 1
						);
					}
				}

				module.exports = ReactionCollector;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/ReactionEmoji.js":
			/*!*****************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ReactionEmoji.js ***!
  \*****************************************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/**
				 * Represents a limited emoji set used for both custom and unicode emojis. Custom emojis
				 * will use this class opposed to the Emoji class when the client doesn't know enough
				 * information about them.
				 */
				class ReactionEmoji {
					constructor(reaction, name, id) {
						/**
						 * The message reaction this emoji refers to
						 * @type {MessageReaction}
						 */
						this.reaction = reaction;

						/**
						 * The name of this reaction emoji
						 * @type {string}
						 */
						this.name = name;

						/**
						 * The ID of this reaction emoji
						 * @type {?Snowflake}
						 */
						this.id = id;
					}

					/**
					 * The identifier of this emoji, used for message reactions
					 * @type {string}
					 * @readonly
					 */
					get identifier() {
						if (this.id) return `${this.name}:${this.id}`;
						return encodeURIComponent(this.name);
					}

					/**
					 * Creates the text required to form a graphical emoji on Discord.
					 * @example
					 * // Send the emoji used in a reaction to the channel the reaction is part of
					 * reaction.message.channel.send(`The emoji used is ${reaction.emoji}`);
					 * @returns {string}
					 */
					toString() {
						return this.id
							? `<:${this.name}:${this.id}>`
							: this.name;
					}
				}

				module.exports = ReactionEmoji;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/RichEmbed.js":
			/*!*************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/RichEmbed.js ***!
  \*************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Attachment = __webpack_require__(
					/*! ./Attachment */ "./node_modules/discord.js/src/structures/Attachment.js"
				);
				const MessageEmbed = __webpack_require__(
					/*! ./MessageEmbed */ "./node_modules/discord.js/src/structures/MessageEmbed.js"
				);
				let ClientDataResolver;

				/**
				 * A rich embed to be sent with a message with a fluent interface for creation.
				 * @param {Object} [data] Data to set in the rich embed
				 */
				class RichEmbed {
					constructor(data = {}) {
						/**
						 * Title for this Embed
						 * @type {string}
						 */
						this.title = data.title;

						/**
						 * Description for this Embed
						 * @type {string}
						 */
						this.description = data.description;

						/**
						 * URL for this Embed
						 * @type {string}
						 */
						this.url = data.url;

						/**
						 * Color for this Embed
						 * @type {number}
						 */
						this.color = data.color;

						/**
						 * Author for this Embed
						 * @type {Object}
						 */
						this.author = data.author;

						/**
						 * Timestamp for this Embed
						 * @type {Date}
						 */
						this.timestamp = data.timestamp;

						/**
						 * Fields for this Embed
						 * @type {Object[]}
						 */
						this.fields = data.fields || [];

						/**
						 * Thumbnail for this Embed
						 * @type {Object}
						 */
						this.thumbnail = data.thumbnail;

						/**
						 * Image for this Embed
						 * @type {Object}
						 */
						this.image = data.image;

						/**
						 * Footer for this Embed
						 * @type {Object}
						 */
						this.footer = data.footer;

						/**
						 * File to upload alongside this Embed
						 * @type {FileOptions|string|Attachment}
						 */
						this.file = data.file;

						/**
						 * The files to upload alongside this Embed
						 * @type {Array<FileOptions|string|Attachment>}
						 */
						this.files = [];
					}

					/**
					 * Sets the title of this embed.
					 * @param {StringResolvable} title The title
					 * @returns {RichEmbed} This embed
					 */
					setTitle(title) {
						title = resolveString(title);
						if (title.length > 256)
							throw new RangeError(
								"RichEmbed titles may not exceed 256 characters."
							);
						this.title = title;
						return this;
					}

					/**
					 * Sets the description of this embed.
					 * @param {StringResolvable} description The description
					 * @returns {RichEmbed} This embed
					 */
					setDescription(description) {
						description = resolveString(description);
						if (description.length > 2048)
							throw new RangeError(
								"RichEmbed descriptions may not exceed 2048 characters."
							);
						this.description = description;
						return this;
					}

					/**
					 * Sets the URL of this embed.
					 * @param {string} url The URL
					 * @returns {RichEmbed} This embed
					 */
					setURL(url) {
						this.url = url;
						return this;
					}

					/**
					 * Sets the color of this embed.
					 * @param {ColorResolvable} color The color of the embed
					 * @returns {RichEmbed} This embed
					 */
					setColor(color) {
						if (!ClientDataResolver)
							ClientDataResolver = __webpack_require__(
								/*! ../client/ClientDataResolver */ "./node_modules/discord.js/src/client/ClientDataResolver.js"
							);
						this.color = ClientDataResolver.resolveColor(color);
						return this;
					}

					/**
					 * Sets the author of this embed.
					 * @param {StringResolvable} name The name of the author
					 * @param {string} [icon] The icon URL of the author
					 * @param {string} [url] The URL of the author
					 * @returns {RichEmbed} This embed
					 */
					setAuthor(name, icon, url) {
						this.author = {
							name: resolveString(name),
							icon_url: icon,
							url,
						};
						return this;
					}

					/**
					 * Sets the timestamp of this embed.
					 * @param {Date} [timestamp=new Date()] The timestamp
					 * @returns {RichEmbed} This embed
					 */
					setTimestamp(timestamp = new Date()) {
						this.timestamp = timestamp;
						return this;
					}

					/**
					 * Adds a field to the embed (max 25).
					 * @param {StringResolvable} name The name of the field
					 * @param {StringResolvable} value The value of the field
					 * @param {boolean} [inline=false] Set the field to display inline
					 * @returns {RichEmbed} This embed
					 */
					addField(name, value, inline = false) {
						if (this.fields.length >= 25)
							throw new RangeError(
								"RichEmbeds may not exceed 25 fields."
							);
						name = resolveString(name);
						if (name.length > 256)
							throw new RangeError(
								"RichEmbed field names may not exceed 256 characters."
							);
						if (!/\S/.test(name))
							throw new RangeError(
								"RichEmbed field names may not be empty."
							);
						value = resolveString(value);
						if (value.length > 1024)
							throw new RangeError(
								"RichEmbed field values may not exceed 1024 characters."
							);
						if (!/\S/.test(value))
							throw new RangeError(
								"RichEmbed field values may not be empty."
							);
						this.fields.push({name, value, inline});
						return this;
					}

					/**
					 * Convenience function for `<RichEmbed>.addField('\u200B', '\u200B', inline)`.
					 * @param {boolean} [inline=false] Set the field to display inline
					 * @returns {RichEmbed} This embed
					 */
					addBlankField(inline = false) {
						return this.addField("\u200B", "\u200B", inline);
					}

					/**
					 * Set the thumbnail of this embed.
					 * @param {string} url The URL of the thumbnail
					 * @returns {RichEmbed} This embed
					 */
					setThumbnail(url) {
						this.thumbnail = {url};
						return this;
					}

					/**
					 * Set the image of this embed.
					 * @param {string} url The URL of the image
					 * @returns {RichEmbed} This embed
					 */
					setImage(url) {
						this.image = {url};
						return this;
					}

					/**
					 * Sets the footer of this embed.
					 * @param {StringResolvable} text The text of the footer
					 * @param {string} [icon] The icon URL of the footer
					 * @returns {RichEmbed} This embed
					 */
					setFooter(text, icon) {
						text = resolveString(text);
						if (text.length > 2048)
							throw new RangeError(
								"RichEmbed footer text may not exceed 2048 characters."
							);
						this.footer = {text, icon_url: icon};
						return this;
					}

					/**
					 * Sets the file to upload alongside the embed. This file can be accessed via `attachment://fileName.extension` when
					 * setting an embed image or author/footer icons. Only one file may be attached.
					 * @param {FileOptions|string|Attachment} file Local path or URL to the file to attach,
					 * or valid FileOptions for a file to attach
					 * @returns {RichEmbed} This embed
					 */
					attachFile(file) {
						if (this.file)
							throw new RangeError(
								"You may not upload more than one file at once."
							);
						if (file instanceof Attachment) file = file.file;
						this.file = file;
						return this;
					}

					/**
					 * Sets the files to upload alongside the embed. A file can be accessed via `attachment://fileName.extension` when
					 * setting an embed image or author/footer icons. Multiple files can be attached.
					 * @param {Array<FileOptions|string|Attachment>} files Files to attach
					 * @returns {RichEmbed}
					 */
					attachFiles(files) {
						files = files.map((file) =>
							file instanceof Attachment ? file.file : file
						);
						this.files = this.files.concat(files);
						return this;
					}

					/**
					 * Transforms the embed object to be processed.
					 * @returns {Object} The raw data of this embed
					 * @private
					 */
					_apiTransform() {
						return {
							title: this.title,
							type: "rich",
							description: this.description,
							url: this.url,
							timestamp: this.timestamp
								? new Date(this.timestamp)
								: null,
							color: this.color,
							fields: this.fields
								? this.fields.map((field) => ({
										name: field.name,
										value: field.value,
										inline: field.inline,
								  }))
								: null,
							thumbnail: this.thumbnail
								? {
										url: this.thumbnail.url,
								  }
								: null,
							image: this.image
								? {
										url: this.image.url,
								  }
								: null,
							author: this.author
								? {
										name: this.author.name,
										url: this.author.url,
										icon_url:
											this.author instanceof
											MessageEmbed.Author
												? this.author.iconURL
												: this.author.icon_url,
								  }
								: null,
							footer: this.footer
								? {
										text: this.footer.text,
										icon_url:
											this.footer instanceof
											MessageEmbed.Footer
												? this.footer.iconURL
												: this.footer.icon_url,
								  }
								: null,
						};
					}
				}

				module.exports = RichEmbed;

				function resolveString(data) {
					if (typeof data === "string") return data;
					if (data instanceof Array) return data.join("\n");
					return String(data);
				}

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/Role.js":
			/*!********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Role.js ***!
  \********************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Snowflake = __webpack_require__(
					/*! ../util/Snowflake */ "./node_modules/discord.js/src/util/Snowflake.js"
				);
				const Permissions = __webpack_require__(
					/*! ../util/Permissions */ "./node_modules/discord.js/src/util/Permissions.js"
				);
				const util = __webpack_require__(
					/*! util */ "./node_modules/util/util.js"
				);

				/**
				 * Represents a role on Discord.
				 */
				class Role {
					constructor(guild, data) {
						/**
						 * The client that instantiated the role
						 * @name Role#client
						 * @type {Client}
						 * @readonly
						 */
						Object.defineProperty(this, "client", {
							value: guild.client,
						});

						/**
						 * The guild that the role belongs to
						 * @type {Guild}
						 */
						this.guild = guild;

						/**
						 * Whether the role has been deleted
						 * @type {boolean}
						 */
						this.deleted = false;

						if (data) this.setup(data);
					}

					setup(data) {
						/**
						 * The ID of the role (unique to the guild it is part of)
						 * @type {Snowflake}
						 */
						this.id = data.id;

						/**
						 * The name of the role
						 * @type {string}
						 */
						this.name = data.name;

						/**
						 * The base 10 color of the role
						 * @type {number}
						 */
						this.color = data.color;

						/**
						 * If true, users that are part of this role will appear in a separate category in the users list
						 * @type {boolean}
						 */
						this.hoist = data.hoist;

						/**
						 * The position of the role from the API
						 * @type {number}
						 */
						this.position = data.position;

						/**
						 * The permissions bitfield of the role
						 * @type {number}
						 */
						this.permissions = data.permissions;

						/**
						 * Whether or not the role is managed by an external service
						 * @type {boolean}
						 */
						this.managed = data.managed;

						/**
						 * Whether or not the role can be mentioned by anyone
						 * @type {boolean}
						 */
						this.mentionable = data.mentionable;
					}

					/**
					 * The timestamp the role was created at
					 * @type {number}
					 * @readonly
					 */
					get createdTimestamp() {
						return Snowflake.deconstruct(this.id).timestamp;
					}

					/**
					 * The time the role was created
					 * @type {Date}
					 * @readonly
					 */
					get createdAt() {
						return new Date(this.createdTimestamp);
					}

					/**
					 * The hexadecimal version of the role color, with a leading hashtag
					 * @type {string}
					 * @readonly
					 */
					get hexColor() {
						let col = this.color.toString(16);
						while (col.length < 6) col = `0${col}`;
						return `#${col}`;
					}

					/**
					 * The cached guild members that have this role
					 * @type {Collection<Snowflake, GuildMember>}
					 * @readonly
					 */
					get members() {
						return this.guild.members.filter((m) =>
							m.roles.has(this.id)
						);
					}

					/**
					 * Whether the role is editable by the client user
					 * @type {boolean}
					 * @readonly
					 */
					get editable() {
						if (this.managed) return false;
						const clientMember = this.guild.member(
							this.client.user
						);
						if (
							!clientMember.permissions.has(
								Permissions.FLAGS.MANAGE_ROLES_OR_PERMISSIONS
							)
						)
							return false;
						return (
							clientMember.highestRole.comparePositionTo(this) > 0
						);
					}

					/**
					 * The position of the role in the role manager
					 * @type {number}
					 * @readonly
					 */
					get calculatedPosition() {
						const sorted = this.guild._sortedRoles;
						return sorted.array().indexOf(sorted.get(this.id));
					}

					/**
					 * Get an object mapping permission names to whether or not the role enables that permission.
					 * @returns {Object<string, boolean>}
					 * @example
					 * // Print the serialized role permissions
					 * console.log(role.serialize());
					 */
					serialize() {
						return new Permissions(this.permissions).serialize();
					}

					/**
					 * Checks if the role has a permission.
					 * @param {PermissionResolvable} permission Permission(s) to check for
					 * @param {boolean} [explicit=false] Whether to require the role to explicitly have the exact permission
					 * **(deprecated)**
					 * @param {boolean} [checkAdmin] Whether to allow the administrator permission to override
					 * (takes priority over `explicit`)
					 * @returns {boolean}
					 * @example
					 * // See if a role can ban a member
					 * if (role.hasPermission('BAN_MEMBERS')) {
					 *   console.log('This role can ban members');
					 * } else {
					 *   console.log('This role can\'t ban members');
					 * }
					 */
					hasPermission(permission, explicit = false, checkAdmin) {
						return new Permissions(this.permissions).has(
							permission,
							typeof checkAdmin !== "undefined"
								? checkAdmin
								: !explicit
						);
					}

					/**
					 * Checks if the role has all specified permissions.
					 * @param {PermissionResolvable} permissions The permissions to check for
					 * @param {boolean} [explicit=false] Whether to require the role to explicitly have the exact permissions
					 * @returns {boolean}
					 * @deprecated
					 */
					hasPermissions(permissions, explicit = false) {
						return new Permissions(this.permissions).has(
							permissions,
							!explicit
						);
					}

					/**
					 * Compares this role's position to another role's.
					 * @param {Role} role Role to compare to this one
					 * @returns {number} Negative number if this role's position is lower (other role's is higher),
					 * positive number if this one is higher (other's is lower), 0 if equal
					 */
					comparePositionTo(role) {
						return this.constructor.comparePositions(this, role);
					}

					/**
					 * The data for a role.
					 * @typedef {Object} RoleData
					 * @property {string} [name] The name of the role
					 * @property {ColorResolvable} [color] The color of the role, either a hex string or a base 10 number
					 * @property {boolean} [hoist] Whether or not the role should be hoisted
					 * @property {number} [position] The position of the role
					 * @property {PermissionResolvable|number} [permissions] The permissions of the role
					 * @property {boolean} [mentionable] Whether or not the role should be mentionable
					 */

					/**
					 * Edits the role.
					 * @param {RoleData} data The new data for the role
					 * @param {string} [reason] The reason for editing this role
					 * @returns {Promise<Role>}
					 * @example
					 * // Edit name of a role
					 * role.edit({ name: 'New Name' })
					 *   .then(updated => console.log(`Edited role name from ${role.name} to ${updated.name}`))
					 *   .catch(console.error);
					 */
					edit(data, reason) {
						return this.client.rest.methods.updateGuildRole(
							this,
							data,
							reason
						);
					}

					/**
					 * Set a new name for the role.
					 * @param {string} name The new name of the role
					 * @param {string} [reason] Reason for changing the role's name
					 * @returns {Promise<Role>}
					 * @example
					 * // Set the name of the role
					 * role.setName('New Name')
					 *   .then(updated => console.log(`Edited role name from ${role.name} to ${updated.name}`))
					 *   .catch(console.error);
					 */
					setName(name, reason) {
						return this.edit({name}, reason);
					}

					/**
					 * Set a new color for the role.
					 * @param {ColorResolvable} color The color of the role
					 * @param {string} [reason] Reason for changing the role's color
					 * @returns {Promise<Role>}
					 * @example
					 * // Set the color of a role
					 * role.setColor('#FF0000')
					 *   .then(updated => console.log(`Set color of role to ${role.color}`))
					 *   .catch(console.error);
					 */
					setColor(color, reason) {
						return this.edit({color}, reason);
					}

					/**
					 * Set whether or not the role should be hoisted.
					 * @param {boolean} hoist Whether or not to hoist the role
					 * @param {string} [reason] Reason for setting whether or not the role should be hoisted
					 * @returns {Promise<Role>}
					 * @example
					 * // Set the hoist of the role
					 * role.setHoist(true)
					 *   .then(updated => console.log(`Role hoisted: ${updated.hoist}`))
					 *   .catch(console.error);
					 */
					setHoist(hoist, reason) {
						return this.edit({hoist}, reason);
					}

					/**
					 * Set the position of the role.
					 * @param {number} position The position of the role
					 * @param {boolean} [relative=false] Move the position relative to its current value
					 * @returns {Promise<Role>}
					 * @example
					 * // Set the position of the role
					 * role.setPosition(1)
					 *   .then(updated => console.log(`Role position: ${updated.position}`))
					 *   .catch(console.error);
					 */
					setPosition(position, relative) {
						return this.guild
							.setRolePosition(this, position, relative)
							.then(() => this);
					}

					/**
					 * Set the permissions of the role.
					 * @param {PermissionResolvable} permissions The permissions of the role
					 * @param {string} [reason] Reason for changing the role's permissions
					 * @returns {Promise<Role>}
					 * @example
					 * // Set the permissions of the role
					 * role.setPermissions(['KICK_MEMBERS', 'BAN_MEMBERS'])
					 *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))
					 *   .catch(console.error);
					 * @example
					 * // Remove all permissions from a role
					 * role.setPermissions(0)
					 *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))
					 *   .catch(console.error);
					 */
					setPermissions(permissions, reason) {
						return this.edit({permissions}, reason);
					}

					/**
					 * Set whether this role is mentionable.
					 * @param {boolean} mentionable Whether this role should be mentionable
					 * @param {string} [reason] Reason for setting whether or not this role should be mentionable
					 * @returns {Promise<Role>}
					 * @example
					 * // Make the role mentionable
					 * role.setMentionable(true, 'Role needs to be pinged')
					 *   .then(updated => console.log(`Role mentionable: ${updated.mentionable}`))
					 *   .catch(console.error);
					 */
					setMentionable(mentionable, reason) {
						return this.edit({mentionable}, reason);
					}

					/**
					 * Deletes the role.
					 * @param {string} [reason] Reason for deleting the role
					 * @returns {Promise<Role>}
					 * @example
					 * // Delete a role
					 * role.delete('The role needed to go')
					 *   .then(deleted => console.log(`Deleted role ${deleted.name}`))
					 *   .catch(console.error);
					 */
					delete(reason) {
						return this.client.rest.methods.deleteGuildRole(
							this,
							reason
						);
					}

					/**
					 * Whether this role equals another role. It compares all properties, so for most operations
					 * it is advisable to just compare `role.id === role2.id` as it is much faster and is often
					 * what most users need.
					 * @param {Role} role Role to compare with
					 * @returns {boolean}
					 */
					equals(role) {
						return (
							role &&
							this.id === role.id &&
							this.name === role.name &&
							this.color === role.color &&
							this.hoist === role.hoist &&
							this.position === role.position &&
							this.permissions === role.permissions &&
							this.managed === role.managed
						);
					}

					/**
					 * When concatenated with a string, this automatically concatenates the role mention rather than the Role object.
					 * @returns {string}
					 */
					toString() {
						if (this.id === this.guild.id) return "@everyone";
						return `<@&${this.id}>`;
					}

					/**
					 * Compares the positions of two roles.
					 * @param {Role} role1 First role to compare
					 * @param {Role} role2 Second role to compare
					 * @returns {number} Negative number if the first role's position is lower (second role's is higher),
					 * positive number if the first's is higher (second's is lower), 0 if equal
					 */
					static comparePositions(role1, role2) {
						if (role1.position === role2.position)
							return role2.id - role1.id;
						return role1.position - role2.position;
					}
				}

				Role.prototype.hasPermissions = util.deprecate(
					Role.prototype.hasPermissions,
					"Role#hasPermissions is deprecated - use Role#hasPermission instead, it now takes an array"
				);

				module.exports = Role;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/TextChannel.js":
			/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/TextChannel.js ***!
  \***************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const GuildChannel = __webpack_require__(
					/*! ./GuildChannel */ "./node_modules/discord.js/src/structures/GuildChannel.js"
				);
				const TextBasedChannel = __webpack_require__(
					/*! ./interfaces/TextBasedChannel */ "./node_modules/discord.js/src/structures/interfaces/TextBasedChannel.js"
				);
				const Collection = __webpack_require__(
					/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);

				/**
				 * Represents a guild text channel on Discord.
				 * @extends {GuildChannel}
				 * @implements {TextBasedChannel}
				 */
				class TextChannel extends GuildChannel {
					constructor(guild, data) {
						super(guild, data);
						this.type = "text";
						this.messages = new Collection();
						this._typing = new Map();
					}

					setup(data) {
						super.setup(data);

						/**
						 * The topic of the text channel
						 * @type {?string}
						 */
						this.topic = data.topic;

						/**
						 * If the Discord considers this channel NSFW
						 * @type {boolean}
						 * @readonly
						 */
						this.nsfw = Boolean(data.nsfw);

						/**
						 * The ID of the last message sent in this channel, if one was sent
						 * @type {?Snowflake}
						 */
						this.lastMessageID = data.last_message_id;
					}

					/**
					 * A collection of members that can see this channel, mapped by their ID
					 * @type {Collection<Snowflake, GuildMember>}
					 * @readonly
					 */
					get members() {
						const members = new Collection();
						for (const member of this.guild.members.values()) {
							if (
								this.permissionsFor(member).has("READ_MESSAGES")
							) {
								members.set(member.id, member);
							}
						}
						return members;
					}

					/**
					 * Fetch all webhooks for the channel.
					 * @returns {Promise<Collection<Snowflake, Webhook>>}
					 * @example
					 * // Fetch webhooks
					 * channel.fetchWebhooks()
					 *   .then(hooks => console.log(`This channel has ${hooks.size} hooks`))
					 *   .catch(console.error);
					 */
					fetchWebhooks() {
						return this.client.rest.methods.getChannelWebhooks(
							this
						);
					}

					/**
					 * Sets whether this channel is flagged as NSFW.
					 * @param {boolean} nsfw Whether the channel should be considered NSFW
					 * @param {string} [reason] Reason for changing the channel's NSFW flag
					 * @returns {Promise<TextChannel>}
					 */
					setNSFW(nsfw, reason) {
						return this.edit({nsfw}, reason);
					}

					/**
					 * Create a webhook for the channel.
					 * @param {string} name The name of the webhook
					 * @param {BufferResolvable|Base64Resolvable} [avatar] The avatar for the webhook
					 * @param {string} [reason] Reason for creating this webhook
					 * @returns {Promise<Webhook>} webhook The created webhook
					 * @example
					 * channel.createWebhook('Snek', 'https://i.imgur.com/mI8XcpG.jpg')
					 *   .then(webhook => console.log(`Created webhook ${webhook}`))
					 *   .catch(console.error)
					 */
					createWebhook(name, avatar, reason) {
						if (
							typeof avatar === "string" &&
							avatar.startsWith("data:")
						) {
							return this.client.rest.methods.createWebhook(
								this,
								name,
								avatar,
								reason
							);
						} else {
							return this.client.resolver
								.resolveImage(avatar)
								.then((data) =>
									this.client.rest.methods.createWebhook(
										this,
										name,
										data,
										reason
									)
								);
						}
					}

					// These are here only for documentation purposes - they are implemented by TextBasedChannel
					/* eslint-disable no-empty-function */
					send() {}
					sendMessage() {}
					sendEmbed() {}
					sendFile() {}
					sendFiles() {}
					sendCode() {}
					fetchMessage() {}
					fetchMessages() {}
					fetchPinnedMessages() {}
					search() {}
					startTyping() {}
					stopTyping() {}
					get typing() {}
					get typingCount() {}
					createCollector() {}
					createMessageCollector() {}
					awaitMessages() {}
					bulkDelete() {}
					acknowledge() {}
					_cacheMessage() {}
				}

				TextBasedChannel.applyToClass(TextChannel, true);

				module.exports = TextChannel;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/User.js":
			/*!********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/User.js ***!
  \********************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const TextBasedChannel = __webpack_require__(
					/*! ./interfaces/TextBasedChannel */ "./node_modules/discord.js/src/structures/interfaces/TextBasedChannel.js"
				);
				const Constants = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const Presence = __webpack_require__(
					/*! ./Presence */ "./node_modules/discord.js/src/structures/Presence.js"
				).Presence;
				const Snowflake = __webpack_require__(
					/*! ../util/Snowflake */ "./node_modules/discord.js/src/util/Snowflake.js"
				);
				const util = __webpack_require__(
					/*! util */ "./node_modules/util/util.js"
				);

				/**
				 * Represents a user on Discord.
				 * @implements {TextBasedChannel}
				 */
				class User {
					constructor(client, data) {
						/**
						 * The client that created the instance of the user
						 * @name User#client
						 * @type {Client}
						 * @readonly
						 */
						Object.defineProperty(this, "client", {value: client});

						if (data) this.setup(data);
					}

					setup(data) {
						/**
						 * The ID of the user
						 * @type {Snowflake}
						 */
						this.id = data.id;

						/**
						 * The username of the user
						 * @type {string}
						 */
						this.username = data.username;

						/**
						 * A discriminator based on username for the user
						 * @type {string}
						 */
						this.discriminator = data.discriminator;

						/**
						 * The ID of the user's avatar
						 * @type {string}
						 */
						this.avatar = data.avatar;

						/**
						 * Whether or not the user is a bot
						 * @type {boolean}
						 */
						this.bot = Boolean(data.bot);

						/**
						 * The ID of the last message sent by the user, if one was sent
						 * @type {?Snowflake}
						 */
						this.lastMessageID = null;

						/**
						 * The Message object of the last message sent by the user, if one was sent
						 * @type {?Message}
						 */
						this.lastMessage = null;
					}

					patch(data) {
						for (const prop of [
							"id",
							"username",
							"discriminator",
							"avatar",
							"bot",
						]) {
							if (typeof data[prop] !== "undefined")
								this[prop] = data[prop];
						}
						if (data.token) this.client.token = data.token;
					}

					/**
					 * The timestamp the user was created at
					 * @type {number}
					 * @readonly
					 */
					get createdTimestamp() {
						return Snowflake.deconstruct(this.id).timestamp;
					}

					/**
					 * The time the user was created
					 * @type {Date}
					 * @readonly
					 */
					get createdAt() {
						return new Date(this.createdTimestamp);
					}

					/**
					 * The presence of this user
					 * @type {Presence}
					 * @readonly
					 */
					get presence() {
						if (this.client.presences.has(this.id))
							return this.client.presences.get(this.id);
						for (const guild of this.client.guilds.values()) {
							if (guild.presences.has(this.id))
								return guild.presences.get(this.id);
						}
						return new Presence(undefined, this.client);
					}

					/**
					 * A link to the user's avatar
					 * @type {?string}
					 * @readonly
					 */
					get avatarURL() {
						if (!this.avatar) return null;
						return Constants.Endpoints.User(this).Avatar(
							this.client.options.http.cdn,
							this.avatar
						);
					}

					/**
					 * A link to the user's default avatar
					 * @type {string}
					 * @readonly
					 */
					get defaultAvatarURL() {
						const avatars = Object.keys(Constants.DefaultAvatars);
						const avatar =
							avatars[this.discriminator % avatars.length];
						return Constants.Endpoints.CDN(
							this.client.options.http.host
						).Asset(`${Constants.DefaultAvatars[avatar]}.png`);
					}

					/**
					 * A link to the user's avatar if they have one. Otherwise a link to their default avatar will be returned
					 * @type {string}
					 * @readonly
					 */
					get displayAvatarURL() {
						return this.avatarURL || this.defaultAvatarURL;
					}

					/**
					 * The Discord "tag" for this user
					 * @type {string}
					 * @readonly
					 */
					get tag() {
						return `${this.username}#${this.discriminator}`;
					}

					/**
					 * The note that is set for the user
					 * <warn>This is only available when using a user account.</warn>
					 * @type {?string}
					 * @readonly
					 */
					get note() {
						return this.client.user.notes.get(this.id) || null;
					}

					/**
					 * Check whether the user is typing in a channel.
					 * @param {ChannelResolvable} channel The channel to check in
					 * @returns {boolean}
					 */
					typingIn(channel) {
						channel = this.client.resolver.resolveChannel(channel);
						return channel._typing.has(this.id);
					}

					/**
					 * Get the time that the user started typing.
					 * @param {ChannelResolvable} channel The channel to get the time in
					 * @returns {?Date}
					 */
					typingSinceIn(channel) {
						channel = this.client.resolver.resolveChannel(channel);
						return channel._typing.has(this.id)
							? new Date(channel._typing.get(this.id).since)
							: null;
					}

					/**
					 * Get the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.
					 * @param {ChannelResolvable} channel The channel to get the time in
					 * @returns {number}
					 */
					typingDurationIn(channel) {
						channel = this.client.resolver.resolveChannel(channel);
						return channel._typing.has(this.id)
							? channel._typing.get(this.id).elapsedTime
							: -1;
					}

					/**
					 * The DM between the client's user and this user
					 * @type {?DMChannel}
					 * @readonly
					 */
					get dmChannel() {
						return this.client.channels
							.filter((c) => c.type === "dm")
							.find((c) => c.recipient.id === this.id);
					}

					/**
					 * Creates a DM channel between the client and the user.
					 * @returns {Promise<DMChannel>}
					 */
					createDM() {
						return this.client.rest.methods.createDM(this);
					}

					/**
					 * Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.
					 * @returns {Promise<DMChannel>}
					 */
					deleteDM() {
						return this.client.rest.methods.deleteChannel(this);
					}

					/**
					 * Sends a friend request to the user.
					 * <warn>This is only available when using a user account.</warn>
					 * @returns {Promise<User>}
					 */
					addFriend() {
						return this.client.rest.methods.addFriend(this);
					}

					/**
					 * Removes the user from your friends.
					 * <warn>This is only available when using a user account.</warn>
					 * @returns {Promise<User>}
					 */
					removeFriend() {
						return this.client.rest.methods.removeFriend(this);
					}

					/**
					 * Blocks the user.
					 * <warn>This is only available when using a user account.</warn>
					 * @returns {Promise<User>}
					 */
					block() {
						return this.client.rest.methods.blockUser(this);
					}

					/**
					 * Unblocks the user.
					 * <warn>This is only available when using a user account.</warn>
					 * @returns {Promise<User>}
					 */
					unblock() {
						return this.client.rest.methods.unblockUser(this);
					}

					/**
					 * Get the profile of the user.
					 * <warn>This is only available when using a user account.</warn>
					 * @returns {Promise<UserProfile>}
					 */
					fetchProfile() {
						return this.client.rest.methods.fetchUserProfile(this);
					}

					/**
					 * Sets a note for the user.
					 * <warn>This is only available when using a user account.</warn>
					 * @param {string} note The note to set for the user
					 * @returns {Promise<User>}
					 */
					setNote(note) {
						return this.client.rest.methods.setNote(this, note);
					}

					/**
					 * Checks if the user is equal to another. It compares ID, username, discriminator, avatar, and bot flags.
					 * It is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.
					 * @param {User} user User to compare with
					 * @returns {boolean}
					 */
					equals(user) {
						let equal =
							user &&
							this.id === user.id &&
							this.username === user.username &&
							this.discriminator === user.discriminator &&
							this.avatar === user.avatar &&
							this.bot === Boolean(user.bot);

						return equal;
					}

					/**
					 * When concatenated with a string, this automatically concatenates the user's mention instead of the User object.
					 * @returns {string}
					 * @example
					 * // logs: Hello from <@123456789>!
					 * console.log(`Hello from ${user}!`);
					 */
					toString() {
						return `<@${this.id}>`;
					}

					// These are here only for documentation purposes - they are implemented by TextBasedChannel
					/* eslint-disable no-empty-function */
					send() {}
					sendMessage() {}
					sendEmbed() {}
					sendFile() {}
					sendCode() {}
				}

				TextBasedChannel.applyToClass(User);

				User.prototype.block = util.deprecate(
					User.prototype.block,
					"User#block: userbot methods will be removed"
				);

				User.prototype.unblock = util.deprecate(
					User.prototype.unblock,
					"User#unblock: userbot methods will be removed"
				);

				User.prototype.addFriend = util.deprecate(
					User.prototype.addFriend,
					"User#addFriend: userbot methods will be removed"
				);

				User.prototype.removeFriend = util.deprecate(
					User.prototype.removeFriend,
					"User#removeFriend: userbot methods will be removed"
				);

				User.prototype.setNote = util.deprecate(
					User.prototype.setNote,
					"User#setNote, userbot methods will be removed"
				);

				User.prototype.fetchProfile = util.deprecate(
					User.prototype.fetchProfile,
					"User#fetchProfile: userbot methods will be removed"
				);

				module.exports = User;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/UserConnection.js":
			/*!******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/UserConnection.js ***!
  \******************************************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/**
				 * Represents a user connection (or "platform identity").
				 */
				class UserConnection {
					constructor(user, data) {
						/**
						 * The user that owns the connection
						 * @type {User}
						 */
						this.user = user;

						this.setup(data);
					}

					setup(data) {
						/**
						 * The type of the connection
						 * @type {string}
						 */
						this.type = data.type;

						/**
						 * The username of the connection account
						 * @type {string}
						 */
						this.name = data.name;

						/**
						 * The id of the connection account
						 * @type {string}
						 */
						this.id = data.id;

						/**
						 * Whether the connection is revoked
						 * @type {boolean}
						 */
						this.revoked = data.revoked;

						/**
						 * Partial server integrations (not yet implemented)
						 * @type {Object[]}
						 */
						this.integrations = data.integrations;
					}
				}

				module.exports = UserConnection;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/UserProfile.js":
			/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/UserProfile.js ***!
  \***************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Collection = __webpack_require__(
					/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);
				const UserConnection = __webpack_require__(
					/*! ./UserConnection */ "./node_modules/discord.js/src/structures/UserConnection.js"
				);

				/**
				 * Represents a user's profile on Discord.
				 */
				class UserProfile {
					constructor(user, data) {
						/**
						 * The owner of the profile
						 * @type {User}
						 */
						this.user = user;

						/**
						 * The client that created the instance of the UserProfile
						 * @name UserProfile#client
						 * @type {Client}
						 * @readonly
						 */
						Object.defineProperty(this, "client", {
							value: user.client,
						});

						/**
						 * The guilds that the client user and the user share
						 * @type {Collection<Snowflake, Guild>}
						 */
						this.mutualGuilds = new Collection();

						/**
						 * The user's connections
						 * @type {Collection<Snowflake, UserConnection>}
						 */
						this.connections = new Collection();

						this.setup(data);
					}

					setup(data) {
						/**
						 * If the user has Discord Premium
						 * @type {boolean}
						 */
						this.premium = data.premium;

						/**
						 * The date since which the user has had Discord Premium
						 * @type {?Date}
						 */
						this.premiumSince = data.premium_since
							? new Date(data.premium_since)
							: null;

						for (const guild of data.mutual_guilds) {
							if (this.client.guilds.has(guild.id)) {
								this.mutualGuilds.set(
									guild.id,
									this.client.guilds.get(guild.id)
								);
							}
						}
						for (const connection of data.connected_accounts) {
							this.connections.set(
								connection.id,
								new UserConnection(this.user, connection)
							);
						}
					}
				}

				module.exports = UserProfile;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/VoiceChannel.js":
			/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/VoiceChannel.js ***!
  \****************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const GuildChannel = __webpack_require__(
					/*! ./GuildChannel */ "./node_modules/discord.js/src/structures/GuildChannel.js"
				);
				const Collection = __webpack_require__(
					/*! ../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);
				const Permissions = __webpack_require__(
					/*! ../util/Permissions */ "./node_modules/discord.js/src/util/Permissions.js"
				);

				/**
				 * Represents a guild voice channel on Discord.
				 * @extends {GuildChannel}
				 */
				class VoiceChannel extends GuildChannel {
					constructor(guild, data) {
						super(guild, data);

						/**
						 * The members in this voice channel
						 * @type {Collection<Snowflake, GuildMember>}
						 */
						this.members = new Collection();

						this.type = "voice";
					}

					setup(data) {
						super.setup(data);

						/**
						 * The bitrate of this voice channel
						 * @type {number}
						 */
						this.bitrate = data.bitrate * 0.001;

						/**
						 * The maximum amount of users allowed in this channel - 0 means unlimited.
						 * @type {number}
						 */
						this.userLimit = data.user_limit;
					}

					/**
					 * The voice connection for this voice channel, if the client is connected
					 * @type {?VoiceConnection}
					 * @readonly
					 */
					get connection() {
						const connection = this.guild.voiceConnection;
						if (connection && connection.channel.id === this.id)
							return connection;
						return null;
					}

					/**
					 * Checks if the voice channel is full
					 * @type {boolean}
					 * @readonly
					 */
					get full() {
						return (
							this.userLimit > 0 &&
							this.members.size >= this.userLimit
						);
					}

					/**
					 * Whether the channel is deletable by the client user
					 * @type {boolean}
					 * @readonly
					 */
					get deletable() {
						return (
							super.deletable &&
							this.permissionsFor(this.client.user).has(
								Permissions.FLAGS.CONNECT
							)
						);
					}

					/**
					 * Checks if the client has permission join the voice channel
					 * @type {boolean}
					 * @readonly
					 */
					get joinable() {
						if (this.client.browser) return false;
						if (
							!this.permissionsFor(this.client.user).has(
								"CONNECT"
							)
						)
							return false;
						if (
							this.full &&
							!this.permissionsFor(this.client.user).has(
								"MOVE_MEMBERS"
							)
						)
							return false;
						return true;
					}

					/**
					 * Checks if the client has permission to send audio to the voice channel
					 * @type {boolean}
					 * @readonly
					 */
					get speakable() {
						return this.permissionsFor(this.client.user).has(
							"SPEAK"
						);
					}

					/**
					 * Sets the bitrate of the channel (in kbps).
					 * @param {number} bitrate The new bitrate
					 * @param {string} [reason] Reason for changing the channel's bitrate
					 * @returns {Promise<VoiceChannel>}
					 * @example
					 * // Set the bitrate of a voice channel
					 * voiceChannel.setBitrate(48)
					 *   .then(vc => console.log(`Set bitrate to ${vc.bitrate}kbps for ${vc.name}`))
					 *   .catch(console.error);
					 */
					setBitrate(bitrate, reason) {
						bitrate *= 1000;
						return this.edit({bitrate}, reason);
					}

					/**
					 * Sets the user limit of the channel.
					 * @param {number} userLimit The new user limit
					 * @param {string} [reason] Reason for changing the user limit
					 * @returns {Promise<VoiceChannel>}
					 * @example
					 * // Set the user limit of a voice channel
					 * voiceChannel.setUserLimit(42)
					 *   .then(vc => console.log(`Set user limit to ${vc.userLimit} for ${vc.name}`))
					 *   .catch(console.error);
					 */
					setUserLimit(userLimit, reason) {
						return this.edit({userLimit}, reason);
					}

					/**
					 * Attempts to join this voice channel.
					 * @returns {Promise<VoiceConnection>}
					 * @example
					 * // Join a voice channel
					 * voiceChannel.join()
					 *   .then(connection => console.log('Connected!'))
					 *   .catch(console.error);
					 */
					join() {
						if (this.client.browser)
							return Promise.reject(
								new Error(
									"Voice connections are not available in browsers."
								)
							);
						return this.client.voice.joinChannel(this);
					}

					/**
					 * Leaves this voice channel.
					 * @example
					 * // Leave a voice channel
					 * voiceChannel.leave();
					 */
					leave() {
						if (this.client.browser) return;
						const connection = this.client.voice.connections.get(
							this.guild.id
						);
						if (connection && connection.channel.id === this.id)
							connection.disconnect();
					}
				}

				module.exports = VoiceChannel;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/VoiceRegion.js":
			/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/VoiceRegion.js ***!
  \***************************************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/**
				 * Represents a Discord voice region for guilds.
				 */
				class VoiceRegion {
					constructor(data) {
						/**
						 * The ID of the region
						 * @type {string}
						 */
						this.id = data.id;

						/**
						 * Name of the region
						 * @type {string}
						 */
						this.name = data.name;

						/**
						 * Whether the region is VIP-only
						 * @type {boolean}
						 */
						this.vip = data.vip;

						/**
						 * Whether the region is deprecated
						 * @type {boolean}
						 */
						this.deprecated = data.deprecated;

						/**
						 * Whether the region is optimal
						 * @type {boolean}
						 */
						this.optimal = data.optimal;

						/**
						 * Whether the region is custom
						 * @type {boolean}
						 */
						this.custom = data.custom;

						/**
						 * A sample hostname for what a connection might look like
						 * @type {string}
						 */
						this.sampleHostname = data.sample_hostname;
					}
				}

				module.exports = VoiceRegion;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/Webhook.js":
			/*!***********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Webhook.js ***!
  \***********************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(Buffer) {
					const path = __webpack_require__(
						/*! path */ "./node_modules/path-browserify/index.js"
					);
					const Util = __webpack_require__(
						/*! ../util/Util */ "./node_modules/discord.js/src/util/Util.js"
					);
					const Attachment = __webpack_require__(
						/*! ./Attachment */ "./node_modules/discord.js/src/structures/Attachment.js"
					);
					const RichEmbed = __webpack_require__(
						/*! ./RichEmbed */ "./node_modules/discord.js/src/structures/RichEmbed.js"
					);

					/**
					 * Represents a webhook.
					 */
					class Webhook {
						constructor(client, dataOrID, token) {
							if (client) {
								/**
								 * The client that instantiated the webhook
								 * @name Webhook#client
								 * @type {Client}
								 * @readonly
								 */
								Object.defineProperty(this, "client", {
									value: client,
								});
								if (dataOrID) this.setup(dataOrID);
							} else {
								this.id = dataOrID;
								this.token = token;
								Object.defineProperty(this, "client", {
									value: this,
								});
							}
						}

						setup(data) {
							/**
							 * The name of the webhook
							 * @type {string}
							 */
							this.name = data.name;

							/**
							 * The token for the webhook
							 * @type {string}
							 */
							Object.defineProperty(this, "token", {
								value: data.token,
								writable: true,
								configurable: true,
							});

							/**
							 * The avatar for the webhook
							 * @type {?string}
							 */
							this.avatar = data.avatar;

							/**
							 * The ID of the webhook
							 * @type {Snowflake}
							 */
							this.id = data.id;

							/**
							 * The guild the webhook belongs to
							 * @type {Snowflake}
							 */
							this.guildID = data.guild_id;

							/**
							 * The channel the webhook belongs to
							 * @type {Snowflake}
							 */
							this.channelID = data.channel_id;

							if (data.user) {
								/**
								 * The owner of the webhook
								 * @type {?User|Object}
								 */
								this.owner = this.client.users
									? this.client.users.get(data.user.id)
									: data.user;
							} else {
								this.owner = null;
							}
						}

						/**
						 * Options that can be passed into send, sendMessage, sendFile, sendEmbed, and sendCode.
						 * @typedef {Object} WebhookMessageOptions
						 * @property {string} [username=this.name] Username override for the message
						 * @property {string} [avatarURL] Avatar URL override for the message
						 * @property {boolean} [tts=false] Whether or not the message should be spoken aloud
						 * @property {string} [nonce=''] The nonce for the message
						 * @property {Array<RichEmbed|Object>} [embeds] An array of embeds for the message
						 * (see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)
						 * @property {boolean} [disableEveryone=this.client.options.disableEveryone] Whether or not @everyone and @here
						 * should be replaced with plain-text
						 * @property {FileOptions|BufferResolvable|Attachment} [file] A file to send with the message **(deprecated)**
						 * @property {FileOptions[]|BufferResolvable[]|Attachment[]} [files] Files to send with the message
						 * @property {string|boolean} [code] Language for optional codeblock formatting to apply
						 * @property {boolean|SplitOptions} [split=false] Whether or not the message should be split into multiple messages if
						 * it exceeds the character limit. If an object is provided, these are the options for splitting the message.
						 */

						/**
						 * Send a message with this webhook.
						 * @param {StringResolvable} content The content to send
						 * @param {WebhookMessageOptions|Attachment|RichEmbed} [options] The options to provide,
						 * can also be just a RichEmbed or Attachment
						 * @returns {Promise<Message|Message[]|Object|Object[]>}
						 * @example
						 * // Send a basic message
						 * webhook.send('hello!')
						 *   .then(message => console.log(`Sent message: ${message.content}`))
						 *   .catch(console.error);
						 * @example
						 * // Send a remote file
						 * webhook.send({
						 *   files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']
						 * })
						 *   .then(console.log)
						 *   .catch(console.error);
						 * @example
						 * // Send a local file
						 * webhook.send({
						 *   files: [{
						 *     attachment: 'entire/path/to/file.jpg',
						 *     name: 'file.jpg'
						 *   }]
						 * })
						 *   .then(console.log)
						 *   .catch(console.error);
						 * @example
						 * // Send an embed with a local image inside
						 * webhook.send('This is an embed', {
						 *   embeds: [{
						 *     thumbnail: {
						 *          url: 'attachment://file.jpg'
						 *       }
						 *    }],
						 *    files: [{
						 *       attachment: 'entire/path/to/file.jpg',
						 *       name: 'file.jpg'
						 *    }]
						 * })
						 *   .then(console.log)
						 *   .catch(console.error);
						 */
						send(content, options) {
							// eslint-disable-line complexity
							if (
								!options &&
								typeof content === "object" &&
								!(content instanceof Array)
							) {
								options = content;
								content = "";
							} else if (!options) {
								options = {};
							}

							if (options instanceof Attachment)
								options = {files: [options]};
							if (options instanceof RichEmbed)
								options = {embeds: [options]};

							if (content) {
								content = this.client.resolver.resolveString(
									content
								);
								let {split, code, disableEveryone} = options;
								if (split && typeof split !== "object")
									split = {};
								if (
									typeof code !== "undefined" &&
									(typeof code !== "boolean" || code === true)
								) {
									content = Util.escapeMarkdown(
										content,
										true
									);
									content = `\`\`\`${
										typeof code !== "boolean"
											? code || ""
											: ""
									}\n${content}\n\`\`\``;
									if (split) {
										split.prepend = `\`\`\`${
											typeof code !== "boolean"
												? code || ""
												: ""
										}\n`;
										split.append = "\n```";
									}
								}
								if (
									disableEveryone ||
									(typeof disableEveryone === "undefined" &&
										this.client.options.disableEveryone)
								) {
									content = content.replace(
										/@(everyone|here)/g,
										"@\u200b$1"
									);
								}

								if (split)
									content = Util.splitMessage(content, split);
							}

							if (options.file) {
								if (options.files)
									options.files.push(options.file);
								else options.files = [options.file];
							}

							if (options.embeds) {
								const files = [];
								for (const embed of options.embeds) {
									if (embed.file) files.push(embed.file);
								}
								if (options.files) options.files.push(...files);
								else options.files = files;
							}

							if (options.embeds)
								options.embeds = options.embeds.map((e) =>
									new RichEmbed(e)._apiTransform()
								);

							if (options.files) {
								for (let i = 0; i < options.files.length; i++) {
									let file = options.files[i];
									if (
										typeof file === "string" ||
										Buffer.isBuffer(file)
									)
										file = {attachment: file};
									if (!file.name) {
										if (
											typeof file.attachment === "string"
										) {
											file.name = path.basename(
												file.attachment
											);
										} else if (
											file.attachment &&
											file.attachment.path
										) {
											file.name = path.basename(
												file.attachment.path
											);
										} else if (file instanceof Attachment) {
											file = {
												attachment: file.file,
												name:
													path.basename(file.file) ||
													"file.jpg",
											};
										} else {
											file.name = "file.jpg";
										}
									} else if (file instanceof Attachment) {
										file = file.file;
									}
									options.files[i] = file;
								}

								return Promise.all(
									options.files.map((file) =>
										this.client.resolver
											.resolveFile(file.attachment)
											.then((resource) => {
												file.file = resource;
												return file;
											})
									)
								).then((files) =>
									this.client.rest.methods.sendWebhookMessage(
										this,
										content,
										options,
										files
									)
								);
							}

							return this.client.rest.methods.sendWebhookMessage(
								this,
								content,
								options
							);
						}

						/**
						 * Send a message with this webhook
						 * @param {StringResolvable} content The content to send
						 * @param {WebhookMessageOptions} [options={}] The options to provide
						 * @returns {Promise<Message|Message[]>}
						 * @deprecated
						 * @example
						 * // Send a message
						 * webhook.sendMessage('hello!')
						 *  .then(message => console.log(`Sent message: ${message.content}`))
						 *  .catch(console.error);
						 */
						sendMessage(content, options = {}) {
							return this.send(content, options);
						}

						/**
						 * Send a file with this webhook.
						 * @param {BufferResolvable} attachment The file to send
						 * @param {string} [name='file.jpg'] The name and extension of the file
						 * @param {StringResolvable} [content] Text message to send with the attachment
						 * @param {WebhookMessageOptions} [options] The options to provide
						 * @returns {Promise<Message>}
						 * @deprecated
						 */
						sendFile(attachment, name, content, options = {}) {
							return this.send(
								content,
								Object.assign(options, {
									file: {attachment, name},
								})
							);
						}

						/**
						 * Send a code block with this webhook.
						 * @param {string} lang Language for the code block
						 * @param {StringResolvable} content Content of the code block
						 * @param {WebhookMessageOptions} options The options to provide
						 * @returns {Promise<Message|Message[]>}
						 * @deprecated
						 */
						sendCode(lang, content, options = {}) {
							return this.send(
								content,
								Object.assign(options, {code: lang})
							);
						}

						/**
						 * Send a raw slack message with this webhook.
						 * @param {Object} body The raw body to send
						 * @returns {Promise}
						 * @example
						 * // Send a slack message
						 * webhook.sendSlackMessage({
						 *   'username': 'Wumpus',
						 *   'attachments': [{
						 *     'pretext': 'this looks pretty cool',
						 *     'color': '#F0F',
						 *     'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',
						 *     'footer': 'Powered by sneks',
						 *     'ts': Date.now() / 1000
						 *   }]
						 * }).catch(console.error);
						 */
						sendSlackMessage(body) {
							return this.client.rest.methods.sendSlackWebhookMessage(
								this,
								body
							);
						}

						/**
						 * Edit the webhook.
						 * @param {string} name The new name for the webhook
						 * @param {BufferResolvable} [avatar] The new avatar for the webhook
						 * @returns {Promise<Webhook>}
						 */
						edit(name = this.name, avatar) {
							if (avatar) {
								return this.client.resolver
									.resolveImage(avatar)
									.then((data) =>
										this.client.rest.methods.editWebhook(
											this,
											name,
											data
										)
									);
							}
							return this.client.rest.methods.editWebhook(
								this,
								name
							);
						}

						/**
						 * Delete the webhook.
						 * @param {string} [reason] Reason for deleting the webhook
						 * @returns {Promise}
						 */
						delete(reason) {
							return this.client.rest.methods.deleteWebhook(
								this,
								reason
							);
						}
					}

					module.exports = Webhook;

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js"
					).Buffer
				));

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/interfaces/Collector.js":
			/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/interfaces/Collector.js ***!
  \************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Collection = __webpack_require__(
					/*! ../../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);
				const EventEmitter = __webpack_require__(
					/*! events */ "./node_modules/events/events.js"
				).EventEmitter;

				/**
				 * Filter to be applied to the collector.
				 * @typedef {Function} CollectorFilter
				 * @param {...*} args Any arguments received by the listener
				 * @param {Collection} collection The items collected by this collector
				 * @returns {boolean}
				 */

				/**
				 * Options to be applied to the collector.
				 * @typedef {Object} CollectorOptions
				 * @property {number} [time] How long to run the collector for
				 */

				/**
				 * Abstract class for defining a new Collector.
				 * @abstract
				 */
				class Collector extends EventEmitter {
					constructor(client, filter, options = {}) {
						super();

						/**
						 * The client
						 * @name Collector#client
						 * @type {Client}
						 * @readonly
						 */
						Object.defineProperty(this, "client", {value: client});

						/**
						 * The filter applied to this collector
						 * @type {CollectorFilter}
						 */
						this.filter = filter;

						/**
						 * The options of this collector
						 * @type {CollectorOptions}
						 */
						this.options = options;

						/**
						 * The items collected by this collector
						 * @type {Collection}
						 */
						this.collected = new Collection();

						/**
						 * Whether this collector has finished collecting
						 * @type {boolean}
						 */
						this.ended = false;

						/**
						 * Timeout for cleanup
						 * @type {?Timeout}
						 * @private
						 */
						this._timeout = null;

						/**
						 * Call this to handle an event as a collectable element
						 * Accepts any event data as parameters
						 * @type {Function}
						 * @private
						 */
						this.listener = this._handle.bind(this);
						if (options.time)
							this._timeout = this.client.setTimeout(
								() => this.stop("time"),
								options.time
							);
					}

					/**
					 * @param {...*} args The arguments emitted by the listener
					 * @emits Collector#collect
					 * @private
					 */
					_handle(...args) {
						const collect = this.handle(...args);
						if (!collect || !this.filter(...args, this.collected))
							return;

						this.collected.set(collect.key, collect.value);

						/**
						 * Emitted whenever an element is collected.
						 * @event Collector#collect
						 * @param {*} element The element that got collected
						 * @param {Collector} collector The collector
						 */
						this.emit("collect", collect.value, this);

						const post = this.postCheck(...args);
						if (post) this.stop(post);
					}

					/**
					 * Return a promise that resolves with the next collected element;
					 * rejects with collected elements if the collector finishes without receiving a next element
					 * @type {Promise}
					 * @readonly
					 */
					get next() {
						return new Promise((resolve, reject) => {
							if (this.ended) {
								reject(this.collected);
								return;
							}

							const cleanup = () => {
								this.removeListener("collect", onCollect);
								this.removeListener("end", onEnd);
							};

							const onCollect = (item) => {
								cleanup();
								resolve(item);
							};

							const onEnd = () => {
								cleanup();
								reject(this.collected); // eslint-disable-line prefer-promise-reject-errors
							};

							this.on("collect", onCollect);
							this.on("end", onEnd);
						});
					}

					/**
					 * Stop this collector and emit the `end` event.
					 * @param {string} [reason='user'] The reason this collector is ending
					 * @emits Collector#end
					 */
					stop(reason = "user") {
						if (this.ended) return;

						if (this._timeout)
							this.client.clearTimeout(this._timeout);
						this.ended = true;
						this.cleanup();

						/**
						 * Emitted when the collector is finished collecting.
						 * @event Collector#end
						 * @param {Collection} collected The elements collected by the collector
						 * @param {string} reason The reason the collector ended
						 */
						this.emit("end", this.collected, reason);
					}

					/* eslint-disable no-empty-function, valid-jsdoc */
					/**
					 * Handles incoming events from the `listener` function. Returns null if the event should not be collected,
					 * or returns an object describing the data that should be stored.
					 * @see Collector#listener
					 * @param {...*} args Any args the event listener emits
					 * @returns {?{key: string, value}} Data to insert into collection, if any
					 * @abstract
					 */
					handle() {}

					/**
					 * This method runs after collection to see if the collector should finish.
					 * @param {...*} args Any args the event listener emits
					 * @returns {?string} Reason to end the collector, if any
					 * @abstract
					 */
					postCheck() {}

					/**
					 * Called when the collector is ending.
					 * @abstract
					 */
					cleanup() {}
					/* eslint-enable no-empty-function, valid-jsdoc */
				}

				module.exports = Collector;

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/interfaces/TextBasedChannel.js":
			/*!*******************************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/interfaces/TextBasedChannel.js ***!
  \*******************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(Buffer) {
					const path = __webpack_require__(
						/*! path */ "./node_modules/path-browserify/index.js"
					);
					const Message = __webpack_require__(
						/*! ../Message */ "./node_modules/discord.js/src/structures/Message.js"
					);
					const MessageCollector = __webpack_require__(
						/*! ../MessageCollector */ "./node_modules/discord.js/src/structures/MessageCollector.js"
					);
					const Collection = __webpack_require__(
						/*! ../../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
					);
					const Attachment = __webpack_require__(
						/*! ../../structures/Attachment */ "./node_modules/discord.js/src/structures/Attachment.js"
					);
					const RichEmbed = __webpack_require__(
						/*! ../../structures/RichEmbed */ "./node_modules/discord.js/src/structures/RichEmbed.js"
					);
					const Snowflake = __webpack_require__(
						/*! ../../util/Snowflake */ "./node_modules/discord.js/src/util/Snowflake.js"
					);
					const util = __webpack_require__(
						/*! util */ "./node_modules/util/util.js"
					);

					/**
					 * Interface for classes that have text-channel-like features.
					 * @interface
					 */
					class TextBasedChannel {
						constructor() {
							/**
							 * A collection containing the messages sent to this channel
							 * @type {Collection<Snowflake, Message>}
							 */
							this.messages = new Collection();

							/**
							 * The ID of the last message in the channel, if one was sent
							 * @type {?Snowflake}
							 */
							this.lastMessageID = null;

							/**
							 * The Message object of the last message in the channel, if one was sent
							 * @type {?Message}
							 */
							this.lastMessage = null;
						}

						/**
						 * Options provided when sending or editing a message.
						 * @typedef {Object} MessageOptions
						 * @property {boolean} [tts=false] Whether or not the message should be spoken aloud
						 * @property {string} [nonce=''] The nonce for the message
						 * @property {RichEmbed|Object} [embed] An embed for the message
						 * (see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)
						 * @property {boolean} [disableEveryone=this.client.options.disableEveryone] Whether or not @everyone and @here
						 * should be replaced with plain-text
						 * @property {FileOptions|BufferResolvable|Attachment} [file] A file to send with the message **(deprecated)**
						 * @property {FileOptions[]|BufferResolvable[]|Attachment[]} [files] Files to send with the message
						 * @property {string|boolean} [code] Language for optional codeblock formatting to apply
						 * @property {boolean|SplitOptions} [split=false] Whether or not the message should be split into multiple messages if
						 * it exceeds the character limit. If an object is provided, these are the options for splitting the message
						 * @property {UserResolvable} [reply] User to reply to (prefixes the message with a mention, except in DMs)
						 */

						/**
						 * @typedef {Object} FileOptions
						 * @property {BufferResolvable} attachment File to attach
						 * @property {string} [name='file.jpg'] Filename of the attachment
						 */

						/**
						 * Options for splitting a message.
						 * @typedef {Object} SplitOptions
						 * @property {number} [maxLength=1950] Maximum character length per message piece
						 * @property {string} [char='\n'] Character to split the message with
						 * @property {string} [prepend=''] Text to prepend to every piece except the first
						 * @property {string} [append=''] Text to append to every piece except the last
						 */

						/**
						 * Send a message to this channel.
						 * @param {StringResolvable} [content] Text for the message
						 * @param {MessageOptions|Attachment|RichEmbed} [options] Options for the message,
						 * can also be just a RichEmbed or Attachment
						 * @returns {Promise<Message|Message[]>}
						 * @example
						 * // Send a basic message
						 * channel.send('hello!')
						 *   .then(message => console.log(`Sent message: ${message.content}`))
						 *   .catch(console.error);
						 * @example
						 * // Send a remote file
						 * channel.send({
						 *   files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']
						 * })
						 *   .then(console.log)
						 *   .catch(console.error);
						 * @example
						 * // Send a local file
						 * channel.send({
						 *   files: [{
						 *     attachment: 'entire/path/to/file.jpg',
						 *     name: 'file.jpg'
						 *   }]
						 * })
						 *   .then(console.log)
						 *   .catch(console.error);
						 * @example
						 * // Send an embed with a local image inside
						 * channel.send('This is an embed', {
						 *   embed: {
						 *     thumbnail: {
						 *          url: 'attachment://file.jpg'
						 *       }
						 *    },
						 *    files: [{
						 *       attachment: 'entire/path/to/file.jpg',
						 *       name: 'file.jpg'
						 *    }]
						 * })
						 *   .then(console.log)
						 *   .catch(console.error);
						 */
						// eslint-disable-next-line complexity
						send(content, options) {
							if (
								!options &&
								typeof content === "object" &&
								!(content instanceof Array)
							) {
								options = content;
								content = "";
							} else if (!options) {
								options = {};
							}

							const {reply} = options;
							if (options instanceof Attachment)
								options = {files: [options.file]};
							if (options instanceof RichEmbed) {
								if (options.reply) options.reply = undefined;
								options = {embed: options};
							}
							options.reply = reply;

							if (options.embed) {
								if (options.embed.file) {
									if (options.files)
										options.files.push(options.embed.file);
									else options.files = [options.embed.file];
								}
								if (options.embed.files) {
									if (options.files)
										options.files = options.files.concat(
											options.embed.files
										);
									else options.files = options.embed.files;
								}
							}

							if (options.file) {
								if (options.files)
									options.files.push(options.file);
								else options.files = [options.file];
							}

							if (options.embed)
								options.embed = new RichEmbed(
									options.embed
								)._apiTransform();

							if (options.files) {
								for (let i = 0; i < options.files.length; i++) {
									let file = options.files[i];
									if (
										!file ||
										typeof file === "string" ||
										Buffer.isBuffer(file)
									)
										file = {attachment: file};
									if (!file.name) {
										if (
											typeof file.attachment === "string"
										) {
											file.name = path.basename(
												file.attachment
											);
										} else if (
											file.attachment &&
											file.attachment.path
										) {
											file.name = path.basename(
												file.attachment.path
											);
										} else if (file instanceof Attachment) {
											file = {
												attachment: file.file,
												name:
													path.basename(file.file) ||
													"file.jpg",
											};
										} else {
											file.name = "file.jpg";
										}
									} else if (file instanceof Attachment) {
										file = file.file;
									}
									options.files[i] = file;
								}

								return Promise.all(
									options.files.map((file) =>
										this.client.resolver
											.resolveFile(file.attachment)
											.then((resource) => {
												file.file = resource;
												return file;
											})
									)
								).then((files) =>
									this.client.rest.methods.sendMessage(
										this,
										content,
										options,
										files
									)
								);
							}

							return this.client.rest.methods.sendMessage(
								this,
								content,
								options
							);
						}

						/**
						 * Gets a single message from this channel, regardless of it being cached or not. Since the single message fetching
						 * endpoint is reserved for bot accounts, this abstracts the `fetchMessages` method to obtain the single message when
						 * using a user account.
						 * @param {Snowflake} messageID ID of the message to get
						 * @returns {Promise<Message>}
						 * @example
						 * // Get message
						 * channel.fetchMessage('99539446449315840')
						 *   .then(message => console.log(message.content))
						 *   .catch(console.error);
						 */
						fetchMessage(messageID) {
							if (!this.client.user.bot) {
								return this.fetchMessages({
									limit: 1,
									around: messageID,
								}).then((messages) => {
									const msg = messages.get(messageID);
									if (!msg)
										throw new Error("Message not found.");
									return msg;
								});
							}
							return this.client.rest.methods
								.getChannelMessage(this, messageID)
								.then((data) => {
									const msg =
										data instanceof Message
											? data
											: new Message(
													this,
													data,
													this.client
											  );
									this._cacheMessage(msg);
									return msg;
								});
						}

						/**
						 * The parameters to pass in when requesting previous messages from a channel. `around`, `before` and
						 * `after` are mutually exclusive. All the parameters are optional.
						 * @typedef {Object} ChannelLogsQueryOptions
						 * @property {number} [limit=50] Number of messages to acquire
						 * @property {Snowflake} [before] ID of a message to get the messages that were posted before it
						 * @property {Snowflake} [after] ID of a message to get the messages that were posted after it
						 * @property {Snowflake} [around] ID of a message to get the messages that were posted around it
						 */

						/**
						 * Gets the past messages sent in this channel. Resolves with a collection mapping message ID's to Message objects.
						 * <info>The returned Collection does not contain reaction users of the messages if they were not cached.
						 * Those need to be fetched separately in such a case.</info>
						 * @param {ChannelLogsQueryOptions} [options={}] Query parameters to pass in
						 * @returns {Promise<Collection<Snowflake, Message>>}
						 * @example
						 * // Get messages
						 * channel.fetchMessages({ limit: 10 })
						 *   .then(messages => console.log(`Received ${messages.size} messages`))
						 *   .catch(console.error);
						 * @example
						 * // Get messages and filter by user ID
						 * channel.fetchMessages()
						 *   .then(messages => console.log(`${messages.filter(m => m.author.id === '84484653687267328').size} messages`))
						 *   .catch(console.error);
						 */
						fetchMessages(options = {}) {
							return this.client.rest.methods
								.getChannelMessages(this, options)
								.then((data) => {
									const messages = new Collection();
									for (const message of data) {
										const msg = new Message(
											this,
											message,
											this.client
										);
										messages.set(message.id, msg);
										this._cacheMessage(msg);
									}
									return messages;
								});
						}

						/**
						 * Fetches the pinned messages of this channel and returns a collection of them.
						 * <info>The returned Collection does not contain any reaction data of the messages.
						 * Those need to be fetched separately.</info>
						 * @returns {Promise<Collection<Snowflake, Message>>}
						 * @example
						 * // Get pinned messages
						 * channel.fetchPinnedMessages()
						 *   .then(messages => console.log(`Received ${messages.size} messages`))
						 *   .catch(console.error);
						 */
						fetchPinnedMessages() {
							return this.client.rest.methods
								.getChannelPinnedMessages(this)
								.then((data) => {
									const messages = new Collection();
									for (const message of data) {
										const msg = new Message(
											this,
											message,
											this.client
										);
										messages.set(message.id, msg);
										this._cacheMessage(msg);
									}
									return messages;
								});
						}

						/**
						 * @typedef {Object} MessageSearchOptions
						 * @property {string} [content] Message content
						 * @property {Snowflake} [maxID] Maximum ID for the filter
						 * @property {Snowflake} [minID] Minimum ID for the filter
						 * @property {string} [has] One of `link`, `embed`, `file`, `video`, `image`, or `sound`,
						 * or add `-` to negate (e.g. `-file`)
						 * @property {ChannelResolvable} [channel] Channel to limit search to (only for guild search endpoint)
						 * @property {UserResolvable} [author] Author to limit search
						 * @property {string} [authorType] One of `user`, `bot`, `webhook`, or add `-` to negate (e.g. `-webhook`)
						 * @property {string} [sortBy='recent'] `recent` or `relevant`
						 * @property {string} [sortOrder='desc'] `asc` or `desc`
						 * @property {number} [contextSize=2] How many messages to get around the matched message (0 to 2)
						 * @property {number} [limit=25] Maximum number of results to get (1 to 25)
						 * @property {number} [offset=0] Offset the "pages" of results (since you can only see 25 at a time)
						 * @property {UserResolvable} [mentions] Mentioned user filter
						 * @property {boolean} [mentionsEveryone] If everyone is mentioned
						 * @property {string} [linkHostname] Filter links by hostname
						 * @property {string} [embedProvider] The name of an embed provider
						 * @property {string} [embedType] one of `image`, `video`, `url`, `rich`
						 * @property {string} [attachmentFilename] The name of an attachment
						 * @property {string} [attachmentExtension] The extension of an attachment
						 * @property {Date} [before] Date to find messages before
						 * @property {Date} [after] Date to find messages before
						 * @property {Date} [during] Date to find messages during (range of date to date + 24 hours)
						 * @property {boolean} [nsfw=false] Include results from NSFW channels
						 */

						/**
						 * @typedef {Object} MessageSearchResult
						 * @property {number} totalResults Total result count
						 * @property {Message[][]} messages Array of message results
						 * The message which has triggered the result will have the `hit` property set to `true`
						 */

						/**
						 * Performs a search within the channel.
						 * <warn>This is only available when using a user account.</warn>
						 * @param {MessageSearchOptions} [options={}] Options to pass to the search
						 * @returns {Promise<MessageSearchResult>}
						 * @example
						 * channel.search({
						 *   content: 'discord.js',
						 *   before: '2016-11-17'
						 * }).then(res => {
						 *   const hit = res.messages[0].find(m => m.hit).content;
						 *   console.log(`I found: **${hit}**, total results: ${res.totalResults}`);
						 * }).catch(console.error);
						 */
						search(options = {}) {
							return this.client.rest.methods.search(
								this,
								options
							);
						}

						/**
						 * Starts a typing indicator in the channel.
						 * @param {number} [count] The number of times startTyping should be considered to have been called
						 * @example
						 * // Start typing in a channel
						 * channel.startTyping();
						 */
						startTyping(count) {
							if (typeof count !== "undefined" && count < 1)
								throw new RangeError(
									"Count must be at least 1."
								);
							if (this.client.user._typing.has(this.id)) {
								const entry = this.client.user._typing.get(
									this.id
								);
								entry.count = count || entry.count + 1;
								return;
							}

							const entry = {
								count: count || 1,
								interval: this.client.setInterval(() => {
									this.client.rest.methods
										.sendTyping(this.id)
										.catch(() => {
											this.client.clearInterval(
												entry.interval
											);
											this.client.user._typing.delete(
												this.id
											);
										});
								}, 9000),
							};
							this.client.rest.methods
								.sendTyping(this.id)
								.catch(() => {
									this.client.clearInterval(entry.interval);
									this.client.user._typing.delete(this.id);
								});
							this.client.user._typing.set(this.id, entry);
						}

						/**
						 * Stops the typing indicator in the channel.
						 * The indicator will only stop if this is called as many times as startTyping().
						 * <info>It can take a few seconds for the client user to stop typing.</info>
						 * @param {boolean} [force=false] Whether or not to reset the call count and force the indicator to stop
						 * @example
						 * // Reduce the typing count by one and stop typing if it reached 0
						 * channel.stopTyping();
						 * @example
						 * // Force typing to fully stop in a channel
						 * channel.stopTyping(true);
						 */
						stopTyping(force = false) {
							if (this.client.user._typing.has(this.id)) {
								const entry = this.client.user._typing.get(
									this.id
								);
								entry.count--;
								if (entry.count <= 0 || force) {
									this.client.clearInterval(entry.interval);
									this.client.user._typing.delete(this.id);
								}
							}
						}

						/**
						 * Whether or not the typing indicator is being shown in the channel
						 * @type {boolean}
						 * @readonly
						 */
						get typing() {
							return this.client.user._typing.has(this.id);
						}

						/**
						 * Number of times `startTyping` has been called
						 * @type {number}
						 * @readonly
						 */
						get typingCount() {
							if (this.client.user._typing.has(this.id))
								return this.client.user._typing.get(this.id)
									.count;
							return 0;
						}

						/**
						 * Creates a Message Collector
						 * @param {CollectorFilter} filter The filter to create the collector with
						 * @param {MessageCollectorOptions} [options={}] The options to pass to the collector
						 * @returns {MessageCollector}
						 * @deprecated
						 */
						createCollector(filter, options) {
							return this.createMessageCollector(filter, options);
						}

						/**
						 * Creates a Message Collector.
						 * @param {CollectorFilter} filter The filter to create the collector with
						 * @param {MessageCollectorOptions} [options={}] The options to pass to the collector
						 * @returns {MessageCollector}
						 * @example
						 * // Create a message collector
						 * const filter = m => m.content.includes('discord');
						 * const collector = channel.createMessageCollector(filter, { time: 15000 });
						 * collector.on('collect', m => console.log(`Collected ${m.content}`));
						 * collector.on('end', collected => console.log(`Collected ${collected.size} items`));
						 */
						createMessageCollector(filter, options = {}) {
							return new MessageCollector(this, filter, options);
						}

						/**
						 * An object containing the same properties as CollectorOptions, but a few more:
						 * @typedef {MessageCollectorOptions} AwaitMessagesOptions
						 * @property {string[]} [errors] Stop/end reasons that cause the promise to reject
						 */

						/**
						 * Similar to createCollector but in promise form. Resolves with a collection of messages that pass the specified
						 * filter.
						 * @param {CollectorFilter} filter The filter function to use
						 * @param {AwaitMessagesOptions} [options={}] Optional options to pass to the internal collector
						 * @returns {Promise<Collection<Snowflake, Message>>}
						 * @example
						 * // Await !vote messages
						 * const filter = m => m.content.startsWith('!vote');
						 * // Errors: ['time'] treats ending because of the time limit as an error
						 * channel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })
						 *   .then(collected => console.log(collected.size))
						 *   .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));
						 */
						awaitMessages(filter, options = {}) {
							return new Promise((resolve, reject) => {
								const collector = this.createCollector(
									filter,
									options
								);
								collector.once("end", (collection, reason) => {
									if (
										options.errors &&
										options.errors.includes(reason)
									) {
										reject(collection);
									} else {
										resolve(collection);
									}
								});
							});
						}

						/**
						 * Bulk delete given messages that are newer than two weeks.
						 * <warn>This is only available when using a bot account.</warn>
						 * @param {Collection<Snowflake, Message>|Message[]|Snowflake[]|number} messages
						 * Messages or number of messages to delete
						 * @param {boolean} [filterOld=false] Filter messages to remove those which are older than two weeks automatically
						 * @returns {Promise<Collection<Snowflake, Message>>} Deleted messages
						 * @example
						 * // Bulk delete messages
						 * channel.bulkDelete(5)
						 *   .then(messages => console.log(`Bulk deleted ${messages.size} messages`))
						 *   .catch(console.error);
						 */
						bulkDelete(messages, filterOld = false) {
							if (
								messages instanceof Array ||
								messages instanceof Collection
							) {
								let messageIDs =
									messages instanceof Collection
										? messages.keyArray()
										: messages.map((m) => m.id || m);
								if (filterOld) {
									messageIDs = messageIDs.filter(
										(id) =>
											Date.now() -
												Snowflake.deconstruct(
													id
												).date.getTime() <
											1209600000
									);
								}
								if (messageIDs.length === 0)
									return Promise.resolve(new Collection());
								if (messageIDs.length === 1) {
									return this.fetchMessage(messageIDs[0])
										.then((m) => m.delete())
										.then(
											(m) => new Collection([[m.id, m]])
										);
								}
								return this.client.rest.methods.bulkDeleteMessages(
									this,
									messageIDs
								);
							}
							if (!isNaN(messages))
								return this.fetchMessages({
									limit: messages,
								}).then((msgs) =>
									this.bulkDelete(msgs, filterOld)
								);
							throw new TypeError(
								"The messages must be an Array, Collection, or number."
							);
						}

						/**
						 * Marks all messages in this channel as read.
						 * <warn>This is only available when using a user account.</warn>
						 * @returns {Promise<TextChannel|GroupDMChannel|DMChannel>}
						 */
						acknowledge() {
							if (!this.lastMessageID)
								return Promise.resolve(this);
							return this.client.rest.methods.ackTextChannel(
								this
							);
						}

						_cacheMessage(message) {
							const maxSize = this.client.options
								.messageCacheMaxSize;
							if (maxSize === 0) return null;
							if (this.messages.size >= maxSize && maxSize > 0)
								this.messages.delete(this.messages.firstKey());
							this.messages.set(message.id, message);
							return message;
						}
					}

					/** @lends TextBasedChannel.prototype */
					const Deprecated = {
						/**
						 * Send a message to this channel.
						 * @param {StringResolvable} [content] Text for the message
						 * @param {MessageOptions} [options={}] Options for the message
						 * @returns {Promise<Message|Message[]>}
						 * @deprecated
						 * @example
						 * // Send a message
						 * channel.sendMessage('hello!')
						 *  .then(message => console.log(`Sent message: ${message.content}`))
						 *  .catch(console.error);
						 */
						sendMessage(content, options) {
							return this.send(content, options);
						},

						/**
						 * Send an embed to this channel.
						 * @param {RichEmbed|Object} embed Embed for the message
						 * @param {string} [content] Text for the message
						 * @param {MessageOptions} [options] Options for the message
						 * @returns {Promise<Message>}
						 * @deprecated
						 */
						sendEmbed(embed, content, options) {
							if (
								!options &&
								typeof content === "object" &&
								!(content instanceof Array)
							) {
								options = content;
								content = "";
							} else if (!options) {
								options = {};
							}
							return this.send(
								content,
								Object.assign(options, {embed})
							);
						},

						/**
						 * Send files to this channel.
						 * @param {FileOptions[]|string[]} files Files to send with the message
						 * @param {StringResolvable} [content] Text for the message
						 * @param {MessageOptions} [options] Options for the message
						 * @returns {Promise<Message>}
						 * @deprecated
						 */
						sendFiles(files, content, options = {}) {
							return this.send(
								content,
								Object.assign(options, {files})
							);
						},

						/**
						 * Send a file to this channel.
						 * @param {BufferResolvable} attachment File to send
						 * @param {string} [name='file.jpg'] Name and extension of the file
						 * @param {StringResolvable} [content] Text for the message
						 * @param {MessageOptions} [options] Options for the message
						 * @returns {Promise<Message>}
						 * @deprecated
						 */
						sendFile(attachment, name, content, options = {}) {
							return this.send({
								files: [{attachment, name}],
								content,
								options,
							});
						},

						/**
						 * Send a code block to this channel.
						 * @param {string} lang Language for the code block
						 * @param {StringResolvable} content Content of the code block
						 * @param {MessageOptions} [options] Options for the message
						 * @returns {Promise<Message|Message[]>}
						 * @deprecated
						 */
						sendCode(lang, content, options = {}) {
							return this.send(
								content,
								Object.assign(options, {code: lang})
							);
						},
					};

					for (const key of Object.keys(Deprecated)) {
						TextBasedChannel.prototype[key] = util.deprecate(
							Deprecated[key],
							`TextChannel#${key}: use TextChannel#send instead`
						);
					}

					exports.applyToClass = (
						structure,
						full = false,
						ignore = []
					) => {
						const props = [
							"send",
							"sendMessage",
							"sendEmbed",
							"sendFile",
							"sendFiles",
							"sendCode",
						];
						if (full) {
							props.push(
								"_cacheMessage",
								"acknowledge",
								"fetchMessages",
								"fetchMessage",
								"search",
								"bulkDelete",
								"startTyping",
								"stopTyping",
								"typing",
								"typingCount",
								"fetchPinnedMessages",
								"createCollector",
								"createMessageCollector",
								"awaitMessages"
							);
						}
						for (const prop of props) {
							if (ignore.includes(prop)) continue;
							Object.defineProperty(
								structure.prototype,
								prop,
								Object.getOwnPropertyDescriptor(
									TextBasedChannel.prototype,
									prop
								)
							);
						}
					};

					TextBasedChannel.prototype.acknowledge = util.deprecate(
						TextBasedChannel.prototype.acknowledge,
						"TextBasedChannel#acknowledge: userbot methods will be removed"
					);

					TextBasedChannel.prototype.search = util.deprecate(
						TextBasedChannel.prototype.search,
						"TextBasedChannel#search: userbot methods will be removed"
					);

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../../../buffer/index.js */ "./node_modules/buffer/index.js"
					).Buffer
				));

				/***/
			},

		/***/ "./node_modules/discord.js/src/structures/shared/resolvePermissions.js":
			/*!*****************************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/shared/resolvePermissions.js ***!
  \*****************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Permissions = __webpack_require__(
					/*! ../../util/Permissions */ "./node_modules/discord.js/src/util/Permissions.js"
				);
				const Collection = __webpack_require__(
					/*! ../../util/Collection */ "./node_modules/discord.js/src/util/Collection.js"
				);

				module.exports = function resolvePermissions(
					overwrites,
					guild
				) {
					if (
						overwrites instanceof Collection ||
						overwrites instanceof Array
					) {
						overwrites = overwrites.map((overwrite) => {
							const role = this.client.resolver.resolveRole(
								guild,
								overwrite.id
							);
							if (role) {
								overwrite.id = role.id;
								overwrite.type = "role";
							} else {
								overwrite.id = this.client.resolver.resolveUserID(
									overwrite.id
								);
								overwrite.type = "member";
							}

							return {
								allow: Permissions.resolve(
									overwrite.allow || overwrite.allowed || 0
								),
								deny: Permissions.resolve(
									overwrite.deny || overwrite.denied || 0
								),
								type: overwrite.type,
								id: overwrite.id,
							};
						});
					}

					return overwrites;
				};

				/***/
			},

		/***/ "./node_modules/discord.js/src/util/Collection.js":
			/*!********************************************************!*\
  !*** ./node_modules/discord.js/src/util/Collection.js ***!
  \********************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(process) {
					const util = __webpack_require__(
						/*! util */ "./node_modules/util/util.js"
					);

					/**
					 * A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has
					 * an ID, for significantly improved performance and ease-of-use.
					 * @extends {Map}
					 */
					class Collection extends Map {
						constructor(iterable) {
							super(iterable);

							/**
							 * Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called
							 * @name Collection#_array
							 * @type {?Array}
							 * @private
							 */
							Object.defineProperty(this, "_array", {
								value: null,
								writable: true,
								configurable: true,
							});

							/**
							 * Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called
							 * @name Collection#_keyArray
							 * @type {?Array}
							 * @private
							 */
							Object.defineProperty(this, "_keyArray", {
								value: null,
								writable: true,
								configurable: true,
							});
						}

						set(key, val) {
							this._array = null;
							this._keyArray = null;
							return super.set(key, val);
						}

						delete(key) {
							this._array = null;
							this._keyArray = null;
							return super.delete(key);
						}

						/**
						 * Creates an ordered array of the values of this collection, and caches it internally. The array will only be
						 * reconstructed if an item is added to or removed from the collection, or if you change the length of the array
						 * itself. If you don't want this caching behavior, use `[...collection.values()]` or
						 * `Array.from(collection.values())` instead.
						 * @returns {Array}
						 */
						array() {
							if (
								!this._array ||
								this._array.length !== this.size
							)
								this._array = [...this.values()];
							return this._array;
						}

						/**
						 * Creates an ordered array of the keys of this collection, and caches it internally. The array will only be
						 * reconstructed if an item is added to or removed from the collection, or if you change the length of the array
						 * itself. If you don't want this caching behavior, use `[...collection.keys()]` or
						 * `Array.from(collection.keys())` instead.
						 * @returns {Array}
						 */
						keyArray() {
							if (
								!this._keyArray ||
								this._keyArray.length !== this.size
							)
								this._keyArray = [...this.keys()];
							return this._keyArray;
						}

						/**
						 * Obtains the first value(s) in this collection.
						 * @param {number} [count] Number of values to obtain from the beginning
						 * @returns {*|Array<*>} The single value if `count` is undefined, or an array of values of `count` length
						 */
						first(count) {
							if (count === undefined)
								return this.values().next().value;
							if (typeof count !== "number")
								throw new TypeError(
									"The count must be a number."
								);
							if (!Number.isInteger(count) || count < 1)
								throw new RangeError(
									"The count must be an integer greater than 0."
								);
							count = Math.min(this.size, count);
							const arr = new Array(count);
							const iter = this.values();
							for (let i = 0; i < count; i++)
								arr[i] = iter.next().value;
							return arr;
						}

						/**
						 * Obtains the first key(s) in this collection.
						 * @param {number} [count] Number of keys to obtain from the beginning
						 * @returns {*|Array<*>} The single key if `count` is undefined, or an array of keys of `count` length
						 */
						firstKey(count) {
							if (count === undefined)
								return this.keys().next().value;
							if (typeof count !== "number")
								throw new TypeError(
									"The count must be a number."
								);
							if (!Number.isInteger(count) || count < 1)
								throw new RangeError(
									"The count must be an integer greater than 0."
								);
							count = Math.min(this.size, count);
							const arr = new Array(count);
							const iter = this.keys();
							for (let i = 0; i < count; i++)
								arr[i] = iter.next().value;
							return arr;
						}

						/**
						 * Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching
						 * mechanism applies here as well.
						 * @param {number} [count] Number of values to obtain from the end
						 * @returns {*|Array<*>} The single value if `count` is undefined, or an array of values of `count` length
						 */
						last(count) {
							const arr = this.array();
							if (count === undefined) return arr[arr.length - 1];
							if (typeof count !== "number")
								throw new TypeError(
									"The count must be a number."
								);
							if (!Number.isInteger(count) || count < 1)
								throw new RangeError(
									"The count must be an integer greater than 0."
								);
							return arr.slice(-count);
						}

						/**
						 * Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching
						 * mechanism applies here as well.
						 * @param {number} [count] Number of keys to obtain from the end
						 * @returns {*|Array<*>} The single key if `count` is undefined, or an array of keys of `count` length
						 */
						lastKey(count) {
							const arr = this.keyArray();
							if (count === undefined) return arr[arr.length - 1];
							if (typeof count !== "number")
								throw new TypeError(
									"The count must be a number."
								);
							if (!Number.isInteger(count) || count < 1)
								throw new RangeError(
									"The count must be an integer greater than 0."
								);
							return arr.slice(-count);
						}

						/**
						 * Obtains random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching
						 * mechanism applies here as well.
						 * @param {number} [count] Number of values to obtain randomly
						 * @returns {*|Array<*>} The single value if `count` is undefined, or an array of values of `count` length
						 */
						random(count) {
							let arr = this.array();
							if (count === undefined)
								return arr[
									Math.floor(Math.random() * arr.length)
								];
							if (typeof count !== "number")
								throw new TypeError(
									"The count must be a number."
								);
							if (!Number.isInteger(count) || count < 1)
								throw new RangeError(
									"The count must be an integer greater than 0."
								);
							if (arr.length === 0) return [];
							const rand = new Array(count);
							arr = arr.slice();
							for (let i = 0; i < count; i++)
								rand[i] = arr.splice(
									Math.floor(Math.random() * arr.length),
									1
								)[0];
							return rand;
						}

						/**
						 * Obtains random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching
						 * mechanism applies here as well.
						 * @param {number} [count] Number of keys to obtain randomly
						 * @returns {*|Array<*>} The single key if `count` is undefined, or an array of keys of `count` length
						 */
						randomKey(count) {
							let arr = this.keyArray();
							if (count === undefined)
								return arr[
									Math.floor(Math.random() * arr.length)
								];
							if (typeof count !== "number")
								throw new TypeError(
									"The count must be a number."
								);
							if (!Number.isInteger(count) || count < 1)
								throw new RangeError(
									"The count must be an integer greater than 0."
								);
							if (arr.length === 0) return [];
							const rand = new Array(count);
							arr = arr.slice();
							for (let i = 0; i < count; i++)
								rand[i] = arr.splice(
									Math.floor(Math.random() * arr.length),
									1
								)[0];
							return rand;
						}

						/**
						 * Searches for all items where their specified property's value is identical to the given value
						 * (`item[prop] === value`).
						 * @param {string} prop The property to test against
						 * @param {*} value The expected value
						 * @returns {Array}
						 * @deprecated
						 * @example
						 * collection.findAll('username', 'Bob');
						 */
						findAll(prop, value) {
							if (typeof prop !== "string")
								throw new TypeError("Key must be a string.");
							if (typeof value === "undefined")
								throw new Error("Value must be specified.");
							const results = [];
							for (const item of this.values()) {
								if (item[prop] === value) results.push(item);
							}
							return results;
						}

						/**
						 * Searches for a single item where its specified property's value is identical to the given value
						 * (`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to
						 * [Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).
						 * <warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you
						 * should use the `get` method. See
						 * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>
						 * @param {string|Function} propOrFn The property to test against, or the function to test with
						 * @param {*} [value] The expected value - only applicable and required if using a property for the first argument
						 * @returns {*}
						 * @example
						 * collection.find('username', 'Bob');
						 * @example
						 * collection.find(val => val.username === 'Bob');
						 */
						find(propOrFn, value) {
							if (typeof propOrFn === "string") {
								if (typeof value === "undefined")
									throw new Error("Value must be specified.");
								for (const item of this.values()) {
									if (item[propOrFn] === value) return item;
								}
								return null;
							} else if (typeof propOrFn === "function") {
								for (const [key, val] of this) {
									if (propOrFn(val, key, this)) return val;
								}
								return null;
							} else {
								throw new Error(
									"First argument must be a property string or a function."
								);
							}
						}

						/* eslint-disable max-len */
						/**
						 * Searches for the key of a single item where its specified property's value is identical to the given value
						 * (`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to
						 * [Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).
						 * @param {string|Function} propOrFn The property to test against, or the function to test with
						 * @param {*} [value] The expected value - only applicable and required if using a property for the first argument
						 * @returns {*}
						 * @example
						 * collection.findKey('username', 'Bob');
						 * @example
						 * collection.findKey(val => val.username === 'Bob');
						 */
						/* eslint-enable max-len */
						findKey(propOrFn, value) {
							if (typeof propOrFn === "string") {
								if (typeof value === "undefined")
									throw new Error("Value must be specified.");
								for (const [key, val] of this) {
									if (val[propOrFn] === value) return key;
								}
								return null;
							} else if (typeof propOrFn === "function") {
								for (const [key, val] of this) {
									if (propOrFn(val, key, this)) return key;
								}
								return null;
							} else {
								throw new Error(
									"First argument must be a property string or a function."
								);
							}
						}

						/**
						 * Searches for the existence of a single item where its specified property's value is identical to the given value
						 * (`item[prop] === value`).
						 * <warn>Do not use this to check for an item by its ID. Instead, use `collection.has(id)`. See
						 * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) for details.</warn>
						 * @param {string} prop The property to test against
						 * @param {*} value The expected value
						 * @returns {boolean}
						 * @deprecated
						 * @example
						 * if (collection.exists('username', 'Bob')) {
						 *  console.log('user here!');
						 * }
						 */
						exists(prop, value) {
							return Boolean(this.find(prop, value));
						}

						/**
						 * Removes entries that satisfy the provided filter function.
						 * @param {Function} fn Function used to test (should return a boolean)
						 * @param {Object} [thisArg] Value to use as `this` when executing function
						 * @returns {number} The number of removed entries
						 */
						sweep(fn, thisArg) {
							if (thisArg) fn = fn.bind(thisArg);
							const previousSize = this.size;
							for (const [key, val] of this) {
								if (fn(val, key, this)) this.delete(key);
							}
							return previousSize - this.size;
						}

						/**
						 * Identical to
						 * [Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
						 * but returns a Collection instead of an Array.
						 * @param {Function} fn Function used to test (should return a boolean)
						 * @param {Object} [thisArg] Value to use as `this` when executing function
						 * @returns {Collection}
						 */
						filter(fn, thisArg) {
							if (thisArg) fn = fn.bind(thisArg);
							const results = new Collection();
							for (const [key, val] of this) {
								if (fn(val, key, this)) results.set(key, val);
							}
							return results;
						}

						/**
						 * Identical to
						 * [Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).
						 * @param {Function} fn Function used to test (should return a boolean)
						 * @param {Object} [thisArg] Value to use as `this` when executing function
						 * @returns {Array}
						 * @deprecated
						 */
						filterArray(fn, thisArg) {
							if (thisArg) fn = fn.bind(thisArg);
							const results = [];
							for (const [key, val] of this) {
								if (fn(val, key, this)) results.push(val);
							}
							return results;
						}

						/**
						 * Partitions the collection into two collections where the first collection
						 * contains the items that passed and the second contains the items that failed.
						 * @param {Function} fn Function used to test (should return a boolean)
						 * @param {*} [thisArg] Value to use as `this` when executing function
						 * @returns {Collection[]}
						 * @example const [big, small] = collection.partition(guild => guild.memberCount > 250);
						 */
						partition(fn, thisArg) {
							if (typeof thisArg !== "undefined")
								fn = fn.bind(thisArg);
							const results = [
								new Collection(),
								new Collection(),
							];
							for (const [key, val] of this) {
								if (fn(val, key, this)) {
									results[0].set(key, val);
								} else {
									results[1].set(key, val);
								}
							}
							return results;
						}

						/**
						 * Identical to
						 * [Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).
						 * @param {Function} fn Function that produces an element of the new array, taking three arguments
						 * @param {*} [thisArg] Value to use as `this` when executing function
						 * @returns {Array}
						 */
						map(fn, thisArg) {
							if (thisArg) fn = fn.bind(thisArg);
							const arr = new Array(this.size);
							let i = 0;
							for (const [key, val] of this)
								arr[i++] = fn(val, key, this);
							return arr;
						}

						/**
						 * Identical to
						 * [Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).
						 * @param {Function} fn Function used to test (should return a boolean)
						 * @param {Object} [thisArg] Value to use as `this` when executing function
						 * @returns {boolean}
						 */
						some(fn, thisArg) {
							if (thisArg) fn = fn.bind(thisArg);
							for (const [key, val] of this) {
								if (fn(val, key, this)) return true;
							}
							return false;
						}

						/**
						 * Identical to
						 * [Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).
						 * @param {Function} fn Function used to test (should return a boolean)
						 * @param {Object} [thisArg] Value to use as `this` when executing function
						 * @returns {boolean}
						 */
						every(fn, thisArg) {
							if (thisArg) fn = fn.bind(thisArg);
							for (const [key, val] of this) {
								if (!fn(val, key, this)) return false;
							}
							return true;
						}

						/**
						 * Identical to
						 * [Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).
						 * @param {Function} fn Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,
						 * and `collection`
						 * @param {*} [initialValue] Starting value for the accumulator
						 * @returns {*}
						 */
						reduce(fn, initialValue) {
							let accumulator;
							if (typeof initialValue !== "undefined") {
								accumulator = initialValue;
								for (const [key, val] of this)
									accumulator = fn(
										accumulator,
										val,
										key,
										this
									);
							} else {
								let first = true;
								for (const [key, val] of this) {
									if (first) {
										accumulator = val;
										first = false;
										continue;
									}
									accumulator = fn(
										accumulator,
										val,
										key,
										this
									);
								}
							}
							return accumulator;
						}

						/**
						 * Identical to
						 * [Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),
						 * but returns the collection instead of undefined.
						 * @param {Function} fn Function to execute for each element
						 * @param {*} [thisArg] Value to use as `this` when executing function
						 * @returns {Collection}
						 * @example
						 * collection
						 *  .tap(user => console.log(user.username))
						 *  .filter(user => user.bot)
						 *  .tap(user => console.log(user.username));
						 */
						tap(fn, thisArg) {
							this.forEach(fn, thisArg);
							return this;
						}

						/**
						 * Creates an identical shallow copy of this collection.
						 * @returns {Collection}
						 * @example const newColl = someColl.clone();
						 */
						clone() {
							return new this.constructor(this);
						}

						/**
						 * Combines this collection with others into a new collection. None of the source collections are modified.
						 * @param {...Collection} collections Collections to merge
						 * @returns {Collection}
						 * @example const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);
						 */
						concat(...collections) {
							const newColl = this.clone();
							for (const coll of collections) {
								for (const [key, val] of coll)
									newColl.set(key, val);
							}
							return newColl;
						}

						/**
						 * Calls the `delete()` method on all items that have it.
						 * @returns {Promise[]}
						 */
						deleteAll() {
							const returns = [];
							for (const item of this.values()) {
								if (item.delete) returns.push(item.delete());
							}
							return returns;
						}

						/**
						 * Checks if this collection shares identical key-value pairings with another.
						 * This is different to checking for equality using equal-signs, because
						 * the collections may be different objects, but contain the same data.
						 * @param {Collection} collection Collection to compare with
						 * @returns {boolean} Whether the collections have identical contents
						 */
						equals(collection) {
							if (!collection) return false;
							if (this === collection) return true;
							if (this.size !== collection.size) return false;
							return !this.find((value, key) => {
								const testVal = collection.get(key);
								return (
									testVal !== value ||
									(testVal === undefined &&
										!collection.has(key))
								);
							});
						}

						/**
						 * The sort() method sorts the elements of a collection in place and returns the collection.
						 * The sort is not necessarily stable. The default sort order is according to string Unicode code points.
						 * @param {Function} [compareFunction] Specifies a function that defines the sort order.
						 * if omitted, the collection is sorted according to each character's Unicode code point value,
						 * according to the string conversion of each element.
						 * @returns {Collection}
						 */
						sort(
							compareFunction = (x, y) =>
								+(x > y) || +(x === y) - 1
						) {
							return new Collection(
								[...this.entries()].sort((a, b) =>
									compareFunction(a[1], b[1], a[0], b[0])
								)
							);
						}
					}

					Collection.prototype.findAll = util.deprecate(
						Collection.prototype.findAll,
						"Collection#findAll: use Collection#filter instead"
					);

					Collection.prototype.filterArray = util.deprecate(
						Collection.prototype.filterArray,
						"Collection#filterArray: use Collection#filter instead"
					);

					Collection.prototype.exists = util.deprecate(
						Collection.prototype.exists,
						"Collection#exists: use Collection#some instead"
					);

					Collection.prototype.find = function find(propOrFn, value) {
						if (typeof propOrFn === "string") {
							process.emitWarning(
								"Collection#find: pass a function instead",
								"DeprecationWarning"
							);
							if (typeof value === "undefined")
								throw new Error("Value must be specified.");
							for (const item of this.values()) {
								if (item[propOrFn] === value) return item;
							}
							return null;
						} else if (typeof propOrFn === "function") {
							for (const [key, val] of this) {
								if (propOrFn(val, key, this)) return val;
							}
							return null;
						} else {
							throw new Error(
								"First argument must be a property string or a function."
							);
						}
					};

					Collection.prototype.findKey = function findKey(
						propOrFn,
						value
					) {
						if (typeof propOrFn === "string") {
							process.emitWarning(
								"Collection#findKey: pass a function instead",
								"DeprecationWarning"
							);
							if (typeof value === "undefined")
								throw new Error("Value must be specified.");
							for (const [key, val] of this) {
								if (val[propOrFn] === value) return key;
							}
							return null;
						} else if (typeof propOrFn === "function") {
							for (const [key, val] of this) {
								if (propOrFn(val, key, this)) return key;
							}
							return null;
						} else {
							throw new Error(
								"First argument must be a property string or a function."
							);
						}
					};

					module.exports = Collection;

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../../process/browser.js */ "./node_modules/process/browser.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/discord.js/src/util/Constants.js":
			/*!*******************************************************!*\
  !*** ./node_modules/discord.js/src/util/Constants.js ***!
  \*******************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(process) {
					exports.Package = __webpack_require__(
						/*! ../../package.json */ "./node_modules/discord.js/package.json"
					);

					/**
					 * Options for a client.
					 * @typedef {Object} ClientOptions
					 * @property {string} [apiRequestMethod='sequential'] One of `sequential` or `burst`. The sequential handler executes
					 * all requests in the order they are triggered, whereas the burst handler runs multiple in parallel, and doesn't
					 * provide the guarantee of any particular order. Burst mode is more likely to hit a 429 ratelimit error by its nature,
					 * and is therefore slightly riskier to use.
					 * @property {number} [shardId=0] ID of the shard to run
					 * @property {number} [shardCount=0] Total number of shards
					 * @property {number} [messageCacheMaxSize=200] Maximum number of messages to cache per channel
					 * (-1 or Infinity for unlimited - don't do this without message sweeping, otherwise memory usage will climb
					 * indefinitely)
					 * @property {number} [messageCacheLifetime=0] How long a message should stay in the cache until it is considered
					 * sweepable (in seconds, 0 for forever)
					 * @property {number} [messageSweepInterval=0] How frequently to remove messages from the cache that are older than
					 * the message cache lifetime (in seconds, 0 for never)
					 * @property {boolean} [fetchAllMembers=false] Whether to cache all guild members and users upon startup, as well as
					 * upon joining a guild (should be avoided whenever possible)
					 * @property {boolean} [disableEveryone=false] Default value for {@link MessageOptions#disableEveryone}
					 * @property {boolean} [sync=false] Whether to periodically sync guilds (for user accounts)
					 * @property {number} [restWsBridgeTimeout=5000] Maximum time permitted between REST responses and their
					 * corresponding websocket events
					 * @property {number} [restTimeOffset=500] Extra time in millseconds to wait before continuing to make REST
					 * requests (higher values will reduce rate-limiting errors on bad connections)
					 * @property {WSEventType[]} [disabledEvents] An array of disabled websocket events. Events in this array will not be
					 * processed, potentially resulting in performance improvements for larger bots. Only disable events you are
					 * 100% certain you don't need, as many are important, but not obviously so. The safest one to disable with the
					 * most impact is typically `TYPING_START`.
					 * @property {WebsocketOptions} [ws] Options for the WebSocket
					 * @property {HTTPOptions} [http] HTTP options
					 */
					exports.DefaultOptions = {
						apiRequestMethod: "sequential",
						shardId: 0,
						shardCount: 0,
						messageCacheMaxSize: 200,
						messageCacheLifetime: 0,
						messageSweepInterval: 0,
						fetchAllMembers: false,
						disableEveryone: false,
						sync: false,
						restWsBridgeTimeout: 5000,
						disabledEvents: [],
						restTimeOffset: 500,

						/**
						 * WebSocket options (these are left as snake_case to match the API)
						 * @typedef {Object} WebsocketOptions
						 * @property {number} [large_threshold=250] Number of members in a guild to be considered large
						 * @property {boolean} [compress=true] Whether to compress data sent on the connection
						 * (defaults to `false` for browsers)
						 */
						ws: {
							large_threshold: 250,
							compress:
								__webpack_require__(
									/*! os */ "./node_modules/os-browserify/browser.js"
								).platform() !== "browser",
							properties: {
								$os: process ? process.platform : "discord.js",
								$browser: "discord.js",
								$device: "discord.js",
								$referrer: "",
								$referring_domain: "",
							},
							version: 6,
						},

						/**
						 * HTTP options
						 * @typedef {Object} HTTPOptions
						 * @property {number} [version=7] API version to use
						 * @property {string} [api='https://discordapp.com/api'] Base url of the API
						 * @property {string} [cdn='https://cdn.discordapp.com'] Base url of the CDN
						 * @property {string} [invite='https://discord.gg'] Base url of invites
						 */
						http: {
							version: 7,
							host: "https://discordapp.com",
							cdn: "https://cdn.discordapp.com",
						},
					};

					exports.WSCodes = {
						1000: "Connection gracefully closed",
						4004: "Tried to identify with an invalid token",
						4010: "Sharding data provided was invalid",
						4011: "Shard would be on too many guilds if connected",
					};

					exports.Errors = {
						NO_TOKEN:
							"Request to use token, but token was unavailable to the client.",
						NO_BOT_ACCOUNT:
							"Only bot accounts are able to make use of this feature.",
						NO_USER_ACCOUNT:
							"Only user accounts are able to make use of this feature.",
						BAD_WS_MESSAGE:
							"A bad message was received from the websocket; either bad compression, or not JSON.",
						TOOK_TOO_LONG: "Something took too long to do.",
						NOT_A_PERMISSION:
							"Invalid permission string or number.",
						INVALID_RATE_LIMIT_METHOD:
							"Unknown rate limiting method.",
						BAD_LOGIN: "Incorrect login details were provided.",
						INVALID_SHARD: "Invalid shard settings were provided.",
						SHARDING_REQUIRED:
							"This session would have handled too many guilds - Sharding is required.",
						INVALID_TOKEN: "An invalid token was provided.",
					};

					const Endpoints = (exports.Endpoints = {
						User: (userID) => {
							if (userID.id) userID = userID.id;
							const base = `/users/${userID}`;
							return {
								toString: () => base,
								channels: `${base}/channels`,
								profile: `${base}/profile`,
								relationships: `${base}/relationships`,
								settings: `${base}/settings`,
								Relationship: (uID) =>
									`${base}/relationships/${uID}`,
								Guild: (guildID) => ({
									toString: () => `${base}/guilds/${guildID}`,
									settings: `${base}/guilds/${guildID}/settings`,
								}),
								Note: (id) => `${base}/notes/${id}`,
								Mentions: (limit, roles, everyone, guildID) =>
									`${base}/mentions?limit=${limit}&roles=${roles}&everyone=${everyone}${
										guildID ? `&guild_id=${guildID}` : ""
									}`,
								Avatar: (root, hash) => {
									if (userID === "1") return hash;
									return Endpoints.CDN(root).Avatar(
										userID,
										hash
									);
								},
							};
						},
						guilds: "/guilds",
						Guild: (guildID) => {
							if (guildID.id) guildID = guildID.id;
							const base = `/guilds/${guildID}`;
							return {
								toString: () => base,
								prune: `${base}/prune`,
								embed: `${base}/embed`,
								bans: `${base}/bans`,
								integrations: `${base}/integrations`,
								members: `${base}/members`,
								channels: `${base}/channels`,
								invites: `${base}/invites`,
								roles: `${base}/roles`,
								emojis: `${base}/emojis`,
								search: `${base}/messages/search`,
								voiceRegions: `${base}/regions`,
								webhooks: `${base}/webhooks`,
								ack: `${base}/ack`,
								settings: `${base}/settings`,
								auditLogs: `${base}/audit-logs`,
								Emoji: (emojiID) => `${base}/emojis/${emojiID}`,
								Icon: (root, hash) =>
									Endpoints.CDN(root).Icon(guildID, hash),
								Splash: (root, hash) =>
									Endpoints.CDN(root).Splash(guildID, hash),
								Role: (roleID) => `${base}/roles/${roleID}`,
								Member: (memberID) => {
									if (memberID.id) memberID = memberID.id;
									const mbase = `${base}/members/${memberID}`;
									return {
										toString: () => mbase,
										Role: (roleID) =>
											`${mbase}/roles/${roleID}`,
										nickname: `${base}/members/@me/nick`,
									};
								},
							};
						},
						channels: "/channels",
						Channel: (channelID) => {
							if (channelID.id) channelID = channelID.id;
							const base = `/channels/${channelID}`;
							return {
								toString: () => base,
								messages: {
									toString: () => `${base}/messages`,
									bulkDelete: `${base}/messages/bulk-delete`,
								},
								invites: `${base}/invites`,
								typing: `${base}/typing`,
								permissions: `${base}/permissions`,
								webhooks: `${base}/webhooks`,
								search: `${base}/messages/search`,
								pins: `${base}/pins`,
								Icon: (root, hash) =>
									Endpoints.CDN(root).GDMIcon(
										channelID,
										hash
									),
								Pin: (messageID) => `${base}/pins/${messageID}`,
								Recipient: (recipientID) =>
									`${base}/recipients/${recipientID}`,
								Message: (messageID) => {
									if (messageID.id) messageID = messageID.id;
									const mbase = `${base}/messages/${messageID}`;
									return {
										toString: () => mbase,
										reactions: `${mbase}/reactions`,
										ack: `${mbase}/ack`,
										Reaction: (emoji) => {
											const rbase = `${mbase}/reactions/${emoji}`;
											return {
												toString: () => rbase,
												User: (userID) =>
													`${rbase}/${userID}`,
											};
										},
									};
								},
							};
						},
						Message: (m) =>
							exports.Endpoints.Channel(m.channel).Message(m),
						Member: (m) =>
							exports.Endpoints.Guild(m.guild).Member(m),
						CDN(root) {
							return {
								Emoji: (emojiID, format = "png") =>
									`${root}/emojis/${emojiID}.${format}`,
								Asset: (name) => `${root}/assets/${name}`,
								Avatar: (userID, hash) =>
									`${root}/avatars/${userID}/${hash}.${
										hash.startsWith("a_")
											? "gif"
											: "png?size=2048"
									}`,
								Icon: (guildID, hash) =>
									`${root}/icons/${guildID}/${hash}.jpg`,
								AppIcon: (clientID, hash) =>
									`${root}/app-icons/${clientID}/${hash}.png`,
								AppAsset: (clientID, hash) =>
									`${root}/app-assets/${clientID}/${hash}.png`,
								GDMIcon: (channelID, hash) =>
									`${root}/channel-icons/${channelID}/${hash}.jpg?size=2048`,
								Splash: (guildID, hash) =>
									`${root}/splashes/${guildID}/${hash}.jpg`,
							};
						},
						OAUTH2: {
							Application: (appID) => {
								const base = `/oauth2/applications/${appID}`;
								return {
									toString: () => base,
									resetSecret: `${base}/reset`,
									resetToken: `${base}/bot/reset`,
								};
							},
							App: (appID) =>
								`/oauth2/authorize?client_id=${appID}`,
						},
						login: "/auth/login",
						logout: "/auth/logout",
						voiceRegions: "/voice/regions",
						gateway: {
							toString: () => "/gateway",
							bot: "/gateway/bot",
						},
						Invite: (inviteID) =>
							`/invite/${inviteID}?with_counts=true`,
						inviteLink: (id) => `https://discord.gg/${id}`,
						Webhook: (webhookID, token) =>
							`/webhooks/${webhookID}${token ? `/${token}` : ""}`,
					});

					/**
					 * The current status of the client. Here are the available statuses:
					 * * READY
					 * * CONNECTING
					 * * RECONNECTING
					 * * IDLE
					 * * NEARLY
					 * * DISCONNECTED
					 * @typedef {number} Status
					 */
					exports.Status = {
						READY: 0,
						CONNECTING: 1,
						RECONNECTING: 2,
						IDLE: 3,
						NEARLY: 4,
						DISCONNECTED: 5,
					};

					/**
					 * The current status of a voice connection. Here are the available statuses:
					 * * CONNECTED
					 * * CONNECTING
					 * * AUTHENTICATING
					 * * RECONNECTING
					 * * DISCONNECTED
					 * @typedef {number} VoiceStatus
					 */
					exports.VoiceStatus = {
						CONNECTED: 0,
						CONNECTING: 1,
						AUTHENTICATING: 2,
						RECONNECTING: 3,
						DISCONNECTED: 4,
					};

					exports.ChannelTypes = {
						TEXT: 0,
						DM: 1,
						VOICE: 2,
						GROUP_DM: 3,
						CATEGORY: 4,
					};

					exports.OPCodes = {
						DISPATCH: 0,
						HEARTBEAT: 1,
						IDENTIFY: 2,
						STATUS_UPDATE: 3,
						VOICE_STATE_UPDATE: 4,
						VOICE_GUILD_PING: 5,
						RESUME: 6,
						RECONNECT: 7,
						REQUEST_GUILD_MEMBERS: 8,
						INVALID_SESSION: 9,
						HELLO: 10,
						HEARTBEAT_ACK: 11,
					};

					exports.VoiceOPCodes = {
						IDENTIFY: 0,
						SELECT_PROTOCOL: 1,
						READY: 2,
						HEARTBEAT: 3,
						SESSION_DESCRIPTION: 4,
						SPEAKING: 5,
					};

					exports.Events = {
						RATE_LIMIT: "rateLimit",
						READY: "ready",
						RESUME: "resume",
						GUILD_CREATE: "guildCreate",
						GUILD_DELETE: "guildDelete",
						GUILD_UPDATE: "guildUpdate",
						GUILD_UNAVAILABLE: "guildUnavailable",
						GUILD_AVAILABLE: "guildAvailable",
						GUILD_MEMBER_ADD: "guildMemberAdd",
						GUILD_MEMBER_REMOVE: "guildMemberRemove",
						GUILD_MEMBER_UPDATE: "guildMemberUpdate",
						GUILD_MEMBER_AVAILABLE: "guildMemberAvailable",
						GUILD_MEMBER_SPEAKING: "guildMemberSpeaking",
						GUILD_MEMBERS_CHUNK: "guildMembersChunk",
						GUILD_ROLE_CREATE: "roleCreate",
						GUILD_ROLE_DELETE: "roleDelete",
						GUILD_ROLE_UPDATE: "roleUpdate",
						GUILD_EMOJI_CREATE: "emojiCreate",
						GUILD_EMOJI_DELETE: "emojiDelete",
						GUILD_EMOJI_UPDATE: "emojiUpdate",
						GUILD_BAN_ADD: "guildBanAdd",
						GUILD_BAN_REMOVE: "guildBanRemove",
						CHANNEL_CREATE: "channelCreate",
						CHANNEL_DELETE: "channelDelete",
						CHANNEL_UPDATE: "channelUpdate",
						CHANNEL_PINS_UPDATE: "channelPinsUpdate",
						MESSAGE_CREATE: "message",
						MESSAGE_DELETE: "messageDelete",
						MESSAGE_UPDATE: "messageUpdate",
						MESSAGE_BULK_DELETE: "messageDeleteBulk",
						MESSAGE_REACTION_ADD: "messageReactionAdd",
						MESSAGE_REACTION_REMOVE: "messageReactionRemove",
						MESSAGE_REACTION_REMOVE_ALL: "messageReactionRemoveAll",
						USER_UPDATE: "userUpdate",
						USER_NOTE_UPDATE: "userNoteUpdate",
						USER_SETTINGS_UPDATE: "clientUserSettingsUpdate",
						USER_GUILD_SETTINGS_UPDATE:
							"clientUserGuildSettingsUpdate",
						PRESENCE_UPDATE: "presenceUpdate",
						VOICE_STATE_UPDATE: "voiceStateUpdate",
						TYPING_START: "typingStart",
						TYPING_STOP: "typingStop",
						DISCONNECT: "disconnect",
						RECONNECTING: "reconnecting",
						ERROR: "error",
						WARN: "warn",
						DEBUG: "debug",
					};

					/**
					 * The type of an activity of a users presence, e.g. `PLAYING`. Here are the available types:
					 * * PLAYING
					 * * STREAMING
					 * * LISTENING
					 * * WATCHING
					 * @typedef {string} ActivityType
					 */
					exports.ActivityTypes = [
						"PLAYING",
						"STREAMING",
						"LISTENING",
						"WATCHING",
					];

					exports.ActivityFlags = {
						INSTANCE: 1 << 0,
						JOIN: 1 << 1,
						SPECTATE: 1 << 2,
						JOIN_REQUEST: 1 << 3,
						SYNC: 1 << 4,
						PLAY: 1 << 5,
					};

					/**
					 * The type of a websocket message event, e.g. `MESSAGE_CREATE`. Here are the available events:
					 * * READY
					 * * RESUMED
					 * * GUILD_SYNC
					 * * GUILD_CREATE
					 * * GUILD_DELETE
					 * * GUILD_UPDATE
					 * * GUILD_MEMBER_ADD
					 * * GUILD_MEMBER_REMOVE
					 * * GUILD_MEMBER_UPDATE
					 * * GUILD_MEMBERS_CHUNK
					 * * GUILD_ROLE_CREATE
					 * * GUILD_ROLE_DELETE
					 * * GUILD_ROLE_UPDATE
					 * * GUILD_BAN_ADD
					 * * GUILD_BAN_REMOVE
					 * * CHANNEL_CREATE
					 * * CHANNEL_DELETE
					 * * CHANNEL_UPDATE
					 * * CHANNEL_PINS_UPDATE
					 * * MESSAGE_CREATE
					 * * MESSAGE_DELETE
					 * * MESSAGE_UPDATE
					 * * MESSAGE_DELETE_BULK
					 * * MESSAGE_REACTION_ADD
					 * * MESSAGE_REACTION_REMOVE
					 * * MESSAGE_REACTION_REMOVE_ALL
					 * * USER_UPDATE
					 * * USER_NOTE_UPDATE
					 * * USER_SETTINGS_UPDATE
					 * * PRESENCE_UPDATE
					 * * VOICE_STATE_UPDATE
					 * * TYPING_START
					 * * VOICE_SERVER_UPDATE
					 * * RELATIONSHIP_ADD
					 * * RELATIONSHIP_REMOVE
					 * @typedef {string} WSEventType
					 */
					exports.WSEvents = {
						READY: "READY",
						RESUMED: "RESUMED",
						GUILD_SYNC: "GUILD_SYNC",
						GUILD_CREATE: "GUILD_CREATE",
						GUILD_DELETE: "GUILD_DELETE",
						GUILD_UPDATE: "GUILD_UPDATE",
						GUILD_MEMBER_ADD: "GUILD_MEMBER_ADD",
						GUILD_MEMBER_REMOVE: "GUILD_MEMBER_REMOVE",
						GUILD_MEMBER_UPDATE: "GUILD_MEMBER_UPDATE",
						GUILD_MEMBERS_CHUNK: "GUILD_MEMBERS_CHUNK",
						GUILD_ROLE_CREATE: "GUILD_ROLE_CREATE",
						GUILD_ROLE_DELETE: "GUILD_ROLE_DELETE",
						GUILD_ROLE_UPDATE: "GUILD_ROLE_UPDATE",
						GUILD_BAN_ADD: "GUILD_BAN_ADD",
						GUILD_BAN_REMOVE: "GUILD_BAN_REMOVE",
						GUILD_EMOJIS_UPDATE: "GUILD_EMOJIS_UPDATE",
						CHANNEL_CREATE: "CHANNEL_CREATE",
						CHANNEL_DELETE: "CHANNEL_DELETE",
						CHANNEL_UPDATE: "CHANNEL_UPDATE",
						CHANNEL_PINS_UPDATE: "CHANNEL_PINS_UPDATE",
						MESSAGE_CREATE: "MESSAGE_CREATE",
						MESSAGE_DELETE: "MESSAGE_DELETE",
						MESSAGE_UPDATE: "MESSAGE_UPDATE",
						MESSAGE_DELETE_BULK: "MESSAGE_DELETE_BULK",
						MESSAGE_REACTION_ADD: "MESSAGE_REACTION_ADD",
						MESSAGE_REACTION_REMOVE: "MESSAGE_REACTION_REMOVE",
						MESSAGE_REACTION_REMOVE_ALL:
							"MESSAGE_REACTION_REMOVE_ALL",
						USER_UPDATE: "USER_UPDATE",
						USER_NOTE_UPDATE: "USER_NOTE_UPDATE",
						USER_SETTINGS_UPDATE: "USER_SETTINGS_UPDATE",
						USER_GUILD_SETTINGS_UPDATE:
							"USER_GUILD_SETTINGS_UPDATE",
						PRESENCE_UPDATE: "PRESENCE_UPDATE",
						VOICE_STATE_UPDATE: "VOICE_STATE_UPDATE",
						TYPING_START: "TYPING_START",
						VOICE_SERVER_UPDATE: "VOICE_SERVER_UPDATE",
						RELATIONSHIP_ADD: "RELATIONSHIP_ADD",
						RELATIONSHIP_REMOVE: "RELATIONSHIP_REMOVE",
					};

					/**
					 * The type of a message, e.g. `DEFAULT`. Here are the available types:
					 * * DEFAULT
					 * * RECIPIENT_ADD
					 * * RECIPIENT_REMOVE
					 * * CALL
					 * * CHANNEL_NAME_CHANGE
					 * * CHANNEL_ICON_CHANGE
					 * * PINS_ADD
					 * * GUILD_MEMBER_JOIN
					 * @typedef {string} MessageType
					 */
					exports.MessageTypes = [
						"DEFAULT",
						"RECIPIENT_ADD",
						"RECIPIENT_REMOVE",
						"CALL",
						"CHANNEL_NAME_CHANGE",
						"CHANNEL_ICON_CHANGE",
						"PINS_ADD",
						"GUILD_MEMBER_JOIN",
					];

					/**
					 * The type of a message notification setting. Here are the available types:
					 * * EVERYTHING
					 * * MENTIONS
					 * * NOTHING
					 * * INHERIT (only for GuildChannel)
					 * @typedef {string} MessageNotificationType
					 */
					exports.MessageNotificationTypes = [
						"EVERYTHING",
						"MENTIONS",
						"NOTHING",
						"INHERIT",
					];

					exports.DefaultAvatars = {
						BLURPLE: "6debd47ed13483642cf09e832ed0bc1b",
						GREY: "322c936a8c8be1b803cd94861bdfa868",
						GREEN: "dd4dbc0016779df1378e7812eabaa04d",
						ORANGE: "0e291f67c9274a1abdddeb3fd919cbaa",
						RED: "1cbd08c76f8af6dddce02c5138971129",
					};

					exports.ExplicitContentFilterTypes = [
						"DISABLED",
						"NON_FRIENDS",
						"FRIENDS_AND_NON_FRIENDS",
					];

					exports.UserSettingsMap = {
						/**
						 * Automatically convert emoticons in your messages to emoji
						 * For example, when you type `:-)` Discord will convert it to 😃
						 * @name ClientUserSettings#convertEmoticons
						 * @type {boolean}
						 */
						convert_emoticons: "convertEmoticons",

						/**
						 * If new guilds should automatically disable DMs between you and its members
						 * @name ClientUserSettings#defaultGuildsRestricted
						 * @type {boolean}
						 */
						default_guilds_restricted: "defaultGuildsRestricted",

						/**
						 * Automatically detect accounts from services like Steam and Blizzard when you open the Discord client
						 * @name ClientUserSettings#detectPlatformAccounts
						 * @type {boolean}
						 */
						detect_platform_accounts: "detectPlatformAccounts",

						/**
						 * Developer Mode exposes context menu items helpful for people writing bots using the Discord API
						 * @name ClientUserSettings#developerMode
						 * @type {boolean}
						 */
						developer_mode: "developerMode",

						/**
						 * Allow playback and usage of the `/tts` command
						 * @name ClientUserSettings#enableTTSCommand
						 * @type {boolean}
						 */
						enable_tts_command: "enableTTSCommand",

						/**
						 * The theme of the client. Either `light` or `dark`
						 * @name ClientUserSettings#theme
						 * @type {string}
						 */
						theme: "theme",

						/**
						 * Last status set in the client
						 * @name ClientUserSettings#status
						 * @type {PresenceStatus}
						 */
						status: "status",

						/**
						 * Display currently running game as status message
						 * @name ClientUserSettings#showCurrentGame
						 * @type {boolean}
						 */
						show_current_game: "showCurrentGame",

						/**
						 * Display images, videos, and lolcats when uploaded directly to Discord
						 * @name ClientUserSettings#inlineAttachmentMedia
						 * @type {boolean}
						 */
						inline_attachment_media: "inlineAttachmentMedia",

						/**
						 * Display images, videos, and lolcats when uploaded posted as links in chat
						 * @name ClientUserSettings#inlineEmbedMedia
						 * @type {boolean}
						 */
						inline_embed_media: "inlineEmbedMedia",

						/**
						 * Language the Discord client will use, as an RFC 3066 language identifier
						 * @name ClientUserSettings#locale
						 * @type {string}
						 */
						locale: "locale",

						/**
						 * Display messages in compact mode
						 * @name ClientUserSettings#messageDisplayCompact
						 * @type {boolean}
						 */
						message_display_compact: "messageDisplayCompact",

						/**
						 * Show emoji reactions on messages
						 * @name ClientUserSettings#renderReactions
						 * @type {boolean}
						 */
						render_reactions: "renderReactions",

						/**
						 * Array of snowflake IDs for guilds, in the order they appear in the Discord client
						 * @name ClientUserSettings#guildPositions
						 * @type {Snowflake[]}
						 */
						guild_positions: "guildPositions",

						/**
						 * Array of snowflake IDs for guilds which you will not recieve DMs from
						 * @name ClientUserSettings#restrictedGuilds
						 * @type {Snowflake[]}
						 */
						restricted_guilds: "restrictedGuilds",

						explicit_content_filter: function explicitContentFilter(
							type
						) {
							// eslint-disable-line func-name-matching
							/**
							 * Safe direct messaging; force people's messages with images to be scanned before they are sent to you.
							 * One of `DISABLED`, `NON_FRIENDS`, `FRIENDS_AND_NON_FRIENDS`
							 * @name ClientUserSettings#explicitContentFilter
							 * @type {string}
							 */
							return exports.ExplicitContentFilterTypes[type];
						},
						friend_source_flags: function friendSources(flags) {
							// eslint-disable-line func-name-matching
							/**
							 * Who can add you as a friend
							 * @name ClientUserSettings#friendSources
							 * @type {Object}
							 * @property {boolean} all Mutual friends and mutual guilds
							 * @property {boolean} mutualGuilds Only mutual guilds
							 * @property {boolean} mutualFriends Only mutual friends
							 */
							return {
								all: flags.all || false,
								mutualGuilds: flags.all
									? true
									: flags.mutual_guilds || false,
								mutualFriends: flags.all
									? true
									: flags.mutualFriends || false,
							};
						},
					};

					exports.UserGuildSettingsMap = {
						message_notifications: function messageNotifications(
							type
						) {
							// eslint-disable-line func-name-matching
							/**
							 * The type of message that should notify you
							 * @name ClientUserGuildSettings#messageNotifications
							 * @type {MessageNotificationType}
							 */
							return exports.MessageNotificationTypes[type];
						},
						/**
						 * Whether to receive mobile push notifications
						 * @name ClientUserGuildSettings#mobilePush
						 * @type {boolean}
						 */
						mobile_push: "mobilePush",
						/**
						 * Whether the guild is muted
						 * @name ClientUserGuildSettings#muted
						 * @type {boolean}
						 */
						muted: "muted",
						/**
						 * Whether to suppress everyone mention
						 * @name ClientUserGuildSettings#suppressEveryone
						 * @type {boolean}
						 */
						suppress_everyone: "suppressEveryone",
						/**
						 * A collection containing all the channel overrides
						 * @name ClientUserGuildSettings#channelOverrides
						 * @type {Collection<ClientUserChannelOverride>}
						 */
						channel_overrides: "channelOverrides",
					};

					exports.UserChannelOverrideMap = {
						message_notifications: function messageNotifications(
							type
						) {
							// eslint-disable-line func-name-matching
							/**
							 * The type of message that should notify you
							 * @name ClientUserChannelOverride#messageNotifications
							 * @type {MessageNotificationType}
							 */
							return exports.MessageNotificationTypes[type];
						},
						/**
						 * Whether the channel is muted
						 * @name ClientUserChannelOverride#muted
						 * @type {boolean}
						 */
						muted: "muted",
					};

					exports.Colors = {
						DEFAULT: 0x000000,
						AQUA: 0x1abc9c,
						GREEN: 0x2ecc71,
						BLUE: 0x3498db,
						PURPLE: 0x9b59b6,
						LUMINOUS_VIVID_PINK: 0xe91e63,
						GOLD: 0xf1c40f,
						ORANGE: 0xe67e22,
						RED: 0xe74c3c,
						GREY: 0x95a5a6,
						NAVY: 0x34495e,
						DARK_AQUA: 0x11806a,
						DARK_GREEN: 0x1f8b4c,
						DARK_BLUE: 0x206694,
						DARK_PURPLE: 0x71368a,
						DARK_VIVID_PINK: 0xad1457,
						DARK_GOLD: 0xc27c0e,
						DARK_ORANGE: 0xa84300,
						DARK_RED: 0x992d22,
						DARK_GREY: 0x979c9f,
						DARKER_GREY: 0x7f8c8d,
						LIGHT_GREY: 0xbcc0c0,
						DARK_NAVY: 0x2c3e50,
						BLURPLE: 0x7289da,
						GREYPLE: 0x99aab5,
						DARK_BUT_NOT_BLACK: 0x2c2f33,
						NOT_QUITE_BLACK: 0x23272a,
					};

					/**
					 * An error encountered while performing an API request. Here are the potential errors:
					 * * UNKNOWN_ACCOUNT
					 * * UNKNOWN_APPLICATION
					 * * UNKNOWN_CHANNEL
					 * * UNKNOWN_GUILD
					 * * UNKNOWN_INTEGRATION
					 * * UNKNOWN_INVITE
					 * * UNKNOWN_MEMBER
					 * * UNKNOWN_MESSAGE
					 * * UNKNOWN_OVERWRITE
					 * * UNKNOWN_PROVIDER
					 * * UNKNOWN_ROLE
					 * * UNKNOWN_TOKEN
					 * * UNKNOWN_USER
					 * * UNKNOWN_EMOJI
					 * * BOT_PROHIBITED_ENDPOINT
					 * * BOT_ONLY_ENDPOINT
					 * * MAXIMUM_GUILDS
					 * * MAXIMUM_FRIENDS
					 * * MAXIMUM_PINS
					 * * MAXIMUM_ROLES
					 * * MAXIMUM_REACTIONS
					 * * UNAUTHORIZED
					 * * MISSING_ACCESS
					 * * INVALID_ACCOUNT_TYPE
					 * * CANNOT_EXECUTE_ON_DM
					 * * EMBED_DISABLED
					 * * CANNOT_EDIT_MESSAGE_BY_OTHER
					 * * CANNOT_SEND_EMPTY_MESSAGE
					 * * CANNOT_MESSAGE_USER
					 * * CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL
					 * * CHANNEL_VERIFICATION_LEVEL_TOO_HIGH
					 * * OAUTH2_APPLICATION_BOT_ABSENT
					 * * MAXIMUM_OAUTH2_APPLICATIONS
					 * * INVALID_OAUTH_STATE
					 * * MISSING_PERMISSIONS
					 * * INVALID_AUTHENTICATION_TOKEN
					 * * NOTE_TOO_LONG
					 * * INVALID_BULK_DELETE_QUANTITY
					 * * CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL
					 * * CANNOT_EXECUTE_ON_SYSTEM_MESSAGE
					 * * BULK_DELETE_MESSAGE_TOO_OLD
					 * * INVITE_ACCEPTED_TO_GUILD_NOT_CONTANING_BOT
					 * * REACTION_BLOCKED
					 * @typedef {string} APIError
					 */
					exports.APIErrors = {
						UNKNOWN_ACCOUNT: 10001,
						UNKNOWN_APPLICATION: 10002,
						UNKNOWN_CHANNEL: 10003,
						UNKNOWN_GUILD: 10004,
						UNKNOWN_INTEGRATION: 10005,
						UNKNOWN_INVITE: 10006,
						UNKNOWN_MEMBER: 10007,
						UNKNOWN_MESSAGE: 10008,
						UNKNOWN_OVERWRITE: 10009,
						UNKNOWN_PROVIDER: 10010,
						UNKNOWN_ROLE: 10011,
						UNKNOWN_TOKEN: 10012,
						UNKNOWN_USER: 10013,
						UNKNOWN_EMOJI: 10014,
						BOT_PROHIBITED_ENDPOINT: 20001,
						BOT_ONLY_ENDPOINT: 20002,
						MAXIMUM_GUILDS: 30001,
						MAXIMUM_FRIENDS: 30002,
						MAXIMUM_PINS: 30003,
						MAXIMUM_ROLES: 30005,
						MAXIMUM_REACTIONS: 30010,
						UNAUTHORIZED: 40001,
						MISSING_ACCESS: 50001,
						INVALID_ACCOUNT_TYPE: 50002,
						CANNOT_EXECUTE_ON_DM: 50003,
						EMBED_DISABLED: 50004,
						CANNOT_EDIT_MESSAGE_BY_OTHER: 50005,
						CANNOT_SEND_EMPTY_MESSAGE: 50006,
						CANNOT_MESSAGE_USER: 50007,
						CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL: 50008,
						CHANNEL_VERIFICATION_LEVEL_TOO_HIGH: 50009,
						OAUTH2_APPLICATION_BOT_ABSENT: 50010,
						MAXIMUM_OAUTH2_APPLICATIONS: 50011,
						INVALID_OAUTH_STATE: 50012,
						MISSING_PERMISSIONS: 50013,
						INVALID_AUTHENTICATION_TOKEN: 50014,
						NOTE_TOO_LONG: 50015,
						INVALID_BULK_DELETE_QUANTITY: 50016,
						CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL: 50019,
						CANNOT_EXECUTE_ON_SYSTEM_MESSAGE: 50021,
						BULK_DELETE_MESSAGE_TOO_OLD: 50034,
						INVITE_ACCEPTED_TO_GUILD_NOT_CONTANING_BOT: 50036,
						REACTION_BLOCKED: 90001,
					};

					/**
					 * The value set for a guild's default message notifications, e.g. `ALL`. Here are the available types:
					 * * ALL
					 * * MENTIONS
					 * @typedef {string} DefaultMessageNotifications
					 */
					exports.DefaultMessageNotifications = ["ALL", "MENTIONS"];

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../../process/browser.js */ "./node_modules/process/browser.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/discord.js/src/util/Permissions.js":
			/*!*********************************************************!*\
  !*** ./node_modules/discord.js/src/util/Permissions.js ***!
  \*********************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Constants = __webpack_require__(
					/*! ../util/Constants */ "./node_modules/discord.js/src/util/Constants.js"
				);
				const util = __webpack_require__(
					/*! util */ "./node_modules/util/util.js"
				);

				/**
				 * Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of
				 * permissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member
				 * that override their default permissions.
				 */
				class Permissions {
					/**
					 * @param {GuildMember} [member] Member the permissions are for **(deprecated)**
					 * @param {number|PermissionResolvable} permissions Permissions or bitfield to read from
					 */
					constructor(member, permissions) {
						permissions =
							typeof member === "object" &&
							!(member instanceof Array)
								? permissions
								: member;

						/**
						 * Member the permissions are for
						 * @type {GuildMember}
						 * @deprecated
						 */
						this._member =
							typeof member === "object" ? member : null;

						/**
						 * Bitfield of the packed permissions
						 * @type {number}
						 */
						this.bitfield =
							typeof permissions === "number"
								? permissions
								: this.constructor.resolve(permissions);
					}

					get member() {
						return this._member;
					}

					set member(value) {
						this._member = value;
					}

					/**
					 * Bitfield of the packed permissions
					 * @type {number}
					 * @see {@link Permissions#bitfield}
					 * @deprecated
					 * @readonly
					 */
					get raw() {
						return this.bitfield;
					}

					set raw(raw) {
						this.bitfield = raw;
					}

					/**
					 * Checks whether the bitfield has a permission, or multiple permissions.
					 * @param {PermissionResolvable} permission Permission(s) to check for
					 * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override
					 * @returns {boolean}
					 */
					has(permission, checkAdmin = true) {
						if (permission instanceof Array)
							return permission.every((p) =>
								this.has(p, checkAdmin)
							);
						permission = this.constructor.resolve(permission);
						if (
							checkAdmin &&
							(this.bitfield &
								this.constructor.FLAGS.ADMINISTRATOR) >
								0
						)
							return true;
						return (this.bitfield & permission) === permission;
					}

					/**
					 * Gets all given permissions that are missing from the bitfield.
					 * @param {PermissionResolvable} permissions Permissions to check for
					 * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override
					 * @returns {PermissionResolvable}
					 */
					missing(permissions, checkAdmin = true) {
						if (!(permissions instanceof Array))
							permissions = [permissions];
						return permissions.filter(
							(p) => !this.has(p, checkAdmin)
						);
					}

					/**
					 * Adds permissions to this one, creating a new instance to represent the new bitfield.
					 * @param {...PermissionResolvable} permissions Permissions to add
					 * @returns {Permissions}
					 */
					add(...permissions) {
						let total = 0;
						for (let p = permissions.length - 1; p >= 0; p--) {
							const perm = this.constructor.resolve(
								permissions[p]
							);
							total |= perm;
						}
						if (Object.isFrozen(this))
							return new this.constructor(this.bitfield | total);
						this.bitfield |= total;
						return this;
					}

					/**
					 * Removes permissions to this one, creating a new instance to represent the new bitfield.
					 * @param {...PermissionResolvable} permissions Permissions to remove
					 * @returns {Permissions}
					 */
					remove(...permissions) {
						let total = 0;
						for (let p = permissions.length - 1; p >= 0; p--) {
							const perm = this.constructor.resolve(
								permissions[p]
							);
							total |= perm;
						}
						if (Object.isFrozen(this))
							return new this.constructor(this.bitfield & ~total);
						this.bitfield &= ~total;
						return this;
					}

					/**
					 * Gets an object mapping permission name (like `VIEW_CHANNEL`) to a {@link boolean} indicating whether the
					 * permission is available.
					 * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override
					 * @returns {Object}
					 */
					serialize(checkAdmin = true) {
						const serialized = {};
						for (const perm in this.constructor.FLAGS)
							serialized[perm] = this.has(perm, checkAdmin);
						return serialized;
					}

					/**
					 * Checks whether the user has a certain permission, e.g. `READ_MESSAGES`.
					 * @param {PermissionResolvable} permission The permission to check for
					 * @param {boolean} [explicit=false] Whether to require the user to explicitly have the exact permission
					 * @returns {boolean}
					 * @see {@link Permissions#has}
					 * @deprecated
					 */
					hasPermission(permission, explicit = false) {
						return this.has(permission, !explicit);
					}

					/**
					 * Checks whether the user has all specified permissions.
					 * @param {PermissionResolvable} permissions The permissions to check for
					 * @param {boolean} [explicit=false] Whether to require the user to explicitly have the exact permissions
					 * @returns {boolean}
					 * @see {@link Permissions#has}
					 * @deprecated
					 */
					hasPermissions(permissions, explicit = false) {
						return this.has(permissions, !explicit);
					}

					/**
					 * Checks whether the user has all specified permissions, and lists any missing permissions.
					 * @param {PermissionResolvable} permissions The permissions to check for
					 * @param {boolean} [explicit=false] Whether to require the user to explicitly have the exact permissions
					 * @returns {PermissionResolvable}
					 * @see {@link Permissions#missing}
					 * @deprecated
					 */
					missingPermissions(permissions, explicit = false) {
						return this.missing(permissions, !explicit);
					}

					/**
					 * Gets an {@link Array} of permission names (such as `VIEW_CHANNEL`) based on the permissions available.
					 * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override
					 * @returns {string[]}
					 */
					toArray(checkAdmin = true) {
						return Object.keys(this.constructor.FLAGS).filter(
							(perm) => this.has(perm, checkAdmin)
						);
					}

					/**
					 * Freezes these permissions, making them immutable.
					 * @returns {Permissions} These permissions
					 */
					freeze() {
						return Object.freeze(this);
					}

					valueOf() {
						return this.bitfield;
					}

					/**
					 * Data that can be resolved to give a permission number. This can be:
					 * * A string (see {@link Permissions.FLAGS})
					 * * A permission number
					 * @typedef {string|number|Permissions|PermissionResolvable[]} PermissionResolvable
					 */

					/**
					 * Resolves permissions to their numeric form.
					 * @param {PermissionResolvable} permission - Permission(s) to resolve
					 * @returns {number}
					 */
					static resolve(permission) {
						if (permission instanceof Array)
							return permission
								.map((p) => this.resolve(p))
								.reduce((prev, p) => prev | p, 0);
						if (typeof permission === "string")
							permission = this.FLAGS[permission];
						if (typeof permission !== "number" || permission < 0)
							throw new RangeError(
								Constants.Errors.NOT_A_PERMISSION
							);
						return permission;
					}
				}

				/**
				 * Numeric permission flags. All available properties:
				 * - `ADMINISTRATOR` (implicitly has *all* permissions, and bypasses all channel overwrites)
				 * - `CREATE_INSTANT_INVITE` (create invitations to the guild)
				 * - `KICK_MEMBERS`
				 * - `BAN_MEMBERS`
				 * - `MANAGE_CHANNELS` (edit and reorder channels)
				 * - `MANAGE_GUILD` (edit the guild information, region, etc.)
				 * - `ADD_REACTIONS` (add new reactions to messages)
				 * - `VIEW_AUDIT_LOG`
				 * - `PRIORITY_SPEAKER`
				 * - `VIEW_CHANNEL`
				 * - `READ_MESSAGES` **(deprecated)**
				 * - `SEND_MESSAGES`
				 * - `SEND_TTS_MESSAGES`
				 * - `MANAGE_MESSAGES` (delete messages and reactions)
				 * - `EMBED_LINKS` (links posted will have a preview embedded)
				 * - `ATTACH_FILES`
				 * - `READ_MESSAGE_HISTORY` (view messages that were posted prior to opening Discord)
				 * - `MENTION_EVERYONE`
				 * - `USE_EXTERNAL_EMOJIS` (use emojis from different guilds)
				 * - `EXTERNAL_EMOJIS` **(deprecated)**
				 * - `CONNECT` (connect to a voice channel)
				 * - `SPEAK` (speak in a voice channel)
				 * - `MUTE_MEMBERS` (mute members across all voice channels)
				 * - `DEAFEN_MEMBERS` (deafen members across all voice channels)
				 * - `MOVE_MEMBERS` (move members between voice channels)
				 * - `USE_VAD` (use voice activity detection)
				 * - `CHANGE_NICKNAME`
				 * - `MANAGE_NICKNAMES` (change other members' nicknames)
				 * - `MANAGE_ROLES`
				 * - `MANAGE_ROLES_OR_PERMISSIONS` **(deprecated)**
				 * - `MANAGE_WEBHOOKS`
				 * - `MANAGE_EMOJIS`
				 * @type {Object}
				 * @see {@link https://discordapp.com/developers/docs/topics/permissions}
				 */
				Permissions.FLAGS = {
					CREATE_INSTANT_INVITE: 1 << 0,
					KICK_MEMBERS: 1 << 1,
					BAN_MEMBERS: 1 << 2,
					ADMINISTRATOR: 1 << 3,
					MANAGE_CHANNELS: 1 << 4,
					MANAGE_GUILD: 1 << 5,
					ADD_REACTIONS: 1 << 6,
					VIEW_AUDIT_LOG: 1 << 7,
					PRIORITY_SPEAKER: 1 << 8,

					VIEW_CHANNEL: 1 << 10,
					READ_MESSAGES: 1 << 10,
					SEND_MESSAGES: 1 << 11,
					SEND_TTS_MESSAGES: 1 << 12,
					MANAGE_MESSAGES: 1 << 13,
					EMBED_LINKS: 1 << 14,
					ATTACH_FILES: 1 << 15,
					READ_MESSAGE_HISTORY: 1 << 16,
					MENTION_EVERYONE: 1 << 17,
					EXTERNAL_EMOJIS: 1 << 18,
					USE_EXTERNAL_EMOJIS: 1 << 18,

					CONNECT: 1 << 20,
					SPEAK: 1 << 21,
					MUTE_MEMBERS: 1 << 22,
					DEAFEN_MEMBERS: 1 << 23,
					MOVE_MEMBERS: 1 << 24,
					USE_VAD: 1 << 25,

					CHANGE_NICKNAME: 1 << 26,
					MANAGE_NICKNAMES: 1 << 27,
					MANAGE_ROLES: 1 << 28,
					MANAGE_ROLES_OR_PERMISSIONS: 1 << 28,
					MANAGE_WEBHOOKS: 1 << 29,
					MANAGE_EMOJIS: 1 << 30,
				};

				/**
				 * Bitfield representing every permission combined
				 * @type {number}
				 */
				Permissions.ALL = Object.keys(Permissions.FLAGS).reduce(
					(all, p) => all | Permissions.FLAGS[p],
					0
				);

				/**
				 * Bitfield representing the default permissions for users
				 * @type {number}
				 */
				Permissions.DEFAULT = 104324097;

				/**
				 * @class EvaluatedPermissions
				 * @classdesc The final evaluated permissions for a member in a channel
				 * @see {@link Permissions}
				 * @deprecated
				 */

				Permissions.prototype.hasPermission = util.deprecate(
					Permissions.prototype.hasPermission,
					"EvaluatedPermissions#hasPermission is deprecated, use Permissions#has instead"
				);
				Permissions.prototype.hasPermissions = util.deprecate(
					Permissions.prototype.hasPermissions,
					"EvaluatedPermissions#hasPermissions is deprecated, use Permissions#has instead"
				);
				Permissions.prototype.missingPermissions = util.deprecate(
					Permissions.prototype.missingPermissions,
					"EvaluatedPermissions#missingPermissions is deprecated, use Permissions#missing instead"
				);
				Object.defineProperty(Permissions.prototype, "member", {
					get: util.deprecate(
						Object.getOwnPropertyDescriptor(
							Permissions.prototype,
							"member"
						).get,
						"EvaluatedPermissions#member is deprecated"
					),
				});

				module.exports = Permissions;

				/***/
			},

		/***/ "./node_modules/discord.js/src/util/Snowflake.js":
			/*!*******************************************************!*\
  !*** ./node_modules/discord.js/src/util/Snowflake.js ***!
  \*******************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const Long = __webpack_require__(
					/*! long */ "./node_modules/long/src/long.js"
				);

				// Discord epoch (2015-01-01T00:00:00.000Z)
				const EPOCH = 1420070400000;
				let INCREMENT = 0;

				/**
				 * A container for useful snowflake-related methods.
				 */
				class SnowflakeUtil {
					constructor() {
						throw new Error(
							`The ${
								this.constructor.name
							} class may not be instantiated.`
						);
					}

					/**
					 * A Twitter snowflake, except the epoch is 2015-01-01T00:00:00.000Z
					 * ```
					 * If we have a snowflake '266241948824764416' we can represent it as binary:
					 *
					 * 64                                          22     17     12          0
					 *  000000111011000111100001101001000101000000  00001  00000  000000000000
					 *       number of ms since Discord epoch       worker  pid    increment
					 * ```
					 * @typedef {string} Snowflake
					 */

					/**
					 * Generates a Discord snowflake.
					 * <info>This hardcodes the worker ID as 1 and the process ID as 0.</info>
					 * @param {number|Date} [timestamp=Date.now()] Timestamp or date of the snowflake to generate
					 * @returns {Snowflake} The generated snowflake
					 */
					static generate(timestamp = Date.now()) {
						if (timestamp instanceof Date)
							timestamp = timestamp.getTime();
						if (typeof timestamp !== "number" || isNaN(timestamp)) {
							throw new TypeError(
								`"timestamp" argument must be a number (received ${
									isNaN(timestamp) ? "NaN" : typeof timestamp
								})`
							);
						}
						if (INCREMENT >= 4095) INCREMENT = 0;
						const BINARY = `${pad(
							(timestamp - EPOCH).toString(2),
							42
						)}0000100000${pad((INCREMENT++).toString(2), 12)}`;
						return Long.fromString(BINARY, 2).toString();
					}

					/**
					 * A deconstructed snowflake.
					 * @typedef {Object} DeconstructedSnowflake
					 * @property {number} timestamp Timestamp the snowflake was created
					 * @property {Date} date Date the snowflake was created
					 * @property {number} workerID Worker ID in the snowflake
					 * @property {number} processID Process ID in the snowflake
					 * @property {number} increment Increment in the snowflake
					 * @property {string} binary Binary representation of the snowflake
					 */

					/**
					 * Deconstructs a Discord snowflake.
					 * @param {Snowflake} snowflake Snowflake to deconstruct
					 * @returns {DeconstructedSnowflake} Deconstructed snowflake
					 */
					static deconstruct(snowflake) {
						const BINARY = pad(
							Long.fromString(snowflake).toString(2),
							64
						);
						const res = {
							timestamp:
								parseInt(BINARY.substring(0, 42), 2) + EPOCH,
							workerID: parseInt(BINARY.substring(42, 47), 2),
							processID: parseInt(BINARY.substring(47, 52), 2),
							increment: parseInt(BINARY.substring(52, 64), 2),
							binary: BINARY,
						};
						Object.defineProperty(res, "date", {
							get: function get() {
								return new Date(this.timestamp);
							},
							enumerable: true,
						});
						return res;
					}
				}

				function pad(v, n, c = "0") {
					return String(v).length >= n
						? String(v)
						: (String(c).repeat(n) + v).slice(-n);
				}

				module.exports = SnowflakeUtil;

				/***/
			},

		/***/ "./node_modules/discord.js/src/util/Util.js":
			/*!**************************************************!*\
  !*** ./node_modules/discord.js/src/util/Util.js ***!
  \**************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(Buffer) {
					const snekfetch = __webpack_require__(
						/*! snekfetch */ "./node_modules/snekfetch/esm.mjs"
					);
					const Constants = __webpack_require__(
						/*! ./Constants */ "./node_modules/discord.js/src/util/Constants.js"
					);
					const ConstantsHttp = Constants.DefaultOptions.http;

					/**
					 * Contains various general-purpose utility methods. These functions are also available on the base `Discord` object.
					 */
					class Util {
						constructor() {
							throw new Error(
								`The ${
									this.constructor.name
								} class may not be instantiated.`
							);
						}

						/**
						 * Splits a string into multiple chunks at a designated character that do not exceed a specific length.
						 * @param {string} text Content to split
						 * @param {SplitOptions} [options] Options controlling the behaviour of the split
						 * @returns {string|string[]}
						 */
						static splitMessage(
							text,
							{
								maxLength = 1950,
								char = "\n",
								prepend = "",
								append = "",
							} = {}
						) {
							if (text.length <= maxLength) return text;
							const splitText = text.split(char);
							if (splitText.length === 1)
								throw new Error(
									"Message exceeds the max length and contains no split characters."
								);
							const messages = [""];
							let msg = 0;
							for (let i = 0; i < splitText.length; i++) {
								if (
									messages[msg].length +
										splitText[i].length +
										1 >
									maxLength
								) {
									messages[msg] += append;
									messages.push(prepend);
									msg++;
								}
								messages[msg] +=
									(messages[msg].length > 0 &&
									messages[msg] !== prepend
										? char
										: "") + splitText[i];
							}
							return messages;
						}

						/**
						 * Escapes any Discord-flavour markdown in a string.
						 * @param {string} text Content to escape
						 * @param {boolean} [onlyCodeBlock=false] Whether to only escape codeblocks (takes priority)
						 * @param {boolean} [onlyInlineCode=false] Whether to only escape inline code
						 * @returns {string}
						 */
						static escapeMarkdown(
							text,
							onlyCodeBlock = false,
							onlyInlineCode = false
						) {
							if (onlyCodeBlock)
								return text.replace(/```/g, "`\u200b``");
							if (onlyInlineCode)
								return text
									.replace(/\\(`|\\)/g, "$1")
									.replace(/(`|\\)/g, "\\$1");
							return text
								.replace(/\\(\*|_|`|~|\\)/g, "$1")
								.replace(/(\*|_|`|~|\\)/g, "\\$1");
						}

						/**
						 * Gets the recommended shard count from Discord.
						 * @param {string} token Discord auth token
						 * @param {number} [guildsPerShard=1000] Number of guilds per shard
						 * @returns {Promise<number>} The recommended number of shards
						 */
						static fetchRecommendedShards(
							token,
							guildsPerShard = 1000
						) {
							return new Promise((resolve, reject) => {
								if (!token)
									throw new Error(
										"A token must be provided."
									);
								snekfetch
									.get(
										`${ConstantsHttp.host}/api/v${
											ConstantsHttp.version
										}${Constants.Endpoints.gateway.bot}`
									)
									.set(
										"Authorization",
										`Bot ${token.replace(/^Bot\s*/i, "")}`
									)
									.end((err, res) => {
										if (err) reject(err);
										resolve(
											res.body.shards *
												(1000 / guildsPerShard)
										);
									});
							});
						}

						/**
						 * Parses emoji info out of a string. The string must be one of:
						 * * A UTF-8 emoji (no ID)
						 * * A URL-encoded UTF-8 emoji (no ID)
						 * * A Discord custom emoji (`<:name:id>` or `<a:name:id>`)
						 * @param {string} text Emoji string to parse
						 * @returns {?Object} Object with `animated`, `name`, and `id` properties
						 * @private
						 */
						static parseEmoji(text) {
							if (text.includes("%"))
								text = decodeURIComponent(text);
							if (!text.includes(":"))
								return {animated: false, name: text, id: null};
							const m = text.match(
								/<?(a:)?(\w{2,32}):(\d{17,19})>?/
							);
							if (!m) return null;
							return {
								animated: Boolean(m[1]),
								name: m[2],
								id: m[3],
							};
						}

						/**
						 * Checks whether the arrays are equal, also removes duplicated entries from b.
						 * @param {Array<*>} a Array which will not be modified.
						 * @param {Array<*>} b Array to remove duplicated entries from.
						 * @returns {boolean} Whether the arrays are equal.
						 * @private
						 */
						static arraysEqual(a, b) {
							if (a === b) return true;
							if (a.length !== b.length) return false;

							for (const item of a) {
								const ind = b.indexOf(item);
								if (ind !== -1) b.splice(ind, 1);
							}

							return b.length === 0;
						}

						/**
						 * Shallow-copies an object with its class/prototype intact.
						 * @param {Object} obj Object to clone
						 * @returns {Object}
						 * @private
						 */
						static cloneObject(obj) {
							return Object.assign(Object.create(obj), obj);
						}

						/**
						 * Sets default properties on an object that aren't already specified.
						 * @param {Object} def Default properties
						 * @param {Object} given Object to assign defaults to
						 * @returns {Object}
						 * @private
						 */
						static mergeDefault(def, given) {
							if (!given) return def;
							for (const key in def) {
								if (!{}.hasOwnProperty.call(given, key)) {
									given[key] = def[key];
								} else if (given[key] === Object(given[key])) {
									given[key] = this.mergeDefault(
										def[key],
										given[key]
									);
								}
							}

							return given;
						}

						/**
						 * Converts an ArrayBuffer or string to a Buffer.
						 * @param {ArrayBuffer|string} ab ArrayBuffer to convert
						 * @returns {Buffer}
						 * @private
						 */
						static convertToBuffer(ab) {
							if (typeof ab === "string") ab = this.str2ab(ab);
							return Buffer.from(ab);
						}

						/**
						 * Converts a string to an ArrayBuffer.
						 * @param {string} str String to convert
						 * @returns {ArrayBuffer}
						 * @private
						 */
						static str2ab(str) {
							const buffer = new ArrayBuffer(str.length * 2);
							const view = new Uint16Array(buffer);
							for (
								var i = 0, strLen = str.length;
								i < strLen;
								i++
							)
								view[i] = str.charCodeAt(i);
							return buffer;
						}

						/**
						 * Makes an Error from a plain info object.
						 * @param {Object} obj Error info
						 * @param {string} obj.name Error type
						 * @param {string} obj.message Message for the error
						 * @param {string} obj.stack Stack for the error
						 * @returns {Error}
						 * @private
						 */
						static makeError(obj) {
							const err = new Error(obj.message);
							err.name = obj.name;
							err.stack = obj.stack;
							return err;
						}

						/**
						 * Makes a plain error info object from an Error.
						 * @param {Error} err Error to get info from
						 * @returns {Object}
						 * @private
						 */
						static makePlainError(err) {
							const obj = {};
							obj.name = err.name;
							obj.message = err.message;
							obj.stack = err.stack;
							return obj;
						}

						/**
						 * Moves an element in an array *in place*.
						 * @param {Array<*>} array Array to modify
						 * @param {*} element Element to move
						 * @param {number} newIndex Index or offset to move the element to
						 * @param {boolean} [offset=false] Move the element by an offset amount rather than to a set index
						 * @returns {number}
						 * @private
						 */
						static moveElementInArray(
							array,
							element,
							newIndex,
							offset = false
						) {
							const index = array.indexOf(element);
							newIndex = (offset ? index : 0) + newIndex;
							if (newIndex > -1 && newIndex < array.length) {
								const removedElement = array.splice(
									index,
									1
								)[0];
								array.splice(newIndex, 0, removedElement);
							}
							return array.indexOf(element);
						}

						/**
						 * Creates a Promise that resolves after a specified duration.
						 * @param {number} ms How long to wait before resolving (in milliseconds)
						 * @returns {Promise<void>}
						 * @private
						 */
						static delayFor(ms) {
							return new Promise((resolve) => {
								setTimeout(resolve, ms);
							});
						}
					}

					module.exports = Util;

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js"
					).Buffer
				));

				/***/
			},

		/***/ "./node_modules/events/events.js":
			/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				// Copyright Joyent, Inc. and other Node contributors.
				//
				// Permission is hereby granted, free of charge, to any person obtaining a
				// copy of this software and associated documentation files (the
				// "Software"), to deal in the Software without restriction, including
				// without limitation the rights to use, copy, modify, merge, publish,
				// distribute, sublicense, and/or sell copies of the Software, and to permit
				// persons to whom the Software is furnished to do so, subject to the
				// following conditions:
				//
				// The above copyright notice and this permission notice shall be included
				// in all copies or substantial portions of the Software.
				//
				// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
				// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
				// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
				// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
				// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
				// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
				// USE OR OTHER DEALINGS IN THE SOFTWARE.

				var R = typeof Reflect === "object" ? Reflect : null;
				var ReflectApply =
					R && typeof R.apply === "function"
						? R.apply
						: function ReflectApply(target, receiver, args) {
								return Function.prototype.apply.call(
									target,
									receiver,
									args
								);
						  };

				var ReflectOwnKeys;
				if (R && typeof R.ownKeys === "function") {
					ReflectOwnKeys = R.ownKeys;
				} else if (Object.getOwnPropertySymbols) {
					ReflectOwnKeys = function ReflectOwnKeys(target) {
						return Object.getOwnPropertyNames(target).concat(
							Object.getOwnPropertySymbols(target)
						);
					};
				} else {
					ReflectOwnKeys = function ReflectOwnKeys(target) {
						return Object.getOwnPropertyNames(target);
					};
				}

				function ProcessEmitWarning(warning) {
					if (console && console.warn) console.warn(warning);
				}

				var NumberIsNaN =
					Number.isNaN ||
					function NumberIsNaN(value) {
						return value !== value;
					};

				function EventEmitter() {
					EventEmitter.init.call(this);
				}
				module.exports = EventEmitter;

				// Backwards-compat with node 0.10.x
				EventEmitter.EventEmitter = EventEmitter;

				EventEmitter.prototype._events = undefined;
				EventEmitter.prototype._eventsCount = 0;
				EventEmitter.prototype._maxListeners = undefined;

				// By default EventEmitters will print a warning if more than 10 listeners are
				// added to it. This is a useful default which helps finding memory leaks.
				var defaultMaxListeners = 10;

				Object.defineProperty(EventEmitter, "defaultMaxListeners", {
					enumerable: true,
					get: function() {
						return defaultMaxListeners;
					},
					set: function(arg) {
						if (
							typeof arg !== "number" ||
							arg < 0 ||
							NumberIsNaN(arg)
						) {
							throw new RangeError(
								'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' +
									arg +
									"."
							);
						}
						defaultMaxListeners = arg;
					},
				});

				EventEmitter.init = function() {
					if (
						this._events === undefined ||
						this._events === Object.getPrototypeOf(this)._events
					) {
						this._events = Object.create(null);
						this._eventsCount = 0;
					}

					this._maxListeners = this._maxListeners || undefined;
				};

				// Obviously not all Emitters should be limited to 10. This function allows
				// that to be increased. Set to zero for unlimited.
				EventEmitter.prototype.setMaxListeners = function setMaxListeners(
					n
				) {
					if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
						throw new RangeError(
							'The value of "n" is out of range. It must be a non-negative number. Received ' +
								n +
								"."
						);
					}
					this._maxListeners = n;
					return this;
				};

				function $getMaxListeners(that) {
					if (that._maxListeners === undefined)
						return EventEmitter.defaultMaxListeners;
					return that._maxListeners;
				}

				EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
					return $getMaxListeners(this);
				};

				EventEmitter.prototype.emit = function emit(type) {
					var args = [];
					for (var i = 1; i < arguments.length; i++)
						args.push(arguments[i]);
					var doError = type === "error";

					var events = this._events;
					if (events !== undefined)
						doError = doError && events.error === undefined;
					else if (!doError) return false;

					// If there is no 'error' event listener then throw.
					if (doError) {
						var er;
						if (args.length > 0) er = args[0];
						if (er instanceof Error) {
							// Note: The comments on the `throw` lines are intentional, they show
							// up in Node's output if this results in an unhandled exception.
							throw er; // Unhandled 'error' event
						}
						// At least give some kind of context to the user
						var err = new Error(
							"Unhandled error." +
								(er ? " (" + er.message + ")" : "")
						);
						err.context = er;
						throw err; // Unhandled 'error' event
					}

					var handler = events[type];

					if (handler === undefined) return false;

					if (typeof handler === "function") {
						ReflectApply(handler, this, args);
					} else {
						var len = handler.length;
						var listeners = arrayClone(handler, len);
						for (var i = 0; i < len; ++i)
							ReflectApply(listeners[i], this, args);
					}

					return true;
				};

				function _addListener(target, type, listener, prepend) {
					var m;
					var events;
					var existing;

					if (typeof listener !== "function") {
						throw new TypeError(
							'The "listener" argument must be of type Function. Received type ' +
								typeof listener
						);
					}

					events = target._events;
					if (events === undefined) {
						events = target._events = Object.create(null);
						target._eventsCount = 0;
					} else {
						// To avoid recursion in the case that type === "newListener"! Before
						// adding it to the listeners, first emit "newListener".
						if (events.newListener !== undefined) {
							target.emit(
								"newListener",
								type,
								listener.listener ? listener.listener : listener
							);

							// Re-assign `events` because a newListener handler could have caused the
							// this._events to be assigned to a new object
							events = target._events;
						}
						existing = events[type];
					}

					if (existing === undefined) {
						// Optimize the case of one listener. Don't need the extra array object.
						existing = events[type] = listener;
						++target._eventsCount;
					} else {
						if (typeof existing === "function") {
							// Adding the second element, need to change to array.
							existing = events[type] = prepend
								? [listener, existing]
								: [existing, listener];
							// If we've already got an array, just append.
						} else if (prepend) {
							existing.unshift(listener);
						} else {
							existing.push(listener);
						}

						// Check for listener leak
						m = $getMaxListeners(target);
						if (m > 0 && existing.length > m && !existing.warned) {
							existing.warned = true;
							// No error code for this since it is a Warning
							// eslint-disable-next-line no-restricted-syntax
							var w = new Error(
								"Possible EventEmitter memory leak detected. " +
									existing.length +
									" " +
									String(type) +
									" listeners " +
									"added. Use emitter.setMaxListeners() to " +
									"increase limit"
							);
							w.name = "MaxListenersExceededWarning";
							w.emitter = target;
							w.type = type;
							w.count = existing.length;
							ProcessEmitWarning(w);
						}
					}

					return target;
				}

				EventEmitter.prototype.addListener = function addListener(
					type,
					listener
				) {
					return _addListener(this, type, listener, false);
				};

				EventEmitter.prototype.on = EventEmitter.prototype.addListener;

				EventEmitter.prototype.prependListener = function prependListener(
					type,
					listener
				) {
					return _addListener(this, type, listener, true);
				};

				function onceWrapper() {
					var args = [];
					for (var i = 0; i < arguments.length; i++)
						args.push(arguments[i]);
					if (!this.fired) {
						this.target.removeListener(this.type, this.wrapFn);
						this.fired = true;
						ReflectApply(this.listener, this.target, args);
					}
				}

				function _onceWrap(target, type, listener) {
					var state = {
						fired: false,
						wrapFn: undefined,
						target: target,
						type: type,
						listener: listener,
					};
					var wrapped = onceWrapper.bind(state);
					wrapped.listener = listener;
					state.wrapFn = wrapped;
					return wrapped;
				}

				EventEmitter.prototype.once = function once(type, listener) {
					if (typeof listener !== "function") {
						throw new TypeError(
							'The "listener" argument must be of type Function. Received type ' +
								typeof listener
						);
					}
					this.on(type, _onceWrap(this, type, listener));
					return this;
				};

				EventEmitter.prototype.prependOnceListener = function prependOnceListener(
					type,
					listener
				) {
					if (typeof listener !== "function") {
						throw new TypeError(
							'The "listener" argument must be of type Function. Received type ' +
								typeof listener
						);
					}
					this.prependListener(type, _onceWrap(this, type, listener));
					return this;
				};

				// Emits a 'removeListener' event if and only if the listener was removed.
				EventEmitter.prototype.removeListener = function removeListener(
					type,
					listener
				) {
					var list, events, position, i, originalListener;

					if (typeof listener !== "function") {
						throw new TypeError(
							'The "listener" argument must be of type Function. Received type ' +
								typeof listener
						);
					}

					events = this._events;
					if (events === undefined) return this;

					list = events[type];
					if (list === undefined) return this;

					if (list === listener || list.listener === listener) {
						if (--this._eventsCount === 0)
							this._events = Object.create(null);
						else {
							delete events[type];
							if (events.removeListener)
								this.emit(
									"removeListener",
									type,
									list.listener || listener
								);
						}
					} else if (typeof list !== "function") {
						position = -1;

						for (i = list.length - 1; i >= 0; i--) {
							if (
								list[i] === listener ||
								list[i].listener === listener
							) {
								originalListener = list[i].listener;
								position = i;
								break;
							}
						}

						if (position < 0) return this;

						if (position === 0) list.shift();
						else {
							spliceOne(list, position);
						}

						if (list.length === 1) events[type] = list[0];

						if (events.removeListener !== undefined)
							this.emit(
								"removeListener",
								type,
								originalListener || listener
							);
					}

					return this;
				};

				EventEmitter.prototype.off =
					EventEmitter.prototype.removeListener;

				EventEmitter.prototype.removeAllListeners = function removeAllListeners(
					type
				) {
					var listeners, events, i;

					events = this._events;
					if (events === undefined) return this;

					// not listening for removeListener, no need to emit
					if (events.removeListener === undefined) {
						if (arguments.length === 0) {
							this._events = Object.create(null);
							this._eventsCount = 0;
						} else if (events[type] !== undefined) {
							if (--this._eventsCount === 0)
								this._events = Object.create(null);
							else delete events[type];
						}
						return this;
					}

					// emit removeListener for all listeners on all events
					if (arguments.length === 0) {
						var keys = Object.keys(events);
						var key;
						for (i = 0; i < keys.length; ++i) {
							key = keys[i];
							if (key === "removeListener") continue;
							this.removeAllListeners(key);
						}
						this.removeAllListeners("removeListener");
						this._events = Object.create(null);
						this._eventsCount = 0;
						return this;
					}

					listeners = events[type];

					if (typeof listeners === "function") {
						this.removeListener(type, listeners);
					} else if (listeners !== undefined) {
						// LIFO order
						for (i = listeners.length - 1; i >= 0; i--) {
							this.removeListener(type, listeners[i]);
						}
					}

					return this;
				};

				function _listeners(target, type, unwrap) {
					var events = target._events;

					if (events === undefined) return [];

					var evlistener = events[type];
					if (evlistener === undefined) return [];

					if (typeof evlistener === "function")
						return unwrap
							? [evlistener.listener || evlistener]
							: [evlistener];

					return unwrap
						? unwrapListeners(evlistener)
						: arrayClone(evlistener, evlistener.length);
				}

				EventEmitter.prototype.listeners = function listeners(type) {
					return _listeners(this, type, true);
				};

				EventEmitter.prototype.rawListeners = function rawListeners(
					type
				) {
					return _listeners(this, type, false);
				};

				EventEmitter.listenerCount = function(emitter, type) {
					if (typeof emitter.listenerCount === "function") {
						return emitter.listenerCount(type);
					} else {
						return listenerCount.call(emitter, type);
					}
				};

				EventEmitter.prototype.listenerCount = listenerCount;
				function listenerCount(type) {
					var events = this._events;

					if (events !== undefined) {
						var evlistener = events[type];

						if (typeof evlistener === "function") {
							return 1;
						} else if (evlistener !== undefined) {
							return evlistener.length;
						}
					}

					return 0;
				}

				EventEmitter.prototype.eventNames = function eventNames() {
					return this._eventsCount > 0
						? ReflectOwnKeys(this._events)
						: [];
				};

				function arrayClone(arr, n) {
					var copy = new Array(n);
					for (var i = 0; i < n; ++i) copy[i] = arr[i];
					return copy;
				}

				function spliceOne(list, index) {
					for (; index + 1 < list.length; index++)
						list[index] = list[index + 1];
					list.pop();
				}

				function unwrapListeners(arr) {
					var ret = new Array(arr.length);
					for (var i = 0; i < ret.length; ++i) {
						ret[i] = arr[i].listener || arr[i];
					}
					return ret;
				}

				/***/
			},

		/***/ "./node_modules/https-browserify/index.js":
			/*!************************************************!*\
  !*** ./node_modules/https-browserify/index.js ***!
  \************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				var http = __webpack_require__(
					/*! http */ "./node_modules/stream-http/index.js"
				);
				var url = __webpack_require__(
					/*! url */ "./node_modules/url/url.js"
				);

				var https = module.exports;

				for (var key in http) {
					if (http.hasOwnProperty(key)) https[key] = http[key];
				}

				https.request = function(params, cb) {
					params = validateParams(params);
					return http.request.call(this, params, cb);
				};

				https.get = function(params, cb) {
					params = validateParams(params);
					return http.get.call(this, params, cb);
				};

				function validateParams(params) {
					if (typeof params === "string") {
						params = url.parse(params);
					}
					if (!params.protocol) {
						params.protocol = "https:";
					}
					if (params.protocol !== "https:") {
						throw new Error(
							'Protocol "' +
								params.protocol +
								'" not supported. Expected "https:"'
						);
					}
					return params;
				}

				/***/
			},

		/***/ "./node_modules/ieee754/index.js":
			/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				exports.read = function(buffer, offset, isLE, mLen, nBytes) {
					var e, m;
					var eLen = nBytes * 8 - mLen - 1;
					var eMax = (1 << eLen) - 1;
					var eBias = eMax >> 1;
					var nBits = -7;
					var i = isLE ? nBytes - 1 : 0;
					var d = isLE ? -1 : 1;
					var s = buffer[offset + i];

					i += d;

					e = s & ((1 << -nBits) - 1);
					s >>= -nBits;
					nBits += eLen;
					for (
						;
						nBits > 0;
						e = e * 256 + buffer[offset + i], i += d, nBits -= 8
					) {}

					m = e & ((1 << -nBits) - 1);
					e >>= -nBits;
					nBits += mLen;
					for (
						;
						nBits > 0;
						m = m * 256 + buffer[offset + i], i += d, nBits -= 8
					) {}

					if (e === 0) {
						e = 1 - eBias;
					} else if (e === eMax) {
						return m ? NaN : (s ? -1 : 1) * Infinity;
					} else {
						m = m + Math.pow(2, mLen);
						e = e - eBias;
					}
					return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
				};

				exports.write = function(
					buffer,
					value,
					offset,
					isLE,
					mLen,
					nBytes
				) {
					var e, m, c;
					var eLen = nBytes * 8 - mLen - 1;
					var eMax = (1 << eLen) - 1;
					var eBias = eMax >> 1;
					var rt =
						mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
					var i = isLE ? 0 : nBytes - 1;
					var d = isLE ? 1 : -1;
					var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

					value = Math.abs(value);

					if (isNaN(value) || value === Infinity) {
						m = isNaN(value) ? 1 : 0;
						e = eMax;
					} else {
						e = Math.floor(Math.log(value) / Math.LN2);
						if (value * (c = Math.pow(2, -e)) < 1) {
							e--;
							c *= 2;
						}
						if (e + eBias >= 1) {
							value += rt / c;
						} else {
							value += rt * Math.pow(2, 1 - eBias);
						}
						if (value * c >= 2) {
							e++;
							c /= 2;
						}

						if (e + eBias >= eMax) {
							m = 0;
							e = eMax;
						} else if (e + eBias >= 1) {
							m = (value * c - 1) * Math.pow(2, mLen);
							e = e + eBias;
						} else {
							m =
								value *
								Math.pow(2, eBias - 1) *
								Math.pow(2, mLen);
							e = 0;
						}
					}

					for (
						;
						mLen >= 8;
						buffer[offset + i] = m & 0xff,
							i += d,
							m /= 256,
							mLen -= 8
					) {}

					e = (e << mLen) | m;
					eLen += mLen;
					for (
						;
						eLen > 0;
						buffer[offset + i] = e & 0xff,
							i += d,
							e /= 256,
							eLen -= 8
					) {}

					buffer[offset + i - d] |= s * 128;
				};

				/***/
			},

		/***/ "./node_modules/inherits/inherits_browser.js":
			/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				if (typeof Object.create === "function") {
					// implementation from standard node.js 'util' module
					module.exports = function inherits(ctor, superCtor) {
						ctor.super_ = superCtor;
						ctor.prototype = Object.create(superCtor.prototype, {
							constructor: {
								value: ctor,
								enumerable: false,
								writable: true,
								configurable: true,
							},
						});
					};
				} else {
					// old school shim for old browsers
					module.exports = function inherits(ctor, superCtor) {
						ctor.super_ = superCtor;
						var TempCtor = function() {};
						TempCtor.prototype = superCtor.prototype;
						ctor.prototype = new TempCtor();
						ctor.prototype.constructor = ctor;
					};
				}

				/***/
			},

		/***/ "./node_modules/isarray/index.js":
			/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				var toString = {}.toString;

				module.exports =
					Array.isArray ||
					function(arr) {
						return toString.call(arr) == "[object Array]";
					};

				/***/
			},

		/***/ "./node_modules/long/src/long.js":
			/*!***************************************!*\
  !*** ./node_modules/long/src/long.js ***!
  \***************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				module.exports = Long;

				/**
				 * wasm optimizations, to do native i64 multiplication and divide
				 */
				var wasm = null;

				try {
					wasm = new WebAssembly.Instance(
						new WebAssembly.Module(
							new Uint8Array([
								0,
								97,
								115,
								109,
								1,
								0,
								0,
								0,
								1,
								13,
								2,
								96,
								0,
								1,
								127,
								96,
								4,
								127,
								127,
								127,
								127,
								1,
								127,
								3,
								7,
								6,
								0,
								1,
								1,
								1,
								1,
								1,
								6,
								6,
								1,
								127,
								1,
								65,
								0,
								11,
								7,
								50,
								6,
								3,
								109,
								117,
								108,
								0,
								1,
								5,
								100,
								105,
								118,
								95,
								115,
								0,
								2,
								5,
								100,
								105,
								118,
								95,
								117,
								0,
								3,
								5,
								114,
								101,
								109,
								95,
								115,
								0,
								4,
								5,
								114,
								101,
								109,
								95,
								117,
								0,
								5,
								8,
								103,
								101,
								116,
								95,
								104,
								105,
								103,
								104,
								0,
								0,
								10,
								191,
								1,
								6,
								4,
								0,
								35,
								0,
								11,
								36,
								1,
								1,
								126,
								32,
								0,
								173,
								32,
								1,
								173,
								66,
								32,
								134,
								132,
								32,
								2,
								173,
								32,
								3,
								173,
								66,
								32,
								134,
								132,
								126,
								34,
								4,
								66,
								32,
								135,
								167,
								36,
								0,
								32,
								4,
								167,
								11,
								36,
								1,
								1,
								126,
								32,
								0,
								173,
								32,
								1,
								173,
								66,
								32,
								134,
								132,
								32,
								2,
								173,
								32,
								3,
								173,
								66,
								32,
								134,
								132,
								127,
								34,
								4,
								66,
								32,
								135,
								167,
								36,
								0,
								32,
								4,
								167,
								11,
								36,
								1,
								1,
								126,
								32,
								0,
								173,
								32,
								1,
								173,
								66,
								32,
								134,
								132,
								32,
								2,
								173,
								32,
								3,
								173,
								66,
								32,
								134,
								132,
								128,
								34,
								4,
								66,
								32,
								135,
								167,
								36,
								0,
								32,
								4,
								167,
								11,
								36,
								1,
								1,
								126,
								32,
								0,
								173,
								32,
								1,
								173,
								66,
								32,
								134,
								132,
								32,
								2,
								173,
								32,
								3,
								173,
								66,
								32,
								134,
								132,
								129,
								34,
								4,
								66,
								32,
								135,
								167,
								36,
								0,
								32,
								4,
								167,
								11,
								36,
								1,
								1,
								126,
								32,
								0,
								173,
								32,
								1,
								173,
								66,
								32,
								134,
								132,
								32,
								2,
								173,
								32,
								3,
								173,
								66,
								32,
								134,
								132,
								130,
								34,
								4,
								66,
								32,
								135,
								167,
								36,
								0,
								32,
								4,
								167,
								11,
							])
						),
						{}
					).exports;
				} catch (e) {
					// no wasm support :(
				}

				/**
				 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
				 *  See the from* functions below for more convenient ways of constructing Longs.
				 * @exports Long
				 * @class A Long class for representing a 64 bit two's-complement integer value.
				 * @param {number} low The low (signed) 32 bits of the long
				 * @param {number} high The high (signed) 32 bits of the long
				 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
				 * @constructor
				 */
				function Long(low, high, unsigned) {
					/**
					 * The low 32 bits as a signed value.
					 * @type {number}
					 */
					this.low = low | 0;

					/**
					 * The high 32 bits as a signed value.
					 * @type {number}
					 */
					this.high = high | 0;

					/**
					 * Whether unsigned or not.
					 * @type {boolean}
					 */
					this.unsigned = !!unsigned;
				}

				// The internal representation of a long is the two given signed, 32-bit values.
				// We use 32-bit pieces because these are the size of integers on which
				// Javascript performs bit-operations.  For operations like addition and
				// multiplication, we split each number into 16 bit pieces, which can easily be
				// multiplied within Javascript's floating-point representation without overflow
				// or change in sign.
				//
				// In the algorithms below, we frequently reduce the negative case to the
				// positive case by negating the input(s) and then post-processing the result.
				// Note that we must ALWAYS check specially whether those values are MIN_VALUE
				// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
				// a positive number, it overflows back into a negative).  Not handling this
				// case would often result in infinite recursion.
				//
				// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
				// methods on which they depend.

				/**
				 * An indicator used to reliably determine if an object is a Long or not.
				 * @type {boolean}
				 * @const
				 * @private
				 */
				Long.prototype.__isLong__;

				Object.defineProperty(Long.prototype, "__isLong__", {
					value: true,
				});

				/**
				 * @function
				 * @param {*} obj Object
				 * @returns {boolean}
				 * @inner
				 */
				function isLong(obj) {
					return (obj && obj["__isLong__"]) === true;
				}

				/**
				 * Tests if the specified object is a Long.
				 * @function
				 * @param {*} obj Object
				 * @returns {boolean}
				 */
				Long.isLong = isLong;

				/**
				 * A cache of the Long representations of small integer values.
				 * @type {!Object}
				 * @inner
				 */
				var INT_CACHE = {};

				/**
				 * A cache of the Long representations of small unsigned integer values.
				 * @type {!Object}
				 * @inner
				 */
				var UINT_CACHE = {};

				/**
				 * @param {number} value
				 * @param {boolean=} unsigned
				 * @returns {!Long}
				 * @inner
				 */
				function fromInt(value, unsigned) {
					var obj, cachedObj, cache;
					if (unsigned) {
						value >>>= 0;
						if ((cache = 0 <= value && value < 256)) {
							cachedObj = UINT_CACHE[value];
							if (cachedObj) return cachedObj;
						}
						obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
						if (cache) UINT_CACHE[value] = obj;
						return obj;
					} else {
						value |= 0;
						if ((cache = -128 <= value && value < 128)) {
							cachedObj = INT_CACHE[value];
							if (cachedObj) return cachedObj;
						}
						obj = fromBits(value, value < 0 ? -1 : 0, false);
						if (cache) INT_CACHE[value] = obj;
						return obj;
					}
				}

				/**
				 * Returns a Long representing the given 32 bit integer value.
				 * @function
				 * @param {number} value The 32 bit integer in question
				 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
				 * @returns {!Long} The corresponding Long value
				 */
				Long.fromInt = fromInt;

				/**
				 * @param {number} value
				 * @param {boolean=} unsigned
				 * @returns {!Long}
				 * @inner
				 */
				function fromNumber(value, unsigned) {
					if (isNaN(value)) return unsigned ? UZERO : ZERO;
					if (unsigned) {
						if (value < 0) return UZERO;
						if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;
					} else {
						if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;
						if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;
					}
					if (value < 0) return fromNumber(-value, unsigned).neg();
					return fromBits(
						value % TWO_PWR_32_DBL | 0,
						(value / TWO_PWR_32_DBL) | 0,
						unsigned
					);
				}

				/**
				 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
				 * @function
				 * @param {number} value The number in question
				 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
				 * @returns {!Long} The corresponding Long value
				 */
				Long.fromNumber = fromNumber;

				/**
				 * @param {number} lowBits
				 * @param {number} highBits
				 * @param {boolean=} unsigned
				 * @returns {!Long}
				 * @inner
				 */
				function fromBits(lowBits, highBits, unsigned) {
					return new Long(lowBits, highBits, unsigned);
				}

				/**
				 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
				 *  assumed to use 32 bits.
				 * @function
				 * @param {number} lowBits The low 32 bits
				 * @param {number} highBits The high 32 bits
				 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
				 * @returns {!Long} The corresponding Long value
				 */
				Long.fromBits = fromBits;

				/**
				 * @function
				 * @param {number} base
				 * @param {number} exponent
				 * @returns {number}
				 * @inner
				 */
				var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

				/**
				 * @param {string} str
				 * @param {(boolean|number)=} unsigned
				 * @param {number=} radix
				 * @returns {!Long}
				 * @inner
				 */
				function fromString(str, unsigned, radix) {
					if (str.length === 0) throw Error("empty string");
					if (
						str === "NaN" ||
						str === "Infinity" ||
						str === "+Infinity" ||
						str === "-Infinity"
					)
						return ZERO;
					if (typeof unsigned === "number") {
						// For goog.math.long compatibility
						(radix = unsigned), (unsigned = false);
					} else {
						unsigned = !!unsigned;
					}
					radix = radix || 10;
					if (radix < 2 || 36 < radix) throw RangeError("radix");

					var p;
					if ((p = str.indexOf("-")) > 0)
						throw Error("interior hyphen");
					else if (p === 0) {
						return fromString(
							str.substring(1),
							unsigned,
							radix
						).neg();
					}

					// Do several (8) digits each time through the loop, so as to
					// minimize the calls to the very expensive emulated div.
					var radixToPower = fromNumber(pow_dbl(radix, 8));

					var result = ZERO;
					for (var i = 0; i < str.length; i += 8) {
						var size = Math.min(8, str.length - i),
							value = parseInt(str.substring(i, i + size), radix);
						if (size < 8) {
							var power = fromNumber(pow_dbl(radix, size));
							result = result.mul(power).add(fromNumber(value));
						} else {
							result = result.mul(radixToPower);
							result = result.add(fromNumber(value));
						}
					}
					result.unsigned = unsigned;
					return result;
				}

				/**
				 * Returns a Long representation of the given string, written using the specified radix.
				 * @function
				 * @param {string} str The textual representation of the Long
				 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
				 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
				 * @returns {!Long} The corresponding Long value
				 */
				Long.fromString = fromString;

				/**
				 * @function
				 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
				 * @param {boolean=} unsigned
				 * @returns {!Long}
				 * @inner
				 */
				function fromValue(val, unsigned) {
					if (typeof val === "number")
						return fromNumber(val, unsigned);
					if (typeof val === "string")
						return fromString(val, unsigned);
					// Throws for non-objects, converts non-instanceof Long:
					return fromBits(
						val.low,
						val.high,
						typeof unsigned === "boolean" ? unsigned : val.unsigned
					);
				}

				/**
				 * Converts the specified value to a Long using the appropriate from* function for its type.
				 * @function
				 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
				 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
				 * @returns {!Long}
				 */
				Long.fromValue = fromValue;

				// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
				// no runtime penalty for these.

				/**
				 * @type {number}
				 * @const
				 * @inner
				 */
				var TWO_PWR_16_DBL = 1 << 16;

				/**
				 * @type {number}
				 * @const
				 * @inner
				 */
				var TWO_PWR_24_DBL = 1 << 24;

				/**
				 * @type {number}
				 * @const
				 * @inner
				 */
				var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

				/**
				 * @type {number}
				 * @const
				 * @inner
				 */
				var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

				/**
				 * @type {number}
				 * @const
				 * @inner
				 */
				var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

				/**
				 * @type {!Long}
				 * @const
				 * @inner
				 */
				var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

				/**
				 * @type {!Long}
				 * @inner
				 */
				var ZERO = fromInt(0);

				/**
				 * Signed zero.
				 * @type {!Long}
				 */
				Long.ZERO = ZERO;

				/**
				 * @type {!Long}
				 * @inner
				 */
				var UZERO = fromInt(0, true);

				/**
				 * Unsigned zero.
				 * @type {!Long}
				 */
				Long.UZERO = UZERO;

				/**
				 * @type {!Long}
				 * @inner
				 */
				var ONE = fromInt(1);

				/**
				 * Signed one.
				 * @type {!Long}
				 */
				Long.ONE = ONE;

				/**
				 * @type {!Long}
				 * @inner
				 */
				var UONE = fromInt(1, true);

				/**
				 * Unsigned one.
				 * @type {!Long}
				 */
				Long.UONE = UONE;

				/**
				 * @type {!Long}
				 * @inner
				 */
				var NEG_ONE = fromInt(-1);

				/**
				 * Signed negative one.
				 * @type {!Long}
				 */
				Long.NEG_ONE = NEG_ONE;

				/**
				 * @type {!Long}
				 * @inner
				 */
				var MAX_VALUE = fromBits(0xffffffff | 0, 0x7fffffff | 0, false);

				/**
				 * Maximum signed value.
				 * @type {!Long}
				 */
				Long.MAX_VALUE = MAX_VALUE;

				/**
				 * @type {!Long}
				 * @inner
				 */
				var MAX_UNSIGNED_VALUE = fromBits(
					0xffffffff | 0,
					0xffffffff | 0,
					true
				);

				/**
				 * Maximum unsigned value.
				 * @type {!Long}
				 */
				Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

				/**
				 * @type {!Long}
				 * @inner
				 */
				var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);

				/**
				 * Minimum signed value.
				 * @type {!Long}
				 */
				Long.MIN_VALUE = MIN_VALUE;

				/**
				 * @alias Long.prototype
				 * @inner
				 */
				var LongPrototype = Long.prototype;

				/**
				 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
				 * @returns {number}
				 */
				LongPrototype.toInt = function toInt() {
					return this.unsigned ? this.low >>> 0 : this.low;
				};

				/**
				 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
				 * @returns {number}
				 */
				LongPrototype.toNumber = function toNumber() {
					if (this.unsigned)
						return (
							(this.high >>> 0) * TWO_PWR_32_DBL +
							(this.low >>> 0)
						);
					return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
				};

				/**
				 * Converts the Long to a string written in the specified radix.
				 * @param {number=} radix Radix (2-36), defaults to 10
				 * @returns {string}
				 * @override
				 * @throws {RangeError} If `radix` is out of range
				 */
				LongPrototype.toString = function toString(radix) {
					radix = radix || 10;
					if (radix < 2 || 36 < radix) throw RangeError("radix");
					if (this.isZero()) return "0";
					if (this.isNegative()) {
						// Unsigned Longs are never negative
						if (this.eq(MIN_VALUE)) {
							// We need to change the Long value before it can be negated, so we remove
							// the bottom-most digit in this base and then recurse to do the rest.
							var radixLong = fromNumber(radix),
								div = this.div(radixLong),
								rem1 = div.mul(radixLong).sub(this);
							return (
								div.toString(radix) +
								rem1.toInt().toString(radix)
							);
						} else return "-" + this.neg().toString(radix);
					}

					// Do several (6) digits each time through the loop, so as to
					// minimize the calls to the very expensive emulated div.
					var radixToPower = fromNumber(
							pow_dbl(radix, 6),
							this.unsigned
						),
						rem = this;
					var result = "";
					while (true) {
						var remDiv = rem.div(radixToPower),
							intval =
								rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
							digits = intval.toString(radix);
						rem = remDiv;
						if (rem.isZero()) return digits + result;
						else {
							while (digits.length < 6) digits = "0" + digits;
							result = "" + digits + result;
						}
					}
				};

				/**
				 * Gets the high 32 bits as a signed integer.
				 * @returns {number} Signed high bits
				 */
				LongPrototype.getHighBits = function getHighBits() {
					return this.high;
				};

				/**
				 * Gets the high 32 bits as an unsigned integer.
				 * @returns {number} Unsigned high bits
				 */
				LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
					return this.high >>> 0;
				};

				/**
				 * Gets the low 32 bits as a signed integer.
				 * @returns {number} Signed low bits
				 */
				LongPrototype.getLowBits = function getLowBits() {
					return this.low;
				};

				/**
				 * Gets the low 32 bits as an unsigned integer.
				 * @returns {number} Unsigned low bits
				 */
				LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
					return this.low >>> 0;
				};

				/**
				 * Gets the number of bits needed to represent the absolute value of this Long.
				 * @returns {number}
				 */
				LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
					if (this.isNegative())
						// Unsigned Longs are never negative
						return this.eq(MIN_VALUE)
							? 64
							: this.neg().getNumBitsAbs();
					var val = this.high != 0 ? this.high : this.low;
					for (var bit = 31; bit > 0; bit--)
						if ((val & (1 << bit)) != 0) break;
					return this.high != 0 ? bit + 33 : bit + 1;
				};

				/**
				 * Tests if this Long's value equals zero.
				 * @returns {boolean}
				 */
				LongPrototype.isZero = function isZero() {
					return this.high === 0 && this.low === 0;
				};

				/**
				 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
				 * @returns {boolean}
				 */
				LongPrototype.eqz = LongPrototype.isZero;

				/**
				 * Tests if this Long's value is negative.
				 * @returns {boolean}
				 */
				LongPrototype.isNegative = function isNegative() {
					return !this.unsigned && this.high < 0;
				};

				/**
				 * Tests if this Long's value is positive.
				 * @returns {boolean}
				 */
				LongPrototype.isPositive = function isPositive() {
					return this.unsigned || this.high >= 0;
				};

				/**
				 * Tests if this Long's value is odd.
				 * @returns {boolean}
				 */
				LongPrototype.isOdd = function isOdd() {
					return (this.low & 1) === 1;
				};

				/**
				 * Tests if this Long's value is even.
				 * @returns {boolean}
				 */
				LongPrototype.isEven = function isEven() {
					return (this.low & 1) === 0;
				};

				/**
				 * Tests if this Long's value equals the specified's.
				 * @param {!Long|number|string} other Other value
				 * @returns {boolean}
				 */
				LongPrototype.equals = function equals(other) {
					if (!isLong(other)) other = fromValue(other);
					if (
						this.unsigned !== other.unsigned &&
						this.high >>> 31 === 1 &&
						other.high >>> 31 === 1
					)
						return false;
					return this.high === other.high && this.low === other.low;
				};

				/**
				 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
				 * @function
				 * @param {!Long|number|string} other Other value
				 * @returns {boolean}
				 */
				LongPrototype.eq = LongPrototype.equals;

				/**
				 * Tests if this Long's value differs from the specified's.
				 * @param {!Long|number|string} other Other value
				 * @returns {boolean}
				 */
				LongPrototype.notEquals = function notEquals(other) {
					return !this.eq(/* validates */ other);
				};

				/**
				 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
				 * @function
				 * @param {!Long|number|string} other Other value
				 * @returns {boolean}
				 */
				LongPrototype.neq = LongPrototype.notEquals;

				/**
				 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
				 * @function
				 * @param {!Long|number|string} other Other value
				 * @returns {boolean}
				 */
				LongPrototype.ne = LongPrototype.notEquals;

				/**
				 * Tests if this Long's value is less than the specified's.
				 * @param {!Long|number|string} other Other value
				 * @returns {boolean}
				 */
				LongPrototype.lessThan = function lessThan(other) {
					return this.comp(/* validates */ other) < 0;
				};

				/**
				 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
				 * @function
				 * @param {!Long|number|string} other Other value
				 * @returns {boolean}
				 */
				LongPrototype.lt = LongPrototype.lessThan;

				/**
				 * Tests if this Long's value is less than or equal the specified's.
				 * @param {!Long|number|string} other Other value
				 * @returns {boolean}
				 */
				LongPrototype.lessThanOrEqual = function lessThanOrEqual(
					other
				) {
					return this.comp(/* validates */ other) <= 0;
				};

				/**
				 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
				 * @function
				 * @param {!Long|number|string} other Other value
				 * @returns {boolean}
				 */
				LongPrototype.lte = LongPrototype.lessThanOrEqual;

				/**
				 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
				 * @function
				 * @param {!Long|number|string} other Other value
				 * @returns {boolean}
				 */
				LongPrototype.le = LongPrototype.lessThanOrEqual;

				/**
				 * Tests if this Long's value is greater than the specified's.
				 * @param {!Long|number|string} other Other value
				 * @returns {boolean}
				 */
				LongPrototype.greaterThan = function greaterThan(other) {
					return this.comp(/* validates */ other) > 0;
				};

				/**
				 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
				 * @function
				 * @param {!Long|number|string} other Other value
				 * @returns {boolean}
				 */
				LongPrototype.gt = LongPrototype.greaterThan;

				/**
				 * Tests if this Long's value is greater than or equal the specified's.
				 * @param {!Long|number|string} other Other value
				 * @returns {boolean}
				 */
				LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(
					other
				) {
					return this.comp(/* validates */ other) >= 0;
				};

				/**
				 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
				 * @function
				 * @param {!Long|number|string} other Other value
				 * @returns {boolean}
				 */
				LongPrototype.gte = LongPrototype.greaterThanOrEqual;

				/**
				 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
				 * @function
				 * @param {!Long|number|string} other Other value
				 * @returns {boolean}
				 */
				LongPrototype.ge = LongPrototype.greaterThanOrEqual;

				/**
				 * Compares this Long's value with the specified's.
				 * @param {!Long|number|string} other Other value
				 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
				 *  if the given one is greater
				 */
				LongPrototype.compare = function compare(other) {
					if (!isLong(other)) other = fromValue(other);
					if (this.eq(other)) return 0;
					var thisNeg = this.isNegative(),
						otherNeg = other.isNegative();
					if (thisNeg && !otherNeg) return -1;
					if (!thisNeg && otherNeg) return 1;
					// At this point the sign bits are the same
					if (!this.unsigned)
						return this.sub(other).isNegative() ? -1 : 1;
					// Both are positive if at least one is unsigned
					return other.high >>> 0 > this.high >>> 0 ||
						(other.high === this.high &&
							other.low >>> 0 > this.low >>> 0)
						? -1
						: 1;
				};

				/**
				 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
				 * @function
				 * @param {!Long|number|string} other Other value
				 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
				 *  if the given one is greater
				 */
				LongPrototype.comp = LongPrototype.compare;

				/**
				 * Negates this Long's value.
				 * @returns {!Long} Negated Long
				 */
				LongPrototype.negate = function negate() {
					if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;
					return this.not().add(ONE);
				};

				/**
				 * Negates this Long's value. This is an alias of {@link Long#negate}.
				 * @function
				 * @returns {!Long} Negated Long
				 */
				LongPrototype.neg = LongPrototype.negate;

				/**
				 * Returns the sum of this and the specified Long.
				 * @param {!Long|number|string} addend Addend
				 * @returns {!Long} Sum
				 */
				LongPrototype.add = function add(addend) {
					if (!isLong(addend)) addend = fromValue(addend);

					// Divide each number into 4 chunks of 16 bits, and then sum the chunks.

					var a48 = this.high >>> 16;
					var a32 = this.high & 0xffff;
					var a16 = this.low >>> 16;
					var a00 = this.low & 0xffff;

					var b48 = addend.high >>> 16;
					var b32 = addend.high & 0xffff;
					var b16 = addend.low >>> 16;
					var b00 = addend.low & 0xffff;

					var c48 = 0,
						c32 = 0,
						c16 = 0,
						c00 = 0;
					c00 += a00 + b00;
					c16 += c00 >>> 16;
					c00 &= 0xffff;
					c16 += a16 + b16;
					c32 += c16 >>> 16;
					c16 &= 0xffff;
					c32 += a32 + b32;
					c48 += c32 >>> 16;
					c32 &= 0xffff;
					c48 += a48 + b48;
					c48 &= 0xffff;
					return fromBits(
						(c16 << 16) | c00,
						(c48 << 16) | c32,
						this.unsigned
					);
				};

				/**
				 * Returns the difference of this and the specified Long.
				 * @param {!Long|number|string} subtrahend Subtrahend
				 * @returns {!Long} Difference
				 */
				LongPrototype.subtract = function subtract(subtrahend) {
					if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);
					return this.add(subtrahend.neg());
				};

				/**
				 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
				 * @function
				 * @param {!Long|number|string} subtrahend Subtrahend
				 * @returns {!Long} Difference
				 */
				LongPrototype.sub = LongPrototype.subtract;

				/**
				 * Returns the product of this and the specified Long.
				 * @param {!Long|number|string} multiplier Multiplier
				 * @returns {!Long} Product
				 */
				LongPrototype.multiply = function multiply(multiplier) {
					if (this.isZero()) return ZERO;
					if (!isLong(multiplier)) multiplier = fromValue(multiplier);

					// use wasm support if present
					if (wasm) {
						var low = wasm.mul(
							this.low,
							this.high,
							multiplier.low,
							multiplier.high
						);
						return fromBits(low, wasm.get_high(), this.unsigned);
					}

					if (multiplier.isZero()) return ZERO;
					if (this.eq(MIN_VALUE))
						return multiplier.isOdd() ? MIN_VALUE : ZERO;
					if (multiplier.eq(MIN_VALUE))
						return this.isOdd() ? MIN_VALUE : ZERO;

					if (this.isNegative()) {
						if (multiplier.isNegative())
							return this.neg().mul(multiplier.neg());
						else
							return this.neg()
								.mul(multiplier)
								.neg();
					} else if (multiplier.isNegative())
						return this.mul(multiplier.neg()).neg();

					// If both longs are small, use float multiplication
					if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
						return fromNumber(
							this.toNumber() * multiplier.toNumber(),
							this.unsigned
						);

					// Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
					// We can skip products that would overflow.

					var a48 = this.high >>> 16;
					var a32 = this.high & 0xffff;
					var a16 = this.low >>> 16;
					var a00 = this.low & 0xffff;

					var b48 = multiplier.high >>> 16;
					var b32 = multiplier.high & 0xffff;
					var b16 = multiplier.low >>> 16;
					var b00 = multiplier.low & 0xffff;

					var c48 = 0,
						c32 = 0,
						c16 = 0,
						c00 = 0;
					c00 += a00 * b00;
					c16 += c00 >>> 16;
					c00 &= 0xffff;
					c16 += a16 * b00;
					c32 += c16 >>> 16;
					c16 &= 0xffff;
					c16 += a00 * b16;
					c32 += c16 >>> 16;
					c16 &= 0xffff;
					c32 += a32 * b00;
					c48 += c32 >>> 16;
					c32 &= 0xffff;
					c32 += a16 * b16;
					c48 += c32 >>> 16;
					c32 &= 0xffff;
					c32 += a00 * b32;
					c48 += c32 >>> 16;
					c32 &= 0xffff;
					c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
					c48 &= 0xffff;
					return fromBits(
						(c16 << 16) | c00,
						(c48 << 16) | c32,
						this.unsigned
					);
				};

				/**
				 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
				 * @function
				 * @param {!Long|number|string} multiplier Multiplier
				 * @returns {!Long} Product
				 */
				LongPrototype.mul = LongPrototype.multiply;

				/**
				 * Returns this Long divided by the specified. The result is signed if this Long is signed or
				 *  unsigned if this Long is unsigned.
				 * @param {!Long|number|string} divisor Divisor
				 * @returns {!Long} Quotient
				 */
				LongPrototype.divide = function divide(divisor) {
					if (!isLong(divisor)) divisor = fromValue(divisor);
					if (divisor.isZero()) throw Error("division by zero");

					// use wasm support if present
					if (wasm) {
						// guard against signed division overflow: the largest
						// negative number / -1 would be 1 larger than the largest
						// positive number, due to two's complement.
						if (
							!this.unsigned &&
							this.high === -0x80000000 &&
							divisor.low === -1 &&
							divisor.high === -1
						) {
							// be consistent with non-wasm code path
							return this;
						}
						var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
							this.low,
							this.high,
							divisor.low,
							divisor.high
						);
						return fromBits(low, wasm.get_high(), this.unsigned);
					}

					if (this.isZero()) return this.unsigned ? UZERO : ZERO;
					var approx, rem, res;
					if (!this.unsigned) {
						// This section is only relevant for signed longs and is derived from the
						// closure library as a whole.
						if (this.eq(MIN_VALUE)) {
							if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
								return MIN_VALUE;
							// recall that -MIN_VALUE == MIN_VALUE
							else if (divisor.eq(MIN_VALUE)) return ONE;
							else {
								// At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
								var halfThis = this.shr(1);
								approx = halfThis.div(divisor).shl(1);
								if (approx.eq(ZERO)) {
									return divisor.isNegative() ? ONE : NEG_ONE;
								} else {
									rem = this.sub(divisor.mul(approx));
									res = approx.add(rem.div(divisor));
									return res;
								}
							}
						} else if (divisor.eq(MIN_VALUE))
							return this.unsigned ? UZERO : ZERO;
						if (this.isNegative()) {
							if (divisor.isNegative())
								return this.neg().div(divisor.neg());
							return this.neg()
								.div(divisor)
								.neg();
						} else if (divisor.isNegative())
							return this.div(divisor.neg()).neg();
						res = ZERO;
					} else {
						// The algorithm below has not been made for unsigned longs. It's therefore
						// required to take special care of the MSB prior to running it.
						if (!divisor.unsigned) divisor = divisor.toUnsigned();
						if (divisor.gt(this)) return UZERO;
						if (divisor.gt(this.shru(1)))
							// 15 >>> 1 = 7 ; with divisor = 8 ; true
							return UONE;
						res = UZERO;
					}

					// Repeat the following until the remainder is less than other:  find a
					// floating-point that approximates remainder / other *from below*, add this
					// into the result, and subtract it from the remainder.  It is critical that
					// the approximate value is less than or equal to the real value so that the
					// remainder never becomes negative.
					rem = this;
					while (rem.gte(divisor)) {
						// Approximate the result of division. This may be a little greater or
						// smaller than the actual value.
						approx = Math.max(
							1,
							Math.floor(rem.toNumber() / divisor.toNumber())
						);

						// We will tweak the approximate result by changing it in the 48-th digit or
						// the smallest non-fractional digit, whichever is larger.
						var log2 = Math.ceil(Math.log(approx) / Math.LN2),
							delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),
							// Decrease the approximation until it is smaller than the remainder.  Note
							// that if it is too large, the product overflows and is negative.
							approxRes = fromNumber(approx),
							approxRem = approxRes.mul(divisor);
						while (approxRem.isNegative() || approxRem.gt(rem)) {
							approx -= delta;
							approxRes = fromNumber(approx, this.unsigned);
							approxRem = approxRes.mul(divisor);
						}

						// We know the answer can't be zero... and actually, zero would cause
						// infinite recursion since we would make no progress.
						if (approxRes.isZero()) approxRes = ONE;

						res = res.add(approxRes);
						rem = rem.sub(approxRem);
					}
					return res;
				};

				/**
				 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
				 * @function
				 * @param {!Long|number|string} divisor Divisor
				 * @returns {!Long} Quotient
				 */
				LongPrototype.div = LongPrototype.divide;

				/**
				 * Returns this Long modulo the specified.
				 * @param {!Long|number|string} divisor Divisor
				 * @returns {!Long} Remainder
				 */
				LongPrototype.modulo = function modulo(divisor) {
					if (!isLong(divisor)) divisor = fromValue(divisor);

					// use wasm support if present
					if (wasm) {
						var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
							this.low,
							this.high,
							divisor.low,
							divisor.high
						);
						return fromBits(low, wasm.get_high(), this.unsigned);
					}

					return this.sub(this.div(divisor).mul(divisor));
				};

				/**
				 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
				 * @function
				 * @param {!Long|number|string} divisor Divisor
				 * @returns {!Long} Remainder
				 */
				LongPrototype.mod = LongPrototype.modulo;

				/**
				 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
				 * @function
				 * @param {!Long|number|string} divisor Divisor
				 * @returns {!Long} Remainder
				 */
				LongPrototype.rem = LongPrototype.modulo;

				/**
				 * Returns the bitwise NOT of this Long.
				 * @returns {!Long}
				 */
				LongPrototype.not = function not() {
					return fromBits(~this.low, ~this.high, this.unsigned);
				};

				/**
				 * Returns the bitwise AND of this Long and the specified.
				 * @param {!Long|number|string} other Other Long
				 * @returns {!Long}
				 */
				LongPrototype.and = function and(other) {
					if (!isLong(other)) other = fromValue(other);
					return fromBits(
						this.low & other.low,
						this.high & other.high,
						this.unsigned
					);
				};

				/**
				 * Returns the bitwise OR of this Long and the specified.
				 * @param {!Long|number|string} other Other Long
				 * @returns {!Long}
				 */
				LongPrototype.or = function or(other) {
					if (!isLong(other)) other = fromValue(other);
					return fromBits(
						this.low | other.low,
						this.high | other.high,
						this.unsigned
					);
				};

				/**
				 * Returns the bitwise XOR of this Long and the given one.
				 * @param {!Long|number|string} other Other Long
				 * @returns {!Long}
				 */
				LongPrototype.xor = function xor(other) {
					if (!isLong(other)) other = fromValue(other);
					return fromBits(
						this.low ^ other.low,
						this.high ^ other.high,
						this.unsigned
					);
				};

				/**
				 * Returns this Long with bits shifted to the left by the given amount.
				 * @param {number|!Long} numBits Number of bits
				 * @returns {!Long} Shifted Long
				 */
				LongPrototype.shiftLeft = function shiftLeft(numBits) {
					if (isLong(numBits)) numBits = numBits.toInt();
					if ((numBits &= 63) === 0) return this;
					else if (numBits < 32)
						return fromBits(
							this.low << numBits,
							(this.high << numBits) |
								(this.low >>> (32 - numBits)),
							this.unsigned
						);
					else
						return fromBits(
							0,
							this.low << (numBits - 32),
							this.unsigned
						);
				};

				/**
				 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
				 * @function
				 * @param {number|!Long} numBits Number of bits
				 * @returns {!Long} Shifted Long
				 */
				LongPrototype.shl = LongPrototype.shiftLeft;

				/**
				 * Returns this Long with bits arithmetically shifted to the right by the given amount.
				 * @param {number|!Long} numBits Number of bits
				 * @returns {!Long} Shifted Long
				 */
				LongPrototype.shiftRight = function shiftRight(numBits) {
					if (isLong(numBits)) numBits = numBits.toInt();
					if ((numBits &= 63) === 0) return this;
					else if (numBits < 32)
						return fromBits(
							(this.low >>> numBits) |
								(this.high << (32 - numBits)),
							this.high >> numBits,
							this.unsigned
						);
					else
						return fromBits(
							this.high >> (numBits - 32),
							this.high >= 0 ? 0 : -1,
							this.unsigned
						);
				};

				/**
				 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
				 * @function
				 * @param {number|!Long} numBits Number of bits
				 * @returns {!Long} Shifted Long
				 */
				LongPrototype.shr = LongPrototype.shiftRight;

				/**
				 * Returns this Long with bits logically shifted to the right by the given amount.
				 * @param {number|!Long} numBits Number of bits
				 * @returns {!Long} Shifted Long
				 */
				LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(
					numBits
				) {
					if (isLong(numBits)) numBits = numBits.toInt();
					numBits &= 63;
					if (numBits === 0) return this;
					else {
						var high = this.high;
						if (numBits < 32) {
							var low = this.low;
							return fromBits(
								(low >>> numBits) | (high << (32 - numBits)),
								high >>> numBits,
								this.unsigned
							);
						} else if (numBits === 32)
							return fromBits(high, 0, this.unsigned);
						else
							return fromBits(
								high >>> (numBits - 32),
								0,
								this.unsigned
							);
					}
				};

				/**
				 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
				 * @function
				 * @param {number|!Long} numBits Number of bits
				 * @returns {!Long} Shifted Long
				 */
				LongPrototype.shru = LongPrototype.shiftRightUnsigned;

				/**
				 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
				 * @function
				 * @param {number|!Long} numBits Number of bits
				 * @returns {!Long} Shifted Long
				 */
				LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

				/**
				 * Converts this Long to signed.
				 * @returns {!Long} Signed long
				 */
				LongPrototype.toSigned = function toSigned() {
					if (!this.unsigned) return this;
					return fromBits(this.low, this.high, false);
				};

				/**
				 * Converts this Long to unsigned.
				 * @returns {!Long} Unsigned long
				 */
				LongPrototype.toUnsigned = function toUnsigned() {
					if (this.unsigned) return this;
					return fromBits(this.low, this.high, true);
				};

				/**
				 * Converts this Long to its byte representation.
				 * @param {boolean=} le Whether little or big endian, defaults to big endian
				 * @returns {!Array.<number>} Byte representation
				 */
				LongPrototype.toBytes = function toBytes(le) {
					return le ? this.toBytesLE() : this.toBytesBE();
				};

				/**
				 * Converts this Long to its little endian byte representation.
				 * @returns {!Array.<number>} Little endian byte representation
				 */
				LongPrototype.toBytesLE = function toBytesLE() {
					var hi = this.high,
						lo = this.low;
					return [
						lo & 0xff,
						(lo >>> 8) & 0xff,
						(lo >>> 16) & 0xff,
						lo >>> 24,
						hi & 0xff,
						(hi >>> 8) & 0xff,
						(hi >>> 16) & 0xff,
						hi >>> 24,
					];
				};

				/**
				 * Converts this Long to its big endian byte representation.
				 * @returns {!Array.<number>} Big endian byte representation
				 */
				LongPrototype.toBytesBE = function toBytesBE() {
					var hi = this.high,
						lo = this.low;
					return [
						hi >>> 24,
						(hi >>> 16) & 0xff,
						(hi >>> 8) & 0xff,
						hi & 0xff,
						lo >>> 24,
						(lo >>> 16) & 0xff,
						(lo >>> 8) & 0xff,
						lo & 0xff,
					];
				};

				/**
				 * Creates a Long from its byte representation.
				 * @param {!Array.<number>} bytes Byte representation
				 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
				 * @param {boolean=} le Whether little or big endian, defaults to big endian
				 * @returns {Long} The corresponding Long value
				 */
				Long.fromBytes = function fromBytes(bytes, unsigned, le) {
					return le
						? Long.fromBytesLE(bytes, unsigned)
						: Long.fromBytesBE(bytes, unsigned);
				};

				/**
				 * Creates a Long from its little endian byte representation.
				 * @param {!Array.<number>} bytes Little endian byte representation
				 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
				 * @returns {Long} The corresponding Long value
				 */
				Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
					return new Long(
						bytes[0] |
							(bytes[1] << 8) |
							(bytes[2] << 16) |
							(bytes[3] << 24),
						bytes[4] |
							(bytes[5] << 8) |
							(bytes[6] << 16) |
							(bytes[7] << 24),
						unsigned
					);
				};

				/**
				 * Creates a Long from its big endian byte representation.
				 * @param {!Array.<number>} bytes Big endian byte representation
				 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
				 * @returns {Long} The corresponding Long value
				 */
				Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
					return new Long(
						(bytes[4] << 24) |
							(bytes[5] << 16) |
							(bytes[6] << 8) |
							bytes[7],
						(bytes[0] << 24) |
							(bytes[1] << 16) |
							(bytes[2] << 8) |
							bytes[3],
						unsigned
					);
				};

				/***/
			},

		/***/ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js":
			/*!**************************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/punycode/punycode.js ***!
  \**************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(module, global) {
					var __WEBPACK_AMD_DEFINE_RESULT__; /*! https://mths.be/punycode v1.4.1 by @mathias */
					(function(root) {
						/** Detect free variables */
						var freeExports =
							true && exports && !exports.nodeType && exports;
						var freeModule =
							true && module && !module.nodeType && module;
						var freeGlobal = typeof global == "object" && global;
						if (
							freeGlobal.global === freeGlobal ||
							freeGlobal.window === freeGlobal ||
							freeGlobal.self === freeGlobal
						) {
							root = freeGlobal;
						}

						/**
						 * The `punycode` object.
						 * @name punycode
						 * @type Object
						 */
						var punycode,
							/** Highest positive signed 32-bit float value */
							maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
							/** Bootstring parameters */
							base = 36,
							tMin = 1,
							tMax = 26,
							skew = 38,
							damp = 700,
							initialBias = 72,
							initialN = 128, // 0x80
							delimiter = "-", // '\x2D'
							/** Regular expressions */
							regexPunycode = /^xn--/,
							regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
							regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
							/** Error messages */
							errors = {
								overflow:
									"Overflow: input needs wider integers to process",
								"not-basic":
									"Illegal input >= 0x80 (not a basic code point)",
								"invalid-input": "Invalid input",
							},
							/** Convenience shortcuts */
							baseMinusTMin = base - tMin,
							floor = Math.floor,
							stringFromCharCode = String.fromCharCode,
							/** Temporary variable */
							key;

						/*--------------------------------------------------------------------------*/

						/**
						 * A generic error utility function.
						 * @private
						 * @param {String} type The error type.
						 * @returns {Error} Throws a `RangeError` with the applicable error message.
						 */
						function error(type) {
							throw new RangeError(errors[type]);
						}

						/**
						 * A generic `Array#map` utility function.
						 * @private
						 * @param {Array} array The array to iterate over.
						 * @param {Function} callback The function that gets called for every array
						 * item.
						 * @returns {Array} A new array of values returned by the callback function.
						 */
						function map(array, fn) {
							var length = array.length;
							var result = [];
							while (length--) {
								result[length] = fn(array[length]);
							}
							return result;
						}

						/**
						 * A simple `Array#map`-like wrapper to work with domain name strings or email
						 * addresses.
						 * @private
						 * @param {String} domain The domain name or email address.
						 * @param {Function} callback The function that gets called for every
						 * character.
						 * @returns {Array} A new string of characters returned by the callback
						 * function.
						 */
						function mapDomain(string, fn) {
							var parts = string.split("@");
							var result = "";
							if (parts.length > 1) {
								// In email addresses, only the domain name should be punycoded. Leave
								// the local part (i.e. everything up to `@`) intact.
								result = parts[0] + "@";
								string = parts[1];
							}
							// Avoid `split(regex)` for IE8 compatibility. See #17.
							string = string.replace(regexSeparators, "\x2E");
							var labels = string.split(".");
							var encoded = map(labels, fn).join(".");
							return result + encoded;
						}

						/**
						 * Creates an array containing the numeric code points of each Unicode
						 * character in the string. While JavaScript uses UCS-2 internally,
						 * this function will convert a pair of surrogate halves (each of which
						 * UCS-2 exposes as separate characters) into a single code point,
						 * matching UTF-16.
						 * @see `punycode.ucs2.encode`
						 * @see <https://mathiasbynens.be/notes/javascript-encoding>
						 * @memberOf punycode.ucs2
						 * @name decode
						 * @param {String} string The Unicode input string (UCS-2).
						 * @returns {Array} The new array of code points.
						 */
						function ucs2decode(string) {
							var output = [],
								counter = 0,
								length = string.length,
								value,
								extra;
							while (counter < length) {
								value = string.charCodeAt(counter++);
								if (
									value >= 0xd800 &&
									value <= 0xdbff &&
									counter < length
								) {
									// high surrogate, and there is a next character
									extra = string.charCodeAt(counter++);
									if ((extra & 0xfc00) == 0xdc00) {
										// low surrogate
										output.push(
											((value & 0x3ff) << 10) +
												(extra & 0x3ff) +
												0x10000
										);
									} else {
										// unmatched surrogate; only append this code unit, in case the next
										// code unit is the high surrogate of a surrogate pair
										output.push(value);
										counter--;
									}
								} else {
									output.push(value);
								}
							}
							return output;
						}

						/**
						 * Creates a string based on an array of numeric code points.
						 * @see `punycode.ucs2.decode`
						 * @memberOf punycode.ucs2
						 * @name encode
						 * @param {Array} codePoints The array of numeric code points.
						 * @returns {String} The new Unicode string (UCS-2).
						 */
						function ucs2encode(array) {
							return map(array, function(value) {
								var output = "";
								if (value > 0xffff) {
									value -= 0x10000;
									output += stringFromCharCode(
										((value >>> 10) & 0x3ff) | 0xd800
									);
									value = 0xdc00 | (value & 0x3ff);
								}
								output += stringFromCharCode(value);
								return output;
							}).join("");
						}

						/**
						 * Converts a basic code point into a digit/integer.
						 * @see `digitToBasic()`
						 * @private
						 * @param {Number} codePoint The basic numeric code point value.
						 * @returns {Number} The numeric value of a basic code point (for use in
						 * representing integers) in the range `0` to `base - 1`, or `base` if
						 * the code point does not represent a value.
						 */
						function basicToDigit(codePoint) {
							if (codePoint - 48 < 10) {
								return codePoint - 22;
							}
							if (codePoint - 65 < 26) {
								return codePoint - 65;
							}
							if (codePoint - 97 < 26) {
								return codePoint - 97;
							}
							return base;
						}

						/**
						 * Converts a digit/integer into a basic code point.
						 * @see `basicToDigit()`
						 * @private
						 * @param {Number} digit The numeric value of a basic code point.
						 * @returns {Number} The basic code point whose value (when used for
						 * representing integers) is `digit`, which needs to be in the range
						 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
						 * used; else, the lowercase form is used. The behavior is undefined
						 * if `flag` is non-zero and `digit` has no uppercase form.
						 */
						function digitToBasic(digit, flag) {
							//  0..25 map to ASCII a..z or A..Z
							// 26..35 map to ASCII 0..9
							return (
								digit +
								22 +
								75 * (digit < 26) -
								((flag != 0) << 5)
							);
						}

						/**
						 * Bias adaptation function as per section 3.4 of RFC 3492.
						 * https://tools.ietf.org/html/rfc3492#section-3.4
						 * @private
						 */
						function adapt(delta, numPoints, firstTime) {
							var k = 0;
							delta = firstTime
								? floor(delta / damp)
								: delta >> 1;
							delta += floor(delta / numPoints);
							for (
								;
								/* no initialization */ delta >
								(baseMinusTMin * tMax) >> 1;
								k += base
							) {
								delta = floor(delta / baseMinusTMin);
							}
							return floor(
								k +
									((baseMinusTMin + 1) * delta) /
										(delta + skew)
							);
						}

						/**
						 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
						 * symbols.
						 * @memberOf punycode
						 * @param {String} input The Punycode string of ASCII-only symbols.
						 * @returns {String} The resulting string of Unicode symbols.
						 */
						function decode(input) {
							// Don't use UCS-2
							var output = [],
								inputLength = input.length,
								out,
								i = 0,
								n = initialN,
								bias = initialBias,
								basic,
								j,
								index,
								oldi,
								w,
								k,
								digit,
								t,
								/** Cached calculation results */
								baseMinusT;

							// Handle the basic code points: let `basic` be the number of input code
							// points before the last delimiter, or `0` if there is none, then copy
							// the first basic code points to the output.

							basic = input.lastIndexOf(delimiter);
							if (basic < 0) {
								basic = 0;
							}

							for (j = 0; j < basic; ++j) {
								// if it's not a basic code point
								if (input.charCodeAt(j) >= 0x80) {
									error("not-basic");
								}
								output.push(input.charCodeAt(j));
							}

							// Main decoding loop: start just after the last delimiter if any basic code
							// points were copied; start at the beginning otherwise.

							for (
								index = basic > 0 ? basic + 1 : 0;
								index < inputLength /* no final expression */;

							) {
								// `index` is the index of the next character to be consumed.
								// Decode a generalized variable-length integer into `delta`,
								// which gets added to `i`. The overflow checking is easier
								// if we increase `i` as we go, then subtract off its starting
								// value at the end to obtain `delta`.
								for (
									oldi = i,
										w = 1,
										k = base /* no condition */;
									;
									k += base
								) {
									if (index >= inputLength) {
										error("invalid-input");
									}

									digit = basicToDigit(
										input.charCodeAt(index++)
									);

									if (
										digit >= base ||
										digit > floor((maxInt - i) / w)
									) {
										error("overflow");
									}

									i += digit * w;
									t =
										k <= bias
											? tMin
											: k >= bias + tMax
											? tMax
											: k - bias;

									if (digit < t) {
										break;
									}

									baseMinusT = base - t;
									if (w > floor(maxInt / baseMinusT)) {
										error("overflow");
									}

									w *= baseMinusT;
								}

								out = output.length + 1;
								bias = adapt(i - oldi, out, oldi == 0);

								// `i` was supposed to wrap around from `out` to `0`,
								// incrementing `n` each time, so we'll fix that now:
								if (floor(i / out) > maxInt - n) {
									error("overflow");
								}

								n += floor(i / out);
								i %= out;

								// Insert `n` at position `i` of the output
								output.splice(i++, 0, n);
							}

							return ucs2encode(output);
						}

						/**
						 * Converts a string of Unicode symbols (e.g. a domain name label) to a
						 * Punycode string of ASCII-only symbols.
						 * @memberOf punycode
						 * @param {String} input The string of Unicode symbols.
						 * @returns {String} The resulting Punycode string of ASCII-only symbols.
						 */
						function encode(input) {
							var n,
								delta,
								handledCPCount,
								basicLength,
								bias,
								j,
								m,
								q,
								k,
								t,
								currentValue,
								output = [],
								/** `inputLength` will hold the number of code points in `input`. */
								inputLength,
								/** Cached calculation results */
								handledCPCountPlusOne,
								baseMinusT,
								qMinusT;

							// Convert the input in UCS-2 to Unicode
							input = ucs2decode(input);

							// Cache the length
							inputLength = input.length;

							// Initialize the state
							n = initialN;
							delta = 0;
							bias = initialBias;

							// Handle the basic code points
							for (j = 0; j < inputLength; ++j) {
								currentValue = input[j];
								if (currentValue < 0x80) {
									output.push(
										stringFromCharCode(currentValue)
									);
								}
							}

							handledCPCount = basicLength = output.length;

							// `handledCPCount` is the number of code points that have been handled;
							// `basicLength` is the number of basic code points.

							// Finish the basic string - if it is not empty - with a delimiter
							if (basicLength) {
								output.push(delimiter);
							}

							// Main encoding loop:
							while (handledCPCount < inputLength) {
								// All non-basic code points < n have been handled already. Find the next
								// larger one:
								for (m = maxInt, j = 0; j < inputLength; ++j) {
									currentValue = input[j];
									if (currentValue >= n && currentValue < m) {
										m = currentValue;
									}
								}

								// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
								// but guard against overflow
								handledCPCountPlusOne = handledCPCount + 1;
								if (
									m - n >
									floor(
										(maxInt - delta) / handledCPCountPlusOne
									)
								) {
									error("overflow");
								}

								delta += (m - n) * handledCPCountPlusOne;
								n = m;

								for (j = 0; j < inputLength; ++j) {
									currentValue = input[j];

									if (currentValue < n && ++delta > maxInt) {
										error("overflow");
									}

									if (currentValue == n) {
										// Represent delta as a generalized variable-length integer
										for (
											q = delta,
												k = base /* no condition */;
											;
											k += base
										) {
											t =
												k <= bias
													? tMin
													: k >= bias + tMax
													? tMax
													: k - bias;
											if (q < t) {
												break;
											}
											qMinusT = q - t;
											baseMinusT = base - t;
											output.push(
												stringFromCharCode(
													digitToBasic(
														t +
															(qMinusT %
																baseMinusT),
														0
													)
												)
											);
											q = floor(qMinusT / baseMinusT);
										}

										output.push(
											stringFromCharCode(
												digitToBasic(q, 0)
											)
										);
										bias = adapt(
											delta,
											handledCPCountPlusOne,
											handledCPCount == basicLength
										);
										delta = 0;
										++handledCPCount;
									}
								}

								++delta;
								++n;
							}
							return output.join("");
						}

						/**
						 * Converts a Punycode string representing a domain name or an email address
						 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
						 * it doesn't matter if you call it on a string that has already been
						 * converted to Unicode.
						 * @memberOf punycode
						 * @param {String} input The Punycoded domain name or email address to
						 * convert to Unicode.
						 * @returns {String} The Unicode representation of the given Punycode
						 * string.
						 */
						function toUnicode(input) {
							return mapDomain(input, function(string) {
								return regexPunycode.test(string)
									? decode(string.slice(4).toLowerCase())
									: string;
							});
						}

						/**
						 * Converts a Unicode string representing a domain name or an email address to
						 * Punycode. Only the non-ASCII parts of the domain name will be converted,
						 * i.e. it doesn't matter if you call it with a domain that's already in
						 * ASCII.
						 * @memberOf punycode
						 * @param {String} input The domain name or email address to convert, as a
						 * Unicode string.
						 * @returns {String} The Punycode representation of the given domain name or
						 * email address.
						 */
						function toASCII(input) {
							return mapDomain(input, function(string) {
								return regexNonASCII.test(string)
									? "xn--" + encode(string)
									: string;
							});
						}

						/*--------------------------------------------------------------------------*/

						/** Define the public API */
						punycode = {
							/**
							 * A string representing the current Punycode.js version number.
							 * @memberOf punycode
							 * @type String
							 */
							version: "1.4.1",
							/**
							 * An object of methods to convert from JavaScript's internal character
							 * representation (UCS-2) to Unicode code points, and back.
							 * @see <https://mathiasbynens.be/notes/javascript-encoding>
							 * @memberOf punycode
							 * @type Object
							 */
							ucs2: {
								decode: ucs2decode,
								encode: ucs2encode,
							},
							decode: decode,
							encode: encode,
							toASCII: toASCII,
							toUnicode: toUnicode,
						};

						/** Expose `punycode` */
						// Some AMD build optimizers, like r.js, check for specific condition patterns
						// like the following:
						if (true) {
							!((__WEBPACK_AMD_DEFINE_RESULT__ = function() {
								return punycode;
							}.call(
								exports,
								__webpack_require__,
								exports,
								module
							)),
							__WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
								(module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
						} else {
						}
					})(this);

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js"
					)(module),
					__webpack_require__(
						/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/object-assign/index.js":
			/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

				/* eslint-disable no-unused-vars */
				var getOwnPropertySymbols = Object.getOwnPropertySymbols;
				var hasOwnProperty = Object.prototype.hasOwnProperty;
				var propIsEnumerable = Object.prototype.propertyIsEnumerable;

				function toObject(val) {
					if (val === null || val === undefined) {
						throw new TypeError(
							"Object.assign cannot be called with null or undefined"
						);
					}

					return Object(val);
				}

				function shouldUseNative() {
					try {
						if (!Object.assign) {
							return false;
						}

						// Detect buggy property enumeration order in older V8 versions.

						// https://bugs.chromium.org/p/v8/issues/detail?id=4118
						var test1 = new String("abc"); // eslint-disable-line no-new-wrappers
						test1[5] = "de";
						if (Object.getOwnPropertyNames(test1)[0] === "5") {
							return false;
						}

						// https://bugs.chromium.org/p/v8/issues/detail?id=3056
						var test2 = {};
						for (var i = 0; i < 10; i++) {
							test2["_" + String.fromCharCode(i)] = i;
						}
						var order2 = Object.getOwnPropertyNames(test2).map(
							function(n) {
								return test2[n];
							}
						);
						if (order2.join("") !== "0123456789") {
							return false;
						}

						// https://bugs.chromium.org/p/v8/issues/detail?id=3056
						var test3 = {};
						"abcdefghijklmnopqrst"
							.split("")
							.forEach(function(letter) {
								test3[letter] = letter;
							});
						if (
							Object.keys(Object.assign({}, test3)).join("") !==
							"abcdefghijklmnopqrst"
						) {
							return false;
						}

						return true;
					} catch (err) {
						// We don't expect any of the above to throw, but better to be safe.
						return false;
					}
				}

				module.exports = shouldUseNative()
					? Object.assign
					: function(target, source) {
							var from;
							var to = toObject(target);
							var symbols;

							for (var s = 1; s < arguments.length; s++) {
								from = Object(arguments[s]);

								for (var key in from) {
									if (hasOwnProperty.call(from, key)) {
										to[key] = from[key];
									}
								}

								if (getOwnPropertySymbols) {
									symbols = getOwnPropertySymbols(from);
									for (var i = 0; i < symbols.length; i++) {
										if (
											propIsEnumerable.call(
												from,
												symbols[i]
											)
										) {
											to[symbols[i]] = from[symbols[i]];
										}
									}
								}
							}

							return to;
					  };

				/***/
			},

		/***/ "./node_modules/os-browserify/browser.js":
			/*!***********************************************!*\
  !*** ./node_modules/os-browserify/browser.js ***!
  \***********************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				exports.endianness = function() {
					return "LE";
				};

				exports.hostname = function() {
					if (typeof location !== "undefined") {
						return location.hostname;
					} else return "";
				};

				exports.loadavg = function() {
					return [];
				};

				exports.uptime = function() {
					return 0;
				};

				exports.freemem = function() {
					return Number.MAX_VALUE;
				};

				exports.totalmem = function() {
					return Number.MAX_VALUE;
				};

				exports.cpus = function() {
					return [];
				};

				exports.type = function() {
					return "Browser";
				};

				exports.release = function() {
					if (typeof navigator !== "undefined") {
						return navigator.appVersion;
					}
					return "";
				};

				exports.networkInterfaces = exports.getNetworkInterfaces = function() {
					return {};
				};

				exports.arch = function() {
					return "javascript";
				};

				exports.platform = function() {
					return "browser";
				};

				exports.tmpdir = exports.tmpDir = function() {
					return "/tmp";
				};

				exports.EOL = "\n";

				exports.homedir = function() {
					return "/";
				};

				/***/
			},

		/***/ "./node_modules/pako/lib/utils/common.js":
			/*!***********************************************!*\
  !*** ./node_modules/pako/lib/utils/common.js ***!
  \***********************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";

				var TYPED_OK =
					typeof Uint8Array !== "undefined" &&
					typeof Uint16Array !== "undefined" &&
					typeof Int32Array !== "undefined";

				function _has(obj, key) {
					return Object.prototype.hasOwnProperty.call(obj, key);
				}

				exports.assign = function(obj /*from1, from2, from3, ...*/) {
					var sources = Array.prototype.slice.call(arguments, 1);
					while (sources.length) {
						var source = sources.shift();
						if (!source) {
							continue;
						}

						if (typeof source !== "object") {
							throw new TypeError(source + "must be non-object");
						}

						for (var p in source) {
							if (_has(source, p)) {
								obj[p] = source[p];
							}
						}
					}

					return obj;
				};

				// reduce buffer size, avoiding mem copy
				exports.shrinkBuf = function(buf, size) {
					if (buf.length === size) {
						return buf;
					}
					if (buf.subarray) {
						return buf.subarray(0, size);
					}
					buf.length = size;
					return buf;
				};

				var fnTyped = {
					arraySet: function(dest, src, src_offs, len, dest_offs) {
						if (src.subarray && dest.subarray) {
							dest.set(
								src.subarray(src_offs, src_offs + len),
								dest_offs
							);
							return;
						}
						// Fallback to ordinary array
						for (var i = 0; i < len; i++) {
							dest[dest_offs + i] = src[src_offs + i];
						}
					},
					// Join array of chunks to single array.
					flattenChunks: function(chunks) {
						var i, l, len, pos, chunk, result;

						// calculate data length
						len = 0;
						for (i = 0, l = chunks.length; i < l; i++) {
							len += chunks[i].length;
						}

						// join chunks
						result = new Uint8Array(len);
						pos = 0;
						for (i = 0, l = chunks.length; i < l; i++) {
							chunk = chunks[i];
							result.set(chunk, pos);
							pos += chunk.length;
						}

						return result;
					},
				};

				var fnUntyped = {
					arraySet: function(dest, src, src_offs, len, dest_offs) {
						for (var i = 0; i < len; i++) {
							dest[dest_offs + i] = src[src_offs + i];
						}
					},
					// Join array of chunks to single array.
					flattenChunks: function(chunks) {
						return [].concat.apply([], chunks);
					},
				};

				// Enable/Disable typed arrays use, for testing
				//
				exports.setTyped = function(on) {
					if (on) {
						exports.Buf8 = Uint8Array;
						exports.Buf16 = Uint16Array;
						exports.Buf32 = Int32Array;
						exports.assign(exports, fnTyped);
					} else {
						exports.Buf8 = Array;
						exports.Buf16 = Array;
						exports.Buf32 = Array;
						exports.assign(exports, fnUntyped);
					}
				};

				exports.setTyped(TYPED_OK);

				/***/
			},

		/***/ "./node_modules/pako/lib/zlib/adler32.js":
			/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/adler32.js ***!
  \***********************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";

				// Note: adler32 takes 12% for level 0 and 2% for level 6.
				// It isn't worth it to make additional optimizations as in original.
				// Small size is preferable.

				// (C) 1995-2013 Jean-loup Gailly and Mark Adler
				// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
				//
				// This software is provided 'as-is', without any express or implied
				// warranty. In no event will the authors be held liable for any damages
				// arising from the use of this software.
				//
				// Permission is granted to anyone to use this software for any purpose,
				// including commercial applications, and to alter it and redistribute it
				// freely, subject to the following restrictions:
				//
				// 1. The origin of this software must not be misrepresented; you must not
				//   claim that you wrote the original software. If you use this software
				//   in a product, an acknowledgment in the product documentation would be
				//   appreciated but is not required.
				// 2. Altered source versions must be plainly marked as such, and must not be
				//   misrepresented as being the original software.
				// 3. This notice may not be removed or altered from any source distribution.

				function adler32(adler, buf, len, pos) {
					var s1 = (adler & 0xffff) | 0,
						s2 = ((adler >>> 16) & 0xffff) | 0,
						n = 0;

					while (len !== 0) {
						// Set limit ~ twice less than 5552, to keep
						// s2 in 31-bits, because we force signed ints.
						// in other case %= will fail.
						n = len > 2000 ? 2000 : len;
						len -= n;

						do {
							s1 = (s1 + buf[pos++]) | 0;
							s2 = (s2 + s1) | 0;
						} while (--n);

						s1 %= 65521;
						s2 %= 65521;
					}

					return s1 | (s2 << 16) | 0;
				}

				module.exports = adler32;

				/***/
			},

		/***/ "./node_modules/pako/lib/zlib/constants.js":
			/*!*************************************************!*\
  !*** ./node_modules/pako/lib/zlib/constants.js ***!
  \*************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";

				// (C) 1995-2013 Jean-loup Gailly and Mark Adler
				// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
				//
				// This software is provided 'as-is', without any express or implied
				// warranty. In no event will the authors be held liable for any damages
				// arising from the use of this software.
				//
				// Permission is granted to anyone to use this software for any purpose,
				// including commercial applications, and to alter it and redistribute it
				// freely, subject to the following restrictions:
				//
				// 1. The origin of this software must not be misrepresented; you must not
				//   claim that you wrote the original software. If you use this software
				//   in a product, an acknowledgment in the product documentation would be
				//   appreciated but is not required.
				// 2. Altered source versions must be plainly marked as such, and must not be
				//   misrepresented as being the original software.
				// 3. This notice may not be removed or altered from any source distribution.

				module.exports = {
					/* Allowed flush values; see deflate() and inflate() below for details */
					Z_NO_FLUSH: 0,
					Z_PARTIAL_FLUSH: 1,
					Z_SYNC_FLUSH: 2,
					Z_FULL_FLUSH: 3,
					Z_FINISH: 4,
					Z_BLOCK: 5,
					Z_TREES: 6,

					/* Return codes for the compression/decompression functions. Negative values
					 * are errors, positive values are used for special but normal events.
					 */
					Z_OK: 0,
					Z_STREAM_END: 1,
					Z_NEED_DICT: 2,
					Z_ERRNO: -1,
					Z_STREAM_ERROR: -2,
					Z_DATA_ERROR: -3,
					//Z_MEM_ERROR:     -4,
					Z_BUF_ERROR: -5,
					//Z_VERSION_ERROR: -6,

					/* compression levels */
					Z_NO_COMPRESSION: 0,
					Z_BEST_SPEED: 1,
					Z_BEST_COMPRESSION: 9,
					Z_DEFAULT_COMPRESSION: -1,

					Z_FILTERED: 1,
					Z_HUFFMAN_ONLY: 2,
					Z_RLE: 3,
					Z_FIXED: 4,
					Z_DEFAULT_STRATEGY: 0,

					/* Possible values of the data_type field (though see inflate()) */
					Z_BINARY: 0,
					Z_TEXT: 1,
					//Z_ASCII:                1, // = Z_TEXT (deprecated)
					Z_UNKNOWN: 2,

					/* The deflate compression method */
					Z_DEFLATED: 8,
					//Z_NULL:                 null // Use -1 or null inline, depending on var type
				};

				/***/
			},

		/***/ "./node_modules/pako/lib/zlib/crc32.js":
			/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/crc32.js ***!
  \*********************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";

				// Note: we can't get significant speed boost here.
				// So write code to minimize size - no pregenerated tables
				// and array tools dependencies.

				// (C) 1995-2013 Jean-loup Gailly and Mark Adler
				// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
				//
				// This software is provided 'as-is', without any express or implied
				// warranty. In no event will the authors be held liable for any damages
				// arising from the use of this software.
				//
				// Permission is granted to anyone to use this software for any purpose,
				// including commercial applications, and to alter it and redistribute it
				// freely, subject to the following restrictions:
				//
				// 1. The origin of this software must not be misrepresented; you must not
				//   claim that you wrote the original software. If you use this software
				//   in a product, an acknowledgment in the product documentation would be
				//   appreciated but is not required.
				// 2. Altered source versions must be plainly marked as such, and must not be
				//   misrepresented as being the original software.
				// 3. This notice may not be removed or altered from any source distribution.

				// Use ordinary array, since untyped makes no boost here
				function makeTable() {
					var c,
						table = [];

					for (var n = 0; n < 256; n++) {
						c = n;
						for (var k = 0; k < 8; k++) {
							c = c & 1 ? 0xedb88320 ^ (c >>> 1) : c >>> 1;
						}
						table[n] = c;
					}

					return table;
				}

				// Create table on load. Just 255 signed longs. Not a problem.
				var crcTable = makeTable();

				function crc32(crc, buf, len, pos) {
					var t = crcTable,
						end = pos + len;

					crc ^= -1;

					for (var i = pos; i < end; i++) {
						crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xff];
					}

					return crc ^ -1; // >>> 0;
				}

				module.exports = crc32;

				/***/
			},

		/***/ "./node_modules/pako/lib/zlib/deflate.js":
			/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/deflate.js ***!
  \***********************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";

				// (C) 1995-2013 Jean-loup Gailly and Mark Adler
				// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
				//
				// This software is provided 'as-is', without any express or implied
				// warranty. In no event will the authors be held liable for any damages
				// arising from the use of this software.
				//
				// Permission is granted to anyone to use this software for any purpose,
				// including commercial applications, and to alter it and redistribute it
				// freely, subject to the following restrictions:
				//
				// 1. The origin of this software must not be misrepresented; you must not
				//   claim that you wrote the original software. If you use this software
				//   in a product, an acknowledgment in the product documentation would be
				//   appreciated but is not required.
				// 2. Altered source versions must be plainly marked as such, and must not be
				//   misrepresented as being the original software.
				// 3. This notice may not be removed or altered from any source distribution.

				var utils = __webpack_require__(
					/*! ../utils/common */ "./node_modules/pako/lib/utils/common.js"
				);
				var trees = __webpack_require__(
					/*! ./trees */ "./node_modules/pako/lib/zlib/trees.js"
				);
				var adler32 = __webpack_require__(
					/*! ./adler32 */ "./node_modules/pako/lib/zlib/adler32.js"
				);
				var crc32 = __webpack_require__(
					/*! ./crc32 */ "./node_modules/pako/lib/zlib/crc32.js"
				);
				var msg = __webpack_require__(
					/*! ./messages */ "./node_modules/pako/lib/zlib/messages.js"
				);

				/* Public constants ==========================================================*/
				/* ===========================================================================*/

				/* Allowed flush values; see deflate() and inflate() below for details */
				var Z_NO_FLUSH = 0;
				var Z_PARTIAL_FLUSH = 1;
				//var Z_SYNC_FLUSH    = 2;
				var Z_FULL_FLUSH = 3;
				var Z_FINISH = 4;
				var Z_BLOCK = 5;
				//var Z_TREES         = 6;

				/* Return codes for the compression/decompression functions. Negative values
				 * are errors, positive values are used for special but normal events.
				 */
				var Z_OK = 0;
				var Z_STREAM_END = 1;
				//var Z_NEED_DICT     = 2;
				//var Z_ERRNO         = -1;
				var Z_STREAM_ERROR = -2;
				var Z_DATA_ERROR = -3;
				//var Z_MEM_ERROR     = -4;
				var Z_BUF_ERROR = -5;
				//var Z_VERSION_ERROR = -6;

				/* compression levels */
				//var Z_NO_COMPRESSION      = 0;
				//var Z_BEST_SPEED          = 1;
				//var Z_BEST_COMPRESSION    = 9;
				var Z_DEFAULT_COMPRESSION = -1;

				var Z_FILTERED = 1;
				var Z_HUFFMAN_ONLY = 2;
				var Z_RLE = 3;
				var Z_FIXED = 4;
				var Z_DEFAULT_STRATEGY = 0;

				/* Possible values of the data_type field (though see inflate()) */
				//var Z_BINARY              = 0;
				//var Z_TEXT                = 1;
				//var Z_ASCII               = 1; // = Z_TEXT
				var Z_UNKNOWN = 2;

				/* The deflate compression method */
				var Z_DEFLATED = 8;

				/*============================================================================*/

				var MAX_MEM_LEVEL = 9;
				/* Maximum value for memLevel in deflateInit2 */
				var MAX_WBITS = 15;
				/* 32K LZ77 window */
				var DEF_MEM_LEVEL = 8;

				var LENGTH_CODES = 29;
				/* number of length codes, not counting the special END_BLOCK code */
				var LITERALS = 256;
				/* number of literal bytes 0..255 */
				var L_CODES = LITERALS + 1 + LENGTH_CODES;
				/* number of Literal or Length codes, including the END_BLOCK code */
				var D_CODES = 30;
				/* number of distance codes */
				var BL_CODES = 19;
				/* number of codes used to transfer the bit lengths */
				var HEAP_SIZE = 2 * L_CODES + 1;
				/* maximum heap size */
				var MAX_BITS = 15;
				/* All codes must not exceed MAX_BITS bits */

				var MIN_MATCH = 3;
				var MAX_MATCH = 258;
				var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;

				var PRESET_DICT = 0x20;

				var INIT_STATE = 42;
				var EXTRA_STATE = 69;
				var NAME_STATE = 73;
				var COMMENT_STATE = 91;
				var HCRC_STATE = 103;
				var BUSY_STATE = 113;
				var FINISH_STATE = 666;

				var BS_NEED_MORE = 1; /* block not completed, need more input or more output */
				var BS_BLOCK_DONE = 2; /* block flush performed */
				var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
				var BS_FINISH_DONE = 4; /* finish done, accept no more input or output */

				var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

				function err(strm, errorCode) {
					strm.msg = msg[errorCode];
					return errorCode;
				}

				function rank(f) {
					return (f << 1) - (f > 4 ? 9 : 0);
				}

				function zero(buf) {
					var len = buf.length;
					while (--len >= 0) {
						buf[len] = 0;
					}
				}

				/* =========================================================================
				 * Flush as much pending output as possible. All deflate() output goes
				 * through this function so some applications may wish to modify it
				 * to avoid allocating a large strm->output buffer and copying into it.
				 * (See also read_buf()).
				 */
				function flush_pending(strm) {
					var s = strm.state;

					//_tr_flush_bits(s);
					var len = s.pending;
					if (len > strm.avail_out) {
						len = strm.avail_out;
					}
					if (len === 0) {
						return;
					}

					utils.arraySet(
						strm.output,
						s.pending_buf,
						s.pending_out,
						len,
						strm.next_out
					);
					strm.next_out += len;
					s.pending_out += len;
					strm.total_out += len;
					strm.avail_out -= len;
					s.pending -= len;
					if (s.pending === 0) {
						s.pending_out = 0;
					}
				}

				function flush_block_only(s, last) {
					trees._tr_flush_block(
						s,
						s.block_start >= 0 ? s.block_start : -1,
						s.strstart - s.block_start,
						last
					);
					s.block_start = s.strstart;
					flush_pending(s.strm);
				}

				function put_byte(s, b) {
					s.pending_buf[s.pending++] = b;
				}

				/* =========================================================================
				 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
				 * IN assertion: the stream state is correct and there is enough room in
				 * pending_buf.
				 */
				function putShortMSB(s, b) {
					//  put_byte(s, (Byte)(b >> 8));
					//  put_byte(s, (Byte)(b & 0xff));
					s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
					s.pending_buf[s.pending++] = b & 0xff;
				}

				/* ===========================================================================
				 * Read a new buffer from the current input stream, update the adler32
				 * and total number of bytes read.  All deflate() input goes through
				 * this function so some applications may wish to modify it to avoid
				 * allocating a large strm->input buffer and copying from it.
				 * (See also flush_pending()).
				 */
				function read_buf(strm, buf, start, size) {
					var len = strm.avail_in;

					if (len > size) {
						len = size;
					}
					if (len === 0) {
						return 0;
					}

					strm.avail_in -= len;

					// zmemcpy(buf, strm->next_in, len);
					utils.arraySet(buf, strm.input, strm.next_in, len, start);
					if (strm.state.wrap === 1) {
						strm.adler = adler32(strm.adler, buf, len, start);
					} else if (strm.state.wrap === 2) {
						strm.adler = crc32(strm.adler, buf, len, start);
					}

					strm.next_in += len;
					strm.total_in += len;

					return len;
				}

				/* ===========================================================================
				 * Set match_start to the longest match starting at the given string and
				 * return its length. Matches shorter or equal to prev_length are discarded,
				 * in which case the result is equal to prev_length and match_start is
				 * garbage.
				 * IN assertions: cur_match is the head of the hash chain for the current
				 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
				 * OUT assertion: the match length is not greater than s->lookahead.
				 */
				function longest_match(s, cur_match) {
					var chain_length =
						s.max_chain_length; /* max hash chain length */
					var scan = s.strstart; /* current string */
					var match; /* matched string */
					var len; /* length of current match */
					var best_len = s.prev_length; /* best match length so far */
					var nice_match =
						s.nice_match; /* stop if match long enough */
					var limit =
						s.strstart > s.w_size - MIN_LOOKAHEAD
							? s.strstart - (s.w_size - MIN_LOOKAHEAD)
							: 0; /*NIL*/

					var _win = s.window; // shortcut

					var wmask = s.w_mask;
					var prev = s.prev;

					/* Stop when cur_match becomes <= limit. To simplify the code,
					 * we prevent matches with the string of window index 0.
					 */

					var strend = s.strstart + MAX_MATCH;
					var scan_end1 = _win[scan + best_len - 1];
					var scan_end = _win[scan + best_len];

					/* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
					 * It is easy to get rid of this optimization if necessary.
					 */
					// Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

					/* Do not waste too much time if we already have a good match: */
					if (s.prev_length >= s.good_match) {
						chain_length >>= 2;
					}
					/* Do not look for matches beyond the end of the input. This is necessary
					 * to make deflate deterministic.
					 */
					if (nice_match > s.lookahead) {
						nice_match = s.lookahead;
					}

					// Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

					do {
						// Assert(cur_match < s->strstart, "no future");
						match = cur_match;

						/* Skip to next match if the match length cannot increase
						 * or if the match length is less than 2.  Note that the checks below
						 * for insufficient lookahead only occur occasionally for performance
						 * reasons.  Therefore uninitialized memory will be accessed, and
						 * conditional jumps will be made that depend on those values.
						 * However the length of the match is limited to the lookahead, so
						 * the output of deflate is not affected by the uninitialized values.
						 */

						if (
							_win[match + best_len] !== scan_end ||
							_win[match + best_len - 1] !== scan_end1 ||
							_win[match] !== _win[scan] ||
							_win[++match] !== _win[scan + 1]
						) {
							continue;
						}

						/* The check at best_len-1 can be removed because it will be made
						 * again later. (This heuristic is not always a win.)
						 * It is not necessary to compare scan[2] and match[2] since they
						 * are always equal when the other bytes match, given that
						 * the hash keys are equal and that HASH_BITS >= 8.
						 */
						scan += 2;
						match++;
						// Assert(*scan == *match, "match[2]?");

						/* We check for insufficient lookahead only every 8th comparison;
						 * the 256th check will be made at strstart+258.
						 */
						do {
							/*jshint noempty:false*/
						} while (
							_win[++scan] === _win[++match] &&
							_win[++scan] === _win[++match] &&
							_win[++scan] === _win[++match] &&
							_win[++scan] === _win[++match] &&
							_win[++scan] === _win[++match] &&
							_win[++scan] === _win[++match] &&
							_win[++scan] === _win[++match] &&
							_win[++scan] === _win[++match] &&
							scan < strend
						);

						// Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

						len = MAX_MATCH - (strend - scan);
						scan = strend - MAX_MATCH;

						if (len > best_len) {
							s.match_start = cur_match;
							best_len = len;
							if (len >= nice_match) {
								break;
							}
							scan_end1 = _win[scan + best_len - 1];
							scan_end = _win[scan + best_len];
						}
					} while (
						(cur_match = prev[cur_match & wmask]) > limit &&
						--chain_length !== 0
					);

					if (best_len <= s.lookahead) {
						return best_len;
					}
					return s.lookahead;
				}

				/* ===========================================================================
				 * Fill the window when the lookahead becomes insufficient.
				 * Updates strstart and lookahead.
				 *
				 * IN assertion: lookahead < MIN_LOOKAHEAD
				 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
				 *    At least one byte has been read, or avail_in == 0; reads are
				 *    performed for at least two bytes (required for the zip translate_eol
				 *    option -- not supported here).
				 */
				function fill_window(s) {
					var _w_size = s.w_size;
					var p, n, m, more, str;

					//Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

					do {
						more = s.window_size - s.lookahead - s.strstart;

						// JS ints have 32 bit, block below not needed
						/* Deal with !@#$% 64K limit: */
						//if (sizeof(int) <= 2) {
						//    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
						//        more = wsize;
						//
						//  } else if (more == (unsigned)(-1)) {
						//        /* Very unlikely, but possible on 16 bit machine if
						//         * strstart == 0 && lookahead == 1 (input done a byte at time)
						//         */
						//        more--;
						//    }
						//}

						/* If the window is almost full and there is insufficient lookahead,
						 * move the upper half to the lower one to make room in the upper half.
						 */
						if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
							utils.arraySet(
								s.window,
								s.window,
								_w_size,
								_w_size,
								0
							);
							s.match_start -= _w_size;
							s.strstart -= _w_size;
							/* we now have strstart >= MAX_DIST */
							s.block_start -= _w_size;

							/* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

							n = s.hash_size;
							p = n;
							do {
								m = s.head[--p];
								s.head[p] = m >= _w_size ? m - _w_size : 0;
							} while (--n);

							n = _w_size;
							p = n;
							do {
								m = s.prev[--p];
								s.prev[p] = m >= _w_size ? m - _w_size : 0;
								/* If n is not on any hash chain, prev[n] is garbage but
								 * its value will never be used.
								 */
							} while (--n);

							more += _w_size;
						}
						if (s.strm.avail_in === 0) {
							break;
						}

						/* If there was no sliding:
						 *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
						 *    more == window_size - lookahead - strstart
						 * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
						 * => more >= window_size - 2*WSIZE + 2
						 * In the BIG_MEM or MMAP case (not yet supported),
						 *   window_size == input_size + MIN_LOOKAHEAD  &&
						 *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
						 * Otherwise, window_size == 2*WSIZE so more >= 2.
						 * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
						 */
						//Assert(more >= 2, "more < 2");
						n = read_buf(
							s.strm,
							s.window,
							s.strstart + s.lookahead,
							more
						);
						s.lookahead += n;

						/* Initialize the hash value now that we have some input: */
						if (s.lookahead + s.insert >= MIN_MATCH) {
							str = s.strstart - s.insert;
							s.ins_h = s.window[str];

							/* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
							s.ins_h =
								((s.ins_h << s.hash_shift) ^
									s.window[str + 1]) &
								s.hash_mask;
							//#if MIN_MATCH != 3
							//        Call update_hash() MIN_MATCH-3 more times
							//#endif
							while (s.insert) {
								/* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
								s.ins_h =
									((s.ins_h << s.hash_shift) ^
										s.window[str + MIN_MATCH - 1]) &
									s.hash_mask;

								s.prev[str & s.w_mask] = s.head[s.ins_h];
								s.head[s.ins_h] = str;
								str++;
								s.insert--;
								if (s.lookahead + s.insert < MIN_MATCH) {
									break;
								}
							}
						}
						/* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
						 * but this is not important since only literal bytes will be emitted.
						 */
					} while (
						s.lookahead < MIN_LOOKAHEAD &&
						s.strm.avail_in !== 0
					);

					/* If the WIN_INIT bytes after the end of the current data have never been
					 * written, then zero those bytes in order to avoid memory check reports of
					 * the use of uninitialized (or uninitialised as Julian writes) bytes by
					 * the longest match routines.  Update the high water mark for the next
					 * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
					 * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
					 */
					//  if (s.high_water < s.window_size) {
					//    var curr = s.strstart + s.lookahead;
					//    var init = 0;
					//
					//    if (s.high_water < curr) {
					//      /* Previous high water mark below current data -- zero WIN_INIT
					//       * bytes or up to end of window, whichever is less.
					//       */
					//      init = s.window_size - curr;
					//      if (init > WIN_INIT)
					//        init = WIN_INIT;
					//      zmemzero(s->window + curr, (unsigned)init);
					//      s->high_water = curr + init;
					//    }
					//    else if (s->high_water < (ulg)curr + WIN_INIT) {
					//      /* High water mark at or above current data, but below current data
					//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
					//       * to end of window, whichever is less.
					//       */
					//      init = (ulg)curr + WIN_INIT - s->high_water;
					//      if (init > s->window_size - s->high_water)
					//        init = s->window_size - s->high_water;
					//      zmemzero(s->window + s->high_water, (unsigned)init);
					//      s->high_water += init;
					//    }
					//  }
					//
					//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
					//    "not enough room for search");
				}

				/* ===========================================================================
				 * Copy without compression as much as possible from the input stream, return
				 * the current block state.
				 * This function does not insert new strings in the dictionary since
				 * uncompressible data is probably not useful. This function is used
				 * only for the level=0 compression option.
				 * NOTE: this function should be optimized to avoid extra copying from
				 * window to pending_buf.
				 */
				function deflate_stored(s, flush) {
					/* Stored blocks are limited to 0xffff bytes, pending_buf is limited
					 * to pending_buf_size, and each stored block has a 5 byte header:
					 */
					var max_block_size = 0xffff;

					if (max_block_size > s.pending_buf_size - 5) {
						max_block_size = s.pending_buf_size - 5;
					}

					/* Copy as much as possible from input to output: */
					for (;;) {
						/* Fill the window as much as possible: */
						if (s.lookahead <= 1) {
							//Assert(s->strstart < s->w_size+MAX_DIST(s) ||
							//  s->block_start >= (long)s->w_size, "slide too late");
							//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
							//        s.block_start >= s.w_size)) {
							//        throw  new Error("slide too late");
							//      }

							fill_window(s);
							if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
								return BS_NEED_MORE;
							}

							if (s.lookahead === 0) {
								break;
							}
							/* flush the current block */
						}
						//Assert(s->block_start >= 0L, "block gone");
						//    if (s.block_start < 0) throw new Error("block gone");

						s.strstart += s.lookahead;
						s.lookahead = 0;

						/* Emit a stored block if pending_buf will be full: */
						var max_start = s.block_start + max_block_size;

						if (s.strstart === 0 || s.strstart >= max_start) {
							/* strstart == 0 is possible when wraparound on 16-bit machine */
							s.lookahead = s.strstart - max_start;
							s.strstart = max_start;
							/*** FLUSH_BLOCK(s, 0); ***/
							flush_block_only(s, false);
							if (s.strm.avail_out === 0) {
								return BS_NEED_MORE;
							}
							/***/
						}
						/* Flush if we may have to slide, otherwise block_start may become
						 * negative and the data will be gone:
						 */
						if (
							s.strstart - s.block_start >=
							s.w_size - MIN_LOOKAHEAD
						) {
							/*** FLUSH_BLOCK(s, 0); ***/
							flush_block_only(s, false);
							if (s.strm.avail_out === 0) {
								return BS_NEED_MORE;
							}
							/***/
						}
					}

					s.insert = 0;

					if (flush === Z_FINISH) {
						/*** FLUSH_BLOCK(s, 1); ***/
						flush_block_only(s, true);
						if (s.strm.avail_out === 0) {
							return BS_FINISH_STARTED;
						}
						/***/
						return BS_FINISH_DONE;
					}

					if (s.strstart > s.block_start) {
						/*** FLUSH_BLOCK(s, 0); ***/
						flush_block_only(s, false);
						if (s.strm.avail_out === 0) {
							return BS_NEED_MORE;
						}
						/***/
					}

					return BS_NEED_MORE;
				}

				/* ===========================================================================
				 * Compress as much as possible from the input stream, return the current
				 * block state.
				 * This function does not perform lazy evaluation of matches and inserts
				 * new strings in the dictionary only for unmatched strings or for short
				 * matches. It is used only for the fast compression options.
				 */
				function deflate_fast(s, flush) {
					var hash_head; /* head of the hash chain */
					var bflush; /* set if current block must be flushed */

					for (;;) {
						/* Make sure that we always have enough lookahead, except
						 * at the end of the input file. We need MAX_MATCH bytes
						 * for the next match, plus MIN_MATCH bytes to insert the
						 * string following the next match.
						 */
						if (s.lookahead < MIN_LOOKAHEAD) {
							fill_window(s);
							if (
								s.lookahead < MIN_LOOKAHEAD &&
								flush === Z_NO_FLUSH
							) {
								return BS_NEED_MORE;
							}
							if (s.lookahead === 0) {
								break; /* flush the current block */
							}
						}

						/* Insert the string window[strstart .. strstart+2] in the
						 * dictionary, and set hash_head to the head of the hash chain:
						 */
						hash_head = 0 /*NIL*/;
						if (s.lookahead >= MIN_MATCH) {
							/*** INSERT_STRING(s, s.strstart, hash_head); ***/
							s.ins_h =
								((s.ins_h << s.hash_shift) ^
									s.window[s.strstart + MIN_MATCH - 1]) &
								s.hash_mask;
							hash_head = s.prev[s.strstart & s.w_mask] =
								s.head[s.ins_h];
							s.head[s.ins_h] = s.strstart;
							/***/
						}

						/* Find the longest match, discarding those <= prev_length.
						 * At this point we have always match_length < MIN_MATCH
						 */
						if (
							hash_head !== 0 /*NIL*/ &&
							s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD
						) {
							/* To simplify the code, we prevent matches with the string
							 * of window index 0 (in particular we have to avoid a match
							 * of the string with itself at the start of the input file).
							 */
							s.match_length = longest_match(s, hash_head);
							/* longest_match() sets match_start */
						}
						if (s.match_length >= MIN_MATCH) {
							// check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

							/*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
							bflush = trees._tr_tally(
								s,
								s.strstart - s.match_start,
								s.match_length - MIN_MATCH
							);

							s.lookahead -= s.match_length;

							/* Insert new strings in the hash table only if the match length
							 * is not too large. This saves time but degrades compression.
							 */
							if (
								s.match_length <=
									s.max_lazy_match /*max_insert_length*/ &&
								s.lookahead >= MIN_MATCH
							) {
								s.match_length--; /* string at strstart already in table */
								do {
									s.strstart++;
									/*** INSERT_STRING(s, s.strstart, hash_head); ***/
									s.ins_h =
										((s.ins_h << s.hash_shift) ^
											s.window[
												s.strstart + MIN_MATCH - 1
											]) &
										s.hash_mask;
									hash_head = s.prev[s.strstart & s.w_mask] =
										s.head[s.ins_h];
									s.head[s.ins_h] = s.strstart;
									/***/
									/* strstart never exceeds WSIZE-MAX_MATCH, so there are
									 * always MIN_MATCH bytes ahead.
									 */
								} while (--s.match_length !== 0);
								s.strstart++;
							} else {
								s.strstart += s.match_length;
								s.match_length = 0;
								s.ins_h = s.window[s.strstart];
								/* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
								s.ins_h =
									((s.ins_h << s.hash_shift) ^
										s.window[s.strstart + 1]) &
									s.hash_mask;

								//#if MIN_MATCH != 3
								//                Call UPDATE_HASH() MIN_MATCH-3 more times
								//#endif
								/* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
								 * matter since it will be recomputed at next deflate call.
								 */
							}
						} else {
							/* No match, output a literal byte */
							//Tracevv((stderr,"%c", s.window[s.strstart]));
							/*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
							bflush = trees._tr_tally(
								s,
								0,
								s.window[s.strstart]
							);

							s.lookahead--;
							s.strstart++;
						}
						if (bflush) {
							/*** FLUSH_BLOCK(s, 0); ***/
							flush_block_only(s, false);
							if (s.strm.avail_out === 0) {
								return BS_NEED_MORE;
							}
							/***/
						}
					}
					s.insert =
						s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
					if (flush === Z_FINISH) {
						/*** FLUSH_BLOCK(s, 1); ***/
						flush_block_only(s, true);
						if (s.strm.avail_out === 0) {
							return BS_FINISH_STARTED;
						}
						/***/
						return BS_FINISH_DONE;
					}
					if (s.last_lit) {
						/*** FLUSH_BLOCK(s, 0); ***/
						flush_block_only(s, false);
						if (s.strm.avail_out === 0) {
							return BS_NEED_MORE;
						}
						/***/
					}
					return BS_BLOCK_DONE;
				}

				/* ===========================================================================
				 * Same as above, but achieves better compression. We use a lazy
				 * evaluation for matches: a match is finally adopted only if there is
				 * no better match at the next window position.
				 */
				function deflate_slow(s, flush) {
					var hash_head; /* head of hash chain */
					var bflush; /* set if current block must be flushed */

					var max_insert;

					/* Process the input block. */
					for (;;) {
						/* Make sure that we always have enough lookahead, except
						 * at the end of the input file. We need MAX_MATCH bytes
						 * for the next match, plus MIN_MATCH bytes to insert the
						 * string following the next match.
						 */
						if (s.lookahead < MIN_LOOKAHEAD) {
							fill_window(s);
							if (
								s.lookahead < MIN_LOOKAHEAD &&
								flush === Z_NO_FLUSH
							) {
								return BS_NEED_MORE;
							}
							if (s.lookahead === 0) {
								break;
							} /* flush the current block */
						}

						/* Insert the string window[strstart .. strstart+2] in the
						 * dictionary, and set hash_head to the head of the hash chain:
						 */
						hash_head = 0 /*NIL*/;
						if (s.lookahead >= MIN_MATCH) {
							/*** INSERT_STRING(s, s.strstart, hash_head); ***/
							s.ins_h =
								((s.ins_h << s.hash_shift) ^
									s.window[s.strstart + MIN_MATCH - 1]) &
								s.hash_mask;
							hash_head = s.prev[s.strstart & s.w_mask] =
								s.head[s.ins_h];
							s.head[s.ins_h] = s.strstart;
							/***/
						}

						/* Find the longest match, discarding those <= prev_length.
						 */
						s.prev_length = s.match_length;
						s.prev_match = s.match_start;
						s.match_length = MIN_MATCH - 1;

						if (
							hash_head !== 0 /*NIL*/ &&
							s.prev_length < s.max_lazy_match &&
							s.strstart - hash_head <=
								s.w_size - MIN_LOOKAHEAD /*MAX_DIST(s)*/
						) {
							/* To simplify the code, we prevent matches with the string
							 * of window index 0 (in particular we have to avoid a match
							 * of the string with itself at the start of the input file).
							 */
							s.match_length = longest_match(s, hash_head);
							/* longest_match() sets match_start */

							if (
								s.match_length <= 5 &&
								(s.strategy === Z_FILTERED ||
									(s.match_length === MIN_MATCH &&
										s.strstart - s.match_start >
											4096) /*TOO_FAR*/)
							) {
								/* If prev_match is also MIN_MATCH, match_start is garbage
								 * but we will ignore the current match anyway.
								 */
								s.match_length = MIN_MATCH - 1;
							}
						}
						/* If there was a match at the previous step and the current
						 * match is not better, output the previous match:
						 */
						if (
							s.prev_length >= MIN_MATCH &&
							s.match_length <= s.prev_length
						) {
							max_insert = s.strstart + s.lookahead - MIN_MATCH;
							/* Do not insert strings in hash table beyond this. */

							//check_match(s, s.strstart-1, s.prev_match, s.prev_length);

							/***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
							bflush = trees._tr_tally(
								s,
								s.strstart - 1 - s.prev_match,
								s.prev_length - MIN_MATCH
							);
							/* Insert in hash table all strings up to the end of the match.
							 * strstart-1 and strstart are already inserted. If there is not
							 * enough lookahead, the last two strings are not inserted in
							 * the hash table.
							 */
							s.lookahead -= s.prev_length - 1;
							s.prev_length -= 2;
							do {
								if (++s.strstart <= max_insert) {
									/*** INSERT_STRING(s, s.strstart, hash_head); ***/
									s.ins_h =
										((s.ins_h << s.hash_shift) ^
											s.window[
												s.strstart + MIN_MATCH - 1
											]) &
										s.hash_mask;
									hash_head = s.prev[s.strstart & s.w_mask] =
										s.head[s.ins_h];
									s.head[s.ins_h] = s.strstart;
									/***/
								}
							} while (--s.prev_length !== 0);
							s.match_available = 0;
							s.match_length = MIN_MATCH - 1;
							s.strstart++;

							if (bflush) {
								/*** FLUSH_BLOCK(s, 0); ***/
								flush_block_only(s, false);
								if (s.strm.avail_out === 0) {
									return BS_NEED_MORE;
								}
								/***/
							}
						} else if (s.match_available) {
							/* If there was no match at the previous position, output a
							 * single literal. If there was a match but the current match
							 * is longer, truncate the previous match to a single literal.
							 */
							//Tracevv((stderr,"%c", s->window[s->strstart-1]));
							/*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
							bflush = trees._tr_tally(
								s,
								0,
								s.window[s.strstart - 1]
							);

							if (bflush) {
								/*** FLUSH_BLOCK_ONLY(s, 0) ***/
								flush_block_only(s, false);
								/***/
							}
							s.strstart++;
							s.lookahead--;
							if (s.strm.avail_out === 0) {
								return BS_NEED_MORE;
							}
						} else {
							/* There is no previous match to compare with, wait for
							 * the next step to decide.
							 */
							s.match_available = 1;
							s.strstart++;
							s.lookahead--;
						}
					}
					//Assert (flush != Z_NO_FLUSH, "no flush?");
					if (s.match_available) {
						//Tracevv((stderr,"%c", s->window[s->strstart-1]));
						/*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
						bflush = trees._tr_tally(
							s,
							0,
							s.window[s.strstart - 1]
						);

						s.match_available = 0;
					}
					s.insert =
						s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
					if (flush === Z_FINISH) {
						/*** FLUSH_BLOCK(s, 1); ***/
						flush_block_only(s, true);
						if (s.strm.avail_out === 0) {
							return BS_FINISH_STARTED;
						}
						/***/
						return BS_FINISH_DONE;
					}
					if (s.last_lit) {
						/*** FLUSH_BLOCK(s, 0); ***/
						flush_block_only(s, false);
						if (s.strm.avail_out === 0) {
							return BS_NEED_MORE;
						}
						/***/
					}

					return BS_BLOCK_DONE;
				}

				/* ===========================================================================
				 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
				 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
				 * deflate switches away from Z_RLE.)
				 */
				function deflate_rle(s, flush) {
					var bflush; /* set if current block must be flushed */
					var prev; /* byte at distance one to match */
					var scan,
						strend; /* scan goes up to strend for length of run */

					var _win = s.window;

					for (;;) {
						/* Make sure that we always have enough lookahead, except
						 * at the end of the input file. We need MAX_MATCH bytes
						 * for the longest run, plus one for the unrolled loop.
						 */
						if (s.lookahead <= MAX_MATCH) {
							fill_window(s);
							if (
								s.lookahead <= MAX_MATCH &&
								flush === Z_NO_FLUSH
							) {
								return BS_NEED_MORE;
							}
							if (s.lookahead === 0) {
								break;
							} /* flush the current block */
						}

						/* See how many times the previous byte repeats */
						s.match_length = 0;
						if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
							scan = s.strstart - 1;
							prev = _win[scan];
							if (
								prev === _win[++scan] &&
								prev === _win[++scan] &&
								prev === _win[++scan]
							) {
								strend = s.strstart + MAX_MATCH;
								do {
									/*jshint noempty:false*/
								} while (
									prev === _win[++scan] &&
									prev === _win[++scan] &&
									prev === _win[++scan] &&
									prev === _win[++scan] &&
									prev === _win[++scan] &&
									prev === _win[++scan] &&
									prev === _win[++scan] &&
									prev === _win[++scan] &&
									scan < strend
								);
								s.match_length = MAX_MATCH - (strend - scan);
								if (s.match_length > s.lookahead) {
									s.match_length = s.lookahead;
								}
							}
							//Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
						}

						/* Emit match if have run of MIN_MATCH or longer, else emit literal */
						if (s.match_length >= MIN_MATCH) {
							//check_match(s, s.strstart, s.strstart - 1, s.match_length);

							/*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
							bflush = trees._tr_tally(
								s,
								1,
								s.match_length - MIN_MATCH
							);

							s.lookahead -= s.match_length;
							s.strstart += s.match_length;
							s.match_length = 0;
						} else {
							/* No match, output a literal byte */
							//Tracevv((stderr,"%c", s->window[s->strstart]));
							/*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
							bflush = trees._tr_tally(
								s,
								0,
								s.window[s.strstart]
							);

							s.lookahead--;
							s.strstart++;
						}
						if (bflush) {
							/*** FLUSH_BLOCK(s, 0); ***/
							flush_block_only(s, false);
							if (s.strm.avail_out === 0) {
								return BS_NEED_MORE;
							}
							/***/
						}
					}
					s.insert = 0;
					if (flush === Z_FINISH) {
						/*** FLUSH_BLOCK(s, 1); ***/
						flush_block_only(s, true);
						if (s.strm.avail_out === 0) {
							return BS_FINISH_STARTED;
						}
						/***/
						return BS_FINISH_DONE;
					}
					if (s.last_lit) {
						/*** FLUSH_BLOCK(s, 0); ***/
						flush_block_only(s, false);
						if (s.strm.avail_out === 0) {
							return BS_NEED_MORE;
						}
						/***/
					}
					return BS_BLOCK_DONE;
				}

				/* ===========================================================================
				 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
				 * (It will be regenerated if this run of deflate switches away from Huffman.)
				 */
				function deflate_huff(s, flush) {
					var bflush; /* set if current block must be flushed */

					for (;;) {
						/* Make sure that we have a literal to write. */
						if (s.lookahead === 0) {
							fill_window(s);
							if (s.lookahead === 0) {
								if (flush === Z_NO_FLUSH) {
									return BS_NEED_MORE;
								}
								break; /* flush the current block */
							}
						}

						/* Output a literal byte */
						s.match_length = 0;
						//Tracevv((stderr,"%c", s->window[s->strstart]));
						/*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
						bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
						s.lookahead--;
						s.strstart++;
						if (bflush) {
							/*** FLUSH_BLOCK(s, 0); ***/
							flush_block_only(s, false);
							if (s.strm.avail_out === 0) {
								return BS_NEED_MORE;
							}
							/***/
						}
					}
					s.insert = 0;
					if (flush === Z_FINISH) {
						/*** FLUSH_BLOCK(s, 1); ***/
						flush_block_only(s, true);
						if (s.strm.avail_out === 0) {
							return BS_FINISH_STARTED;
						}
						/***/
						return BS_FINISH_DONE;
					}
					if (s.last_lit) {
						/*** FLUSH_BLOCK(s, 0); ***/
						flush_block_only(s, false);
						if (s.strm.avail_out === 0) {
							return BS_NEED_MORE;
						}
						/***/
					}
					return BS_BLOCK_DONE;
				}

				/* Values for max_lazy_match, good_match and max_chain_length, depending on
				 * the desired pack level (0..9). The values given below have been tuned to
				 * exclude worst case performance for pathological files. Better values may be
				 * found for specific files.
				 */
				function Config(
					good_length,
					max_lazy,
					nice_length,
					max_chain,
					func
				) {
					this.good_length = good_length;
					this.max_lazy = max_lazy;
					this.nice_length = nice_length;
					this.max_chain = max_chain;
					this.func = func;
				}

				var configuration_table;

				configuration_table = [
					/*      good lazy nice chain */
					new Config(0, 0, 0, 0, deflate_stored) /* 0 store only */,
					new Config(
						4,
						4,
						8,
						4,
						deflate_fast
					) /* 1 max speed, no lazy matches */,
					new Config(4, 5, 16, 8, deflate_fast) /* 2 */,
					new Config(4, 6, 32, 32, deflate_fast) /* 3 */,

					new Config(4, 4, 16, 16, deflate_slow) /* 4 lazy matches */,
					new Config(8, 16, 32, 32, deflate_slow) /* 5 */,
					new Config(8, 16, 128, 128, deflate_slow) /* 6 */,
					new Config(8, 32, 128, 256, deflate_slow) /* 7 */,
					new Config(32, 128, 258, 1024, deflate_slow) /* 8 */,
					new Config(
						32,
						258,
						258,
						4096,
						deflate_slow
					) /* 9 max compression */,
				];

				/* ===========================================================================
				 * Initialize the "longest match" routines for a new zlib stream
				 */
				function lm_init(s) {
					s.window_size = 2 * s.w_size;

					/*** CLEAR_HASH(s); ***/
					zero(s.head); // Fill with NIL (= 0);

					/* Set the default configuration parameters:
					 */
					s.max_lazy_match = configuration_table[s.level].max_lazy;
					s.good_match = configuration_table[s.level].good_length;
					s.nice_match = configuration_table[s.level].nice_length;
					s.max_chain_length = configuration_table[s.level].max_chain;

					s.strstart = 0;
					s.block_start = 0;
					s.lookahead = 0;
					s.insert = 0;
					s.match_length = s.prev_length = MIN_MATCH - 1;
					s.match_available = 0;
					s.ins_h = 0;
				}

				function DeflateState() {
					this.strm = null; /* pointer back to this zlib stream */
					this.status = 0; /* as the name implies */
					this.pending_buf = null; /* output still pending */
					this.pending_buf_size = 0; /* size of pending_buf */
					this.pending_out = 0; /* next pending byte to output to the stream */
					this.pending = 0; /* nb of bytes in the pending buffer */
					this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
					this.gzhead = null; /* gzip header information to write */
					this.gzindex = 0; /* where in extra, name, or comment */
					this.method = Z_DEFLATED; /* can only be DEFLATED */
					this.last_flush = -1; /* value of flush param for previous deflate call */

					this.w_size = 0; /* LZ77 window size (32K by default) */
					this.w_bits = 0; /* log2(w_size)  (8..16) */
					this.w_mask = 0; /* w_size - 1 */

					this.window = null;
					/* Sliding window. Input bytes are read into the second half of the window,
					 * and move to the first half later to keep a dictionary of at least wSize
					 * bytes. With this organization, matches are limited to a distance of
					 * wSize-MAX_MATCH bytes, but this ensures that IO is always
					 * performed with a length multiple of the block size.
					 */

					this.window_size = 0;
					/* Actual size of window: 2*wSize, except when the user input buffer
					 * is directly used as sliding window.
					 */

					this.prev = null;
					/* Link to older string with same hash index. To limit the size of this
					 * array to 64K, this link is maintained only for the last 32K strings.
					 * An index in this array is thus a window index modulo 32K.
					 */

					this.head = null; /* Heads of the hash chains or NIL. */

					this.ins_h = 0; /* hash index of string to be inserted */
					this.hash_size = 0; /* number of elements in hash table */
					this.hash_bits = 0; /* log2(hash_size) */
					this.hash_mask = 0; /* hash_size-1 */

					this.hash_shift = 0;
					/* Number of bits by which ins_h must be shifted at each input
					 * step. It must be such that after MIN_MATCH steps, the oldest
					 * byte no longer takes part in the hash key, that is:
					 *   hash_shift * MIN_MATCH >= hash_bits
					 */

					this.block_start = 0;
					/* Window position at the beginning of the current output block. Gets
					 * negative when the window is moved backwards.
					 */

					this.match_length = 0; /* length of best match */
					this.prev_match = 0; /* previous match */
					this.match_available = 0; /* set if previous match exists */
					this.strstart = 0; /* start of string to insert */
					this.match_start = 0; /* start of matching string */
					this.lookahead = 0; /* number of valid bytes ahead in window */

					this.prev_length = 0;
					/* Length of the best match at previous step. Matches not greater than this
					 * are discarded. This is used in the lazy match evaluation.
					 */

					this.max_chain_length = 0;
					/* To speed up deflation, hash chains are never searched beyond this
					 * length.  A higher limit improves compression ratio but degrades the
					 * speed.
					 */

					this.max_lazy_match = 0;
					/* Attempt to find a better match only when the current match is strictly
					 * smaller than this value. This mechanism is used only for compression
					 * levels >= 4.
					 */
					// That's alias to max_lazy_match, don't use directly
					//this.max_insert_length = 0;
					/* Insert new strings in the hash table only if the match length is not
					 * greater than this length. This saves time but degrades compression.
					 * max_insert_length is used only for compression levels <= 3.
					 */

					this.level = 0; /* compression level (1..9) */
					this.strategy = 0; /* favor or force Huffman coding*/

					this.good_match = 0;
					/* Use a faster search when the previous match is longer than this */

					this.nice_match = 0; /* Stop searching when current match exceeds this */

					/* used by trees.c: */

					/* Didn't use ct_data typedef below to suppress compiler warning */

					// struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
					// struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
					// struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

					// Use flat array of DOUBLE size, with interleaved fata,
					// because JS does not support effective
					this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);
					this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);
					this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);
					zero(this.dyn_ltree);
					zero(this.dyn_dtree);
					zero(this.bl_tree);

					this.l_desc = null; /* desc. for literal tree */
					this.d_desc = null; /* desc. for distance tree */
					this.bl_desc = null; /* desc. for bit length tree */

					//ush bl_count[MAX_BITS+1];
					this.bl_count = new utils.Buf16(MAX_BITS + 1);
					/* number of codes at each bit length for an optimal tree */

					//int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
					this.heap = new utils.Buf16(
						2 * L_CODES + 1
					); /* heap used to build the Huffman trees */
					zero(this.heap);

					this.heap_len = 0; /* number of elements in the heap */
					this.heap_max = 0; /* element of largest frequency */
					/* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
					 * The same heap array is used to build all trees.
					 */

					this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
					zero(this.depth);
					/* Depth of each subtree used as tie breaker for trees of equal frequency
					 */

					this.l_buf = 0; /* buffer index for literals or lengths */

					this.lit_bufsize = 0;
					/* Size of match buffer for literals/lengths.  There are 4 reasons for
					 * limiting lit_bufsize to 64K:
					 *   - frequencies can be kept in 16 bit counters
					 *   - if compression is not successful for the first block, all input
					 *     data is still in the window so we can still emit a stored block even
					 *     when input comes from standard input.  (This can also be done for
					 *     all blocks if lit_bufsize is not greater than 32K.)
					 *   - if compression is not successful for a file smaller than 64K, we can
					 *     even emit a stored file instead of a stored block (saving 5 bytes).
					 *     This is applicable only for zip (not gzip or zlib).
					 *   - creating new Huffman trees less frequently may not provide fast
					 *     adaptation to changes in the input data statistics. (Take for
					 *     example a binary file with poorly compressible code followed by
					 *     a highly compressible string table.) Smaller buffer sizes give
					 *     fast adaptation but have of course the overhead of transmitting
					 *     trees more frequently.
					 *   - I can't count above 4
					 */

					this.last_lit = 0; /* running index in l_buf */

					this.d_buf = 0;
					/* Buffer index for distances. To simplify the code, d_buf and l_buf have
					 * the same number of elements. To use different lengths, an extra flag
					 * array would be necessary.
					 */

					this.opt_len = 0; /* bit length of current block with optimal trees */
					this.static_len = 0; /* bit length of current block with static trees */
					this.matches = 0; /* number of string matches in current block */
					this.insert = 0; /* bytes at end of window left to insert */

					this.bi_buf = 0;
					/* Output buffer. bits are inserted starting at the bottom (least
					 * significant bits).
					 */
					this.bi_valid = 0;
					/* Number of valid bits in bi_buf.  All bits above the last valid bit
					 * are always zero.
					 */

					// Used for window memory init. We safely ignore it for JS. That makes
					// sense only for pointers and memory check tools.
					//this.high_water = 0;
					/* High water mark offset in window for initialized bytes -- bytes above
					 * this are set to zero in order to avoid memory check warnings when
					 * longest match routines access bytes past the input.  This is then
					 * updated to the new high water mark.
					 */
				}

				function deflateResetKeep(strm) {
					var s;

					if (!strm || !strm.state) {
						return err(strm, Z_STREAM_ERROR);
					}

					strm.total_in = strm.total_out = 0;
					strm.data_type = Z_UNKNOWN;

					s = strm.state;
					s.pending = 0;
					s.pending_out = 0;

					if (s.wrap < 0) {
						s.wrap = -s.wrap;
						/* was made negative by deflate(..., Z_FINISH); */
					}
					s.status = s.wrap ? INIT_STATE : BUSY_STATE;
					strm.adler =
						s.wrap === 2
							? 0 // crc32(0, Z_NULL, 0)
							: 1; // adler32(0, Z_NULL, 0)
					s.last_flush = Z_NO_FLUSH;
					trees._tr_init(s);
					return Z_OK;
				}

				function deflateReset(strm) {
					var ret = deflateResetKeep(strm);
					if (ret === Z_OK) {
						lm_init(strm.state);
					}
					return ret;
				}

				function deflateSetHeader(strm, head) {
					if (!strm || !strm.state) {
						return Z_STREAM_ERROR;
					}
					if (strm.state.wrap !== 2) {
						return Z_STREAM_ERROR;
					}
					strm.state.gzhead = head;
					return Z_OK;
				}

				function deflateInit2(
					strm,
					level,
					method,
					windowBits,
					memLevel,
					strategy
				) {
					if (!strm) {
						// === Z_NULL
						return Z_STREAM_ERROR;
					}
					var wrap = 1;

					if (level === Z_DEFAULT_COMPRESSION) {
						level = 6;
					}

					if (windowBits < 0) {
						/* suppress zlib wrapper */
						wrap = 0;
						windowBits = -windowBits;
					} else if (windowBits > 15) {
						wrap = 2; /* write gzip wrapper instead */
						windowBits -= 16;
					}

					if (
						memLevel < 1 ||
						memLevel > MAX_MEM_LEVEL ||
						method !== Z_DEFLATED ||
						windowBits < 8 ||
						windowBits > 15 ||
						level < 0 ||
						level > 9 ||
						strategy < 0 ||
						strategy > Z_FIXED
					) {
						return err(strm, Z_STREAM_ERROR);
					}

					if (windowBits === 8) {
						windowBits = 9;
					}
					/* until 256-byte window bug fixed */

					var s = new DeflateState();

					strm.state = s;
					s.strm = strm;

					s.wrap = wrap;
					s.gzhead = null;
					s.w_bits = windowBits;
					s.w_size = 1 << s.w_bits;
					s.w_mask = s.w_size - 1;

					s.hash_bits = memLevel + 7;
					s.hash_size = 1 << s.hash_bits;
					s.hash_mask = s.hash_size - 1;
					s.hash_shift = ~~(
						(s.hash_bits + MIN_MATCH - 1) /
						MIN_MATCH
					);

					s.window = new utils.Buf8(s.w_size * 2);
					s.head = new utils.Buf16(s.hash_size);
					s.prev = new utils.Buf16(s.w_size);

					// Don't need mem init magic for JS.
					//s.high_water = 0;  /* nothing written to s->window yet */

					s.lit_bufsize =
						1 << (memLevel + 6); /* 16K elements by default */

					s.pending_buf_size = s.lit_bufsize * 4;

					//overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
					//s->pending_buf = (uchf *) overlay;
					s.pending_buf = new utils.Buf8(s.pending_buf_size);

					// It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
					//s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
					s.d_buf = 1 * s.lit_bufsize;

					//s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
					s.l_buf = (1 + 2) * s.lit_bufsize;

					s.level = level;
					s.strategy = strategy;
					s.method = method;

					return deflateReset(strm);
				}

				function deflateInit(strm, level) {
					return deflateInit2(
						strm,
						level,
						Z_DEFLATED,
						MAX_WBITS,
						DEF_MEM_LEVEL,
						Z_DEFAULT_STRATEGY
					);
				}

				function deflate(strm, flush) {
					var old_flush, s;
					var beg, val; // for gzip header write only

					if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
						return strm
							? err(strm, Z_STREAM_ERROR)
							: Z_STREAM_ERROR;
					}

					s = strm.state;

					if (
						!strm.output ||
						(!strm.input && strm.avail_in !== 0) ||
						(s.status === FINISH_STATE && flush !== Z_FINISH)
					) {
						return err(
							strm,
							strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR
						);
					}

					s.strm = strm; /* just in case */
					old_flush = s.last_flush;
					s.last_flush = flush;

					/* Write the header */
					if (s.status === INIT_STATE) {
						if (s.wrap === 2) {
							// GZIP header
							strm.adler = 0; //crc32(0L, Z_NULL, 0);
							put_byte(s, 31);
							put_byte(s, 139);
							put_byte(s, 8);
							if (!s.gzhead) {
								// s->gzhead == Z_NULL
								put_byte(s, 0);
								put_byte(s, 0);
								put_byte(s, 0);
								put_byte(s, 0);
								put_byte(s, 0);
								put_byte(
									s,
									s.level === 9
										? 2
										: s.strategy >= Z_HUFFMAN_ONLY ||
										  s.level < 2
										? 4
										: 0
								);
								put_byte(s, OS_CODE);
								s.status = BUSY_STATE;
							} else {
								put_byte(
									s,
									(s.gzhead.text ? 1 : 0) +
										(s.gzhead.hcrc ? 2 : 0) +
										(!s.gzhead.extra ? 0 : 4) +
										(!s.gzhead.name ? 0 : 8) +
										(!s.gzhead.comment ? 0 : 16)
								);
								put_byte(s, s.gzhead.time & 0xff);
								put_byte(s, (s.gzhead.time >> 8) & 0xff);
								put_byte(s, (s.gzhead.time >> 16) & 0xff);
								put_byte(s, (s.gzhead.time >> 24) & 0xff);
								put_byte(
									s,
									s.level === 9
										? 2
										: s.strategy >= Z_HUFFMAN_ONLY ||
										  s.level < 2
										? 4
										: 0
								);
								put_byte(s, s.gzhead.os & 0xff);
								if (s.gzhead.extra && s.gzhead.extra.length) {
									put_byte(s, s.gzhead.extra.length & 0xff);
									put_byte(
										s,
										(s.gzhead.extra.length >> 8) & 0xff
									);
								}
								if (s.gzhead.hcrc) {
									strm.adler = crc32(
										strm.adler,
										s.pending_buf,
										s.pending,
										0
									);
								}
								s.gzindex = 0;
								s.status = EXTRA_STATE;
							}
						} // DEFLATE header
						else {
							var header =
								(Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
							var level_flags = -1;

							if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
								level_flags = 0;
							} else if (s.level < 6) {
								level_flags = 1;
							} else if (s.level === 6) {
								level_flags = 2;
							} else {
								level_flags = 3;
							}
							header |= level_flags << 6;
							if (s.strstart !== 0) {
								header |= PRESET_DICT;
							}
							header += 31 - (header % 31);

							s.status = BUSY_STATE;
							putShortMSB(s, header);

							/* Save the adler32 of the preset dictionary: */
							if (s.strstart !== 0) {
								putShortMSB(s, strm.adler >>> 16);
								putShortMSB(s, strm.adler & 0xffff);
							}
							strm.adler = 1; // adler32(0L, Z_NULL, 0);
						}
					}

					//#ifdef GZIP
					if (s.status === EXTRA_STATE) {
						if (s.gzhead.extra /* != Z_NULL*/) {
							beg = s.pending; /* start of bytes to update crc */

							while (
								s.gzindex <
								(s.gzhead.extra.length & 0xffff)
							) {
								if (s.pending === s.pending_buf_size) {
									if (s.gzhead.hcrc && s.pending > beg) {
										strm.adler = crc32(
											strm.adler,
											s.pending_buf,
											s.pending - beg,
											beg
										);
									}
									flush_pending(strm);
									beg = s.pending;
									if (s.pending === s.pending_buf_size) {
										break;
									}
								}
								put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
								s.gzindex++;
							}
							if (s.gzhead.hcrc && s.pending > beg) {
								strm.adler = crc32(
									strm.adler,
									s.pending_buf,
									s.pending - beg,
									beg
								);
							}
							if (s.gzindex === s.gzhead.extra.length) {
								s.gzindex = 0;
								s.status = NAME_STATE;
							}
						} else {
							s.status = NAME_STATE;
						}
					}
					if (s.status === NAME_STATE) {
						if (s.gzhead.name /* != Z_NULL*/) {
							beg = s.pending; /* start of bytes to update crc */
							//int val;

							do {
								if (s.pending === s.pending_buf_size) {
									if (s.gzhead.hcrc && s.pending > beg) {
										strm.adler = crc32(
											strm.adler,
											s.pending_buf,
											s.pending - beg,
											beg
										);
									}
									flush_pending(strm);
									beg = s.pending;
									if (s.pending === s.pending_buf_size) {
										val = 1;
										break;
									}
								}
								// JS specific: little magic to add zero terminator to end of string
								if (s.gzindex < s.gzhead.name.length) {
									val =
										s.gzhead.name.charCodeAt(s.gzindex++) &
										0xff;
								} else {
									val = 0;
								}
								put_byte(s, val);
							} while (val !== 0);

							if (s.gzhead.hcrc && s.pending > beg) {
								strm.adler = crc32(
									strm.adler,
									s.pending_buf,
									s.pending - beg,
									beg
								);
							}
							if (val === 0) {
								s.gzindex = 0;
								s.status = COMMENT_STATE;
							}
						} else {
							s.status = COMMENT_STATE;
						}
					}
					if (s.status === COMMENT_STATE) {
						if (s.gzhead.comment /* != Z_NULL*/) {
							beg = s.pending; /* start of bytes to update crc */
							//int val;

							do {
								if (s.pending === s.pending_buf_size) {
									if (s.gzhead.hcrc && s.pending > beg) {
										strm.adler = crc32(
											strm.adler,
											s.pending_buf,
											s.pending - beg,
											beg
										);
									}
									flush_pending(strm);
									beg = s.pending;
									if (s.pending === s.pending_buf_size) {
										val = 1;
										break;
									}
								}
								// JS specific: little magic to add zero terminator to end of string
								if (s.gzindex < s.gzhead.comment.length) {
									val =
										s.gzhead.comment.charCodeAt(
											s.gzindex++
										) & 0xff;
								} else {
									val = 0;
								}
								put_byte(s, val);
							} while (val !== 0);

							if (s.gzhead.hcrc && s.pending > beg) {
								strm.adler = crc32(
									strm.adler,
									s.pending_buf,
									s.pending - beg,
									beg
								);
							}
							if (val === 0) {
								s.status = HCRC_STATE;
							}
						} else {
							s.status = HCRC_STATE;
						}
					}
					if (s.status === HCRC_STATE) {
						if (s.gzhead.hcrc) {
							if (s.pending + 2 > s.pending_buf_size) {
								flush_pending(strm);
							}
							if (s.pending + 2 <= s.pending_buf_size) {
								put_byte(s, strm.adler & 0xff);
								put_byte(s, (strm.adler >> 8) & 0xff);
								strm.adler = 0; //crc32(0L, Z_NULL, 0);
								s.status = BUSY_STATE;
							}
						} else {
							s.status = BUSY_STATE;
						}
					}
					//#endif

					/* Flush as much pending output as possible */
					if (s.pending !== 0) {
						flush_pending(strm);
						if (strm.avail_out === 0) {
							/* Since avail_out is 0, deflate will be called again with
							 * more output space, but possibly with both pending and
							 * avail_in equal to zero. There won't be anything to do,
							 * but this is not an error situation so make sure we
							 * return OK instead of BUF_ERROR at next call of deflate:
							 */
							s.last_flush = -1;
							return Z_OK;
						}

						/* Make sure there is something to do and avoid duplicate consecutive
						 * flushes. For repeated and useless calls with Z_FINISH, we keep
						 * returning Z_STREAM_END instead of Z_BUF_ERROR.
						 */
					} else if (
						strm.avail_in === 0 &&
						rank(flush) <= rank(old_flush) &&
						flush !== Z_FINISH
					) {
						return err(strm, Z_BUF_ERROR);
					}

					/* User must not provide more input after the first FINISH: */
					if (s.status === FINISH_STATE && strm.avail_in !== 0) {
						return err(strm, Z_BUF_ERROR);
					}

					/* Start a new block or continue the current one.
					 */
					if (
						strm.avail_in !== 0 ||
						s.lookahead !== 0 ||
						(flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)
					) {
						var bstate =
							s.strategy === Z_HUFFMAN_ONLY
								? deflate_huff(s, flush)
								: s.strategy === Z_RLE
								? deflate_rle(s, flush)
								: configuration_table[s.level].func(s, flush);

						if (
							bstate === BS_FINISH_STARTED ||
							bstate === BS_FINISH_DONE
						) {
							s.status = FINISH_STATE;
						}
						if (
							bstate === BS_NEED_MORE ||
							bstate === BS_FINISH_STARTED
						) {
							if (strm.avail_out === 0) {
								s.last_flush = -1;
								/* avoid BUF_ERROR next call, see above */
							}
							return Z_OK;
							/* If flush != Z_NO_FLUSH && avail_out == 0, the next call
							 * of deflate should use the same flush parameter to make sure
							 * that the flush is complete. So we don't have to output an
							 * empty block here, this will be done at next call. This also
							 * ensures that for a very small output buffer, we emit at most
							 * one empty block.
							 */
						}
						if (bstate === BS_BLOCK_DONE) {
							if (flush === Z_PARTIAL_FLUSH) {
								trees._tr_align(s);
							} else if (flush !== Z_BLOCK) {
								/* FULL_FLUSH or SYNC_FLUSH */

								trees._tr_stored_block(s, 0, 0, false);
								/* For a full flush, this empty block will be recognized
								 * as a special marker by inflate_sync().
								 */
								if (flush === Z_FULL_FLUSH) {
									/*** CLEAR_HASH(s); ***/ /* forget history */
									zero(s.head); // Fill with NIL (= 0);

									if (s.lookahead === 0) {
										s.strstart = 0;
										s.block_start = 0;
										s.insert = 0;
									}
								}
							}
							flush_pending(strm);
							if (strm.avail_out === 0) {
								s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
								return Z_OK;
							}
						}
					}
					//Assert(strm->avail_out > 0, "bug2");
					//if (strm.avail_out <= 0) { throw new Error("bug2");}

					if (flush !== Z_FINISH) {
						return Z_OK;
					}
					if (s.wrap <= 0) {
						return Z_STREAM_END;
					}

					/* Write the trailer */
					if (s.wrap === 2) {
						put_byte(s, strm.adler & 0xff);
						put_byte(s, (strm.adler >> 8) & 0xff);
						put_byte(s, (strm.adler >> 16) & 0xff);
						put_byte(s, (strm.adler >> 24) & 0xff);
						put_byte(s, strm.total_in & 0xff);
						put_byte(s, (strm.total_in >> 8) & 0xff);
						put_byte(s, (strm.total_in >> 16) & 0xff);
						put_byte(s, (strm.total_in >> 24) & 0xff);
					} else {
						putShortMSB(s, strm.adler >>> 16);
						putShortMSB(s, strm.adler & 0xffff);
					}

					flush_pending(strm);
					/* If avail_out is zero, the application will call deflate again
					 * to flush the rest.
					 */
					if (s.wrap > 0) {
						s.wrap = -s.wrap;
					}
					/* write the trailer only once! */
					return s.pending !== 0 ? Z_OK : Z_STREAM_END;
				}

				function deflateEnd(strm) {
					var status;

					if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {
						return Z_STREAM_ERROR;
					}

					status = strm.state.status;
					if (
						status !== INIT_STATE &&
						status !== EXTRA_STATE &&
						status !== NAME_STATE &&
						status !== COMMENT_STATE &&
						status !== HCRC_STATE &&
						status !== BUSY_STATE &&
						status !== FINISH_STATE
					) {
						return err(strm, Z_STREAM_ERROR);
					}

					strm.state = null;

					return status === BUSY_STATE
						? err(strm, Z_DATA_ERROR)
						: Z_OK;
				}

				/* =========================================================================
				 * Initializes the compression dictionary from the given byte
				 * sequence without producing any compressed output.
				 */
				function deflateSetDictionary(strm, dictionary) {
					var dictLength = dictionary.length;

					var s;
					var str, n;
					var wrap;
					var avail;
					var next;
					var input;
					var tmpDict;

					if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {
						return Z_STREAM_ERROR;
					}

					s = strm.state;
					wrap = s.wrap;

					if (
						wrap === 2 ||
						(wrap === 1 && s.status !== INIT_STATE) ||
						s.lookahead
					) {
						return Z_STREAM_ERROR;
					}

					/* when using zlib wrappers, compute Adler-32 for provided dictionary */
					if (wrap === 1) {
						/* adler32(strm->adler, dictionary, dictLength); */
						strm.adler = adler32(
							strm.adler,
							dictionary,
							dictLength,
							0
						);
					}

					s.wrap = 0; /* avoid computing Adler-32 in read_buf */

					/* if dictionary would fill window, just replace the history */
					if (dictLength >= s.w_size) {
						if (wrap === 0) {
							/* already empty otherwise */
							/*** CLEAR_HASH(s); ***/
							zero(s.head); // Fill with NIL (= 0);
							s.strstart = 0;
							s.block_start = 0;
							s.insert = 0;
						}
						/* use the tail */
						// dictionary = dictionary.slice(dictLength - s.w_size);
						tmpDict = new utils.Buf8(s.w_size);
						utils.arraySet(
							tmpDict,
							dictionary,
							dictLength - s.w_size,
							s.w_size,
							0
						);
						dictionary = tmpDict;
						dictLength = s.w_size;
					}
					/* insert dictionary into window and hash */
					avail = strm.avail_in;
					next = strm.next_in;
					input = strm.input;
					strm.avail_in = dictLength;
					strm.next_in = 0;
					strm.input = dictionary;
					fill_window(s);
					while (s.lookahead >= MIN_MATCH) {
						str = s.strstart;
						n = s.lookahead - (MIN_MATCH - 1);
						do {
							/* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
							s.ins_h =
								((s.ins_h << s.hash_shift) ^
									s.window[str + MIN_MATCH - 1]) &
								s.hash_mask;

							s.prev[str & s.w_mask] = s.head[s.ins_h];

							s.head[s.ins_h] = str;
							str++;
						} while (--n);
						s.strstart = str;
						s.lookahead = MIN_MATCH - 1;
						fill_window(s);
					}
					s.strstart += s.lookahead;
					s.block_start = s.strstart;
					s.insert = s.lookahead;
					s.lookahead = 0;
					s.match_length = s.prev_length = MIN_MATCH - 1;
					s.match_available = 0;
					strm.next_in = next;
					strm.input = input;
					strm.avail_in = avail;
					s.wrap = wrap;
					return Z_OK;
				}

				exports.deflateInit = deflateInit;
				exports.deflateInit2 = deflateInit2;
				exports.deflateReset = deflateReset;
				exports.deflateResetKeep = deflateResetKeep;
				exports.deflateSetHeader = deflateSetHeader;
				exports.deflate = deflate;
				exports.deflateEnd = deflateEnd;
				exports.deflateSetDictionary = deflateSetDictionary;
				exports.deflateInfo = "pako deflate (from Nodeca project)";

				/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

				/***/
			},

		/***/ "./node_modules/pako/lib/zlib/inffast.js":
			/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inffast.js ***!
  \***********************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";

				// (C) 1995-2013 Jean-loup Gailly and Mark Adler
				// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
				//
				// This software is provided 'as-is', without any express or implied
				// warranty. In no event will the authors be held liable for any damages
				// arising from the use of this software.
				//
				// Permission is granted to anyone to use this software for any purpose,
				// including commercial applications, and to alter it and redistribute it
				// freely, subject to the following restrictions:
				//
				// 1. The origin of this software must not be misrepresented; you must not
				//   claim that you wrote the original software. If you use this software
				//   in a product, an acknowledgment in the product documentation would be
				//   appreciated but is not required.
				// 2. Altered source versions must be plainly marked as such, and must not be
				//   misrepresented as being the original software.
				// 3. This notice may not be removed or altered from any source distribution.

				// See state defs from inflate.js
				var BAD = 30; /* got a data error -- remain here until reset */
				var TYPE = 12; /* i: waiting for type bits, including last-flag bit */

				/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
				module.exports = function inflate_fast(strm, start) {
					var state;
					var _in; /* local strm.input */
					var last; /* have enough input while in < last */
					var _out; /* local strm.output */
					var beg; /* inflate()'s initial strm.output */
					var end; /* while out < end, enough space available */
					//#ifdef INFLATE_STRICT
					var dmax; /* maximum distance from zlib header */
					//#endif
					var wsize; /* window size or zero if not using window */
					var whave; /* valid bytes in the window */
					var wnext; /* window write index */
					// Use `s_window` instead `window`, avoid conflict with instrumentation tools
					var s_window; /* allocated sliding window, if wsize != 0 */
					var hold; /* local strm.hold */
					var bits; /* local strm.bits */
					var lcode; /* local strm.lencode */
					var dcode; /* local strm.distcode */
					var lmask; /* mask for first level of length codes */
					var dmask; /* mask for first level of distance codes */
					var here; /* retrieved table entry */
					var op; /* code bits, operation, extra bits, or */
					/*  window position, window bytes to copy */
					var len; /* match length, unused bytes */
					var dist; /* match distance */
					var from; /* where to copy match from */
					var from_source;

					var input, output; // JS specific, because we have no pointers

					/* copy state to local variables */
					state = strm.state;
					//here = state.here;
					_in = strm.next_in;
					input = strm.input;
					last = _in + (strm.avail_in - 5);
					_out = strm.next_out;
					output = strm.output;
					beg = _out - (start - strm.avail_out);
					end = _out + (strm.avail_out - 257);
					//#ifdef INFLATE_STRICT
					dmax = state.dmax;
					//#endif
					wsize = state.wsize;
					whave = state.whave;
					wnext = state.wnext;
					s_window = state.window;
					hold = state.hold;
					bits = state.bits;
					lcode = state.lencode;
					dcode = state.distcode;
					lmask = (1 << state.lenbits) - 1;
					dmask = (1 << state.distbits) - 1;

					/* decode literals and length/distances until end-of-block or not enough
     input data or output space */

					top: do {
						if (bits < 15) {
							hold += input[_in++] << bits;
							bits += 8;
							hold += input[_in++] << bits;
							bits += 8;
						}

						here = lcode[hold & lmask];

						dolen: for (;;) {
							// Goto emulation
							op = here >>> 24 /*here.bits*/;
							hold >>>= op;
							bits -= op;
							op = (here >>> 16) & 0xff /*here.op*/;
							if (op === 0) {
								/* literal */
								//Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
								//        "inflate:         literal '%c'\n" :
								//        "inflate:         literal 0x%02x\n", here.val));
								output[_out++] = here & 0xffff /*here.val*/;
							} else if (op & 16) {
								/* length base */
								len = here & 0xffff /*here.val*/;
								op &= 15; /* number of extra bits */
								if (op) {
									if (bits < op) {
										hold += input[_in++] << bits;
										bits += 8;
									}
									len += hold & ((1 << op) - 1);
									hold >>>= op;
									bits -= op;
								}
								//Tracevv((stderr, "inflate:         length %u\n", len));
								if (bits < 15) {
									hold += input[_in++] << bits;
									bits += 8;
									hold += input[_in++] << bits;
									bits += 8;
								}
								here = dcode[hold & dmask];

								dodist: for (;;) {
									// goto emulation
									op = here >>> 24 /*here.bits*/;
									hold >>>= op;
									bits -= op;
									op = (here >>> 16) & 0xff /*here.op*/;

									if (op & 16) {
										/* distance base */
										dist = here & 0xffff /*here.val*/;
										op &= 15; /* number of extra bits */
										if (bits < op) {
											hold += input[_in++] << bits;
											bits += 8;
											if (bits < op) {
												hold += input[_in++] << bits;
												bits += 8;
											}
										}
										dist += hold & ((1 << op) - 1);
										//#ifdef INFLATE_STRICT
										if (dist > dmax) {
											strm.msg =
												"invalid distance too far back";
											state.mode = BAD;
											break top;
										}
										//#endif
										hold >>>= op;
										bits -= op;
										//Tracevv((stderr, "inflate:         distance %u\n", dist));
										op =
											_out -
											beg; /* max distance in output */
										if (dist > op) {
											/* see if copy from window */
											op =
												dist -
												op; /* distance back in window */
											if (op > whave) {
												if (state.sane) {
													strm.msg =
														"invalid distance too far back";
													state.mode = BAD;
													break top;
												}

												// (!) This block is disabled in zlib defaults,
												// don't enable it for binary compatibility
												//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
												//                if (len <= op - whave) {
												//                  do {
												//                    output[_out++] = 0;
												//                  } while (--len);
												//                  continue top;
												//                }
												//                len -= op - whave;
												//                do {
												//                  output[_out++] = 0;
												//                } while (--op > whave);
												//                if (op === 0) {
												//                  from = _out - dist;
												//                  do {
												//                    output[_out++] = output[from++];
												//                  } while (--len);
												//                  continue top;
												//                }
												//#endif
											}
											from = 0; // window index
											from_source = s_window;
											if (wnext === 0) {
												/* very common case */
												from += wsize - op;
												if (op < len) {
													/* some from window */
													len -= op;
													do {
														output[_out++] =
															s_window[from++];
													} while (--op);
													from =
														_out -
														dist; /* rest from output */
													from_source = output;
												}
											} else if (wnext < op) {
												/* wrap around window */
												from += wsize + wnext - op;
												op -= wnext;
												if (op < len) {
													/* some from end of window */
													len -= op;
													do {
														output[_out++] =
															s_window[from++];
													} while (--op);
													from = 0;
													if (wnext < len) {
														/* some from start of window */
														op = wnext;
														len -= op;
														do {
															output[_out++] =
																s_window[
																	from++
																];
														} while (--op);
														from =
															_out -
															dist; /* rest from output */
														from_source = output;
													}
												}
											} else {
												/* contiguous in window */
												from += wnext - op;
												if (op < len) {
													/* some from window */
													len -= op;
													do {
														output[_out++] =
															s_window[from++];
													} while (--op);
													from =
														_out -
														dist; /* rest from output */
													from_source = output;
												}
											}
											while (len > 2) {
												output[_out++] =
													from_source[from++];
												output[_out++] =
													from_source[from++];
												output[_out++] =
													from_source[from++];
												len -= 3;
											}
											if (len) {
												output[_out++] =
													from_source[from++];
												if (len > 1) {
													output[_out++] =
														from_source[from++];
												}
											}
										} else {
											from =
												_out -
												dist; /* copy direct from output */
											do {
												/* minimum length is three */
												output[_out++] = output[from++];
												output[_out++] = output[from++];
												output[_out++] = output[from++];
												len -= 3;
											} while (len > 2);
											if (len) {
												output[_out++] = output[from++];
												if (len > 1) {
													output[_out++] =
														output[from++];
												}
											}
										}
									} else if ((op & 64) === 0) {
										/* 2nd level distance code */
										here =
											dcode[
												(here & 0xffff) /*here.val*/ +
													(hold & ((1 << op) - 1))
											];
										continue dodist;
									} else {
										strm.msg = "invalid distance code";
										state.mode = BAD;
										break top;
									}

									break; // need to emulate goto via "continue"
								}
							} else if ((op & 64) === 0) {
								/* 2nd level length code */
								here =
									lcode[
										(here & 0xffff) /*here.val*/ +
											(hold & ((1 << op) - 1))
									];
								continue dolen;
							} else if (op & 32) {
								/* end-of-block */
								//Tracevv((stderr, "inflate:         end of block\n"));
								state.mode = TYPE;
								break top;
							} else {
								strm.msg = "invalid literal/length code";
								state.mode = BAD;
								break top;
							}

							break; // need to emulate goto via "continue"
						}
					} while (_in < last && _out < end);

					/* return unused bytes (on entry, bits < 8, so in won't go too far back) */
					len = bits >> 3;
					_in -= len;
					bits -= len << 3;
					hold &= (1 << bits) - 1;

					/* update state and return */
					strm.next_in = _in;
					strm.next_out = _out;
					strm.avail_in =
						_in < last ? 5 + (last - _in) : 5 - (_in - last);
					strm.avail_out =
						_out < end ? 257 + (end - _out) : 257 - (_out - end);
					state.hold = hold;
					state.bits = bits;
					return;
				};

				/***/
			},

		/***/ "./node_modules/pako/lib/zlib/inflate.js":
			/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inflate.js ***!
  \***********************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";

				// (C) 1995-2013 Jean-loup Gailly and Mark Adler
				// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
				//
				// This software is provided 'as-is', without any express or implied
				// warranty. In no event will the authors be held liable for any damages
				// arising from the use of this software.
				//
				// Permission is granted to anyone to use this software for any purpose,
				// including commercial applications, and to alter it and redistribute it
				// freely, subject to the following restrictions:
				//
				// 1. The origin of this software must not be misrepresented; you must not
				//   claim that you wrote the original software. If you use this software
				//   in a product, an acknowledgment in the product documentation would be
				//   appreciated but is not required.
				// 2. Altered source versions must be plainly marked as such, and must not be
				//   misrepresented as being the original software.
				// 3. This notice may not be removed or altered from any source distribution.

				var utils = __webpack_require__(
					/*! ../utils/common */ "./node_modules/pako/lib/utils/common.js"
				);
				var adler32 = __webpack_require__(
					/*! ./adler32 */ "./node_modules/pako/lib/zlib/adler32.js"
				);
				var crc32 = __webpack_require__(
					/*! ./crc32 */ "./node_modules/pako/lib/zlib/crc32.js"
				);
				var inflate_fast = __webpack_require__(
					/*! ./inffast */ "./node_modules/pako/lib/zlib/inffast.js"
				);
				var inflate_table = __webpack_require__(
					/*! ./inftrees */ "./node_modules/pako/lib/zlib/inftrees.js"
				);

				var CODES = 0;
				var LENS = 1;
				var DISTS = 2;

				/* Public constants ==========================================================*/
				/* ===========================================================================*/

				/* Allowed flush values; see deflate() and inflate() below for details */
				//var Z_NO_FLUSH      = 0;
				//var Z_PARTIAL_FLUSH = 1;
				//var Z_SYNC_FLUSH    = 2;
				//var Z_FULL_FLUSH    = 3;
				var Z_FINISH = 4;
				var Z_BLOCK = 5;
				var Z_TREES = 6;

				/* Return codes for the compression/decompression functions. Negative values
				 * are errors, positive values are used for special but normal events.
				 */
				var Z_OK = 0;
				var Z_STREAM_END = 1;
				var Z_NEED_DICT = 2;
				//var Z_ERRNO         = -1;
				var Z_STREAM_ERROR = -2;
				var Z_DATA_ERROR = -3;
				var Z_MEM_ERROR = -4;
				var Z_BUF_ERROR = -5;
				//var Z_VERSION_ERROR = -6;

				/* The deflate compression method */
				var Z_DEFLATED = 8;

				/* STATES ====================================================================*/
				/* ===========================================================================*/

				var HEAD = 1; /* i: waiting for magic header */
				var FLAGS = 2; /* i: waiting for method and flags (gzip) */
				var TIME = 3; /* i: waiting for modification time (gzip) */
				var OS = 4; /* i: waiting for extra flags and operating system (gzip) */
				var EXLEN = 5; /* i: waiting for extra length (gzip) */
				var EXTRA = 6; /* i: waiting for extra bytes (gzip) */
				var NAME = 7; /* i: waiting for end of file name (gzip) */
				var COMMENT = 8; /* i: waiting for end of comment (gzip) */
				var HCRC = 9; /* i: waiting for header crc (gzip) */
				var DICTID = 10; /* i: waiting for dictionary check value */
				var DICT = 11; /* waiting for inflateSetDictionary() call */
				var TYPE = 12; /* i: waiting for type bits, including last-flag bit */
				var TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */
				var STORED = 14; /* i: waiting for stored size (length and complement) */
				var COPY_ = 15; /* i/o: same as COPY below, but only first time in */
				var COPY = 16; /* i/o: waiting for input or output to copy stored block */
				var TABLE = 17; /* i: waiting for dynamic block table lengths */
				var LENLENS = 18; /* i: waiting for code length code lengths */
				var CODELENS = 19; /* i: waiting for length/lit and distance code lengths */
				var LEN_ = 20; /* i: same as LEN below, but only first time in */
				var LEN = 21; /* i: waiting for length/lit/eob code */
				var LENEXT = 22; /* i: waiting for length extra bits */
				var DIST = 23; /* i: waiting for distance code */
				var DISTEXT = 24; /* i: waiting for distance extra bits */
				var MATCH = 25; /* o: waiting for output space to copy string */
				var LIT = 26; /* o: waiting for output space to write literal */
				var CHECK = 27; /* i: waiting for 32-bit check value */
				var LENGTH = 28; /* i: waiting for 32-bit length (gzip) */
				var DONE = 29; /* finished check, done -- remain here until reset */
				var BAD = 30; /* got a data error -- remain here until reset */
				var MEM = 31; /* got an inflate() memory error -- remain here until reset */
				var SYNC = 32; /* looking for synchronization bytes to restart inflate() */

				/* ===========================================================================*/

				var ENOUGH_LENS = 852;
				var ENOUGH_DISTS = 592;
				//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

				var MAX_WBITS = 15;
				/* 32K LZ77 window */
				var DEF_WBITS = MAX_WBITS;

				function zswap32(q) {
					return (
						((q >>> 24) & 0xff) +
						((q >>> 8) & 0xff00) +
						((q & 0xff00) << 8) +
						((q & 0xff) << 24)
					);
				}

				function InflateState() {
					this.mode = 0; /* current inflate mode */
					this.last = false; /* true if processing last block */
					this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
					this.havedict = false; /* true if dictionary provided */
					this.flags = 0; /* gzip header method and flags (0 if zlib) */
					this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */
					this.check = 0; /* protected copy of check value */
					this.total = 0; /* protected copy of output count */
					// TODO: may be {}
					this.head = null; /* where to save gzip header information */

					/* sliding window */
					this.wbits = 0; /* log base 2 of requested window size */
					this.wsize = 0; /* window size or zero if not using window */
					this.whave = 0; /* valid bytes in the window */
					this.wnext = 0; /* window write index */
					this.window = null; /* allocated sliding window, if needed */

					/* bit accumulator */
					this.hold = 0; /* input bit accumulator */
					this.bits = 0; /* number of bits in "in" */

					/* for string and stored block copying */
					this.length = 0; /* literal or length of data to copy */
					this.offset = 0; /* distance back to copy string from */

					/* for table and code decoding */
					this.extra = 0; /* extra bits needed */

					/* fixed and dynamic code tables */
					this.lencode = null; /* starting table for length/literal codes */
					this.distcode = null; /* starting table for distance codes */
					this.lenbits = 0; /* index bits for lencode */
					this.distbits = 0; /* index bits for distcode */

					/* dynamic table building */
					this.ncode = 0; /* number of code length code lengths */
					this.nlen = 0; /* number of length code lengths */
					this.ndist = 0; /* number of distance code lengths */
					this.have = 0; /* number of code lengths in lens[] */
					this.next = null; /* next available space in codes[] */

					this.lens = new utils.Buf16(
						320
					); /* temporary storage for code lengths */
					this.work = new utils.Buf16(
						288
					); /* work area for code table building */

					/*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
					//this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
					this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */
					this.distdyn = null; /* dynamic table for distance codes (JS specific) */
					this.sane = 0; /* if false, allow invalid distance too far */
					this.back = 0; /* bits back of last unprocessed length/lit */
					this.was = 0; /* initial length of match */
				}

				function inflateResetKeep(strm) {
					var state;

					if (!strm || !strm.state) {
						return Z_STREAM_ERROR;
					}
					state = strm.state;
					strm.total_in = strm.total_out = state.total = 0;
					strm.msg = ""; /*Z_NULL*/
					if (state.wrap) {
						/* to support ill-conceived Java test suite */
						strm.adler = state.wrap & 1;
					}
					state.mode = HEAD;
					state.last = 0;
					state.havedict = 0;
					state.dmax = 32768;
					state.head = null /*Z_NULL*/;
					state.hold = 0;
					state.bits = 0;
					//state.lencode = state.distcode = state.next = state.codes;
					state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
					state.distcode = state.distdyn = new utils.Buf32(
						ENOUGH_DISTS
					);

					state.sane = 1;
					state.back = -1;
					//Tracev((stderr, "inflate: reset\n"));
					return Z_OK;
				}

				function inflateReset(strm) {
					var state;

					if (!strm || !strm.state) {
						return Z_STREAM_ERROR;
					}
					state = strm.state;
					state.wsize = 0;
					state.whave = 0;
					state.wnext = 0;
					return inflateResetKeep(strm);
				}

				function inflateReset2(strm, windowBits) {
					var wrap;
					var state;

					/* get the state */
					if (!strm || !strm.state) {
						return Z_STREAM_ERROR;
					}
					state = strm.state;

					/* extract wrap request from windowBits parameter */
					if (windowBits < 0) {
						wrap = 0;
						windowBits = -windowBits;
					} else {
						wrap = (windowBits >> 4) + 1;
						if (windowBits < 48) {
							windowBits &= 15;
						}
					}

					/* set number of window bits, free window if different */
					if (windowBits && (windowBits < 8 || windowBits > 15)) {
						return Z_STREAM_ERROR;
					}
					if (state.window !== null && state.wbits !== windowBits) {
						state.window = null;
					}

					/* update state and reset the rest of it */
					state.wrap = wrap;
					state.wbits = windowBits;
					return inflateReset(strm);
				}

				function inflateInit2(strm, windowBits) {
					var ret;
					var state;

					if (!strm) {
						return Z_STREAM_ERROR;
					}
					//strm.msg = Z_NULL;                 /* in case we return an error */

					state = new InflateState();

					//if (state === Z_NULL) return Z_MEM_ERROR;
					//Tracev((stderr, "inflate: allocated\n"));
					strm.state = state;
					state.window = null /*Z_NULL*/;
					ret = inflateReset2(strm, windowBits);
					if (ret !== Z_OK) {
						strm.state = null /*Z_NULL*/;
					}
					return ret;
				}

				function inflateInit(strm) {
					return inflateInit2(strm, DEF_WBITS);
				}

				/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
				var virgin = true;

				var lenfix, distfix; // We have no pointers in JS, so keep tables separate

				function fixedtables(state) {
					/* build fixed huffman tables if first call (may not be thread safe) */
					if (virgin) {
						var sym;

						lenfix = new utils.Buf32(512);
						distfix = new utils.Buf32(32);

						/* literal/length table */
						sym = 0;
						while (sym < 144) {
							state.lens[sym++] = 8;
						}
						while (sym < 256) {
							state.lens[sym++] = 9;
						}
						while (sym < 280) {
							state.lens[sym++] = 7;
						}
						while (sym < 288) {
							state.lens[sym++] = 8;
						}

						inflate_table(
							LENS,
							state.lens,
							0,
							288,
							lenfix,
							0,
							state.work,
							{bits: 9}
						);

						/* distance table */
						sym = 0;
						while (sym < 32) {
							state.lens[sym++] = 5;
						}

						inflate_table(
							DISTS,
							state.lens,
							0,
							32,
							distfix,
							0,
							state.work,
							{bits: 5}
						);

						/* do this just once */
						virgin = false;
					}

					state.lencode = lenfix;
					state.lenbits = 9;
					state.distcode = distfix;
					state.distbits = 5;
				}

				/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
				function updatewindow(strm, src, end, copy) {
					var dist;
					var state = strm.state;

					/* if it hasn't been done already, allocate space for the window */
					if (state.window === null) {
						state.wsize = 1 << state.wbits;
						state.wnext = 0;
						state.whave = 0;

						state.window = new utils.Buf8(state.wsize);
					}

					/* copy state->wsize or less output bytes into the circular window */
					if (copy >= state.wsize) {
						utils.arraySet(
							state.window,
							src,
							end - state.wsize,
							state.wsize,
							0
						);
						state.wnext = 0;
						state.whave = state.wsize;
					} else {
						dist = state.wsize - state.wnext;
						if (dist > copy) {
							dist = copy;
						}
						//zmemcpy(state->window + state->wnext, end - copy, dist);
						utils.arraySet(
							state.window,
							src,
							end - copy,
							dist,
							state.wnext
						);
						copy -= dist;
						if (copy) {
							//zmemcpy(state->window, end - copy, copy);
							utils.arraySet(
								state.window,
								src,
								end - copy,
								copy,
								0
							);
							state.wnext = copy;
							state.whave = state.wsize;
						} else {
							state.wnext += dist;
							if (state.wnext === state.wsize) {
								state.wnext = 0;
							}
							if (state.whave < state.wsize) {
								state.whave += dist;
							}
						}
					}
					return 0;
				}

				function inflate(strm, flush) {
					var state;
					var input, output; // input/output buffers
					var next; /* next input INDEX */
					var put; /* next output INDEX */
					var have, left; /* available input and output */
					var hold; /* bit buffer */
					var bits; /* bits in bit buffer */
					var _in,
						_out; /* save starting available input and output */
					var copy; /* number of stored or match bytes to copy */
					var from; /* where to copy match bytes from */
					var from_source;
					var here = 0; /* current decoding table entry */
					var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
					//var last;                   /* parent table entry */
					var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
					var len; /* length to copy for repeats, bits to drop */
					var ret; /* return code */
					var hbuf = new utils.Buf8(
						4
					); /* buffer for gzip header crc calculation */
					var opts;

					var n; // temporary var for NEED_BITS

					var order =
						/* permutation of code lengths */
						[
							16,
							17,
							18,
							0,
							8,
							7,
							9,
							6,
							10,
							5,
							11,
							4,
							12,
							3,
							13,
							2,
							14,
							1,
							15,
						];

					if (
						!strm ||
						!strm.state ||
						!strm.output ||
						(!strm.input && strm.avail_in !== 0)
					) {
						return Z_STREAM_ERROR;
					}

					state = strm.state;
					if (state.mode === TYPE) {
						state.mode = TYPEDO;
					} /* skip check */

					//--- LOAD() ---
					put = strm.next_out;
					output = strm.output;
					left = strm.avail_out;
					next = strm.next_in;
					input = strm.input;
					have = strm.avail_in;
					hold = state.hold;
					bits = state.bits;
					//---

					_in = have;
					_out = left;
					ret = Z_OK;

					// goto emulation
					inf_leave: for (;;) {
						switch (state.mode) {
							case HEAD:
								if (state.wrap === 0) {
									state.mode = TYPEDO;
									break;
								}
								//=== NEEDBITS(16);
								while (bits < 16) {
									if (have === 0) {
										break inf_leave;
									}
									have--;
									hold += input[next++] << bits;
									bits += 8;
								}
								//===//
								if (state.wrap & 2 && hold === 0x8b1f) {
									/* gzip header */
									state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
									//=== CRC2(state.check, hold);
									hbuf[0] = hold & 0xff;
									hbuf[1] = (hold >>> 8) & 0xff;
									state.check = crc32(
										state.check,
										hbuf,
										2,
										0
									);
									//===//

									//=== INITBITS();
									hold = 0;
									bits = 0;
									//===//
									state.mode = FLAGS;
									break;
								}
								state.flags = 0; /* expect zlib header */
								if (state.head) {
									state.head.done = false;
								}
								if (
									!(
										state.wrap & 1
									) /* check if zlib header allowed */ ||
									(((hold & 0xff) /*BITS(8)*/ << 8) +
										(hold >> 8)) %
										31
								) {
									strm.msg = "incorrect header check";
									state.mode = BAD;
									break;
								}
								if ((hold & 0x0f) /*BITS(4)*/ !== Z_DEFLATED) {
									strm.msg = "unknown compression method";
									state.mode = BAD;
									break;
								}
								//--- DROPBITS(4) ---//
								hold >>>= 4;
								bits -= 4;
								//---//
								len = (hold & 0x0f) /*BITS(4)*/ + 8;
								if (state.wbits === 0) {
									state.wbits = len;
								} else if (len > state.wbits) {
									strm.msg = "invalid window size";
									state.mode = BAD;
									break;
								}
								state.dmax = 1 << len;
								//Tracev((stderr, "inflate:   zlib header ok\n"));
								strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/;
								state.mode = hold & 0x200 ? DICTID : TYPE;
								//=== INITBITS();
								hold = 0;
								bits = 0;
								//===//
								break;
							case FLAGS:
								//=== NEEDBITS(16); */
								while (bits < 16) {
									if (have === 0) {
										break inf_leave;
									}
									have--;
									hold += input[next++] << bits;
									bits += 8;
								}
								//===//
								state.flags = hold;
								if ((state.flags & 0xff) !== Z_DEFLATED) {
									strm.msg = "unknown compression method";
									state.mode = BAD;
									break;
								}
								if (state.flags & 0xe000) {
									strm.msg = "unknown header flags set";
									state.mode = BAD;
									break;
								}
								if (state.head) {
									state.head.text = (hold >> 8) & 1;
								}
								if (state.flags & 0x0200) {
									//=== CRC2(state.check, hold);
									hbuf[0] = hold & 0xff;
									hbuf[1] = (hold >>> 8) & 0xff;
									state.check = crc32(
										state.check,
										hbuf,
										2,
										0
									);
									//===//
								}
								//=== INITBITS();
								hold = 0;
								bits = 0;
								//===//
								state.mode = TIME;
							/* falls through */
							case TIME:
								//=== NEEDBITS(32); */
								while (bits < 32) {
									if (have === 0) {
										break inf_leave;
									}
									have--;
									hold += input[next++] << bits;
									bits += 8;
								}
								//===//
								if (state.head) {
									state.head.time = hold;
								}
								if (state.flags & 0x0200) {
									//=== CRC4(state.check, hold)
									hbuf[0] = hold & 0xff;
									hbuf[1] = (hold >>> 8) & 0xff;
									hbuf[2] = (hold >>> 16) & 0xff;
									hbuf[3] = (hold >>> 24) & 0xff;
									state.check = crc32(
										state.check,
										hbuf,
										4,
										0
									);
									//===
								}
								//=== INITBITS();
								hold = 0;
								bits = 0;
								//===//
								state.mode = OS;
							/* falls through */
							case OS:
								//=== NEEDBITS(16); */
								while (bits < 16) {
									if (have === 0) {
										break inf_leave;
									}
									have--;
									hold += input[next++] << bits;
									bits += 8;
								}
								//===//
								if (state.head) {
									state.head.xflags = hold & 0xff;
									state.head.os = hold >> 8;
								}
								if (state.flags & 0x0200) {
									//=== CRC2(state.check, hold);
									hbuf[0] = hold & 0xff;
									hbuf[1] = (hold >>> 8) & 0xff;
									state.check = crc32(
										state.check,
										hbuf,
										2,
										0
									);
									//===//
								}
								//=== INITBITS();
								hold = 0;
								bits = 0;
								//===//
								state.mode = EXLEN;
							/* falls through */
							case EXLEN:
								if (state.flags & 0x0400) {
									//=== NEEDBITS(16); */
									while (bits < 16) {
										if (have === 0) {
											break inf_leave;
										}
										have--;
										hold += input[next++] << bits;
										bits += 8;
									}
									//===//
									state.length = hold;
									if (state.head) {
										state.head.extra_len = hold;
									}
									if (state.flags & 0x0200) {
										//=== CRC2(state.check, hold);
										hbuf[0] = hold & 0xff;
										hbuf[1] = (hold >>> 8) & 0xff;
										state.check = crc32(
											state.check,
											hbuf,
											2,
											0
										);
										//===//
									}
									//=== INITBITS();
									hold = 0;
									bits = 0;
									//===//
								} else if (state.head) {
									state.head.extra = null /*Z_NULL*/;
								}
								state.mode = EXTRA;
							/* falls through */
							case EXTRA:
								if (state.flags & 0x0400) {
									copy = state.length;
									if (copy > have) {
										copy = have;
									}
									if (copy) {
										if (state.head) {
											len =
												state.head.extra_len -
												state.length;
											if (!state.head.extra) {
												// Use untyped array for more convenient processing later
												state.head.extra = new Array(
													state.head.extra_len
												);
											}
											utils.arraySet(
												state.head.extra,
												input,
												next,
												// extra field is limited to 65536 bytes
												// - no need for additional size check
												copy,
												/*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
												len
											);
											//zmemcpy(state.head.extra + len, next,
											//        len + copy > state.head.extra_max ?
											//        state.head.extra_max - len : copy);
										}
										if (state.flags & 0x0200) {
											state.check = crc32(
												state.check,
												input,
												copy,
												next
											);
										}
										have -= copy;
										next += copy;
										state.length -= copy;
									}
									if (state.length) {
										break inf_leave;
									}
								}
								state.length = 0;
								state.mode = NAME;
							/* falls through */
							case NAME:
								if (state.flags & 0x0800) {
									if (have === 0) {
										break inf_leave;
									}
									copy = 0;
									do {
										// TODO: 2 or 1 bytes?
										len = input[next + copy++];
										/* use constant limit because in js we should not preallocate memory */
										if (
											state.head &&
											len &&
											state.length <
												65536 /*state.head.name_max*/
										) {
											state.head.name += String.fromCharCode(
												len
											);
										}
									} while (len && copy < have);

									if (state.flags & 0x0200) {
										state.check = crc32(
											state.check,
											input,
											copy,
											next
										);
									}
									have -= copy;
									next += copy;
									if (len) {
										break inf_leave;
									}
								} else if (state.head) {
									state.head.name = null;
								}
								state.length = 0;
								state.mode = COMMENT;
							/* falls through */
							case COMMENT:
								if (state.flags & 0x1000) {
									if (have === 0) {
										break inf_leave;
									}
									copy = 0;
									do {
										len = input[next + copy++];
										/* use constant limit because in js we should not preallocate memory */
										if (
											state.head &&
											len &&
											state.length <
												65536 /*state.head.comm_max*/
										) {
											state.head.comment += String.fromCharCode(
												len
											);
										}
									} while (len && copy < have);
									if (state.flags & 0x0200) {
										state.check = crc32(
											state.check,
											input,
											copy,
											next
										);
									}
									have -= copy;
									next += copy;
									if (len) {
										break inf_leave;
									}
								} else if (state.head) {
									state.head.comment = null;
								}
								state.mode = HCRC;
							/* falls through */
							case HCRC:
								if (state.flags & 0x0200) {
									//=== NEEDBITS(16); */
									while (bits < 16) {
										if (have === 0) {
											break inf_leave;
										}
										have--;
										hold += input[next++] << bits;
										bits += 8;
									}
									//===//
									if (hold !== (state.check & 0xffff)) {
										strm.msg = "header crc mismatch";
										state.mode = BAD;
										break;
									}
									//=== INITBITS();
									hold = 0;
									bits = 0;
									//===//
								}
								if (state.head) {
									state.head.hcrc = (state.flags >> 9) & 1;
									state.head.done = true;
								}
								strm.adler = state.check = 0;
								state.mode = TYPE;
								break;
							case DICTID:
								//=== NEEDBITS(32); */
								while (bits < 32) {
									if (have === 0) {
										break inf_leave;
									}
									have--;
									hold += input[next++] << bits;
									bits += 8;
								}
								//===//
								strm.adler = state.check = zswap32(hold);
								//=== INITBITS();
								hold = 0;
								bits = 0;
								//===//
								state.mode = DICT;
							/* falls through */
							case DICT:
								if (state.havedict === 0) {
									//--- RESTORE() ---
									strm.next_out = put;
									strm.avail_out = left;
									strm.next_in = next;
									strm.avail_in = have;
									state.hold = hold;
									state.bits = bits;
									//---
									return Z_NEED_DICT;
								}
								strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/;
								state.mode = TYPE;
							/* falls through */
							case TYPE:
								if (flush === Z_BLOCK || flush === Z_TREES) {
									break inf_leave;
								}
							/* falls through */
							case TYPEDO:
								if (state.last) {
									//--- BYTEBITS() ---//
									hold >>>= bits & 7;
									bits -= bits & 7;
									//---//
									state.mode = CHECK;
									break;
								}
								//=== NEEDBITS(3); */
								while (bits < 3) {
									if (have === 0) {
										break inf_leave;
									}
									have--;
									hold += input[next++] << bits;
									bits += 8;
								}
								//===//
								state.last = hold & 0x01 /*BITS(1)*/;
								//--- DROPBITS(1) ---//
								hold >>>= 1;
								bits -= 1;
								//---//

								switch (hold & 0x03 /*BITS(2)*/) {
									case 0 /* stored block */:
										//Tracev((stderr, "inflate:     stored block%s\n",
										//        state.last ? " (last)" : ""));
										state.mode = STORED;
										break;
									case 1 /* fixed block */:
										fixedtables(state);
										//Tracev((stderr, "inflate:     fixed codes block%s\n",
										//        state.last ? " (last)" : ""));
										state.mode = LEN_; /* decode codes */
										if (flush === Z_TREES) {
											//--- DROPBITS(2) ---//
											hold >>>= 2;
											bits -= 2;
											//---//
											break inf_leave;
										}
										break;
									case 2 /* dynamic block */:
										//Tracev((stderr, "inflate:     dynamic codes block%s\n",
										//        state.last ? " (last)" : ""));
										state.mode = TABLE;
										break;
									case 3:
										strm.msg = "invalid block type";
										state.mode = BAD;
								}
								//--- DROPBITS(2) ---//
								hold >>>= 2;
								bits -= 2;
								//---//
								break;
							case STORED:
								//--- BYTEBITS() ---// /* go to byte boundary */
								hold >>>= bits & 7;
								bits -= bits & 7;
								//---//
								//=== NEEDBITS(32); */
								while (bits < 32) {
									if (have === 0) {
										break inf_leave;
									}
									have--;
									hold += input[next++] << bits;
									bits += 8;
								}
								//===//
								if (
									(hold & 0xffff) !==
									((hold >>> 16) ^ 0xffff)
								) {
									strm.msg = "invalid stored block lengths";
									state.mode = BAD;
									break;
								}
								state.length = hold & 0xffff;
								//Tracev((stderr, "inflate:       stored length %u\n",
								//        state.length));
								//=== INITBITS();
								hold = 0;
								bits = 0;
								//===//
								state.mode = COPY_;
								if (flush === Z_TREES) {
									break inf_leave;
								}
							/* falls through */
							case COPY_:
								state.mode = COPY;
							/* falls through */
							case COPY:
								copy = state.length;
								if (copy) {
									if (copy > have) {
										copy = have;
									}
									if (copy > left) {
										copy = left;
									}
									if (copy === 0) {
										break inf_leave;
									}
									//--- zmemcpy(put, next, copy); ---
									utils.arraySet(
										output,
										input,
										next,
										copy,
										put
									);
									//---//
									have -= copy;
									next += copy;
									left -= copy;
									put += copy;
									state.length -= copy;
									break;
								}
								//Tracev((stderr, "inflate:       stored end\n"));
								state.mode = TYPE;
								break;
							case TABLE:
								//=== NEEDBITS(14); */
								while (bits < 14) {
									if (have === 0) {
										break inf_leave;
									}
									have--;
									hold += input[next++] << bits;
									bits += 8;
								}
								//===//
								state.nlen = (hold & 0x1f) /*BITS(5)*/ + 257;
								//--- DROPBITS(5) ---//
								hold >>>= 5;
								bits -= 5;
								//---//
								state.ndist = (hold & 0x1f) /*BITS(5)*/ + 1;
								//--- DROPBITS(5) ---//
								hold >>>= 5;
								bits -= 5;
								//---//
								state.ncode = (hold & 0x0f) /*BITS(4)*/ + 4;
								//--- DROPBITS(4) ---//
								hold >>>= 4;
								bits -= 4;
								//---//
								//#ifndef PKZIP_BUG_WORKAROUND
								if (state.nlen > 286 || state.ndist > 30) {
									strm.msg =
										"too many length or distance symbols";
									state.mode = BAD;
									break;
								}
								//#endif
								//Tracev((stderr, "inflate:       table sizes ok\n"));
								state.have = 0;
								state.mode = LENLENS;
							/* falls through */
							case LENLENS:
								while (state.have < state.ncode) {
									//=== NEEDBITS(3);
									while (bits < 3) {
										if (have === 0) {
											break inf_leave;
										}
										have--;
										hold += input[next++] << bits;
										bits += 8;
									}
									//===//
									state.lens[order[state.have++]] =
										hold & 0x07; //BITS(3);
									//--- DROPBITS(3) ---//
									hold >>>= 3;
									bits -= 3;
									//---//
								}
								while (state.have < 19) {
									state.lens[order[state.have++]] = 0;
								}
								// We have separate tables & no pointers. 2 commented lines below not needed.
								//state.next = state.codes;
								//state.lencode = state.next;
								// Switch to use dynamic table
								state.lencode = state.lendyn;
								state.lenbits = 7;

								opts = {bits: state.lenbits};
								ret = inflate_table(
									CODES,
									state.lens,
									0,
									19,
									state.lencode,
									0,
									state.work,
									opts
								);
								state.lenbits = opts.bits;

								if (ret) {
									strm.msg = "invalid code lengths set";
									state.mode = BAD;
									break;
								}
								//Tracev((stderr, "inflate:       code lengths ok\n"));
								state.have = 0;
								state.mode = CODELENS;
							/* falls through */
							case CODELENS:
								while (state.have < state.nlen + state.ndist) {
									for (;;) {
										here =
											state.lencode[
												hold &
													((1 << state.lenbits) - 1)
											]; /*BITS(state.lenbits)*/
										here_bits = here >>> 24;
										here_op = (here >>> 16) & 0xff;
										here_val = here & 0xffff;

										if (here_bits <= bits) {
											break;
										}
										//--- PULLBYTE() ---//
										if (have === 0) {
											break inf_leave;
										}
										have--;
										hold += input[next++] << bits;
										bits += 8;
										//---//
									}
									if (here_val < 16) {
										//--- DROPBITS(here.bits) ---//
										hold >>>= here_bits;
										bits -= here_bits;
										//---//
										state.lens[state.have++] = here_val;
									} else {
										if (here_val === 16) {
											//=== NEEDBITS(here.bits + 2);
											n = here_bits + 2;
											while (bits < n) {
												if (have === 0) {
													break inf_leave;
												}
												have--;
												hold += input[next++] << bits;
												bits += 8;
											}
											//===//
											//--- DROPBITS(here.bits) ---//
											hold >>>= here_bits;
											bits -= here_bits;
											//---//
											if (state.have === 0) {
												strm.msg =
													"invalid bit length repeat";
												state.mode = BAD;
												break;
											}
											len = state.lens[state.have - 1];
											copy = 3 + (hold & 0x03); //BITS(2);
											//--- DROPBITS(2) ---//
											hold >>>= 2;
											bits -= 2;
											//---//
										} else if (here_val === 17) {
											//=== NEEDBITS(here.bits + 3);
											n = here_bits + 3;
											while (bits < n) {
												if (have === 0) {
													break inf_leave;
												}
												have--;
												hold += input[next++] << bits;
												bits += 8;
											}
											//===//
											//--- DROPBITS(here.bits) ---//
											hold >>>= here_bits;
											bits -= here_bits;
											//---//
											len = 0;
											copy = 3 + (hold & 0x07); //BITS(3);
											//--- DROPBITS(3) ---//
											hold >>>= 3;
											bits -= 3;
											//---//
										} else {
											//=== NEEDBITS(here.bits + 7);
											n = here_bits + 7;
											while (bits < n) {
												if (have === 0) {
													break inf_leave;
												}
												have--;
												hold += input[next++] << bits;
												bits += 8;
											}
											//===//
											//--- DROPBITS(here.bits) ---//
											hold >>>= here_bits;
											bits -= here_bits;
											//---//
											len = 0;
											copy = 11 + (hold & 0x7f); //BITS(7);
											//--- DROPBITS(7) ---//
											hold >>>= 7;
											bits -= 7;
											//---//
										}
										if (
											state.have + copy >
											state.nlen + state.ndist
										) {
											strm.msg =
												"invalid bit length repeat";
											state.mode = BAD;
											break;
										}
										while (copy--) {
											state.lens[state.have++] = len;
										}
									}
								}

								/* handle error breaks in while */
								if (state.mode === BAD) {
									break;
								}

								/* check for end-of-block code (better have one) */
								if (state.lens[256] === 0) {
									strm.msg =
										"invalid code -- missing end-of-block";
									state.mode = BAD;
									break;
								}

								/* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
								state.lenbits = 9;

								opts = {bits: state.lenbits};
								ret = inflate_table(
									LENS,
									state.lens,
									0,
									state.nlen,
									state.lencode,
									0,
									state.work,
									opts
								);
								// We have separate tables & no pointers. 2 commented lines below not needed.
								// state.next_index = opts.table_index;
								state.lenbits = opts.bits;
								// state.lencode = state.next;

								if (ret) {
									strm.msg = "invalid literal/lengths set";
									state.mode = BAD;
									break;
								}

								state.distbits = 6;
								//state.distcode.copy(state.codes);
								// Switch to use dynamic table
								state.distcode = state.distdyn;
								opts = {bits: state.distbits};
								ret = inflate_table(
									DISTS,
									state.lens,
									state.nlen,
									state.ndist,
									state.distcode,
									0,
									state.work,
									opts
								);
								// We have separate tables & no pointers. 2 commented lines below not needed.
								// state.next_index = opts.table_index;
								state.distbits = opts.bits;
								// state.distcode = state.next;

								if (ret) {
									strm.msg = "invalid distances set";
									state.mode = BAD;
									break;
								}
								//Tracev((stderr, 'inflate:       codes ok\n'));
								state.mode = LEN_;
								if (flush === Z_TREES) {
									break inf_leave;
								}
							/* falls through */
							case LEN_:
								state.mode = LEN;
							/* falls through */
							case LEN:
								if (have >= 6 && left >= 258) {
									//--- RESTORE() ---
									strm.next_out = put;
									strm.avail_out = left;
									strm.next_in = next;
									strm.avail_in = have;
									state.hold = hold;
									state.bits = bits;
									//---
									inflate_fast(strm, _out);
									//--- LOAD() ---
									put = strm.next_out;
									output = strm.output;
									left = strm.avail_out;
									next = strm.next_in;
									input = strm.input;
									have = strm.avail_in;
									hold = state.hold;
									bits = state.bits;
									//---

									if (state.mode === TYPE) {
										state.back = -1;
									}
									break;
								}
								state.back = 0;
								for (;;) {
									here =
										state.lencode[
											hold & ((1 << state.lenbits) - 1)
										]; /*BITS(state.lenbits)*/
									here_bits = here >>> 24;
									here_op = (here >>> 16) & 0xff;
									here_val = here & 0xffff;

									if (here_bits <= bits) {
										break;
									}
									//--- PULLBYTE() ---//
									if (have === 0) {
										break inf_leave;
									}
									have--;
									hold += input[next++] << bits;
									bits += 8;
									//---//
								}
								if (here_op && (here_op & 0xf0) === 0) {
									last_bits = here_bits;
									last_op = here_op;
									last_val = here_val;
									for (;;) {
										here =
											state.lencode[
												last_val +
													((hold &
														((1 <<
															(last_bits +
																last_op)) -
															1)) /*BITS(last.bits + last.op)*/ >>
														last_bits)
											];
										here_bits = here >>> 24;
										here_op = (here >>> 16) & 0xff;
										here_val = here & 0xffff;

										if (last_bits + here_bits <= bits) {
											break;
										}
										//--- PULLBYTE() ---//
										if (have === 0) {
											break inf_leave;
										}
										have--;
										hold += input[next++] << bits;
										bits += 8;
										//---//
									}
									//--- DROPBITS(last.bits) ---//
									hold >>>= last_bits;
									bits -= last_bits;
									//---//
									state.back += last_bits;
								}
								//--- DROPBITS(here.bits) ---//
								hold >>>= here_bits;
								bits -= here_bits;
								//---//
								state.back += here_bits;
								state.length = here_val;
								if (here_op === 0) {
									//Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
									//        "inflate:         literal '%c'\n" :
									//        "inflate:         literal 0x%02x\n", here.val));
									state.mode = LIT;
									break;
								}
								if (here_op & 32) {
									//Tracevv((stderr, "inflate:         end of block\n"));
									state.back = -1;
									state.mode = TYPE;
									break;
								}
								if (here_op & 64) {
									strm.msg = "invalid literal/length code";
									state.mode = BAD;
									break;
								}
								state.extra = here_op & 15;
								state.mode = LENEXT;
							/* falls through */
							case LENEXT:
								if (state.extra) {
									//=== NEEDBITS(state.extra);
									n = state.extra;
									while (bits < n) {
										if (have === 0) {
											break inf_leave;
										}
										have--;
										hold += input[next++] << bits;
										bits += 8;
									}
									//===//
									state.length +=
										hold &
										((1 << state.extra) -
											1) /*BITS(state.extra)*/;
									//--- DROPBITS(state.extra) ---//
									hold >>>= state.extra;
									bits -= state.extra;
									//---//
									state.back += state.extra;
								}
								//Tracevv((stderr, "inflate:         length %u\n", state.length));
								state.was = state.length;
								state.mode = DIST;
							/* falls through */
							case DIST:
								for (;;) {
									here =
										state.distcode[
											hold & ((1 << state.distbits) - 1)
										]; /*BITS(state.distbits)*/
									here_bits = here >>> 24;
									here_op = (here >>> 16) & 0xff;
									here_val = here & 0xffff;

									if (here_bits <= bits) {
										break;
									}
									//--- PULLBYTE() ---//
									if (have === 0) {
										break inf_leave;
									}
									have--;
									hold += input[next++] << bits;
									bits += 8;
									//---//
								}
								if ((here_op & 0xf0) === 0) {
									last_bits = here_bits;
									last_op = here_op;
									last_val = here_val;
									for (;;) {
										here =
											state.distcode[
												last_val +
													((hold &
														((1 <<
															(last_bits +
																last_op)) -
															1)) /*BITS(last.bits + last.op)*/ >>
														last_bits)
											];
										here_bits = here >>> 24;
										here_op = (here >>> 16) & 0xff;
										here_val = here & 0xffff;

										if (last_bits + here_bits <= bits) {
											break;
										}
										//--- PULLBYTE() ---//
										if (have === 0) {
											break inf_leave;
										}
										have--;
										hold += input[next++] << bits;
										bits += 8;
										//---//
									}
									//--- DROPBITS(last.bits) ---//
									hold >>>= last_bits;
									bits -= last_bits;
									//---//
									state.back += last_bits;
								}
								//--- DROPBITS(here.bits) ---//
								hold >>>= here_bits;
								bits -= here_bits;
								//---//
								state.back += here_bits;
								if (here_op & 64) {
									strm.msg = "invalid distance code";
									state.mode = BAD;
									break;
								}
								state.offset = here_val;
								state.extra = here_op & 15;
								state.mode = DISTEXT;
							/* falls through */
							case DISTEXT:
								if (state.extra) {
									//=== NEEDBITS(state.extra);
									n = state.extra;
									while (bits < n) {
										if (have === 0) {
											break inf_leave;
										}
										have--;
										hold += input[next++] << bits;
										bits += 8;
									}
									//===//
									state.offset +=
										hold &
										((1 << state.extra) -
											1) /*BITS(state.extra)*/;
									//--- DROPBITS(state.extra) ---//
									hold >>>= state.extra;
									bits -= state.extra;
									//---//
									state.back += state.extra;
								}
								//#ifdef INFLATE_STRICT
								if (state.offset > state.dmax) {
									strm.msg = "invalid distance too far back";
									state.mode = BAD;
									break;
								}
								//#endif
								//Tracevv((stderr, "inflate:         distance %u\n", state.offset));
								state.mode = MATCH;
							/* falls through */
							case MATCH:
								if (left === 0) {
									break inf_leave;
								}
								copy = _out - left;
								if (state.offset > copy) {
									/* copy from window */
									copy = state.offset - copy;
									if (copy > state.whave) {
										if (state.sane) {
											strm.msg =
												"invalid distance too far back";
											state.mode = BAD;
											break;
										}
										// (!) This block is disabled in zlib defaults,
										// don't enable it for binary compatibility
										//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
										//          Trace((stderr, "inflate.c too far\n"));
										//          copy -= state.whave;
										//          if (copy > state.length) { copy = state.length; }
										//          if (copy > left) { copy = left; }
										//          left -= copy;
										//          state.length -= copy;
										//          do {
										//            output[put++] = 0;
										//          } while (--copy);
										//          if (state.length === 0) { state.mode = LEN; }
										//          break;
										//#endif
									}
									if (copy > state.wnext) {
										copy -= state.wnext;
										from = state.wsize - copy;
									} else {
										from = state.wnext - copy;
									}
									if (copy > state.length) {
										copy = state.length;
									}
									from_source = state.window;
								} else {
									/* copy from output */
									from_source = output;
									from = put - state.offset;
									copy = state.length;
								}
								if (copy > left) {
									copy = left;
								}
								left -= copy;
								state.length -= copy;
								do {
									output[put++] = from_source[from++];
								} while (--copy);
								if (state.length === 0) {
									state.mode = LEN;
								}
								break;
							case LIT:
								if (left === 0) {
									break inf_leave;
								}
								output[put++] = state.length;
								left--;
								state.mode = LEN;
								break;
							case CHECK:
								if (state.wrap) {
									//=== NEEDBITS(32);
									while (bits < 32) {
										if (have === 0) {
											break inf_leave;
										}
										have--;
										// Use '|' instead of '+' to make sure that result is signed
										hold |= input[next++] << bits;
										bits += 8;
									}
									//===//
									_out -= left;
									strm.total_out += _out;
									state.total += _out;
									if (_out) {
										strm.adler = state.check =
											/*UPDATE(state.check, put - _out, _out);*/
											state.flags
												? crc32(
														state.check,
														output,
														_out,
														put - _out
												  )
												: adler32(
														state.check,
														output,
														_out,
														put - _out
												  );
									}
									_out = left;
									// NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
									if (
										(state.flags ? hold : zswap32(hold)) !==
										state.check
									) {
										strm.msg = "incorrect data check";
										state.mode = BAD;
										break;
									}
									//=== INITBITS();
									hold = 0;
									bits = 0;
									//===//
									//Tracev((stderr, "inflate:   check matches trailer\n"));
								}
								state.mode = LENGTH;
							/* falls through */
							case LENGTH:
								if (state.wrap && state.flags) {
									//=== NEEDBITS(32);
									while (bits < 32) {
										if (have === 0) {
											break inf_leave;
										}
										have--;
										hold += input[next++] << bits;
										bits += 8;
									}
									//===//
									if (hold !== (state.total & 0xffffffff)) {
										strm.msg = "incorrect length check";
										state.mode = BAD;
										break;
									}
									//=== INITBITS();
									hold = 0;
									bits = 0;
									//===//
									//Tracev((stderr, "inflate:   length matches trailer\n"));
								}
								state.mode = DONE;
							/* falls through */
							case DONE:
								ret = Z_STREAM_END;
								break inf_leave;
							case BAD:
								ret = Z_DATA_ERROR;
								break inf_leave;
							case MEM:
								return Z_MEM_ERROR;
							case SYNC:
							/* falls through */
							default:
								return Z_STREAM_ERROR;
						}
					}

					// inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

					/*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

					//--- RESTORE() ---
					strm.next_out = put;
					strm.avail_out = left;
					strm.next_in = next;
					strm.avail_in = have;
					state.hold = hold;
					state.bits = bits;
					//---

					if (
						state.wsize ||
						(_out !== strm.avail_out &&
							state.mode < BAD &&
							(state.mode < CHECK || flush !== Z_FINISH))
					) {
						if (
							updatewindow(
								strm,
								strm.output,
								strm.next_out,
								_out - strm.avail_out
							)
						) {
							state.mode = MEM;
							return Z_MEM_ERROR;
						}
					}
					_in -= strm.avail_in;
					_out -= strm.avail_out;
					strm.total_in += _in;
					strm.total_out += _out;
					state.total += _out;
					if (state.wrap && _out) {
						strm.adler = state.check /*UPDATE(state.check, strm.next_out - _out, _out);*/ = state.flags
							? crc32(
									state.check,
									output,
									_out,
									strm.next_out - _out
							  )
							: adler32(
									state.check,
									output,
									_out,
									strm.next_out - _out
							  );
					}
					strm.data_type =
						state.bits +
						(state.last ? 64 : 0) +
						(state.mode === TYPE ? 128 : 0) +
						(state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
					if (
						((_in === 0 && _out === 0) || flush === Z_FINISH) &&
						ret === Z_OK
					) {
						ret = Z_BUF_ERROR;
					}
					return ret;
				}

				function inflateEnd(strm) {
					if (
						!strm ||
						!strm.state /*|| strm->zfree == (free_func)0*/
					) {
						return Z_STREAM_ERROR;
					}

					var state = strm.state;
					if (state.window) {
						state.window = null;
					}
					strm.state = null;
					return Z_OK;
				}

				function inflateGetHeader(strm, head) {
					var state;

					/* check state */
					if (!strm || !strm.state) {
						return Z_STREAM_ERROR;
					}
					state = strm.state;
					if ((state.wrap & 2) === 0) {
						return Z_STREAM_ERROR;
					}

					/* save header structure */
					state.head = head;
					head.done = false;
					return Z_OK;
				}

				function inflateSetDictionary(strm, dictionary) {
					var dictLength = dictionary.length;

					var state;
					var dictid;
					var ret;

					/* check state */
					if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) {
						return Z_STREAM_ERROR;
					}
					state = strm.state;

					if (state.wrap !== 0 && state.mode !== DICT) {
						return Z_STREAM_ERROR;
					}

					/* check for correct dictionary identifier */
					if (state.mode === DICT) {
						dictid = 1; /* adler32(0, null, 0)*/
						/* dictid = adler32(dictid, dictionary, dictLength); */
						dictid = adler32(dictid, dictionary, dictLength, 0);
						if (dictid !== state.check) {
							return Z_DATA_ERROR;
						}
					}
					/* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
					ret = updatewindow(
						strm,
						dictionary,
						dictLength,
						dictLength
					);
					if (ret) {
						state.mode = MEM;
						return Z_MEM_ERROR;
					}
					state.havedict = 1;
					// Tracev((stderr, "inflate:   dictionary set\n"));
					return Z_OK;
				}

				exports.inflateReset = inflateReset;
				exports.inflateReset2 = inflateReset2;
				exports.inflateResetKeep = inflateResetKeep;
				exports.inflateInit = inflateInit;
				exports.inflateInit2 = inflateInit2;
				exports.inflate = inflate;
				exports.inflateEnd = inflateEnd;
				exports.inflateGetHeader = inflateGetHeader;
				exports.inflateSetDictionary = inflateSetDictionary;
				exports.inflateInfo = "pako inflate (from Nodeca project)";

				/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

				/***/
			},

		/***/ "./node_modules/pako/lib/zlib/inftrees.js":
			/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/inftrees.js ***!
  \************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";

				// (C) 1995-2013 Jean-loup Gailly and Mark Adler
				// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
				//
				// This software is provided 'as-is', without any express or implied
				// warranty. In no event will the authors be held liable for any damages
				// arising from the use of this software.
				//
				// Permission is granted to anyone to use this software for any purpose,
				// including commercial applications, and to alter it and redistribute it
				// freely, subject to the following restrictions:
				//
				// 1. The origin of this software must not be misrepresented; you must not
				//   claim that you wrote the original software. If you use this software
				//   in a product, an acknowledgment in the product documentation would be
				//   appreciated but is not required.
				// 2. Altered source versions must be plainly marked as such, and must not be
				//   misrepresented as being the original software.
				// 3. This notice may not be removed or altered from any source distribution.

				var utils = __webpack_require__(
					/*! ../utils/common */ "./node_modules/pako/lib/utils/common.js"
				);

				var MAXBITS = 15;
				var ENOUGH_LENS = 852;
				var ENOUGH_DISTS = 592;
				//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

				var CODES = 0;
				var LENS = 1;
				var DISTS = 2;

				var lbase = [
					/* Length codes 257..285 base */
					3,
					4,
					5,
					6,
					7,
					8,
					9,
					10,
					11,
					13,
					15,
					17,
					19,
					23,
					27,
					31,
					35,
					43,
					51,
					59,
					67,
					83,
					99,
					115,
					131,
					163,
					195,
					227,
					258,
					0,
					0,
				];

				var lext = [
					/* Length codes 257..285 extra */
					16,
					16,
					16,
					16,
					16,
					16,
					16,
					16,
					17,
					17,
					17,
					17,
					18,
					18,
					18,
					18,
					19,
					19,
					19,
					19,
					20,
					20,
					20,
					20,
					21,
					21,
					21,
					21,
					16,
					72,
					78,
				];

				var dbase = [
					/* Distance codes 0..29 base */
					1,
					2,
					3,
					4,
					5,
					7,
					9,
					13,
					17,
					25,
					33,
					49,
					65,
					97,
					129,
					193,
					257,
					385,
					513,
					769,
					1025,
					1537,
					2049,
					3073,
					4097,
					6145,
					8193,
					12289,
					16385,
					24577,
					0,
					0,
				];

				var dext = [
					/* Distance codes 0..29 extra */
					16,
					16,
					16,
					16,
					17,
					17,
					18,
					18,
					19,
					19,
					20,
					20,
					21,
					21,
					22,
					22,
					23,
					23,
					24,
					24,
					25,
					25,
					26,
					26,
					27,
					27,
					28,
					28,
					29,
					29,
					64,
					64,
				];

				module.exports = function inflate_table(
					type,
					lens,
					lens_index,
					codes,
					table,
					table_index,
					work,
					opts
				) {
					var bits = opts.bits;
					//here = opts.here; /* table entry for duplication */

					var len = 0; /* a code's length in bits */
					var sym = 0; /* index of code symbols */
					var min = 0,
						max = 0; /* minimum and maximum code lengths */
					var root = 0; /* number of index bits for root table */
					var curr = 0; /* number of index bits for current table */
					var drop = 0; /* code bits to drop for sub-table */
					var left = 0; /* number of prefix codes available */
					var used = 0; /* code entries in table used */
					var huff = 0; /* Huffman code */
					var incr; /* for incrementing code, index */
					var fill; /* index for replicating entries */
					var low; /* low bits for current root entry */
					var mask; /* mask for low root bits */
					var next; /* next available space in table */
					var base = null; /* base value table to use */
					var base_index = 0;
					//  var shoextra;    /* extra bits table to use */
					var end; /* use base and extra for symbol > end */
					var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
					var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
					var extra = null;
					var extra_index = 0;

					var here_bits, here_op, here_val;

					/*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

					/* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
					for (len = 0; len <= MAXBITS; len++) {
						count[len] = 0;
					}
					for (sym = 0; sym < codes; sym++) {
						count[lens[lens_index + sym]]++;
					}

					/* bound code lengths, force root to be within code lengths */
					root = bits;
					for (max = MAXBITS; max >= 1; max--) {
						if (count[max] !== 0) {
							break;
						}
					}
					if (root > max) {
						root = max;
					}
					if (max === 0) {
						/* no symbols to code at all */
						//table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
						//table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
						//table.val[opts.table_index++] = 0;   //here.val = (var short)0;
						table[table_index++] = (1 << 24) | (64 << 16) | 0;

						//table.op[opts.table_index] = 64;
						//table.bits[opts.table_index] = 1;
						//table.val[opts.table_index++] = 0;
						table[table_index++] = (1 << 24) | (64 << 16) | 0;

						opts.bits = 1;
						return 0; /* no symbols, but wait for decoding to report error */
					}
					for (min = 1; min < max; min++) {
						if (count[min] !== 0) {
							break;
						}
					}
					if (root < min) {
						root = min;
					}

					/* check for an over-subscribed or incomplete set of lengths */
					left = 1;
					for (len = 1; len <= MAXBITS; len++) {
						left <<= 1;
						left -= count[len];
						if (left < 0) {
							return -1;
						} /* over-subscribed */
					}
					if (left > 0 && (type === CODES || max !== 1)) {
						return -1; /* incomplete set */
					}

					/* generate offsets into symbol table for each length for sorting */
					offs[1] = 0;
					for (len = 1; len < MAXBITS; len++) {
						offs[len + 1] = offs[len] + count[len];
					}

					/* sort symbols by length, by symbol order within each length */
					for (sym = 0; sym < codes; sym++) {
						if (lens[lens_index + sym] !== 0) {
							work[offs[lens[lens_index + sym]]++] = sym;
						}
					}

					/*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

					/* set up for code type */
					// poor man optimization - use if-else instead of switch,
					// to avoid deopts in old v8
					if (type === CODES) {
						base = extra = work; /* dummy value--not used */
						end = 19;
					} else if (type === LENS) {
						base = lbase;
						base_index -= 257;
						extra = lext;
						extra_index -= 257;
						end = 256;
					} else {
						/* DISTS */
						base = dbase;
						extra = dext;
						end = -1;
					}

					/* initialize opts for loop */
					huff = 0; /* starting code */
					sym = 0; /* starting code symbol */
					len = min; /* starting code length */
					next = table_index; /* current table to fill in */
					curr = root; /* current table index bits */
					drop = 0; /* current bits to drop from code for index */
					low = -1; /* trigger new sub-table when len > root */
					used = 1 << root; /* use root table entries */
					mask = used - 1; /* mask for comparing low */

					/* check available table space */
					if (
						(type === LENS && used > ENOUGH_LENS) ||
						(type === DISTS && used > ENOUGH_DISTS)
					) {
						return 1;
					}

					/* process all codes and make table entries */
					for (;;) {
						/* create table entry */
						here_bits = len - drop;
						if (work[sym] < end) {
							here_op = 0;
							here_val = work[sym];
						} else if (work[sym] > end) {
							here_op = extra[extra_index + work[sym]];
							here_val = base[base_index + work[sym]];
						} else {
							here_op = 32 + 64; /* end of block */
							here_val = 0;
						}

						/* replicate for those indices with low len bits equal to huff */
						incr = 1 << (len - drop);
						fill = 1 << curr;
						min = fill; /* save offset to next table */
						do {
							fill -= incr;
							table[next + (huff >> drop) + fill] =
								(here_bits << 24) |
								(here_op << 16) |
								here_val |
								0;
						} while (fill !== 0);

						/* backwards increment the len-bit code huff */
						incr = 1 << (len - 1);
						while (huff & incr) {
							incr >>= 1;
						}
						if (incr !== 0) {
							huff &= incr - 1;
							huff += incr;
						} else {
							huff = 0;
						}

						/* go to next symbol, update count, len */
						sym++;
						if (--count[len] === 0) {
							if (len === max) {
								break;
							}
							len = lens[lens_index + work[sym]];
						}

						/* create new sub-table if needed */
						if (len > root && (huff & mask) !== low) {
							/* if first time, transition to sub-tables */
							if (drop === 0) {
								drop = root;
							}

							/* increment past last table */
							next += min; /* here min is 1 << curr */

							/* determine length of next table */
							curr = len - drop;
							left = 1 << curr;
							while (curr + drop < max) {
								left -= count[curr + drop];
								if (left <= 0) {
									break;
								}
								curr++;
								left <<= 1;
							}

							/* check for enough space */
							used += 1 << curr;
							if (
								(type === LENS && used > ENOUGH_LENS) ||
								(type === DISTS && used > ENOUGH_DISTS)
							) {
								return 1;
							}

							/* point entry in root table to sub-table */
							low = huff & mask;
							/*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
							table[low] =
								(root << 24) |
								(curr << 16) |
								(next - table_index) |
								0;
						}
					}

					/* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
					if (huff !== 0) {
						//table.op[next + huff] = 64;            /* invalid code marker */
						//table.bits[next + huff] = len - drop;
						//table.val[next + huff] = 0;
						table[next + huff] =
							((len - drop) << 24) | (64 << 16) | 0;
					}

					/* set return parameters */
					//opts.table_index += used;
					opts.bits = root;
					return 0;
				};

				/***/
			},

		/***/ "./node_modules/pako/lib/zlib/messages.js":
			/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/messages.js ***!
  \************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";

				// (C) 1995-2013 Jean-loup Gailly and Mark Adler
				// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
				//
				// This software is provided 'as-is', without any express or implied
				// warranty. In no event will the authors be held liable for any damages
				// arising from the use of this software.
				//
				// Permission is granted to anyone to use this software for any purpose,
				// including commercial applications, and to alter it and redistribute it
				// freely, subject to the following restrictions:
				//
				// 1. The origin of this software must not be misrepresented; you must not
				//   claim that you wrote the original software. If you use this software
				//   in a product, an acknowledgment in the product documentation would be
				//   appreciated but is not required.
				// 2. Altered source versions must be plainly marked as such, and must not be
				//   misrepresented as being the original software.
				// 3. This notice may not be removed or altered from any source distribution.

				module.exports = {
					2: "need dictionary" /* Z_NEED_DICT       2  */,
					1: "stream end" /* Z_STREAM_END      1  */,
					0: "" /* Z_OK              0  */,
					"-1": "file error" /* Z_ERRNO         (-1) */,
					"-2": "stream error" /* Z_STREAM_ERROR  (-2) */,
					"-3": "data error" /* Z_DATA_ERROR    (-3) */,
					"-4": "insufficient memory" /* Z_MEM_ERROR     (-4) */,
					"-5": "buffer error" /* Z_BUF_ERROR     (-5) */,
					"-6": "incompatible version" /* Z_VERSION_ERROR (-6) */,
				};

				/***/
			},

		/***/ "./node_modules/pako/lib/zlib/trees.js":
			/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/trees.js ***!
  \*********************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";

				// (C) 1995-2013 Jean-loup Gailly and Mark Adler
				// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
				//
				// This software is provided 'as-is', without any express or implied
				// warranty. In no event will the authors be held liable for any damages
				// arising from the use of this software.
				//
				// Permission is granted to anyone to use this software for any purpose,
				// including commercial applications, and to alter it and redistribute it
				// freely, subject to the following restrictions:
				//
				// 1. The origin of this software must not be misrepresented; you must not
				//   claim that you wrote the original software. If you use this software
				//   in a product, an acknowledgment in the product documentation would be
				//   appreciated but is not required.
				// 2. Altered source versions must be plainly marked as such, and must not be
				//   misrepresented as being the original software.
				// 3. This notice may not be removed or altered from any source distribution.

				/* eslint-disable space-unary-ops */

				var utils = __webpack_require__(
					/*! ../utils/common */ "./node_modules/pako/lib/utils/common.js"
				);

				/* Public constants ==========================================================*/
				/* ===========================================================================*/

				//var Z_FILTERED          = 1;
				//var Z_HUFFMAN_ONLY      = 2;
				//var Z_RLE               = 3;
				var Z_FIXED = 4;
				//var Z_DEFAULT_STRATEGY  = 0;

				/* Possible values of the data_type field (though see inflate()) */
				var Z_BINARY = 0;
				var Z_TEXT = 1;
				//var Z_ASCII             = 1; // = Z_TEXT
				var Z_UNKNOWN = 2;

				/*============================================================================*/

				function zero(buf) {
					var len = buf.length;
					while (--len >= 0) {
						buf[len] = 0;
					}
				}

				// From zutil.h

				var STORED_BLOCK = 0;
				var STATIC_TREES = 1;
				var DYN_TREES = 2;
				/* The three kinds of block type */

				var MIN_MATCH = 3;
				var MAX_MATCH = 258;
				/* The minimum and maximum match lengths */

				// From deflate.h
				/* ===========================================================================
				 * Internal compression state.
				 */

				var LENGTH_CODES = 29;
				/* number of length codes, not counting the special END_BLOCK code */

				var LITERALS = 256;
				/* number of literal bytes 0..255 */

				var L_CODES = LITERALS + 1 + LENGTH_CODES;
				/* number of Literal or Length codes, including the END_BLOCK code */

				var D_CODES = 30;
				/* number of distance codes */

				var BL_CODES = 19;
				/* number of codes used to transfer the bit lengths */

				var HEAP_SIZE = 2 * L_CODES + 1;
				/* maximum heap size */

				var MAX_BITS = 15;
				/* All codes must not exceed MAX_BITS bits */

				var Buf_size = 16;
				/* size of bit buffer in bi_buf */

				/* ===========================================================================
				 * Constants
				 */

				var MAX_BL_BITS = 7;
				/* Bit length codes must not exceed MAX_BL_BITS bits */

				var END_BLOCK = 256;
				/* end of block literal code */

				var REP_3_6 = 16;
				/* repeat previous bit length 3-6 times (2 bits of repeat count) */

				var REPZ_3_10 = 17;
				/* repeat a zero length 3-10 times  (3 bits of repeat count) */

				var REPZ_11_138 = 18;
				/* repeat a zero length 11-138 times  (7 bits of repeat count) */

				/* eslint-disable comma-spacing,array-bracket-spacing */
				var extra_lbits =
					/* extra bits for each length code */
					[
						0,
						0,
						0,
						0,
						0,
						0,
						0,
						0,
						1,
						1,
						1,
						1,
						2,
						2,
						2,
						2,
						3,
						3,
						3,
						3,
						4,
						4,
						4,
						4,
						5,
						5,
						5,
						5,
						0,
					];

				var extra_dbits =
					/* extra bits for each distance code */
					[
						0,
						0,
						0,
						0,
						1,
						1,
						2,
						2,
						3,
						3,
						4,
						4,
						5,
						5,
						6,
						6,
						7,
						7,
						8,
						8,
						9,
						9,
						10,
						10,
						11,
						11,
						12,
						12,
						13,
						13,
					];

				var extra_blbits =
					/* extra bits for each bit length code */
					[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];

				var bl_order = [
					16,
					17,
					18,
					0,
					8,
					7,
					9,
					6,
					10,
					5,
					11,
					4,
					12,
					3,
					13,
					2,
					14,
					1,
					15,
				];
				/* eslint-enable comma-spacing,array-bracket-spacing */

				/* The lengths of the bit length codes are sent in order of decreasing
				 * probability, to avoid transmitting the lengths for unused bit length codes.
				 */

				/* ===========================================================================
				 * Local data. These are initialized only once.
				 */

				// We pre-fill arrays with 0 to avoid uninitialized gaps

				var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

				// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
				var static_ltree = new Array((L_CODES + 2) * 2);
				zero(static_ltree);
				/* The static literal tree. Since the bit lengths are imposed, there is no
				 * need for the L_CODES extra codes used during heap construction. However
				 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
				 * below).
				 */

				var static_dtree = new Array(D_CODES * 2);
				zero(static_dtree);
				/* The static distance tree. (Actually a trivial tree since all codes use
				 * 5 bits.)
				 */

				var _dist_code = new Array(DIST_CODE_LEN);
				zero(_dist_code);
				/* Distance codes. The first 256 values correspond to the distances
				 * 3 .. 258, the last 256 values correspond to the top 8 bits of
				 * the 15 bit distances.
				 */

				var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
				zero(_length_code);
				/* length code for each normalized match length (0 == MIN_MATCH) */

				var base_length = new Array(LENGTH_CODES);
				zero(base_length);
				/* First normalized length for each code (0 = MIN_MATCH) */

				var base_dist = new Array(D_CODES);
				zero(base_dist);
				/* First normalized distance for each code (0 = distance of 1) */

				function StaticTreeDesc(
					static_tree,
					extra_bits,
					extra_base,
					elems,
					max_length
				) {
					this.static_tree = static_tree; /* static tree or NULL */
					this.extra_bits = extra_bits; /* extra bits for each code or NULL */
					this.extra_base = extra_base; /* base index for extra_bits */
					this.elems = elems; /* max number of elements in the tree */
					this.max_length = max_length; /* max bit length for the codes */

					// show if `static_tree` has data or dummy - needed for monomorphic objects
					this.has_stree = static_tree && static_tree.length;
				}

				var static_l_desc;
				var static_d_desc;
				var static_bl_desc;

				function TreeDesc(dyn_tree, stat_desc) {
					this.dyn_tree = dyn_tree; /* the dynamic tree */
					this.max_code = 0; /* largest code with non zero frequency */
					this.stat_desc = stat_desc; /* the corresponding static tree */
				}

				function d_code(dist) {
					return dist < 256
						? _dist_code[dist]
						: _dist_code[256 + (dist >>> 7)];
				}

				/* ===========================================================================
				 * Output a short LSB first on the stream.
				 * IN assertion: there is enough room in pendingBuf.
				 */
				function put_short(s, w) {
					//    put_byte(s, (uch)((w) & 0xff));
					//    put_byte(s, (uch)((ush)(w) >> 8));
					s.pending_buf[s.pending++] = w & 0xff;
					s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
				}

				/* ===========================================================================
				 * Send a value on a given number of bits.
				 * IN assertion: length <= 16 and value fits in length bits.
				 */
				function send_bits(s, value, length) {
					if (s.bi_valid > Buf_size - length) {
						s.bi_buf |= (value << s.bi_valid) & 0xffff;
						put_short(s, s.bi_buf);
						s.bi_buf = value >> (Buf_size - s.bi_valid);
						s.bi_valid += length - Buf_size;
					} else {
						s.bi_buf |= (value << s.bi_valid) & 0xffff;
						s.bi_valid += length;
					}
				}

				function send_code(s, c, tree) {
					send_bits(
						s,
						tree[c * 2] /*.Code*/,
						tree[c * 2 + 1] /*.Len*/
					);
				}

				/* ===========================================================================
				 * Reverse the first len bits of a code, using straightforward code (a faster
				 * method would use a table)
				 * IN assertion: 1 <= len <= 15
				 */
				function bi_reverse(code, len) {
					var res = 0;
					do {
						res |= code & 1;
						code >>>= 1;
						res <<= 1;
					} while (--len > 0);
					return res >>> 1;
				}

				/* ===========================================================================
				 * Flush the bit buffer, keeping at most 7 bits in it.
				 */
				function bi_flush(s) {
					if (s.bi_valid === 16) {
						put_short(s, s.bi_buf);
						s.bi_buf = 0;
						s.bi_valid = 0;
					} else if (s.bi_valid >= 8) {
						s.pending_buf[s.pending++] = s.bi_buf & 0xff;
						s.bi_buf >>= 8;
						s.bi_valid -= 8;
					}
				}

				/* ===========================================================================
				 * Compute the optimal bit lengths for a tree and update the total bit length
				 * for the current block.
				 * IN assertion: the fields freq and dad are set, heap[heap_max] and
				 *    above are the tree nodes sorted by increasing frequency.
				 * OUT assertions: the field len is set to the optimal bit length, the
				 *     array bl_count contains the frequencies for each bit length.
				 *     The length opt_len is updated; static_len is also updated if stree is
				 *     not null.
				 */
				function gen_bitlen(s, desc) {
					//    deflate_state *s;
					//    tree_desc *desc;    /* the tree descriptor */
					var tree = desc.dyn_tree;
					var max_code = desc.max_code;
					var stree = desc.stat_desc.static_tree;
					var has_stree = desc.stat_desc.has_stree;
					var extra = desc.stat_desc.extra_bits;
					var base = desc.stat_desc.extra_base;
					var max_length = desc.stat_desc.max_length;
					var h; /* heap index */
					var n, m; /* iterate over the tree elements */
					var bits; /* bit length */
					var xbits; /* extra bits */
					var f; /* frequency */
					var overflow = 0; /* number of elements with bit length too large */

					for (bits = 0; bits <= MAX_BITS; bits++) {
						s.bl_count[bits] = 0;
					}

					/* In a first pass, compute the optimal bit lengths (which may
					 * overflow in the case of the bit length tree).
					 */
					tree[
						s.heap[s.heap_max] * 2 + 1
					] /*.Len*/ = 0; /* root of the heap */

					for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
						n = s.heap[h];
						bits =
							tree[tree[n * 2 + 1] /*.Dad*/ * 2 + 1] /*.Len*/ + 1;
						if (bits > max_length) {
							bits = max_length;
							overflow++;
						}
						tree[n * 2 + 1] /*.Len*/ = bits;
						/* We overwrite tree[n].Dad which is no longer needed */

						if (n > max_code) {
							continue;
						} /* not a leaf node */

						s.bl_count[bits]++;
						xbits = 0;
						if (n >= base) {
							xbits = extra[n - base];
						}
						f = tree[n * 2] /*.Freq*/;
						s.opt_len += f * (bits + xbits);
						if (has_stree) {
							s.static_len +=
								f * (stree[n * 2 + 1] /*.Len*/ + xbits);
						}
					}
					if (overflow === 0) {
						return;
					}

					// Trace((stderr,"\nbit length overflow\n"));
					/* This happens for example on obj2 and pic of the Calgary corpus */

					/* Find the first bit length which could increase: */
					do {
						bits = max_length - 1;
						while (s.bl_count[bits] === 0) {
							bits--;
						}
						s.bl_count[bits]--; /* move one leaf down the tree */
						s.bl_count[
							bits + 1
						] += 2; /* move one overflow item as its brother */
						s.bl_count[max_length]--;
						/* The brother of the overflow item also moves one step up,
						 * but this does not affect bl_count[max_length]
						 */
						overflow -= 2;
					} while (overflow > 0);

					/* Now recompute all bit lengths, scanning in increasing frequency.
					 * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
					 * lengths instead of fixing only the wrong ones. This idea is taken
					 * from 'ar' written by Haruhiko Okumura.)
					 */
					for (bits = max_length; bits !== 0; bits--) {
						n = s.bl_count[bits];
						while (n !== 0) {
							m = s.heap[--h];
							if (m > max_code) {
								continue;
							}
							if (tree[m * 2 + 1] /*.Len*/ !== bits) {
								// Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
								s.opt_len +=
									(bits - tree[m * 2 + 1]) /*.Len*/ *
									tree[m * 2] /*.Freq*/;
								tree[m * 2 + 1] /*.Len*/ = bits;
							}
							n--;
						}
					}
				}

				/* ===========================================================================
				 * Generate the codes for a given tree and bit counts (which need not be
				 * optimal).
				 * IN assertion: the array bl_count contains the bit length statistics for
				 * the given tree and the field len is set for all tree elements.
				 * OUT assertion: the field code is set for all tree elements of non
				 *     zero code length.
				 */
				function gen_codes(tree, max_code, bl_count) {
					//    ct_data *tree;             /* the tree to decorate */
					//    int max_code;              /* largest code with non zero frequency */
					//    ushf *bl_count;            /* number of codes at each bit length */
					var next_code = new Array(
						MAX_BITS + 1
					); /* next code value for each bit length */
					var code = 0; /* running code value */
					var bits; /* bit index */
					var n; /* code index */

					/* The distribution counts are first used to generate the code values
					 * without bit reversal.
					 */
					for (bits = 1; bits <= MAX_BITS; bits++) {
						next_code[bits] = code =
							(code + bl_count[bits - 1]) << 1;
					}
					/* Check that the bit counts in bl_count are consistent. The last code
					 * must be all ones.
					 */
					//Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
					//        "inconsistent bit counts");
					//Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

					for (n = 0; n <= max_code; n++) {
						var len = tree[n * 2 + 1]; /*.Len*/
						if (len === 0) {
							continue;
						}
						/* Now reverse the bits */
						tree[n * 2] /*.Code*/ = bi_reverse(
							next_code[len]++,
							len
						);

						//Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
						//     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
					}
				}

				/* ===========================================================================
				 * Initialize the various 'constant' tables.
				 */
				function tr_static_init() {
					var n; /* iterates over tree elements */
					var bits; /* bit counter */
					var length; /* length value */
					var code; /* code value */
					var dist; /* distance index */
					var bl_count = new Array(MAX_BITS + 1);
					/* number of codes at each bit length for an optimal tree */

					// do check in _tr_init()
					//if (static_init_done) return;

					/* For some embedded targets, global variables are not initialized: */
					/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

					/* Initialize the mapping length (0..255) -> length code (0..28) */
					length = 0;
					for (code = 0; code < LENGTH_CODES - 1; code++) {
						base_length[code] = length;
						for (n = 0; n < 1 << extra_lbits[code]; n++) {
							_length_code[length++] = code;
						}
					}
					//Assert (length == 256, "tr_static_init: length != 256");
					/* Note that the length 255 (match length 258) can be represented
					 * in two different ways: code 284 + 5 bits or code 285, so we
					 * overwrite length_code[255] to use the best encoding:
					 */
					_length_code[length - 1] = code;

					/* Initialize the mapping dist (0..32K) -> dist code (0..29) */
					dist = 0;
					for (code = 0; code < 16; code++) {
						base_dist[code] = dist;
						for (n = 0; n < 1 << extra_dbits[code]; n++) {
							_dist_code[dist++] = code;
						}
					}
					//Assert (dist == 256, "tr_static_init: dist != 256");
					dist >>= 7; /* from now on, all distances are divided by 128 */
					for (; code < D_CODES; code++) {
						base_dist[code] = dist << 7;
						for (n = 0; n < 1 << (extra_dbits[code] - 7); n++) {
							_dist_code[256 + dist++] = code;
						}
					}
					//Assert (dist == 256, "tr_static_init: 256+dist != 512");

					/* Construct the codes of the static literal tree */
					for (bits = 0; bits <= MAX_BITS; bits++) {
						bl_count[bits] = 0;
					}

					n = 0;
					while (n <= 143) {
						static_ltree[n * 2 + 1] /*.Len*/ = 8;
						n++;
						bl_count[8]++;
					}
					while (n <= 255) {
						static_ltree[n * 2 + 1] /*.Len*/ = 9;
						n++;
						bl_count[9]++;
					}
					while (n <= 279) {
						static_ltree[n * 2 + 1] /*.Len*/ = 7;
						n++;
						bl_count[7]++;
					}
					while (n <= 287) {
						static_ltree[n * 2 + 1] /*.Len*/ = 8;
						n++;
						bl_count[8]++;
					}
					/* Codes 286 and 287 do not exist, but we must include them in the
					 * tree construction to get a canonical Huffman tree (longest code
					 * all ones)
					 */
					gen_codes(static_ltree, L_CODES + 1, bl_count);

					/* The static distance tree is trivial: */
					for (n = 0; n < D_CODES; n++) {
						static_dtree[n * 2 + 1] /*.Len*/ = 5;
						static_dtree[n * 2] /*.Code*/ = bi_reverse(n, 5);
					}

					// Now data ready and we can init static trees
					static_l_desc = new StaticTreeDesc(
						static_ltree,
						extra_lbits,
						LITERALS + 1,
						L_CODES,
						MAX_BITS
					);
					static_d_desc = new StaticTreeDesc(
						static_dtree,
						extra_dbits,
						0,
						D_CODES,
						MAX_BITS
					);
					static_bl_desc = new StaticTreeDesc(
						new Array(0),
						extra_blbits,
						0,
						BL_CODES,
						MAX_BL_BITS
					);

					//static_init_done = true;
				}

				/* ===========================================================================
				 * Initialize a new block.
				 */
				function init_block(s) {
					var n; /* iterates over tree elements */

					/* Initialize the trees. */
					for (n = 0; n < L_CODES; n++) {
						s.dyn_ltree[n * 2] /*.Freq*/ = 0;
					}
					for (n = 0; n < D_CODES; n++) {
						s.dyn_dtree[n * 2] /*.Freq*/ = 0;
					}
					for (n = 0; n < BL_CODES; n++) {
						s.bl_tree[n * 2] /*.Freq*/ = 0;
					}

					s.dyn_ltree[END_BLOCK * 2] /*.Freq*/ = 1;
					s.opt_len = s.static_len = 0;
					s.last_lit = s.matches = 0;
				}

				/* ===========================================================================
				 * Flush the bit buffer and align the output on a byte boundary
				 */
				function bi_windup(s) {
					if (s.bi_valid > 8) {
						put_short(s, s.bi_buf);
					} else if (s.bi_valid > 0) {
						//put_byte(s, (Byte)s->bi_buf);
						s.pending_buf[s.pending++] = s.bi_buf;
					}
					s.bi_buf = 0;
					s.bi_valid = 0;
				}

				/* ===========================================================================
				 * Copy a stored block, storing first the length and its
				 * one's complement if requested.
				 */
				function copy_block(s, buf, len, header) {
					//DeflateState *s;
					//charf    *buf;    /* the input data */
					//unsigned len;     /* its length */
					//int      header;  /* true if block header must be written */
					bi_windup(s); /* align on byte boundary */

					if (header) {
						put_short(s, len);
						put_short(s, ~len);
					}
					//  while (len--) {
					//    put_byte(s, *buf++);
					//  }
					utils.arraySet(
						s.pending_buf,
						s.window,
						buf,
						len,
						s.pending
					);
					s.pending += len;
				}

				/* ===========================================================================
				 * Compares to subtrees, using the tree depth as tie breaker when
				 * the subtrees have equal frequency. This minimizes the worst case length.
				 */
				function smaller(tree, n, m, depth) {
					var _n2 = n * 2;
					var _m2 = m * 2;
					return (
						tree[_n2] /*.Freq*/ < tree[_m2] /*.Freq*/ ||
						(tree[_n2] /*.Freq*/ === tree[_m2] /*.Freq*/ &&
							depth[n] <= depth[m])
					);
				}

				/* ===========================================================================
				 * Restore the heap property by moving down the tree starting at node k,
				 * exchanging a node with the smallest of its two sons if necessary, stopping
				 * when the heap property is re-established (each father smaller than its
				 * two sons).
				 */
				function pqdownheap(s, tree, k) {
					//    deflate_state *s;
					//    ct_data *tree;  /* the tree to restore */
					//    int k;               /* node to move down */
					var v = s.heap[k];
					var j = k << 1; /* left son of k */
					while (j <= s.heap_len) {
						/* Set j to the smallest of the two sons: */
						if (
							j < s.heap_len &&
							smaller(tree, s.heap[j + 1], s.heap[j], s.depth)
						) {
							j++;
						}
						/* Exit if v is smaller than both sons */
						if (smaller(tree, v, s.heap[j], s.depth)) {
							break;
						}

						/* Exchange v with the smallest son */
						s.heap[k] = s.heap[j];
						k = j;

						/* And continue down the tree, setting j to the left son of k */
						j <<= 1;
					}
					s.heap[k] = v;
				}

				// inlined manually
				// var SMALLEST = 1;

				/* ===========================================================================
				 * Send the block data compressed using the given Huffman trees
				 */
				function compress_block(s, ltree, dtree) {
					//    deflate_state *s;
					//    const ct_data *ltree; /* literal tree */
					//    const ct_data *dtree; /* distance tree */
					var dist; /* distance of matched string */
					var lc; /* match length or unmatched char (if dist == 0) */
					var lx = 0; /* running index in l_buf */
					var code; /* the code to send */
					var extra; /* number of extra bits to send */

					if (s.last_lit !== 0) {
						do {
							dist =
								(s.pending_buf[s.d_buf + lx * 2] << 8) |
								s.pending_buf[s.d_buf + lx * 2 + 1];
							lc = s.pending_buf[s.l_buf + lx];
							lx++;

							if (dist === 0) {
								send_code(
									s,
									lc,
									ltree
								); /* send a literal byte */
								//Tracecv(isgraph(lc), (stderr," '%c' ", lc));
							} else {
								/* Here, lc is the match length - MIN_MATCH */
								code = _length_code[lc];
								send_code(
									s,
									code + LITERALS + 1,
									ltree
								); /* send the length code */
								extra = extra_lbits[code];
								if (extra !== 0) {
									lc -= base_length[code];
									send_bits(
										s,
										lc,
										extra
									); /* send the extra length bits */
								}
								dist--; /* dist is now the match distance - 1 */
								code = d_code(dist);
								//Assert (code < D_CODES, "bad d_code");

								send_code(
									s,
									code,
									dtree
								); /* send the distance code */
								extra = extra_dbits[code];
								if (extra !== 0) {
									dist -= base_dist[code];
									send_bits(
										s,
										dist,
										extra
									); /* send the extra distance bits */
								}
							} /* literal or match pair ? */

							/* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
							//Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
							//       "pendingBuf overflow");
						} while (lx < s.last_lit);
					}

					send_code(s, END_BLOCK, ltree);
				}

				/* ===========================================================================
				 * Construct one Huffman tree and assigns the code bit strings and lengths.
				 * Update the total bit length for the current block.
				 * IN assertion: the field freq is set for all tree elements.
				 * OUT assertions: the fields len and code are set to the optimal bit length
				 *     and corresponding code. The length opt_len is updated; static_len is
				 *     also updated if stree is not null. The field max_code is set.
				 */
				function build_tree(s, desc) {
					//    deflate_state *s;
					//    tree_desc *desc; /* the tree descriptor */
					var tree = desc.dyn_tree;
					var stree = desc.stat_desc.static_tree;
					var has_stree = desc.stat_desc.has_stree;
					var elems = desc.stat_desc.elems;
					var n, m; /* iterate over heap elements */
					var max_code = -1; /* largest code with non zero frequency */
					var node; /* new node being created */

					/* Construct the initial heap, with least frequent element in
					 * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
					 * heap[0] is not used.
					 */
					s.heap_len = 0;
					s.heap_max = HEAP_SIZE;

					for (n = 0; n < elems; n++) {
						if (tree[n * 2] /*.Freq*/ !== 0) {
							s.heap[++s.heap_len] = max_code = n;
							s.depth[n] = 0;
						} else {
							tree[n * 2 + 1] /*.Len*/ = 0;
						}
					}

					/* The pkzip format requires that at least one distance code exists,
					 * and that at least one bit should be sent even if there is only one
					 * possible code. So to avoid special checks later on we force at least
					 * two codes of non zero frequency.
					 */
					while (s.heap_len < 2) {
						node = s.heap[++s.heap_len] =
							max_code < 2 ? ++max_code : 0;
						tree[node * 2] /*.Freq*/ = 1;
						s.depth[node] = 0;
						s.opt_len--;

						if (has_stree) {
							s.static_len -= stree[node * 2 + 1] /*.Len*/;
						}
						/* node is 0 or 1 so it does not have extra bits */
					}
					desc.max_code = max_code;

					/* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
					 * establish sub-heaps of increasing lengths:
					 */
					for (n = s.heap_len >> 1 /*int /2*/; n >= 1; n--) {
						pqdownheap(s, tree, n);
					}

					/* Construct the Huffman tree by repeatedly combining the least two
					 * frequent nodes.
					 */
					node = elems; /* next internal node of the tree */
					do {
						//pqremove(s, tree, n);  /* n = node of least frequency */
						/*** pqremove ***/
						n = s.heap[1 /*SMALLEST*/];
						s.heap[1 /*SMALLEST*/] = s.heap[s.heap_len--];
						pqdownheap(s, tree, 1 /*SMALLEST*/);
						/***/

						m =
							s
								.heap[1 /*SMALLEST*/]; /* m = node of next least frequency */

						s.heap[
							--s.heap_max
						] = n; /* keep the nodes sorted by frequency */
						s.heap[--s.heap_max] = m;

						/* Create a new node father of n and m */
						tree[node * 2] /*.Freq*/ =
							tree[n * 2] /*.Freq*/ + tree[m * 2] /*.Freq*/;
						s.depth[node] =
							(s.depth[n] >= s.depth[m]
								? s.depth[n]
								: s.depth[m]) + 1;
						tree[n * 2 + 1] /*.Dad*/ = tree[
							m * 2 + 1
						] /*.Dad*/ = node;

						/* and insert the new node in the heap */
						s.heap[1 /*SMALLEST*/] = node++;
						pqdownheap(s, tree, 1 /*SMALLEST*/);
					} while (s.heap_len >= 2);

					s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/];

					/* At this point, the fields freq and dad are set. We can now
					 * generate the bit lengths.
					 */
					gen_bitlen(s, desc);

					/* The field len is now set, we can generate the bit codes */
					gen_codes(tree, max_code, s.bl_count);
				}

				/* ===========================================================================
				 * Scan a literal or distance tree to determine the frequencies of the codes
				 * in the bit length tree.
				 */
				function scan_tree(s, tree, max_code) {
					//    deflate_state *s;
					//    ct_data *tree;   /* the tree to be scanned */
					//    int max_code;    /* and its largest code of non zero frequency */
					var n; /* iterates over all tree elements */
					var prevlen = -1; /* last emitted length */
					var curlen; /* length of current code */

					var nextlen =
						tree[0 * 2 + 1]; /* length of next code */ /*.Len*/

					var count = 0; /* repeat count of the current code */
					var max_count = 7; /* max repeat count */
					var min_count = 4; /* min repeat count */

					if (nextlen === 0) {
						max_count = 138;
						min_count = 3;
					}
					tree[(max_code + 1) * 2 + 1] /*.Len*/ = 0xffff; /* guard */

					for (n = 0; n <= max_code; n++) {
						curlen = nextlen;
						nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;

						if (++count < max_count && curlen === nextlen) {
							continue;
						} else if (count < min_count) {
							s.bl_tree[curlen * 2] /*.Freq*/ += count;
						} else if (curlen !== 0) {
							if (curlen !== prevlen) {
								s.bl_tree[curlen * 2] /*.Freq*/++;
							}
							s.bl_tree[REP_3_6 * 2] /*.Freq*/++;
						} else if (count <= 10) {
							s.bl_tree[REPZ_3_10 * 2] /*.Freq*/++;
						} else {
							s.bl_tree[REPZ_11_138 * 2] /*.Freq*/++;
						}

						count = 0;
						prevlen = curlen;

						if (nextlen === 0) {
							max_count = 138;
							min_count = 3;
						} else if (curlen === nextlen) {
							max_count = 6;
							min_count = 3;
						} else {
							max_count = 7;
							min_count = 4;
						}
					}
				}

				/* ===========================================================================
				 * Send a literal or distance tree in compressed form, using the codes in
				 * bl_tree.
				 */
				function send_tree(s, tree, max_code) {
					//    deflate_state *s;
					//    ct_data *tree; /* the tree to be scanned */
					//    int max_code;       /* and its largest code of non zero frequency */
					var n; /* iterates over all tree elements */
					var prevlen = -1; /* last emitted length */
					var curlen; /* length of current code */

					var nextlen =
						tree[0 * 2 + 1]; /* length of next code */ /*.Len*/

					var count = 0; /* repeat count of the current code */
					var max_count = 7; /* max repeat count */
					var min_count = 4; /* min repeat count */ /* guard already set */

					/* tree[max_code+1].Len = -1; */ if (nextlen === 0) {
						max_count = 138;
						min_count = 3;
					}

					for (n = 0; n <= max_code; n++) {
						curlen = nextlen;
						nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;

						if (++count < max_count && curlen === nextlen) {
							continue;
						} else if (count < min_count) {
							do {
								send_code(s, curlen, s.bl_tree);
							} while (--count !== 0);
						} else if (curlen !== 0) {
							if (curlen !== prevlen) {
								send_code(s, curlen, s.bl_tree);
								count--;
							}
							//Assert(count >= 3 && count <= 6, " 3_6?");
							send_code(s, REP_3_6, s.bl_tree);
							send_bits(s, count - 3, 2);
						} else if (count <= 10) {
							send_code(s, REPZ_3_10, s.bl_tree);
							send_bits(s, count - 3, 3);
						} else {
							send_code(s, REPZ_11_138, s.bl_tree);
							send_bits(s, count - 11, 7);
						}

						count = 0;
						prevlen = curlen;
						if (nextlen === 0) {
							max_count = 138;
							min_count = 3;
						} else if (curlen === nextlen) {
							max_count = 6;
							min_count = 3;
						} else {
							max_count = 7;
							min_count = 4;
						}
					}
				}

				/* ===========================================================================
				 * Construct the Huffman tree for the bit lengths and return the index in
				 * bl_order of the last bit length code to send.
				 */
				function build_bl_tree(s) {
					var max_blindex; /* index of last bit length code of non zero freq */

					/* Determine the bit length frequencies for literal and distance trees */
					scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
					scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

					/* Build the bit length tree: */
					build_tree(s, s.bl_desc);
					/* opt_len now includes the length of the tree representations, except
					 * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
					 */

					/* Determine the number of bit length codes to send. The pkzip format
					 * requires that at least 4 bit length codes be sent. (appnote.txt says
					 * 3 but the actual value used is 4.)
					 */
					for (
						max_blindex = BL_CODES - 1;
						max_blindex >= 3;
						max_blindex--
					) {
						if (
							s.bl_tree[
								bl_order[max_blindex] * 2 + 1
							] /*.Len*/ !== 0
						) {
							break;
						}
					}
					/* Update opt_len to include the bit length tree and counts */
					s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
					//Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
					//        s->opt_len, s->static_len));

					return max_blindex;
				}

				/* ===========================================================================
				 * Send the header for a block using dynamic Huffman trees: the counts, the
				 * lengths of the bit length codes, the literal tree and the distance tree.
				 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
				 */
				function send_all_trees(s, lcodes, dcodes, blcodes) {
					//    deflate_state *s;
					//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
					var rank; /* index in bl_order */

					//Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
					//Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
					//        "too many codes");
					//Tracev((stderr, "\nbl counts: "));
					send_bits(
						s,
						lcodes - 257,
						5
					); /* not +255 as stated in appnote.txt */
					send_bits(s, dcodes - 1, 5);
					send_bits(
						s,
						blcodes - 4,
						4
					); /* not -3 as stated in appnote.txt */
					for (rank = 0; rank < blcodes; rank++) {
						//Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
						send_bits(
							s,
							s.bl_tree[bl_order[rank] * 2 + 1] /*.Len*/,
							3
						);
					}
					//Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

					send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
					//Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

					send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
					//Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
				}

				/* ===========================================================================
				 * Check if the data type is TEXT or BINARY, using the following algorithm:
				 * - TEXT if the two conditions below are satisfied:
				 *    a) There are no non-portable control characters belonging to the
				 *       "black list" (0..6, 14..25, 28..31).
				 *    b) There is at least one printable character belonging to the
				 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
				 * - BINARY otherwise.
				 * - The following partially-portable control characters form a
				 *   "gray list" that is ignored in this detection algorithm:
				 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
				 * IN assertion: the fields Freq of dyn_ltree are set.
				 */
				function detect_data_type(s) {
					/* black_mask is the bit mask of black-listed bytes
					 * set bits 0..6, 14..25, and 28..31
					 * 0xf3ffc07f = binary 11110011111111111100000001111111
					 */
					var black_mask = 0xf3ffc07f;
					var n;

					/* Check for non-textual ("black-listed") bytes. */
					for (n = 0; n <= 31; n++, black_mask >>>= 1) {
						if (
							black_mask & 1 &&
							s.dyn_ltree[n * 2] /*.Freq*/ !== 0
						) {
							return Z_BINARY;
						}
					}

					/* Check for textual ("white-listed") bytes. */
					if (
						s.dyn_ltree[9 * 2] /*.Freq*/ !== 0 ||
						s.dyn_ltree[10 * 2] /*.Freq*/ !== 0 ||
						s.dyn_ltree[13 * 2] /*.Freq*/ !== 0
					) {
						return Z_TEXT;
					}
					for (n = 32; n < LITERALS; n++) {
						if (s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
							return Z_TEXT;
						}
					}

					/* There are no "black-listed" or "white-listed" bytes:
					 * this stream either is empty or has tolerated ("gray-listed") bytes only.
					 */
					return Z_BINARY;
				}

				var static_init_done = false;

				/* ===========================================================================
				 * Initialize the tree data structures for a new zlib stream.
				 */
				function _tr_init(s) {
					if (!static_init_done) {
						tr_static_init();
						static_init_done = true;
					}

					s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
					s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
					s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

					s.bi_buf = 0;
					s.bi_valid = 0;

					/* Initialize the first block of the first file: */
					init_block(s);
				}

				/* ===========================================================================
				 * Send a stored block
				 */
				function _tr_stored_block(s, buf, stored_len, last) {
					//DeflateState *s;
					//charf *buf;       /* input block */
					//ulg stored_len;   /* length of input block */
					//int last;         /* one if this is the last block for a file */
					send_bits(
						s,
						(STORED_BLOCK << 1) + (last ? 1 : 0),
						3
					); /* send block type */
					copy_block(s, buf, stored_len, true); /* with header */
				}

				/* ===========================================================================
				 * Send one empty static block to give enough lookahead for inflate.
				 * This takes 10 bits, of which 7 may remain in the bit buffer.
				 */
				function _tr_align(s) {
					send_bits(s, STATIC_TREES << 1, 3);
					send_code(s, END_BLOCK, static_ltree);
					bi_flush(s);
				}

				/* ===========================================================================
				 * Determine the best encoding for the current block: dynamic trees, static
				 * trees or store, and output the encoded block to the zip file.
				 */
				function _tr_flush_block(s, buf, stored_len, last) {
					//DeflateState *s;
					//charf *buf;       /* input block, or NULL if too old */
					//ulg stored_len;   /* length of input block */
					//int last;         /* one if this is the last block for a file */
					var opt_lenb,
						static_lenb; /* opt_len and static_len in bytes */
					var max_blindex = 0; /* index of last bit length code of non zero freq */

					/* Build the Huffman trees unless a stored block is forced */
					if (s.level > 0) {
						/* Check if the file is binary or text */
						if (s.strm.data_type === Z_UNKNOWN) {
							s.strm.data_type = detect_data_type(s);
						}

						/* Construct the literal and distance trees */
						build_tree(s, s.l_desc);
						// Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
						//        s->static_len));

						build_tree(s, s.d_desc);
						// Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
						//        s->static_len));
						/* At this point, opt_len and static_len are the total bit lengths of
						 * the compressed block data, excluding the tree representations.
						 */

						/* Build the bit length tree for the above two trees, and get the index
						 * in bl_order of the last bit length code to send.
						 */
						max_blindex = build_bl_tree(s);

						/* Determine the best encoding. Compute the block lengths in bytes. */
						opt_lenb = (s.opt_len + 3 + 7) >>> 3;
						static_lenb = (s.static_len + 3 + 7) >>> 3;

						// Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
						//        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
						//        s->last_lit));

						if (static_lenb <= opt_lenb) {
							opt_lenb = static_lenb;
						}
					} else {
						// Assert(buf != (char*)0, "lost buf");
						opt_lenb = static_lenb =
							stored_len + 5; /* force a stored block */
					}

					if (stored_len + 4 <= opt_lenb && buf !== -1) {
						/* 4: two words for the lengths */

						/* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
						 * Otherwise we can't have processed more than WSIZE input bytes since
						 * the last block flush, because compression would have been
						 * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
						 * transform a block into a stored block.
						 */
						_tr_stored_block(s, buf, stored_len, last);
					} else if (
						s.strategy === Z_FIXED ||
						static_lenb === opt_lenb
					) {
						send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
						compress_block(s, static_ltree, static_dtree);
					} else {
						send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
						send_all_trees(
							s,
							s.l_desc.max_code + 1,
							s.d_desc.max_code + 1,
							max_blindex + 1
						);
						compress_block(s, s.dyn_ltree, s.dyn_dtree);
					}
					// Assert (s->compressed_len == s->bits_sent, "bad compressed size");
					/* The above check is made mod 2^32, for files larger than 512 MB
					 * and uLong implemented on 32 bits.
					 */
					init_block(s);

					if (last) {
						bi_windup(s);
					}
					// Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
					//       s->compressed_len-7*last));
				}

				/* ===========================================================================
				 * Save the match info and tally the frequency counts. Return true if
				 * the current block must be flushed.
				 */
				function _tr_tally(s, dist, lc) {
					//    deflate_state *s;
					//    unsigned dist;  /* distance of matched string */
					//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
					//var out_length, in_length, dcode;

					s.pending_buf[s.d_buf + s.last_lit * 2] =
						(dist >>> 8) & 0xff;
					s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

					s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
					s.last_lit++;

					if (dist === 0) {
						/* lc is the unmatched char */
						s.dyn_ltree[lc * 2] /*.Freq*/++;
					} else {
						s.matches++;
						/* Here, lc is the match length - MIN_MATCH */
						dist--; /* dist = match distance - 1 */
						//Assert((ush)dist < (ush)MAX_DIST(s) &&
						//       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
						//       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

						s.dyn_ltree[
							(_length_code[lc] + LITERALS + 1) * 2
						] /*.Freq*/++;
						s.dyn_dtree[d_code(dist) * 2] /*.Freq*/++;
					}

					// (!) This block is disabled in zlib defaults,
					// don't enable it for binary compatibility

					//#ifdef TRUNCATE_BLOCK
					//  /* Try to guess if it is profitable to stop the current block here */
					//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
					//    /* Compute an upper bound for the compressed length */
					//    out_length = s.last_lit*8;
					//    in_length = s.strstart - s.block_start;
					//
					//    for (dcode = 0; dcode < D_CODES; dcode++) {
					//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
					//    }
					//    out_length >>>= 3;
					//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
					//    //       s->last_lit, in_length, out_length,
					//    //       100L - out_length*100L/in_length));
					//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
					//      return true;
					//    }
					//  }
					//#endif

					return s.last_lit === s.lit_bufsize - 1;
					/* We avoid equality with lit_bufsize because of wraparound at 64K
					 * on 16 bit machines and because stored blocks are restricted to
					 * 64K-1 bytes.
					 */
				}

				exports._tr_init = _tr_init;
				exports._tr_stored_block = _tr_stored_block;
				exports._tr_flush_block = _tr_flush_block;
				exports._tr_tally = _tr_tally;
				exports._tr_align = _tr_align;

				/***/
			},

		/***/ "./node_modules/pako/lib/zlib/zstream.js":
			/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/zstream.js ***!
  \***********************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";

				// (C) 1995-2013 Jean-loup Gailly and Mark Adler
				// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
				//
				// This software is provided 'as-is', without any express or implied
				// warranty. In no event will the authors be held liable for any damages
				// arising from the use of this software.
				//
				// Permission is granted to anyone to use this software for any purpose,
				// including commercial applications, and to alter it and redistribute it
				// freely, subject to the following restrictions:
				//
				// 1. The origin of this software must not be misrepresented; you must not
				//   claim that you wrote the original software. If you use this software
				//   in a product, an acknowledgment in the product documentation would be
				//   appreciated but is not required.
				// 2. Altered source versions must be plainly marked as such, and must not be
				//   misrepresented as being the original software.
				// 3. This notice may not be removed or altered from any source distribution.

				function ZStream() {
					/* next input byte */
					this.input = null; // JS specific, because we have no pointers
					this.next_in = 0;
					/* number of bytes available at input */
					this.avail_in = 0;
					/* total number of input bytes read so far */
					this.total_in = 0;
					/* next output byte should be put there */
					this.output = null; // JS specific, because we have no pointers
					this.next_out = 0;
					/* remaining free space at output */
					this.avail_out = 0;
					/* total number of bytes output so far */
					this.total_out = 0;
					/* last error message, NULL if no error */
					this.msg = "" /*Z_NULL*/;
					/* not visible by applications */
					this.state = null;
					/* best guess about the data type: binary or text */
					this.data_type = 2 /*Z_UNKNOWN*/;
					/* adler32 value of the uncompressed data */
					this.adler = 0;
				}

				module.exports = ZStream;

				/***/
			},

		/***/ "./node_modules/path-browserify/index.js":
			/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(process) {
					// Copyright Joyent, Inc. and other Node contributors.
					//
					// Permission is hereby granted, free of charge, to any person obtaining a
					// copy of this software and associated documentation files (the
					// "Software"), to deal in the Software without restriction, including
					// without limitation the rights to use, copy, modify, merge, publish,
					// distribute, sublicense, and/or sell copies of the Software, and to permit
					// persons to whom the Software is furnished to do so, subject to the
					// following conditions:
					//
					// The above copyright notice and this permission notice shall be included
					// in all copies or substantial portions of the Software.
					//
					// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
					// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
					// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
					// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
					// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
					// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
					// USE OR OTHER DEALINGS IN THE SOFTWARE.

					// resolves . and .. elements in a path array with directory names there
					// must be no slashes, empty elements, or device names (c:\) in the array
					// (so also no leading and trailing slashes - it does not distinguish
					// relative and absolute paths)
					function normalizeArray(parts, allowAboveRoot) {
						// if the path tries to go above the root, `up` ends up > 0
						var up = 0;
						for (var i = parts.length - 1; i >= 0; i--) {
							var last = parts[i];
							if (last === ".") {
								parts.splice(i, 1);
							} else if (last === "..") {
								parts.splice(i, 1);
								up++;
							} else if (up) {
								parts.splice(i, 1);
								up--;
							}
						}

						// if the path is allowed to go above the root, restore leading ..s
						if (allowAboveRoot) {
							for (; up--; up) {
								parts.unshift("..");
							}
						}

						return parts;
					}

					// Split a filename into [root, dir, basename, ext], unix version
					// 'root' is just a slash, or nothing.
					var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
					var splitPath = function(filename) {
						return splitPathRe.exec(filename).slice(1);
					};

					// path.resolve([from ...], to)
					// posix version
					exports.resolve = function() {
						var resolvedPath = "",
							resolvedAbsolute = false;

						for (
							var i = arguments.length - 1;
							i >= -1 && !resolvedAbsolute;
							i--
						) {
							var path = i >= 0 ? arguments[i] : process.cwd();

							// Skip empty and invalid entries
							if (typeof path !== "string") {
								throw new TypeError(
									"Arguments to path.resolve must be strings"
								);
							} else if (!path) {
								continue;
							}

							resolvedPath = path + "/" + resolvedPath;
							resolvedAbsolute = path.charAt(0) === "/";
						}

						// At this point the path should be resolved to a full absolute path, but
						// handle relative paths to be safe (might happen when process.cwd() fails)

						// Normalize the path
						resolvedPath = normalizeArray(
							filter(resolvedPath.split("/"), function(p) {
								return !!p;
							}),
							!resolvedAbsolute
						).join("/");

						return (
							(resolvedAbsolute ? "/" : "") + resolvedPath || "."
						);
					};

					// path.normalize(path)
					// posix version
					exports.normalize = function(path) {
						var isAbsolute = exports.isAbsolute(path),
							trailingSlash = substr(path, -1) === "/";

						// Normalize the path
						path = normalizeArray(
							filter(path.split("/"), function(p) {
								return !!p;
							}),
							!isAbsolute
						).join("/");

						if (!path && !isAbsolute) {
							path = ".";
						}
						if (path && trailingSlash) {
							path += "/";
						}

						return (isAbsolute ? "/" : "") + path;
					};

					// posix version
					exports.isAbsolute = function(path) {
						return path.charAt(0) === "/";
					};

					// posix version
					exports.join = function() {
						var paths = Array.prototype.slice.call(arguments, 0);
						return exports.normalize(
							filter(paths, function(p, index) {
								if (typeof p !== "string") {
									throw new TypeError(
										"Arguments to path.join must be strings"
									);
								}
								return p;
							}).join("/")
						);
					};

					// path.relative(from, to)
					// posix version
					exports.relative = function(from, to) {
						from = exports.resolve(from).substr(1);
						to = exports.resolve(to).substr(1);

						function trim(arr) {
							var start = 0;
							for (; start < arr.length; start++) {
								if (arr[start] !== "") break;
							}

							var end = arr.length - 1;
							for (; end >= 0; end--) {
								if (arr[end] !== "") break;
							}

							if (start > end) return [];
							return arr.slice(start, end - start + 1);
						}

						var fromParts = trim(from.split("/"));
						var toParts = trim(to.split("/"));

						var length = Math.min(fromParts.length, toParts.length);
						var samePartsLength = length;
						for (var i = 0; i < length; i++) {
							if (fromParts[i] !== toParts[i]) {
								samePartsLength = i;
								break;
							}
						}

						var outputParts = [];
						for (
							var i = samePartsLength;
							i < fromParts.length;
							i++
						) {
							outputParts.push("..");
						}

						outputParts = outputParts.concat(
							toParts.slice(samePartsLength)
						);

						return outputParts.join("/");
					};

					exports.sep = "/";
					exports.delimiter = ":";

					exports.dirname = function(path) {
						var result = splitPath(path),
							root = result[0],
							dir = result[1];

						if (!root && !dir) {
							// No dirname whatsoever
							return ".";
						}

						if (dir) {
							// It has a dirname, strip trailing slash
							dir = dir.substr(0, dir.length - 1);
						}

						return root + dir;
					};

					exports.basename = function(path, ext) {
						var f = splitPath(path)[2];
						// TODO: make this comparison case-insensitive on windows?
						if (ext && f.substr(-1 * ext.length) === ext) {
							f = f.substr(0, f.length - ext.length);
						}
						return f;
					};

					exports.extname = function(path) {
						return splitPath(path)[3];
					};

					function filter(xs, f) {
						if (xs.filter) return xs.filter(f);
						var res = [];
						for (var i = 0; i < xs.length; i++) {
							if (f(xs[i], i, xs)) res.push(xs[i]);
						}
						return res;
					}

					// String.prototype.substr - negative index don't work in IE8
					var substr =
						"ab".substr(-1) === "b"
							? function(str, start, len) {
									return str.substr(start, len);
							  }
							: function(str, start, len) {
									if (start < 0) start = str.length + start;
									return str.substr(start, len);
							  };

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../process/browser.js */ "./node_modules/process/browser.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/process-nextick-args/index.js":
			/*!****************************************************!*\
  !*** ./node_modules/process-nextick-args/index.js ***!
  \****************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				/* WEBPACK VAR INJECTION */ (function(process) {
					if (
						!process.version ||
						process.version.indexOf("v0.") === 0 ||
						(process.version.indexOf("v1.") === 0 &&
							process.version.indexOf("v1.8.") !== 0)
					) {
						module.exports = {nextTick: nextTick};
					} else {
						module.exports = process;
					}

					function nextTick(fn, arg1, arg2, arg3) {
						if (typeof fn !== "function") {
							throw new TypeError(
								'"callback" argument must be a function'
							);
						}
						var len = arguments.length;
						var args, i;
						switch (len) {
							case 0:
							case 1:
								return process.nextTick(fn);
							case 2:
								return process.nextTick(
									function afterTickOne() {
										fn.call(null, arg1);
									}
								);
							case 3:
								return process.nextTick(
									function afterTickTwo() {
										fn.call(null, arg1, arg2);
									}
								);
							case 4:
								return process.nextTick(
									function afterTickThree() {
										fn.call(null, arg1, arg2, arg3);
									}
								);
							default:
								args = new Array(len - 1);
								i = 0;
								while (i < args.length) {
									args[i++] = arguments[i];
								}
								return process.nextTick(function afterTick() {
									fn.apply(null, args);
								});
						}
					}

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../process/browser.js */ "./node_modules/process/browser.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/process/browser.js":
			/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				// shim for using process in browser
				var process = (module.exports = {});

				// cached from whatever global is present so that test runners that stub it
				// don't break things.  But we need to wrap it in a try catch in case it is
				// wrapped in strict mode code which doesn't define any globals.  It's inside a
				// function because try/catches deoptimize in certain engines.

				var cachedSetTimeout;
				var cachedClearTimeout;

				function defaultSetTimout() {
					throw new Error("setTimeout has not been defined");
				}
				function defaultClearTimeout() {
					throw new Error("clearTimeout has not been defined");
				}
				(function() {
					try {
						if (typeof setTimeout === "function") {
							cachedSetTimeout = setTimeout;
						} else {
							cachedSetTimeout = defaultSetTimout;
						}
					} catch (e) {
						cachedSetTimeout = defaultSetTimout;
					}
					try {
						if (typeof clearTimeout === "function") {
							cachedClearTimeout = clearTimeout;
						} else {
							cachedClearTimeout = defaultClearTimeout;
						}
					} catch (e) {
						cachedClearTimeout = defaultClearTimeout;
					}
				})();
				function runTimeout(fun) {
					if (cachedSetTimeout === setTimeout) {
						//normal enviroments in sane situations
						return setTimeout(fun, 0);
					}
					// if setTimeout wasn't available but was latter defined
					if (
						(cachedSetTimeout === defaultSetTimout ||
							!cachedSetTimeout) &&
						setTimeout
					) {
						cachedSetTimeout = setTimeout;
						return setTimeout(fun, 0);
					}
					try {
						// when when somebody has screwed with setTimeout but no I.E. maddness
						return cachedSetTimeout(fun, 0);
					} catch (e) {
						try {
							// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
							return cachedSetTimeout.call(null, fun, 0);
						} catch (e) {
							// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
							return cachedSetTimeout.call(this, fun, 0);
						}
					}
				}
				function runClearTimeout(marker) {
					if (cachedClearTimeout === clearTimeout) {
						//normal enviroments in sane situations
						return clearTimeout(marker);
					}
					// if clearTimeout wasn't available but was latter defined
					if (
						(cachedClearTimeout === defaultClearTimeout ||
							!cachedClearTimeout) &&
						clearTimeout
					) {
						cachedClearTimeout = clearTimeout;
						return clearTimeout(marker);
					}
					try {
						// when when somebody has screwed with setTimeout but no I.E. maddness
						return cachedClearTimeout(marker);
					} catch (e) {
						try {
							// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
							return cachedClearTimeout.call(null, marker);
						} catch (e) {
							// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
							// Some versions of I.E. have different rules for clearTimeout vs setTimeout
							return cachedClearTimeout.call(this, marker);
						}
					}
				}
				var queue = [];
				var draining = false;
				var currentQueue;
				var queueIndex = -1;

				function cleanUpNextTick() {
					if (!draining || !currentQueue) {
						return;
					}
					draining = false;
					if (currentQueue.length) {
						queue = currentQueue.concat(queue);
					} else {
						queueIndex = -1;
					}
					if (queue.length) {
						drainQueue();
					}
				}

				function drainQueue() {
					if (draining) {
						return;
					}
					var timeout = runTimeout(cleanUpNextTick);
					draining = true;

					var len = queue.length;
					while (len) {
						currentQueue = queue;
						queue = [];
						while (++queueIndex < len) {
							if (currentQueue) {
								currentQueue[queueIndex].run();
							}
						}
						queueIndex = -1;
						len = queue.length;
					}
					currentQueue = null;
					draining = false;
					runClearTimeout(timeout);
				}

				process.nextTick = function(fun) {
					var args = new Array(arguments.length - 1);
					if (arguments.length > 1) {
						for (var i = 1; i < arguments.length; i++) {
							args[i - 1] = arguments[i];
						}
					}
					queue.push(new Item(fun, args));
					if (queue.length === 1 && !draining) {
						runTimeout(drainQueue);
					}
				};

				// v8 likes predictible objects
				function Item(fun, array) {
					this.fun = fun;
					this.array = array;
				}
				Item.prototype.run = function() {
					this.fun.apply(null, this.array);
				};
				process.title = "browser";
				process.browser = true;
				process.env = {};
				process.argv = [];
				process.version = ""; // empty string to avoid regexp issues
				process.versions = {};

				function noop() {}

				process.on = noop;
				process.addListener = noop;
				process.once = noop;
				process.off = noop;
				process.removeListener = noop;
				process.removeAllListeners = noop;
				process.emit = noop;
				process.prependListener = noop;
				process.prependOnceListener = noop;

				process.listeners = function(name) {
					return [];
				};

				process.binding = function(name) {
					throw new Error("process.binding is not supported");
				};

				process.cwd = function() {
					return "/";
				};
				process.chdir = function(dir) {
					throw new Error("process.chdir is not supported");
				};
				process.umask = function() {
					return 0;
				};

				/***/
			},

		/***/ "./node_modules/querystring-es3/decode.js":
			/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				// Copyright Joyent, Inc. and other Node contributors.
				//
				// Permission is hereby granted, free of charge, to any person obtaining a
				// copy of this software and associated documentation files (the
				// "Software"), to deal in the Software without restriction, including
				// without limitation the rights to use, copy, modify, merge, publish,
				// distribute, sublicense, and/or sell copies of the Software, and to permit
				// persons to whom the Software is furnished to do so, subject to the
				// following conditions:
				//
				// The above copyright notice and this permission notice shall be included
				// in all copies or substantial portions of the Software.
				//
				// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
				// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
				// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
				// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
				// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
				// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
				// USE OR OTHER DEALINGS IN THE SOFTWARE.

				// If obj.hasOwnProperty has been overridden, then calling
				// obj.hasOwnProperty(prop) will break.
				// See: https://github.com/joyent/node/issues/1707
				function hasOwnProperty(obj, prop) {
					return Object.prototype.hasOwnProperty.call(obj, prop);
				}

				module.exports = function(qs, sep, eq, options) {
					sep = sep || "&";
					eq = eq || "=";
					var obj = {};

					if (typeof qs !== "string" || qs.length === 0) {
						return obj;
					}

					var regexp = /\+/g;
					qs = qs.split(sep);

					var maxKeys = 1000;
					if (options && typeof options.maxKeys === "number") {
						maxKeys = options.maxKeys;
					}

					var len = qs.length;
					// maxKeys <= 0 means that we should not limit keys count
					if (maxKeys > 0 && len > maxKeys) {
						len = maxKeys;
					}

					for (var i = 0; i < len; ++i) {
						var x = qs[i].replace(regexp, "%20"),
							idx = x.indexOf(eq),
							kstr,
							vstr,
							k,
							v;

						if (idx >= 0) {
							kstr = x.substr(0, idx);
							vstr = x.substr(idx + 1);
						} else {
							kstr = x;
							vstr = "";
						}

						k = decodeURIComponent(kstr);
						v = decodeURIComponent(vstr);

						if (!hasOwnProperty(obj, k)) {
							obj[k] = v;
						} else if (isArray(obj[k])) {
							obj[k].push(v);
						} else {
							obj[k] = [obj[k], v];
						}
					}

					return obj;
				};

				var isArray =
					Array.isArray ||
					function(xs) {
						return (
							Object.prototype.toString.call(xs) ===
							"[object Array]"
						);
					};

				/***/
			},

		/***/ "./node_modules/querystring-es3/encode.js":
			/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				// Copyright Joyent, Inc. and other Node contributors.
				//
				// Permission is hereby granted, free of charge, to any person obtaining a
				// copy of this software and associated documentation files (the
				// "Software"), to deal in the Software without restriction, including
				// without limitation the rights to use, copy, modify, merge, publish,
				// distribute, sublicense, and/or sell copies of the Software, and to permit
				// persons to whom the Software is furnished to do so, subject to the
				// following conditions:
				//
				// The above copyright notice and this permission notice shall be included
				// in all copies or substantial portions of the Software.
				//
				// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
				// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
				// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
				// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
				// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
				// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
				// USE OR OTHER DEALINGS IN THE SOFTWARE.

				var stringifyPrimitive = function(v) {
					switch (typeof v) {
						case "string":
							return v;

						case "boolean":
							return v ? "true" : "false";

						case "number":
							return isFinite(v) ? v : "";

						default:
							return "";
					}
				};

				module.exports = function(obj, sep, eq, name) {
					sep = sep || "&";
					eq = eq || "=";
					if (obj === null) {
						obj = undefined;
					}

					if (typeof obj === "object") {
						return map(objectKeys(obj), function(k) {
							var ks =
								encodeURIComponent(stringifyPrimitive(k)) + eq;
							if (isArray(obj[k])) {
								return map(obj[k], function(v) {
									return (
										ks +
										encodeURIComponent(
											stringifyPrimitive(v)
										)
									);
								}).join(sep);
							} else {
								return (
									ks +
									encodeURIComponent(
										stringifyPrimitive(obj[k])
									)
								);
							}
						}).join(sep);
					}

					if (!name) return "";
					return (
						encodeURIComponent(stringifyPrimitive(name)) +
						eq +
						encodeURIComponent(stringifyPrimitive(obj))
					);
				};

				var isArray =
					Array.isArray ||
					function(xs) {
						return (
							Object.prototype.toString.call(xs) ===
							"[object Array]"
						);
					};

				function map(xs, f) {
					if (xs.map) return xs.map(f);
					var res = [];
					for (var i = 0; i < xs.length; i++) {
						res.push(f(xs[i], i));
					}
					return res;
				}

				var objectKeys =
					Object.keys ||
					function(obj) {
						var res = [];
						for (var key in obj) {
							if (Object.prototype.hasOwnProperty.call(obj, key))
								res.push(key);
						}
						return res;
					};

				/***/
			},

		/***/ "./node_modules/querystring-es3/index.js":
			/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";

				exports.decode = exports.parse = __webpack_require__(
					/*! ./decode */ "./node_modules/querystring-es3/decode.js"
				);
				exports.encode = exports.stringify = __webpack_require__(
					/*! ./encode */ "./node_modules/querystring-es3/encode.js"
				);

				/***/
			},

		/***/ "./node_modules/readable-stream/duplex-browser.js":
			/*!********************************************************!*\
  !*** ./node_modules/readable-stream/duplex-browser.js ***!
  \********************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				module.exports = __webpack_require__(
					/*! ./lib/_stream_duplex.js */ "./node_modules/readable-stream/lib/_stream_duplex.js"
				);

				/***/
			},

		/***/ "./node_modules/readable-stream/lib/_stream_duplex.js":
			/*!************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_duplex.js ***!
  \************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				// Copyright Joyent, Inc. and other Node contributors.
				//
				// Permission is hereby granted, free of charge, to any person obtaining a
				// copy of this software and associated documentation files (the
				// "Software"), to deal in the Software without restriction, including
				// without limitation the rights to use, copy, modify, merge, publish,
				// distribute, sublicense, and/or sell copies of the Software, and to permit
				// persons to whom the Software is furnished to do so, subject to the
				// following conditions:
				//
				// The above copyright notice and this permission notice shall be included
				// in all copies or substantial portions of the Software.
				//
				// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
				// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
				// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
				// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
				// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
				// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
				// USE OR OTHER DEALINGS IN THE SOFTWARE.

				// a duplex stream is just a stream that is both readable and writable.
				// Since JS doesn't have multiple prototypal inheritance, this class
				// prototypally inherits from Readable, and then parasitically from
				// Writable.

				/*<replacement>*/

				var pna = __webpack_require__(
					/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js"
				);
				/*</replacement>*/

				/*<replacement>*/
				var objectKeys =
					Object.keys ||
					function(obj) {
						var keys = [];
						for (var key in obj) {
							keys.push(key);
						}
						return keys;
					};
				/*</replacement>*/

				module.exports = Duplex;

				/*<replacement>*/
				var util = __webpack_require__(
					/*! core-util-is */ "./node_modules/core-util-is/lib/util.js"
				);
				util.inherits = __webpack_require__(
					/*! inherits */ "./node_modules/inherits/inherits_browser.js"
				);
				/*</replacement>*/

				var Readable = __webpack_require__(
					/*! ./_stream_readable */ "./node_modules/readable-stream/lib/_stream_readable.js"
				);
				var Writable = __webpack_require__(
					/*! ./_stream_writable */ "./node_modules/readable-stream/lib/_stream_writable.js"
				);

				util.inherits(Duplex, Readable);

				{
					// avoid scope creep, the keys array can then be collected
					var keys = objectKeys(Writable.prototype);
					for (var v = 0; v < keys.length; v++) {
						var method = keys[v];
						if (!Duplex.prototype[method])
							Duplex.prototype[method] =
								Writable.prototype[method];
					}
				}

				function Duplex(options) {
					if (!(this instanceof Duplex)) return new Duplex(options);

					Readable.call(this, options);
					Writable.call(this, options);

					if (options && options.readable === false)
						this.readable = false;

					if (options && options.writable === false)
						this.writable = false;

					this.allowHalfOpen = true;
					if (options && options.allowHalfOpen === false)
						this.allowHalfOpen = false;

					this.once("end", onend);
				}

				Object.defineProperty(
					Duplex.prototype,
					"writableHighWaterMark",
					{
						// making it explicit this property is not enumerable
						// because otherwise some prototype manipulation in
						// userland will fail
						enumerable: false,
						get: function() {
							return this._writableState.highWaterMark;
						},
					}
				);

				// the no-half-open enforcer
				function onend() {
					// if we allow half-open state, or if the writable side ended,
					// then we're ok.
					if (this.allowHalfOpen || this._writableState.ended) return;

					// no more data can be written.
					// But allow more writes to happen in this tick.
					pna.nextTick(onEndNT, this);
				}

				function onEndNT(self) {
					self.end();
				}

				Object.defineProperty(Duplex.prototype, "destroyed", {
					get: function() {
						if (
							this._readableState === undefined ||
							this._writableState === undefined
						) {
							return false;
						}
						return (
							this._readableState.destroyed &&
							this._writableState.destroyed
						);
					},
					set: function(value) {
						// we ignore the value if the stream
						// has not been initialized yet
						if (
							this._readableState === undefined ||
							this._writableState === undefined
						) {
							return;
						}

						// backward compatibility, the user is explicitly
						// managing destroyed
						this._readableState.destroyed = value;
						this._writableState.destroyed = value;
					},
				});

				Duplex.prototype._destroy = function(err, cb) {
					this.push(null);
					this.end();

					pna.nextTick(cb, err);
				};

				/***/
			},

		/***/ "./node_modules/readable-stream/lib/_stream_passthrough.js":
			/*!*****************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \*****************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				// Copyright Joyent, Inc. and other Node contributors.
				//
				// Permission is hereby granted, free of charge, to any person obtaining a
				// copy of this software and associated documentation files (the
				// "Software"), to deal in the Software without restriction, including
				// without limitation the rights to use, copy, modify, merge, publish,
				// distribute, sublicense, and/or sell copies of the Software, and to permit
				// persons to whom the Software is furnished to do so, subject to the
				// following conditions:
				//
				// The above copyright notice and this permission notice shall be included
				// in all copies or substantial portions of the Software.
				//
				// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
				// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
				// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
				// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
				// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
				// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
				// USE OR OTHER DEALINGS IN THE SOFTWARE.

				// a passthrough stream.
				// basically just the most minimal sort of Transform stream.
				// Every written chunk gets output as-is.

				module.exports = PassThrough;

				var Transform = __webpack_require__(
					/*! ./_stream_transform */ "./node_modules/readable-stream/lib/_stream_transform.js"
				);

				/*<replacement>*/
				var util = __webpack_require__(
					/*! core-util-is */ "./node_modules/core-util-is/lib/util.js"
				);
				util.inherits = __webpack_require__(
					/*! inherits */ "./node_modules/inherits/inherits_browser.js"
				);
				/*</replacement>*/

				util.inherits(PassThrough, Transform);

				function PassThrough(options) {
					if (!(this instanceof PassThrough))
						return new PassThrough(options);

					Transform.call(this, options);
				}

				PassThrough.prototype._transform = function(
					chunk,
					encoding,
					cb
				) {
					cb(null, chunk);
				};

				/***/
			},

		/***/ "./node_modules/readable-stream/lib/_stream_readable.js":
			/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_readable.js ***!
  \**************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				/* WEBPACK VAR INJECTION */ (function(global, process) {
					// Copyright Joyent, Inc. and other Node contributors.
					//
					// Permission is hereby granted, free of charge, to any person obtaining a
					// copy of this software and associated documentation files (the
					// "Software"), to deal in the Software without restriction, including
					// without limitation the rights to use, copy, modify, merge, publish,
					// distribute, sublicense, and/or sell copies of the Software, and to permit
					// persons to whom the Software is furnished to do so, subject to the
					// following conditions:
					//
					// The above copyright notice and this permission notice shall be included
					// in all copies or substantial portions of the Software.
					//
					// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
					// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
					// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
					// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
					// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
					// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
					// USE OR OTHER DEALINGS IN THE SOFTWARE.

					/*<replacement>*/

					var pna = __webpack_require__(
						/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js"
					);
					/*</replacement>*/

					module.exports = Readable;

					/*<replacement>*/
					var isArray = __webpack_require__(
						/*! isarray */ "./node_modules/isarray/index.js"
					);
					/*</replacement>*/

					/*<replacement>*/
					var Duplex;
					/*</replacement>*/

					Readable.ReadableState = ReadableState;

					/*<replacement>*/
					var EE = __webpack_require__(
						/*! events */ "./node_modules/events/events.js"
					).EventEmitter;

					var EElistenerCount = function(emitter, type) {
						return emitter.listeners(type).length;
					};
					/*</replacement>*/

					/*<replacement>*/
					var Stream = __webpack_require__(
						/*! ./internal/streams/stream */ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js"
					);
					/*</replacement>*/

					/*<replacement>*/

					var Buffer = __webpack_require__(
						/*! safe-buffer */ "./node_modules/safe-buffer/index.js"
					).Buffer;
					var OurUint8Array = global.Uint8Array || function() {};
					function _uint8ArrayToBuffer(chunk) {
						return Buffer.from(chunk);
					}
					function _isUint8Array(obj) {
						return (
							Buffer.isBuffer(obj) || obj instanceof OurUint8Array
						);
					}

					/*</replacement>*/

					/*<replacement>*/
					var util = __webpack_require__(
						/*! core-util-is */ "./node_modules/core-util-is/lib/util.js"
					);
					util.inherits = __webpack_require__(
						/*! inherits */ "./node_modules/inherits/inherits_browser.js"
					);
					/*</replacement>*/

					/*<replacement>*/
					var debugUtil = __webpack_require__(/*! util */ 2);
					var debug = void 0;
					if (debugUtil && debugUtil.debuglog) {
						debug = debugUtil.debuglog("stream");
					} else {
						debug = function() {};
					}
					/*</replacement>*/

					var BufferList = __webpack_require__(
						/*! ./internal/streams/BufferList */ "./node_modules/readable-stream/lib/internal/streams/BufferList.js"
					);
					var destroyImpl = __webpack_require__(
						/*! ./internal/streams/destroy */ "./node_modules/readable-stream/lib/internal/streams/destroy.js"
					);
					var StringDecoder;

					util.inherits(Readable, Stream);

					var kProxyEvents = [
						"error",
						"close",
						"destroy",
						"pause",
						"resume",
					];

					function prependListener(emitter, event, fn) {
						// Sadly this is not cacheable as some libraries bundle their own
						// event emitter implementation with them.
						if (typeof emitter.prependListener === "function")
							return emitter.prependListener(event, fn);

						// This is a hack to make sure that our error handler is attached before any
						// userland ones.  NEVER DO THIS. This is here only because this code needs
						// to continue to work with older versions of Node.js that do not include
						// the prependListener() method. The goal is to eventually remove this hack.
						if (!emitter._events || !emitter._events[event])
							emitter.on(event, fn);
						else if (isArray(emitter._events[event]))
							emitter._events[event].unshift(fn);
						else
							emitter._events[event] = [
								fn,
								emitter._events[event],
							];
					}

					function ReadableState(options, stream) {
						Duplex =
							Duplex ||
							__webpack_require__(
								/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js"
							);

						options = options || {};

						// Duplex streams are both readable and writable, but share
						// the same options object.
						// However, some cases require setting options to different
						// values for the readable and the writable sides of the duplex stream.
						// These options can be provided separately as readableXXX and writableXXX.
						var isDuplex = stream instanceof Duplex;

						// object stream flag. Used to make read(n) ignore n and to
						// make all the buffer merging and length checks go away
						this.objectMode = !!options.objectMode;

						if (isDuplex)
							this.objectMode =
								this.objectMode || !!options.readableObjectMode;

						// the point at which it stops calling _read() to fill the buffer
						// Note: 0 is a valid value, means "don't call _read preemptively ever"
						var hwm = options.highWaterMark;
						var readableHwm = options.readableHighWaterMark;
						var defaultHwm = this.objectMode ? 16 : 16 * 1024;

						if (hwm || hwm === 0) this.highWaterMark = hwm;
						else if (isDuplex && (readableHwm || readableHwm === 0))
							this.highWaterMark = readableHwm;
						else this.highWaterMark = defaultHwm;

						// cast to ints.
						this.highWaterMark = Math.floor(this.highWaterMark);

						// A linked list is used to store data chunks instead of an array because the
						// linked list can remove elements from the beginning faster than
						// array.shift()
						this.buffer = new BufferList();
						this.length = 0;
						this.pipes = null;
						this.pipesCount = 0;
						this.flowing = null;
						this.ended = false;
						this.endEmitted = false;
						this.reading = false;

						// a flag to be able to tell if the event 'readable'/'data' is emitted
						// immediately, or on a later tick.  We set this to true at first, because
						// any actions that shouldn't happen until "later" should generally also
						// not happen before the first read call.
						this.sync = true;

						// whenever we return null, then we set a flag to say
						// that we're awaiting a 'readable' event emission.
						this.needReadable = false;
						this.emittedReadable = false;
						this.readableListening = false;
						this.resumeScheduled = false;

						// has it been destroyed
						this.destroyed = false;

						// Crypto is kind of old and crusty.  Historically, its default string
						// encoding is 'binary' so we have to make this configurable.
						// Everything else in the universe uses 'utf8', though.
						this.defaultEncoding =
							options.defaultEncoding || "utf8";

						// the number of writers that are awaiting a drain event in .pipe()s
						this.awaitDrain = 0;

						// if true, a maybeReadMore has been scheduled
						this.readingMore = false;

						this.decoder = null;
						this.encoding = null;
						if (options.encoding) {
							if (!StringDecoder)
								StringDecoder = __webpack_require__(
									/*! string_decoder/ */ "./node_modules/string_decoder/lib/string_decoder.js"
								).StringDecoder;
							this.decoder = new StringDecoder(options.encoding);
							this.encoding = options.encoding;
						}
					}

					function Readable(options) {
						Duplex =
							Duplex ||
							__webpack_require__(
								/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js"
							);

						if (!(this instanceof Readable))
							return new Readable(options);

						this._readableState = new ReadableState(options, this);

						// legacy
						this.readable = true;

						if (options) {
							if (typeof options.read === "function")
								this._read = options.read;

							if (typeof options.destroy === "function")
								this._destroy = options.destroy;
						}

						Stream.call(this);
					}

					Object.defineProperty(Readable.prototype, "destroyed", {
						get: function() {
							if (this._readableState === undefined) {
								return false;
							}
							return this._readableState.destroyed;
						},
						set: function(value) {
							// we ignore the value if the stream
							// has not been initialized yet
							if (!this._readableState) {
								return;
							}

							// backward compatibility, the user is explicitly
							// managing destroyed
							this._readableState.destroyed = value;
						},
					});

					Readable.prototype.destroy = destroyImpl.destroy;
					Readable.prototype._undestroy = destroyImpl.undestroy;
					Readable.prototype._destroy = function(err, cb) {
						this.push(null);
						cb(err);
					};

					// Manually shove something into the read() buffer.
					// This returns true if the highWaterMark has not been hit yet,
					// similar to how Writable.write() returns true if you should
					// write() some more.
					Readable.prototype.push = function(chunk, encoding) {
						var state = this._readableState;
						var skipChunkCheck;

						if (!state.objectMode) {
							if (typeof chunk === "string") {
								encoding = encoding || state.defaultEncoding;
								if (encoding !== state.encoding) {
									chunk = Buffer.from(chunk, encoding);
									encoding = "";
								}
								skipChunkCheck = true;
							}
						} else {
							skipChunkCheck = true;
						}

						return readableAddChunk(
							this,
							chunk,
							encoding,
							false,
							skipChunkCheck
						);
					};

					// Unshift should *always* be something directly out of read()
					Readable.prototype.unshift = function(chunk) {
						return readableAddChunk(this, chunk, null, true, false);
					};

					function readableAddChunk(
						stream,
						chunk,
						encoding,
						addToFront,
						skipChunkCheck
					) {
						var state = stream._readableState;
						if (chunk === null) {
							state.reading = false;
							onEofChunk(stream, state);
						} else {
							var er;
							if (!skipChunkCheck)
								er = chunkInvalid(state, chunk);
							if (er) {
								stream.emit("error", er);
							} else if (
								state.objectMode ||
								(chunk && chunk.length > 0)
							) {
								if (
									typeof chunk !== "string" &&
									!state.objectMode &&
									Object.getPrototypeOf(chunk) !==
										Buffer.prototype
								) {
									chunk = _uint8ArrayToBuffer(chunk);
								}

								if (addToFront) {
									if (state.endEmitted)
										stream.emit(
											"error",
											new Error(
												"stream.unshift() after end event"
											)
										);
									else addChunk(stream, state, chunk, true);
								} else if (state.ended) {
									stream.emit(
										"error",
										new Error("stream.push() after EOF")
									);
								} else {
									state.reading = false;
									if (state.decoder && !encoding) {
										chunk = state.decoder.write(chunk);
										if (
											state.objectMode ||
											chunk.length !== 0
										)
											addChunk(
												stream,
												state,
												chunk,
												false
											);
										else maybeReadMore(stream, state);
									} else {
										addChunk(stream, state, chunk, false);
									}
								}
							} else if (!addToFront) {
								state.reading = false;
							}
						}

						return needMoreData(state);
					}

					function addChunk(stream, state, chunk, addToFront) {
						if (
							state.flowing &&
							state.length === 0 &&
							!state.sync
						) {
							stream.emit("data", chunk);
							stream.read(0);
						} else {
							// update the buffer info.
							state.length += state.objectMode ? 1 : chunk.length;
							if (addToFront) state.buffer.unshift(chunk);
							else state.buffer.push(chunk);

							if (state.needReadable) emitReadable(stream);
						}
						maybeReadMore(stream, state);
					}

					function chunkInvalid(state, chunk) {
						var er;
						if (
							!_isUint8Array(chunk) &&
							typeof chunk !== "string" &&
							chunk !== undefined &&
							!state.objectMode
						) {
							er = new TypeError(
								"Invalid non-string/buffer chunk"
							);
						}
						return er;
					}

					// if it's past the high water mark, we can push in some more.
					// Also, if we have no data yet, we can stand some
					// more bytes.  This is to work around cases where hwm=0,
					// such as the repl.  Also, if the push() triggered a
					// readable event, and the user called read(largeNumber) such that
					// needReadable was set, then we ought to push more, so that another
					// 'readable' event will be triggered.
					function needMoreData(state) {
						return (
							!state.ended &&
							(state.needReadable ||
								state.length < state.highWaterMark ||
								state.length === 0)
						);
					}

					Readable.prototype.isPaused = function() {
						return this._readableState.flowing === false;
					};

					// backwards compatibility.
					Readable.prototype.setEncoding = function(enc) {
						if (!StringDecoder)
							StringDecoder = __webpack_require__(
								/*! string_decoder/ */ "./node_modules/string_decoder/lib/string_decoder.js"
							).StringDecoder;
						this._readableState.decoder = new StringDecoder(enc);
						this._readableState.encoding = enc;
						return this;
					};

					// Don't raise the hwm > 8MB
					var MAX_HWM = 0x800000;
					function computeNewHighWaterMark(n) {
						if (n >= MAX_HWM) {
							n = MAX_HWM;
						} else {
							// Get the next highest power of 2 to prevent increasing hwm excessively in
							// tiny amounts
							n--;
							n |= n >>> 1;
							n |= n >>> 2;
							n |= n >>> 4;
							n |= n >>> 8;
							n |= n >>> 16;
							n++;
						}
						return n;
					}

					// This function is designed to be inlinable, so please take care when making
					// changes to the function body.
					function howMuchToRead(n, state) {
						if (n <= 0 || (state.length === 0 && state.ended))
							return 0;
						if (state.objectMode) return 1;
						if (n !== n) {
							// Only flow one buffer at a time
							if (state.flowing && state.length)
								return state.buffer.head.data.length;
							else return state.length;
						}
						// If we're asking for more than the current hwm, then raise the hwm.
						if (n > state.highWaterMark)
							state.highWaterMark = computeNewHighWaterMark(n);
						if (n <= state.length) return n;
						// Don't have enough
						if (!state.ended) {
							state.needReadable = true;
							return 0;
						}
						return state.length;
					}

					// you can override either this method, or the async _read(n) below.
					Readable.prototype.read = function(n) {
						debug("read", n);
						n = parseInt(n, 10);
						var state = this._readableState;
						var nOrig = n;

						if (n !== 0) state.emittedReadable = false;

						// if we're doing read(0) to trigger a readable event, but we
						// already have a bunch of data in the buffer, then just trigger
						// the 'readable' event and move on.
						if (
							n === 0 &&
							state.needReadable &&
							(state.length >= state.highWaterMark || state.ended)
						) {
							debug(
								"read: emitReadable",
								state.length,
								state.ended
							);
							if (state.length === 0 && state.ended)
								endReadable(this);
							else emitReadable(this);
							return null;
						}

						n = howMuchToRead(n, state);

						// if we've ended, and we're now clear, then finish it up.
						if (n === 0 && state.ended) {
							if (state.length === 0) endReadable(this);
							return null;
						}

						// All the actual chunk generation logic needs to be
						// *below* the call to _read.  The reason is that in certain
						// synthetic stream cases, such as passthrough streams, _read
						// may be a completely synchronous operation which may change
						// the state of the read buffer, providing enough data when
						// before there was *not* enough.
						//
						// So, the steps are:
						// 1. Figure out what the state of things will be after we do
						// a read from the buffer.
						//
						// 2. If that resulting state will trigger a _read, then call _read.
						// Note that this may be asynchronous, or synchronous.  Yes, it is
						// deeply ugly to write APIs this way, but that still doesn't mean
						// that the Readable class should behave improperly, as streams are
						// designed to be sync/async agnostic.
						// Take note if the _read call is sync or async (ie, if the read call
						// has returned yet), so that we know whether or not it's safe to emit
						// 'readable' etc.
						//
						// 3. Actually pull the requested chunks out of the buffer and return.

						// if we need a readable event, then we need to do some reading.
						var doRead = state.needReadable;
						debug("need readable", doRead);

						// if we currently have less than the highWaterMark, then also read some
						if (
							state.length === 0 ||
							state.length - n < state.highWaterMark
						) {
							doRead = true;
							debug("length less than watermark", doRead);
						}

						// however, if we've ended, then there's no point, and if we're already
						// reading, then it's unnecessary.
						if (state.ended || state.reading) {
							doRead = false;
							debug("reading or ended", doRead);
						} else if (doRead) {
							debug("do read");
							state.reading = true;
							state.sync = true;
							// if the length is currently zero, then we *need* a readable event.
							if (state.length === 0) state.needReadable = true;
							// call internal read method
							this._read(state.highWaterMark);
							state.sync = false;
							// If _read pushed data synchronously, then `reading` will be false,
							// and we need to re-evaluate how much data we can return to the user.
							if (!state.reading) n = howMuchToRead(nOrig, state);
						}

						var ret;
						if (n > 0) ret = fromList(n, state);
						else ret = null;

						if (ret === null) {
							state.needReadable = true;
							n = 0;
						} else {
							state.length -= n;
						}

						if (state.length === 0) {
							// If we have nothing in the buffer, then we want to know
							// as soon as we *do* get something into the buffer.
							if (!state.ended) state.needReadable = true;

							// If we tried to read() past the EOF, then emit end on the next tick.
							if (nOrig !== n && state.ended) endReadable(this);
						}

						if (ret !== null) this.emit("data", ret);

						return ret;
					};

					function onEofChunk(stream, state) {
						if (state.ended) return;
						if (state.decoder) {
							var chunk = state.decoder.end();
							if (chunk && chunk.length) {
								state.buffer.push(chunk);
								state.length += state.objectMode
									? 1
									: chunk.length;
							}
						}
						state.ended = true;

						// emit 'readable' now to make sure it gets picked up.
						emitReadable(stream);
					}

					// Don't emit readable right away in sync mode, because this can trigger
					// another read() call => stack overflow.  This way, it might trigger
					// a nextTick recursion warning, but that's not so bad.
					function emitReadable(stream) {
						var state = stream._readableState;
						state.needReadable = false;
						if (!state.emittedReadable) {
							debug("emitReadable", state.flowing);
							state.emittedReadable = true;
							if (state.sync) pna.nextTick(emitReadable_, stream);
							else emitReadable_(stream);
						}
					}

					function emitReadable_(stream) {
						debug("emit readable");
						stream.emit("readable");
						flow(stream);
					}

					// at this point, the user has presumably seen the 'readable' event,
					// and called read() to consume some data.  that may have triggered
					// in turn another _read(n) call, in which case reading = true if
					// it's in progress.
					// However, if we're not ended, or reading, and the length < hwm,
					// then go ahead and try to read some more preemptively.
					function maybeReadMore(stream, state) {
						if (!state.readingMore) {
							state.readingMore = true;
							pna.nextTick(maybeReadMore_, stream, state);
						}
					}

					function maybeReadMore_(stream, state) {
						var len = state.length;
						while (
							!state.reading &&
							!state.flowing &&
							!state.ended &&
							state.length < state.highWaterMark
						) {
							debug("maybeReadMore read 0");
							stream.read(0);
							if (len === state.length)
								// didn't get any data, stop spinning.
								break;
							else len = state.length;
						}
						state.readingMore = false;
					}

					// abstract method.  to be overridden in specific implementation classes.
					// call cb(er, data) where data is <= n in length.
					// for virtual (non-string, non-buffer) streams, "length" is somewhat
					// arbitrary, and perhaps not very meaningful.
					Readable.prototype._read = function(n) {
						this.emit(
							"error",
							new Error("_read() is not implemented")
						);
					};

					Readable.prototype.pipe = function(dest, pipeOpts) {
						var src = this;
						var state = this._readableState;

						switch (state.pipesCount) {
							case 0:
								state.pipes = dest;
								break;
							case 1:
								state.pipes = [state.pipes, dest];
								break;
							default:
								state.pipes.push(dest);
								break;
						}
						state.pipesCount += 1;
						debug(
							"pipe count=%d opts=%j",
							state.pipesCount,
							pipeOpts
						);

						var doEnd =
							(!pipeOpts || pipeOpts.end !== false) &&
							dest !== process.stdout &&
							dest !== process.stderr;

						var endFn = doEnd ? onend : unpipe;
						if (state.endEmitted) pna.nextTick(endFn);
						else src.once("end", endFn);

						dest.on("unpipe", onunpipe);
						function onunpipe(readable, unpipeInfo) {
							debug("onunpipe");
							if (readable === src) {
								if (
									unpipeInfo &&
									unpipeInfo.hasUnpiped === false
								) {
									unpipeInfo.hasUnpiped = true;
									cleanup();
								}
							}
						}

						function onend() {
							debug("onend");
							dest.end();
						}

						// when the dest drains, it reduces the awaitDrain counter
						// on the source.  This would be more elegant with a .once()
						// handler in flow(), but adding and removing repeatedly is
						// too slow.
						var ondrain = pipeOnDrain(src);
						dest.on("drain", ondrain);

						var cleanedUp = false;
						function cleanup() {
							debug("cleanup");
							// cleanup event handlers once the pipe is broken
							dest.removeListener("close", onclose);
							dest.removeListener("finish", onfinish);
							dest.removeListener("drain", ondrain);
							dest.removeListener("error", onerror);
							dest.removeListener("unpipe", onunpipe);
							src.removeListener("end", onend);
							src.removeListener("end", unpipe);
							src.removeListener("data", ondata);

							cleanedUp = true;

							// if the reader is waiting for a drain event from this
							// specific writer, then it would cause it to never start
							// flowing again.
							// So, if this is awaiting a drain, then we just call it now.
							// If we don't know, then assume that we are waiting for one.
							if (
								state.awaitDrain &&
								(!dest._writableState ||
									dest._writableState.needDrain)
							)
								ondrain();
						}

						// If the user pushes more data while we're writing to dest then we'll end up
						// in ondata again. However, we only want to increase awaitDrain once because
						// dest will only emit one 'drain' event for the multiple writes.
						// => Introduce a guard on increasing awaitDrain.
						var increasedAwaitDrain = false;
						src.on("data", ondata);
						function ondata(chunk) {
							debug("ondata");
							increasedAwaitDrain = false;
							var ret = dest.write(chunk);
							if (false === ret && !increasedAwaitDrain) {
								// If the user unpiped during `dest.write()`, it is possible
								// to get stuck in a permanently paused state if that write
								// also returned false.
								// => Check whether `dest` is still a piping destination.
								if (
									((state.pipesCount === 1 &&
										state.pipes === dest) ||
										(state.pipesCount > 1 &&
											indexOf(state.pipes, dest) !==
												-1)) &&
									!cleanedUp
								) {
									debug(
										"false write response, pause",
										src._readableState.awaitDrain
									);
									src._readableState.awaitDrain++;
									increasedAwaitDrain = true;
								}
								src.pause();
							}
						}

						// if the dest has an error, then stop piping into it.
						// however, don't suppress the throwing behavior for this.
						function onerror(er) {
							debug("onerror", er);
							unpipe();
							dest.removeListener("error", onerror);
							if (EElistenerCount(dest, "error") === 0)
								dest.emit("error", er);
						}

						// Make sure our error handler is attached before userland ones.
						prependListener(dest, "error", onerror);

						// Both close and finish should trigger unpipe, but only once.
						function onclose() {
							dest.removeListener("finish", onfinish);
							unpipe();
						}
						dest.once("close", onclose);
						function onfinish() {
							debug("onfinish");
							dest.removeListener("close", onclose);
							unpipe();
						}
						dest.once("finish", onfinish);

						function unpipe() {
							debug("unpipe");
							src.unpipe(dest);
						}

						// tell the dest that it's being piped to
						dest.emit("pipe", src);

						// start the flow if it hasn't been started already.
						if (!state.flowing) {
							debug("pipe resume");
							src.resume();
						}

						return dest;
					};

					function pipeOnDrain(src) {
						return function() {
							var state = src._readableState;
							debug("pipeOnDrain", state.awaitDrain);
							if (state.awaitDrain) state.awaitDrain--;
							if (
								state.awaitDrain === 0 &&
								EElistenerCount(src, "data")
							) {
								state.flowing = true;
								flow(src);
							}
						};
					}

					Readable.prototype.unpipe = function(dest) {
						var state = this._readableState;
						var unpipeInfo = {hasUnpiped: false};

						// if we're not piping anywhere, then do nothing.
						if (state.pipesCount === 0) return this;

						// just one destination.  most common case.
						if (state.pipesCount === 1) {
							// passed in one, but it's not the right one.
							if (dest && dest !== state.pipes) return this;

							if (!dest) dest = state.pipes;

							// got a match.
							state.pipes = null;
							state.pipesCount = 0;
							state.flowing = false;
							if (dest) dest.emit("unpipe", this, unpipeInfo);
							return this;
						}

						// slow case. multiple pipe destinations.

						if (!dest) {
							// remove all.
							var dests = state.pipes;
							var len = state.pipesCount;
							state.pipes = null;
							state.pipesCount = 0;
							state.flowing = false;

							for (var i = 0; i < len; i++) {
								dests[i].emit("unpipe", this, unpipeInfo);
							}
							return this;
						}

						// try to find the right one.
						var index = indexOf(state.pipes, dest);
						if (index === -1) return this;

						state.pipes.splice(index, 1);
						state.pipesCount -= 1;
						if (state.pipesCount === 1)
							state.pipes = state.pipes[0];

						dest.emit("unpipe", this, unpipeInfo);

						return this;
					};

					// set up data events if they are asked for
					// Ensure readable listeners eventually get something
					Readable.prototype.on = function(ev, fn) {
						var res = Stream.prototype.on.call(this, ev, fn);

						if (ev === "data") {
							// Start flowing on next tick if stream isn't explicitly paused
							if (this._readableState.flowing !== false)
								this.resume();
						} else if (ev === "readable") {
							var state = this._readableState;
							if (!state.endEmitted && !state.readableListening) {
								state.readableListening = state.needReadable = true;
								state.emittedReadable = false;
								if (!state.reading) {
									pna.nextTick(nReadingNextTick, this);
								} else if (state.length) {
									emitReadable(this);
								}
							}
						}

						return res;
					};
					Readable.prototype.addListener = Readable.prototype.on;

					function nReadingNextTick(self) {
						debug("readable nexttick read 0");
						self.read(0);
					}

					// pause() and resume() are remnants of the legacy readable stream API
					// If the user uses them, then switch into old mode.
					Readable.prototype.resume = function() {
						var state = this._readableState;
						if (!state.flowing) {
							debug("resume");
							state.flowing = true;
							resume(this, state);
						}
						return this;
					};

					function resume(stream, state) {
						if (!state.resumeScheduled) {
							state.resumeScheduled = true;
							pna.nextTick(resume_, stream, state);
						}
					}

					function resume_(stream, state) {
						if (!state.reading) {
							debug("resume read 0");
							stream.read(0);
						}

						state.resumeScheduled = false;
						state.awaitDrain = 0;
						stream.emit("resume");
						flow(stream);
						if (state.flowing && !state.reading) stream.read(0);
					}

					Readable.prototype.pause = function() {
						debug(
							"call pause flowing=%j",
							this._readableState.flowing
						);
						if (false !== this._readableState.flowing) {
							debug("pause");
							this._readableState.flowing = false;
							this.emit("pause");
						}
						return this;
					};

					function flow(stream) {
						var state = stream._readableState;
						debug("flow", state.flowing);
						while (state.flowing && stream.read() !== null) {}
					}

					// wrap an old-style stream as the async data source.
					// This is *not* part of the readable stream interface.
					// It is an ugly unfortunate mess of history.
					Readable.prototype.wrap = function(stream) {
						var _this = this;

						var state = this._readableState;
						var paused = false;

						stream.on("end", function() {
							debug("wrapped end");
							if (state.decoder && !state.ended) {
								var chunk = state.decoder.end();
								if (chunk && chunk.length) _this.push(chunk);
							}

							_this.push(null);
						});

						stream.on("data", function(chunk) {
							debug("wrapped data");
							if (state.decoder)
								chunk = state.decoder.write(chunk);

							// don't skip over falsy values in objectMode
							if (
								state.objectMode &&
								(chunk === null || chunk === undefined)
							)
								return;
							else if (
								!state.objectMode &&
								(!chunk || !chunk.length)
							)
								return;

							var ret = _this.push(chunk);
							if (!ret) {
								paused = true;
								stream.pause();
							}
						});

						// proxy all the other methods.
						// important when wrapping filters and duplexes.
						for (var i in stream) {
							if (
								this[i] === undefined &&
								typeof stream[i] === "function"
							) {
								this[i] = (function(method) {
									return function() {
										return stream[method].apply(
											stream,
											arguments
										);
									};
								})(i);
							}
						}

						// proxy certain important events.
						for (var n = 0; n < kProxyEvents.length; n++) {
							stream.on(
								kProxyEvents[n],
								this.emit.bind(this, kProxyEvents[n])
							);
						}

						// when we try to consume some more bytes, simply unpause the
						// underlying stream.
						this._read = function(n) {
							debug("wrapped _read", n);
							if (paused) {
								paused = false;
								stream.resume();
							}
						};

						return this;
					};

					Object.defineProperty(
						Readable.prototype,
						"readableHighWaterMark",
						{
							// making it explicit this property is not enumerable
							// because otherwise some prototype manipulation in
							// userland will fail
							enumerable: false,
							get: function() {
								return this._readableState.highWaterMark;
							},
						}
					);

					// exposed for testing purposes only.
					Readable._fromList = fromList;

					// Pluck off n bytes from an array of buffers.
					// Length is the combined lengths of all the buffers in the list.
					// This function is designed to be inlinable, so please take care when making
					// changes to the function body.
					function fromList(n, state) {
						// nothing buffered
						if (state.length === 0) return null;

						var ret;
						if (state.objectMode) ret = state.buffer.shift();
						else if (!n || n >= state.length) {
							// read it all, truncate the list
							if (state.decoder) ret = state.buffer.join("");
							else if (state.buffer.length === 1)
								ret = state.buffer.head.data;
							else ret = state.buffer.concat(state.length);
							state.buffer.clear();
						} else {
							// read part of list
							ret = fromListPartial(
								n,
								state.buffer,
								state.decoder
							);
						}

						return ret;
					}

					// Extracts only enough buffered data to satisfy the amount requested.
					// This function is designed to be inlinable, so please take care when making
					// changes to the function body.
					function fromListPartial(n, list, hasStrings) {
						var ret;
						if (n < list.head.data.length) {
							// slice is the same for buffers and strings
							ret = list.head.data.slice(0, n);
							list.head.data = list.head.data.slice(n);
						} else if (n === list.head.data.length) {
							// first chunk is a perfect match
							ret = list.shift();
						} else {
							// result spans more than one buffer
							ret = hasStrings
								? copyFromBufferString(n, list)
								: copyFromBuffer(n, list);
						}
						return ret;
					}

					// Copies a specified amount of characters from the list of buffered data
					// chunks.
					// This function is designed to be inlinable, so please take care when making
					// changes to the function body.
					function copyFromBufferString(n, list) {
						var p = list.head;
						var c = 1;
						var ret = p.data;
						n -= ret.length;
						while ((p = p.next)) {
							var str = p.data;
							var nb = n > str.length ? str.length : n;
							if (nb === str.length) ret += str;
							else ret += str.slice(0, n);
							n -= nb;
							if (n === 0) {
								if (nb === str.length) {
									++c;
									if (p.next) list.head = p.next;
									else list.head = list.tail = null;
								} else {
									list.head = p;
									p.data = str.slice(nb);
								}
								break;
							}
							++c;
						}
						list.length -= c;
						return ret;
					}

					// Copies a specified amount of bytes from the list of buffered data chunks.
					// This function is designed to be inlinable, so please take care when making
					// changes to the function body.
					function copyFromBuffer(n, list) {
						var ret = Buffer.allocUnsafe(n);
						var p = list.head;
						var c = 1;
						p.data.copy(ret);
						n -= p.data.length;
						while ((p = p.next)) {
							var buf = p.data;
							var nb = n > buf.length ? buf.length : n;
							buf.copy(ret, ret.length - n, 0, nb);
							n -= nb;
							if (n === 0) {
								if (nb === buf.length) {
									++c;
									if (p.next) list.head = p.next;
									else list.head = list.tail = null;
								} else {
									list.head = p;
									p.data = buf.slice(nb);
								}
								break;
							}
							++c;
						}
						list.length -= c;
						return ret;
					}

					function endReadable(stream) {
						var state = stream._readableState;

						// If we get here before consuming all the bytes, then that is a
						// bug in node.  Should never happen.
						if (state.length > 0)
							throw new Error(
								'"endReadable()" called on non-empty stream'
							);

						if (!state.endEmitted) {
							state.ended = true;
							pna.nextTick(endReadableNT, state, stream);
						}
					}

					function endReadableNT(state, stream) {
						// Check that we didn't get one last unshift.
						if (!state.endEmitted && state.length === 0) {
							state.endEmitted = true;
							stream.readable = false;
							stream.emit("end");
						}
					}

					function indexOf(xs, x) {
						for (var i = 0, l = xs.length; i < l; i++) {
							if (xs[i] === x) return i;
						}
						return -1;
					}
					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
					),
					__webpack_require__(
						/*! ./../../process/browser.js */ "./node_modules/process/browser.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/readable-stream/lib/_stream_transform.js":
			/*!***************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_transform.js ***!
  \***************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				// Copyright Joyent, Inc. and other Node contributors.
				//
				// Permission is hereby granted, free of charge, to any person obtaining a
				// copy of this software and associated documentation files (the
				// "Software"), to deal in the Software without restriction, including
				// without limitation the rights to use, copy, modify, merge, publish,
				// distribute, sublicense, and/or sell copies of the Software, and to permit
				// persons to whom the Software is furnished to do so, subject to the
				// following conditions:
				//
				// The above copyright notice and this permission notice shall be included
				// in all copies or substantial portions of the Software.
				//
				// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
				// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
				// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
				// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
				// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
				// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
				// USE OR OTHER DEALINGS IN THE SOFTWARE.

				// a transform stream is a readable/writable stream where you do
				// something with the data.  Sometimes it's called a "filter",
				// but that's not a great name for it, since that implies a thing where
				// some bits pass through, and others are simply ignored.  (That would
				// be a valid example of a transform, of course.)
				//
				// While the output is causally related to the input, it's not a
				// necessarily symmetric or synchronous transformation.  For example,
				// a zlib stream might take multiple plain-text writes(), and then
				// emit a single compressed chunk some time in the future.
				//
				// Here's how this works:
				//
				// The Transform stream has all the aspects of the readable and writable
				// stream classes.  When you write(chunk), that calls _write(chunk,cb)
				// internally, and returns false if there's a lot of pending writes
				// buffered up.  When you call read(), that calls _read(n) until
				// there's enough pending readable data buffered up.
				//
				// In a transform stream, the written data is placed in a buffer.  When
				// _read(n) is called, it transforms the queued up data, calling the
				// buffered _write cb's as it consumes chunks.  If consuming a single
				// written chunk would result in multiple output chunks, then the first
				// outputted bit calls the readcb, and subsequent chunks just go into
				// the read buffer, and will cause it to emit 'readable' if necessary.
				//
				// This way, back-pressure is actually determined by the reading side,
				// since _read has to be called to start processing a new chunk.  However,
				// a pathological inflate type of transform can cause excessive buffering
				// here.  For example, imagine a stream where every byte of input is
				// interpreted as an integer from 0-255, and then results in that many
				// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
				// 1kb of data being output.  In this case, you could write a very small
				// amount of input, and end up with a very large amount of output.  In
				// such a pathological inflating mechanism, there'd be no way to tell
				// the system to stop doing the transform.  A single 4MB write could
				// cause the system to run out of memory.
				//
				// However, even in such a pathological case, only a single written chunk
				// would be consumed, and then the rest would wait (un-transformed) until
				// the results of the previous transformed chunk were consumed.

				module.exports = Transform;

				var Duplex = __webpack_require__(
					/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js"
				);

				/*<replacement>*/
				var util = __webpack_require__(
					/*! core-util-is */ "./node_modules/core-util-is/lib/util.js"
				);
				util.inherits = __webpack_require__(
					/*! inherits */ "./node_modules/inherits/inherits_browser.js"
				);
				/*</replacement>*/

				util.inherits(Transform, Duplex);

				function afterTransform(er, data) {
					var ts = this._transformState;
					ts.transforming = false;

					var cb = ts.writecb;

					if (!cb) {
						return this.emit(
							"error",
							new Error("write callback called multiple times")
						);
					}

					ts.writechunk = null;
					ts.writecb = null;

					if (data != null)
						// single equals check for both `null` and `undefined`
						this.push(data);

					cb(er);

					var rs = this._readableState;
					rs.reading = false;
					if (rs.needReadable || rs.length < rs.highWaterMark) {
						this._read(rs.highWaterMark);
					}
				}

				function Transform(options) {
					if (!(this instanceof Transform))
						return new Transform(options);

					Duplex.call(this, options);

					this._transformState = {
						afterTransform: afterTransform.bind(this),
						needTransform: false,
						transforming: false,
						writecb: null,
						writechunk: null,
						writeencoding: null,
					};

					// start out asking for a readable event once data is transformed.
					this._readableState.needReadable = true;

					// we have implemented the _read method, and done the other things
					// that Readable wants before the first _read call, so unset the
					// sync guard flag.
					this._readableState.sync = false;

					if (options) {
						if (typeof options.transform === "function")
							this._transform = options.transform;

						if (typeof options.flush === "function")
							this._flush = options.flush;
					}

					// When the writable side finishes, then flush out anything remaining.
					this.on("prefinish", prefinish);
				}

				function prefinish() {
					var _this = this;

					if (typeof this._flush === "function") {
						this._flush(function(er, data) {
							done(_this, er, data);
						});
					} else {
						done(this, null, null);
					}
				}

				Transform.prototype.push = function(chunk, encoding) {
					this._transformState.needTransform = false;
					return Duplex.prototype.push.call(this, chunk, encoding);
				};

				// This is the part where you do stuff!
				// override this function in implementation classes.
				// 'chunk' is an input chunk.
				//
				// Call `push(newChunk)` to pass along transformed output
				// to the readable side.  You may call 'push' zero or more times.
				//
				// Call `cb(err)` when you are done with this chunk.  If you pass
				// an error, then that'll put the hurt on the whole operation.  If you
				// never call cb(), then you'll never get another chunk.
				Transform.prototype._transform = function(chunk, encoding, cb) {
					throw new Error("_transform() is not implemented");
				};

				Transform.prototype._write = function(chunk, encoding, cb) {
					var ts = this._transformState;
					ts.writecb = cb;
					ts.writechunk = chunk;
					ts.writeencoding = encoding;
					if (!ts.transforming) {
						var rs = this._readableState;
						if (
							ts.needTransform ||
							rs.needReadable ||
							rs.length < rs.highWaterMark
						)
							this._read(rs.highWaterMark);
					}
				};

				// Doesn't matter what the args are here.
				// _transform does all the work.
				// That we got here means that the readable side wants more data.
				Transform.prototype._read = function(n) {
					var ts = this._transformState;

					if (
						ts.writechunk !== null &&
						ts.writecb &&
						!ts.transforming
					) {
						ts.transforming = true;
						this._transform(
							ts.writechunk,
							ts.writeencoding,
							ts.afterTransform
						);
					} else {
						// mark that we need a transform, so that any data that comes in
						// will get processed, now that we've asked for it.
						ts.needTransform = true;
					}
				};

				Transform.prototype._destroy = function(err, cb) {
					var _this2 = this;

					Duplex.prototype._destroy.call(this, err, function(err2) {
						cb(err2);
						_this2.emit("close");
					});
				};

				function done(stream, er, data) {
					if (er) return stream.emit("error", er);

					if (data != null)
						// single equals check for both `null` and `undefined`
						stream.push(data);

					// if there's nothing in the write buffer, then that means
					// that nothing more will ever be provided
					if (stream._writableState.length)
						throw new Error(
							"Calling transform done when ws.length != 0"
						);

					if (stream._transformState.transforming)
						throw new Error(
							"Calling transform done when still transforming"
						);

					return stream.push(null);
				}

				/***/
			},

		/***/ "./node_modules/readable-stream/lib/_stream_writable.js":
			/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_writable.js ***!
  \**************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				/* WEBPACK VAR INJECTION */ (function(
					process,
					setImmediate,
					global
				) {
					// Copyright Joyent, Inc. and other Node contributors.
					//
					// Permission is hereby granted, free of charge, to any person obtaining a
					// copy of this software and associated documentation files (the
					// "Software"), to deal in the Software without restriction, including
					// without limitation the rights to use, copy, modify, merge, publish,
					// distribute, sublicense, and/or sell copies of the Software, and to permit
					// persons to whom the Software is furnished to do so, subject to the
					// following conditions:
					//
					// The above copyright notice and this permission notice shall be included
					// in all copies or substantial portions of the Software.
					//
					// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
					// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
					// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
					// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
					// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
					// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
					// USE OR OTHER DEALINGS IN THE SOFTWARE.

					// A bit simpler than readable streams.
					// Implement an async ._write(chunk, encoding, cb), and it'll handle all
					// the drain event emission and buffering.

					/*<replacement>*/

					var pna = __webpack_require__(
						/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js"
					);
					/*</replacement>*/

					module.exports = Writable;

					/* <replacement> */
					function WriteReq(chunk, encoding, cb) {
						this.chunk = chunk;
						this.encoding = encoding;
						this.callback = cb;
						this.next = null;
					}

					// It seems a linked list but it is not
					// there will be only 2 of these for each stream
					function CorkedRequest(state) {
						var _this = this;

						this.next = null;
						this.entry = null;
						this.finish = function() {
							onCorkedFinish(_this, state);
						};
					}
					/* </replacement> */

					/*<replacement>*/
					var asyncWrite =
						!process.browser &&
						["v0.10", "v0.9."].indexOf(
							process.version.slice(0, 5)
						) > -1
							? setImmediate
							: pna.nextTick;
					/*</replacement>*/

					/*<replacement>*/
					var Duplex;
					/*</replacement>*/

					Writable.WritableState = WritableState;

					/*<replacement>*/
					var util = __webpack_require__(
						/*! core-util-is */ "./node_modules/core-util-is/lib/util.js"
					);
					util.inherits = __webpack_require__(
						/*! inherits */ "./node_modules/inherits/inherits_browser.js"
					);
					/*</replacement>*/

					/*<replacement>*/
					var internalUtil = {
						deprecate: __webpack_require__(
							/*! util-deprecate */ "./node_modules/util-deprecate/browser.js"
						),
					};
					/*</replacement>*/

					/*<replacement>*/
					var Stream = __webpack_require__(
						/*! ./internal/streams/stream */ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js"
					);
					/*</replacement>*/

					/*<replacement>*/

					var Buffer = __webpack_require__(
						/*! safe-buffer */ "./node_modules/safe-buffer/index.js"
					).Buffer;
					var OurUint8Array = global.Uint8Array || function() {};
					function _uint8ArrayToBuffer(chunk) {
						return Buffer.from(chunk);
					}
					function _isUint8Array(obj) {
						return (
							Buffer.isBuffer(obj) || obj instanceof OurUint8Array
						);
					}

					/*</replacement>*/

					var destroyImpl = __webpack_require__(
						/*! ./internal/streams/destroy */ "./node_modules/readable-stream/lib/internal/streams/destroy.js"
					);

					util.inherits(Writable, Stream);

					function nop() {}

					function WritableState(options, stream) {
						Duplex =
							Duplex ||
							__webpack_require__(
								/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js"
							);

						options = options || {};

						// Duplex streams are both readable and writable, but share
						// the same options object.
						// However, some cases require setting options to different
						// values for the readable and the writable sides of the duplex stream.
						// These options can be provided separately as readableXXX and writableXXX.
						var isDuplex = stream instanceof Duplex;

						// object stream flag to indicate whether or not this stream
						// contains buffers or objects.
						this.objectMode = !!options.objectMode;

						if (isDuplex)
							this.objectMode =
								this.objectMode || !!options.writableObjectMode;

						// the point at which write() starts returning false
						// Note: 0 is a valid value, means that we always return false if
						// the entire buffer is not flushed immediately on write()
						var hwm = options.highWaterMark;
						var writableHwm = options.writableHighWaterMark;
						var defaultHwm = this.objectMode ? 16 : 16 * 1024;

						if (hwm || hwm === 0) this.highWaterMark = hwm;
						else if (isDuplex && (writableHwm || writableHwm === 0))
							this.highWaterMark = writableHwm;
						else this.highWaterMark = defaultHwm;

						// cast to ints.
						this.highWaterMark = Math.floor(this.highWaterMark);

						// if _final has been called
						this.finalCalled = false;

						// drain event flag.
						this.needDrain = false;
						// at the start of calling end()
						this.ending = false;
						// when end() has been called, and returned
						this.ended = false;
						// when 'finish' is emitted
						this.finished = false;

						// has it been destroyed
						this.destroyed = false;

						// should we decode strings into buffers before passing to _write?
						// this is here so that some node-core streams can optimize string
						// handling at a lower level.
						var noDecode = options.decodeStrings === false;
						this.decodeStrings = !noDecode;

						// Crypto is kind of old and crusty.  Historically, its default string
						// encoding is 'binary' so we have to make this configurable.
						// Everything else in the universe uses 'utf8', though.
						this.defaultEncoding =
							options.defaultEncoding || "utf8";

						// not an actual buffer we keep track of, but a measurement
						// of how much we're waiting to get pushed to some underlying
						// socket or file.
						this.length = 0;

						// a flag to see when we're in the middle of a write.
						this.writing = false;

						// when true all writes will be buffered until .uncork() call
						this.corked = 0;

						// a flag to be able to tell if the onwrite cb is called immediately,
						// or on a later tick.  We set this to true at first, because any
						// actions that shouldn't happen until "later" should generally also
						// not happen before the first write call.
						this.sync = true;

						// a flag to know if we're processing previously buffered items, which
						// may call the _write() callback in the same tick, so that we don't
						// end up in an overlapped onwrite situation.
						this.bufferProcessing = false;

						// the callback that's passed to _write(chunk,cb)
						this.onwrite = function(er) {
							onwrite(stream, er);
						};

						// the callback that the user supplies to write(chunk,encoding,cb)
						this.writecb = null;

						// the amount that is being written when _write is called.
						this.writelen = 0;

						this.bufferedRequest = null;
						this.lastBufferedRequest = null;

						// number of pending user-supplied write callbacks
						// this must be 0 before 'finish' can be emitted
						this.pendingcb = 0;

						// emit prefinish if the only thing we're waiting for is _write cbs
						// This is relevant for synchronous Transform streams
						this.prefinished = false;

						// True if the error was already emitted and should not be thrown again
						this.errorEmitted = false;

						// count buffered requests
						this.bufferedRequestCount = 0;

						// allocate the first CorkedRequest, there is always
						// one allocated and free to use, and we maintain at most two
						this.corkedRequestsFree = new CorkedRequest(this);
					}

					WritableState.prototype.getBuffer = function getBuffer() {
						var current = this.bufferedRequest;
						var out = [];
						while (current) {
							out.push(current);
							current = current.next;
						}
						return out;
					};

					(function() {
						try {
							Object.defineProperty(
								WritableState.prototype,
								"buffer",
								{
									get: internalUtil.deprecate(
										function() {
											return this.getBuffer();
										},
										"_writableState.buffer is deprecated. Use _writableState.getBuffer " +
											"instead.",
										"DEP0003"
									),
								}
							);
						} catch (_) {}
					})();

					// Test _writableState for inheritance to account for Duplex streams,
					// whose prototype chain only points to Readable.
					var realHasInstance;
					if (
						typeof Symbol === "function" &&
						Symbol.hasInstance &&
						typeof Function.prototype[Symbol.hasInstance] ===
							"function"
					) {
						realHasInstance =
							Function.prototype[Symbol.hasInstance];
						Object.defineProperty(Writable, Symbol.hasInstance, {
							value: function(object) {
								if (realHasInstance.call(this, object))
									return true;
								if (this !== Writable) return false;

								return (
									object &&
									object._writableState instanceof
										WritableState
								);
							},
						});
					} else {
						realHasInstance = function(object) {
							return object instanceof this;
						};
					}

					function Writable(options) {
						Duplex =
							Duplex ||
							__webpack_require__(
								/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js"
							);

						// Writable ctor is applied to Duplexes, too.
						// `realHasInstance` is necessary because using plain `instanceof`
						// would return false, as no `_writableState` property is attached.

						// Trying to use the custom `instanceof` for Writable here will also break the
						// Node.js LazyTransform implementation, which has a non-trivial getter for
						// `_writableState` that would lead to infinite recursion.
						if (
							!realHasInstance.call(Writable, this) &&
							!(this instanceof Duplex)
						) {
							return new Writable(options);
						}

						this._writableState = new WritableState(options, this);

						// legacy.
						this.writable = true;

						if (options) {
							if (typeof options.write === "function")
								this._write = options.write;

							if (typeof options.writev === "function")
								this._writev = options.writev;

							if (typeof options.destroy === "function")
								this._destroy = options.destroy;

							if (typeof options.final === "function")
								this._final = options.final;
						}

						Stream.call(this);
					}

					// Otherwise people can pipe Writable streams, which is just wrong.
					Writable.prototype.pipe = function() {
						this.emit(
							"error",
							new Error("Cannot pipe, not readable")
						);
					};

					function writeAfterEnd(stream, cb) {
						var er = new Error("write after end");
						// TODO: defer error events consistently everywhere, not just the cb
						stream.emit("error", er);
						pna.nextTick(cb, er);
					}

					// Checks that a user-supplied chunk is valid, especially for the particular
					// mode the stream is in. Currently this means that `null` is never accepted
					// and undefined/non-string values are only allowed in object mode.
					function validChunk(stream, state, chunk, cb) {
						var valid = true;
						var er = false;

						if (chunk === null) {
							er = new TypeError(
								"May not write null values to stream"
							);
						} else if (
							typeof chunk !== "string" &&
							chunk !== undefined &&
							!state.objectMode
						) {
							er = new TypeError(
								"Invalid non-string/buffer chunk"
							);
						}
						if (er) {
							stream.emit("error", er);
							pna.nextTick(cb, er);
							valid = false;
						}
						return valid;
					}

					Writable.prototype.write = function(chunk, encoding, cb) {
						var state = this._writableState;
						var ret = false;
						var isBuf = !state.objectMode && _isUint8Array(chunk);

						if (isBuf && !Buffer.isBuffer(chunk)) {
							chunk = _uint8ArrayToBuffer(chunk);
						}

						if (typeof encoding === "function") {
							cb = encoding;
							encoding = null;
						}

						if (isBuf) encoding = "buffer";
						else if (!encoding) encoding = state.defaultEncoding;

						if (typeof cb !== "function") cb = nop;

						if (state.ended) writeAfterEnd(this, cb);
						else if (isBuf || validChunk(this, state, chunk, cb)) {
							state.pendingcb++;
							ret = writeOrBuffer(
								this,
								state,
								isBuf,
								chunk,
								encoding,
								cb
							);
						}

						return ret;
					};

					Writable.prototype.cork = function() {
						var state = this._writableState;

						state.corked++;
					};

					Writable.prototype.uncork = function() {
						var state = this._writableState;

						if (state.corked) {
							state.corked--;

							if (
								!state.writing &&
								!state.corked &&
								!state.finished &&
								!state.bufferProcessing &&
								state.bufferedRequest
							)
								clearBuffer(this, state);
						}
					};

					Writable.prototype.setDefaultEncoding = function setDefaultEncoding(
						encoding
					) {
						// node::ParseEncoding() requires lower case.
						if (typeof encoding === "string")
							encoding = encoding.toLowerCase();
						if (
							!(
								[
									"hex",
									"utf8",
									"utf-8",
									"ascii",
									"binary",
									"base64",
									"ucs2",
									"ucs-2",
									"utf16le",
									"utf-16le",
									"raw",
								].indexOf((encoding + "").toLowerCase()) > -1
							)
						)
							throw new TypeError(
								"Unknown encoding: " + encoding
							);
						this._writableState.defaultEncoding = encoding;
						return this;
					};

					function decodeChunk(state, chunk, encoding) {
						if (
							!state.objectMode &&
							state.decodeStrings !== false &&
							typeof chunk === "string"
						) {
							chunk = Buffer.from(chunk, encoding);
						}
						return chunk;
					}

					Object.defineProperty(
						Writable.prototype,
						"writableHighWaterMark",
						{
							// making it explicit this property is not enumerable
							// because otherwise some prototype manipulation in
							// userland will fail
							enumerable: false,
							get: function() {
								return this._writableState.highWaterMark;
							},
						}
					);

					// if we're already writing something, then just put this
					// in the queue, and wait our turn.  Otherwise, call _write
					// If we return false, then we need a drain event, so set that flag.
					function writeOrBuffer(
						stream,
						state,
						isBuf,
						chunk,
						encoding,
						cb
					) {
						if (!isBuf) {
							var newChunk = decodeChunk(state, chunk, encoding);
							if (chunk !== newChunk) {
								isBuf = true;
								encoding = "buffer";
								chunk = newChunk;
							}
						}
						var len = state.objectMode ? 1 : chunk.length;

						state.length += len;

						var ret = state.length < state.highWaterMark;
						// we must ensure that previous needDrain will not be reset to false.
						if (!ret) state.needDrain = true;

						if (state.writing || state.corked) {
							var last = state.lastBufferedRequest;
							state.lastBufferedRequest = {
								chunk: chunk,
								encoding: encoding,
								isBuf: isBuf,
								callback: cb,
								next: null,
							};
							if (last) {
								last.next = state.lastBufferedRequest;
							} else {
								state.bufferedRequest =
									state.lastBufferedRequest;
							}
							state.bufferedRequestCount += 1;
						} else {
							doWrite(
								stream,
								state,
								false,
								len,
								chunk,
								encoding,
								cb
							);
						}

						return ret;
					}

					function doWrite(
						stream,
						state,
						writev,
						len,
						chunk,
						encoding,
						cb
					) {
						state.writelen = len;
						state.writecb = cb;
						state.writing = true;
						state.sync = true;
						if (writev) stream._writev(chunk, state.onwrite);
						else stream._write(chunk, encoding, state.onwrite);
						state.sync = false;
					}

					function onwriteError(stream, state, sync, er, cb) {
						--state.pendingcb;

						if (sync) {
							// defer the callback if we are being called synchronously
							// to avoid piling up things on the stack
							pna.nextTick(cb, er);
							// this can emit finish, and it will always happen
							// after error
							pna.nextTick(finishMaybe, stream, state);
							stream._writableState.errorEmitted = true;
							stream.emit("error", er);
						} else {
							// the caller expect this to happen before if
							// it is async
							cb(er);
							stream._writableState.errorEmitted = true;
							stream.emit("error", er);
							// this can emit finish, but finish must
							// always follow error
							finishMaybe(stream, state);
						}
					}

					function onwriteStateUpdate(state) {
						state.writing = false;
						state.writecb = null;
						state.length -= state.writelen;
						state.writelen = 0;
					}

					function onwrite(stream, er) {
						var state = stream._writableState;
						var sync = state.sync;
						var cb = state.writecb;

						onwriteStateUpdate(state);

						if (er) onwriteError(stream, state, sync, er, cb);
						else {
							// Check if we're actually ready to finish, but don't emit yet
							var finished = needFinish(state);

							if (
								!finished &&
								!state.corked &&
								!state.bufferProcessing &&
								state.bufferedRequest
							) {
								clearBuffer(stream, state);
							}

							if (sync) {
								/*<replacement>*/
								asyncWrite(
									afterWrite,
									stream,
									state,
									finished,
									cb
								);
								/*</replacement>*/
							} else {
								afterWrite(stream, state, finished, cb);
							}
						}
					}

					function afterWrite(stream, state, finished, cb) {
						if (!finished) onwriteDrain(stream, state);
						state.pendingcb--;
						cb();
						finishMaybe(stream, state);
					}

					// Must force callback to be called on nextTick, so that we don't
					// emit 'drain' before the write() consumer gets the 'false' return
					// value, and has a chance to attach a 'drain' listener.
					function onwriteDrain(stream, state) {
						if (state.length === 0 && state.needDrain) {
							state.needDrain = false;
							stream.emit("drain");
						}
					}

					// if there's something in the buffer waiting, then process it
					function clearBuffer(stream, state) {
						state.bufferProcessing = true;
						var entry = state.bufferedRequest;

						if (stream._writev && entry && entry.next) {
							// Fast case, write everything using _writev()
							var l = state.bufferedRequestCount;
							var buffer = new Array(l);
							var holder = state.corkedRequestsFree;
							holder.entry = entry;

							var count = 0;
							var allBuffers = true;
							while (entry) {
								buffer[count] = entry;
								if (!entry.isBuf) allBuffers = false;
								entry = entry.next;
								count += 1;
							}
							buffer.allBuffers = allBuffers;

							doWrite(
								stream,
								state,
								true,
								state.length,
								buffer,
								"",
								holder.finish
							);

							// doWrite is almost always async, defer these to save a bit of time
							// as the hot path ends with doWrite
							state.pendingcb++;
							state.lastBufferedRequest = null;
							if (holder.next) {
								state.corkedRequestsFree = holder.next;
								holder.next = null;
							} else {
								state.corkedRequestsFree = new CorkedRequest(
									state
								);
							}
							state.bufferedRequestCount = 0;
						} else {
							// Slow case, write chunks one-by-one
							while (entry) {
								var chunk = entry.chunk;
								var encoding = entry.encoding;
								var cb = entry.callback;
								var len = state.objectMode ? 1 : chunk.length;

								doWrite(
									stream,
									state,
									false,
									len,
									chunk,
									encoding,
									cb
								);
								entry = entry.next;
								state.bufferedRequestCount--;
								// if we didn't call the onwrite immediately, then
								// it means that we need to wait until it does.
								// also, that means that the chunk and cb are currently
								// being processed, so move the buffer counter past them.
								if (state.writing) {
									break;
								}
							}

							if (entry === null)
								state.lastBufferedRequest = null;
						}

						state.bufferedRequest = entry;
						state.bufferProcessing = false;
					}

					Writable.prototype._write = function(chunk, encoding, cb) {
						cb(new Error("_write() is not implemented"));
					};

					Writable.prototype._writev = null;

					Writable.prototype.end = function(chunk, encoding, cb) {
						var state = this._writableState;

						if (typeof chunk === "function") {
							cb = chunk;
							chunk = null;
							encoding = null;
						} else if (typeof encoding === "function") {
							cb = encoding;
							encoding = null;
						}

						if (chunk !== null && chunk !== undefined)
							this.write(chunk, encoding);

						// .end() fully uncorks
						if (state.corked) {
							state.corked = 1;
							this.uncork();
						}

						// ignore unnecessary end() calls.
						if (!state.ending && !state.finished)
							endWritable(this, state, cb);
					};

					function needFinish(state) {
						return (
							state.ending &&
							state.length === 0 &&
							state.bufferedRequest === null &&
							!state.finished &&
							!state.writing
						);
					}
					function callFinal(stream, state) {
						stream._final(function(err) {
							state.pendingcb--;
							if (err) {
								stream.emit("error", err);
							}
							state.prefinished = true;
							stream.emit("prefinish");
							finishMaybe(stream, state);
						});
					}
					function prefinish(stream, state) {
						if (!state.prefinished && !state.finalCalled) {
							if (typeof stream._final === "function") {
								state.pendingcb++;
								state.finalCalled = true;
								pna.nextTick(callFinal, stream, state);
							} else {
								state.prefinished = true;
								stream.emit("prefinish");
							}
						}
					}

					function finishMaybe(stream, state) {
						var need = needFinish(state);
						if (need) {
							prefinish(stream, state);
							if (state.pendingcb === 0) {
								state.finished = true;
								stream.emit("finish");
							}
						}
						return need;
					}

					function endWritable(stream, state, cb) {
						state.ending = true;
						finishMaybe(stream, state);
						if (cb) {
							if (state.finished) pna.nextTick(cb);
							else stream.once("finish", cb);
						}
						state.ended = true;
						stream.writable = false;
					}

					function onCorkedFinish(corkReq, state, err) {
						var entry = corkReq.entry;
						corkReq.entry = null;
						while (entry) {
							var cb = entry.callback;
							state.pendingcb--;
							cb(err);
							entry = entry.next;
						}
						if (state.corkedRequestsFree) {
							state.corkedRequestsFree.next = corkReq;
						} else {
							state.corkedRequestsFree = corkReq;
						}
					}

					Object.defineProperty(Writable.prototype, "destroyed", {
						get: function() {
							if (this._writableState === undefined) {
								return false;
							}
							return this._writableState.destroyed;
						},
						set: function(value) {
							// we ignore the value if the stream
							// has not been initialized yet
							if (!this._writableState) {
								return;
							}

							// backward compatibility, the user is explicitly
							// managing destroyed
							this._writableState.destroyed = value;
						},
					});

					Writable.prototype.destroy = destroyImpl.destroy;
					Writable.prototype._undestroy = destroyImpl.undestroy;
					Writable.prototype._destroy = function(err, cb) {
						this.end();
						cb(err);
					};
					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../process/browser.js */ "./node_modules/process/browser.js"
					),
					__webpack_require__(
						/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js"
					).setImmediate,
					__webpack_require__(
						/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/readable-stream/lib/internal/streams/BufferList.js":
			/*!*************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/BufferList.js ***!
  \*************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";

				function _classCallCheck(instance, Constructor) {
					if (!(instance instanceof Constructor)) {
						throw new TypeError(
							"Cannot call a class as a function"
						);
					}
				}

				var Buffer = __webpack_require__(
					/*! safe-buffer */ "./node_modules/safe-buffer/index.js"
				).Buffer;
				var util = __webpack_require__(/*! util */ 3);

				function copyBuffer(src, target, offset) {
					src.copy(target, offset);
				}

				module.exports = (function() {
					function BufferList() {
						_classCallCheck(this, BufferList);

						this.head = null;
						this.tail = null;
						this.length = 0;
					}

					BufferList.prototype.push = function push(v) {
						var entry = {data: v, next: null};
						if (this.length > 0) this.tail.next = entry;
						else this.head = entry;
						this.tail = entry;
						++this.length;
					};

					BufferList.prototype.unshift = function unshift(v) {
						var entry = {data: v, next: this.head};
						if (this.length === 0) this.tail = entry;
						this.head = entry;
						++this.length;
					};

					BufferList.prototype.shift = function shift() {
						if (this.length === 0) return;
						var ret = this.head.data;
						if (this.length === 1) this.head = this.tail = null;
						else this.head = this.head.next;
						--this.length;
						return ret;
					};

					BufferList.prototype.clear = function clear() {
						this.head = this.tail = null;
						this.length = 0;
					};

					BufferList.prototype.join = function join(s) {
						if (this.length === 0) return "";
						var p = this.head;
						var ret = "" + p.data;
						while ((p = p.next)) {
							ret += s + p.data;
						}
						return ret;
					};

					BufferList.prototype.concat = function concat(n) {
						if (this.length === 0) return Buffer.alloc(0);
						if (this.length === 1) return this.head.data;
						var ret = Buffer.allocUnsafe(n >>> 0);
						var p = this.head;
						var i = 0;
						while (p) {
							copyBuffer(p.data, ret, i);
							i += p.data.length;
							p = p.next;
						}
						return ret;
					};

					return BufferList;
				})();

				if (util && util.inspect && util.inspect.custom) {
					module.exports.prototype[util.inspect.custom] = function() {
						var obj = util.inspect({length: this.length});
						return this.constructor.name + " " + obj;
					};
				}

				/***/
			},

		/***/ "./node_modules/readable-stream/lib/internal/streams/destroy.js":
			/*!**********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \**********************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";

				/*<replacement>*/

				var pna = __webpack_require__(
					/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js"
				);
				/*</replacement>*/

				// undocumented cb() API, needed for core, not for public API
				function destroy(err, cb) {
					var _this = this;

					var readableDestroyed =
						this._readableState && this._readableState.destroyed;
					var writableDestroyed =
						this._writableState && this._writableState.destroyed;

					if (readableDestroyed || writableDestroyed) {
						if (cb) {
							cb(err);
						} else if (
							err &&
							(!this._writableState ||
								!this._writableState.errorEmitted)
						) {
							pna.nextTick(emitErrorNT, this, err);
						}
						return this;
					}

					// we set destroyed to true before firing error callbacks in order
					// to make it re-entrance safe in case destroy() is called within callbacks

					if (this._readableState) {
						this._readableState.destroyed = true;
					}

					// if this is a duplex stream mark the writable part as destroyed as well
					if (this._writableState) {
						this._writableState.destroyed = true;
					}

					this._destroy(err || null, function(err) {
						if (!cb && err) {
							pna.nextTick(emitErrorNT, _this, err);
							if (_this._writableState) {
								_this._writableState.errorEmitted = true;
							}
						} else if (cb) {
							cb(err);
						}
					});

					return this;
				}

				function undestroy() {
					if (this._readableState) {
						this._readableState.destroyed = false;
						this._readableState.reading = false;
						this._readableState.ended = false;
						this._readableState.endEmitted = false;
					}

					if (this._writableState) {
						this._writableState.destroyed = false;
						this._writableState.ended = false;
						this._writableState.ending = false;
						this._writableState.finished = false;
						this._writableState.errorEmitted = false;
					}
				}

				function emitErrorNT(self, err) {
					self.emit("error", err);
				}

				module.exports = {
					destroy: destroy,
					undestroy: undestroy,
				};

				/***/
			},

		/***/ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js":
			/*!*****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \*****************************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				module.exports = __webpack_require__(
					/*! events */ "./node_modules/events/events.js"
				).EventEmitter;

				/***/
			},

		/***/ "./node_modules/readable-stream/passthrough.js":
			/*!*****************************************************!*\
  !*** ./node_modules/readable-stream/passthrough.js ***!
  \*****************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				module.exports = __webpack_require__(
					/*! ./readable */ "./node_modules/readable-stream/readable-browser.js"
				).PassThrough;

				/***/
			},

		/***/ "./node_modules/readable-stream/readable-browser.js":
			/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/readable-browser.js ***!
  \**********************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				exports = module.exports = __webpack_require__(
					/*! ./lib/_stream_readable.js */ "./node_modules/readable-stream/lib/_stream_readable.js"
				);
				exports.Stream = exports;
				exports.Readable = exports;
				exports.Writable = __webpack_require__(
					/*! ./lib/_stream_writable.js */ "./node_modules/readable-stream/lib/_stream_writable.js"
				);
				exports.Duplex = __webpack_require__(
					/*! ./lib/_stream_duplex.js */ "./node_modules/readable-stream/lib/_stream_duplex.js"
				);
				exports.Transform = __webpack_require__(
					/*! ./lib/_stream_transform.js */ "./node_modules/readable-stream/lib/_stream_transform.js"
				);
				exports.PassThrough = __webpack_require__(
					/*! ./lib/_stream_passthrough.js */ "./node_modules/readable-stream/lib/_stream_passthrough.js"
				);

				/***/
			},

		/***/ "./node_modules/readable-stream/transform.js":
			/*!***************************************************!*\
  !*** ./node_modules/readable-stream/transform.js ***!
  \***************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				module.exports = __webpack_require__(
					/*! ./readable */ "./node_modules/readable-stream/readable-browser.js"
				).Transform;

				/***/
			},

		/***/ "./node_modules/readable-stream/writable-browser.js":
			/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/writable-browser.js ***!
  \**********************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				module.exports = __webpack_require__(
					/*! ./lib/_stream_writable.js */ "./node_modules/readable-stream/lib/_stream_writable.js"
				);

				/***/
			},

		/***/ "./node_modules/safe-buffer/index.js":
			/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* eslint-disable node/no-deprecated-api */
				var buffer = __webpack_require__(
					/*! buffer */ "./node_modules/buffer/index.js"
				);
				var Buffer = buffer.Buffer;

				// alternative to using Object.keys for old browsers
				function copyProps(src, dst) {
					for (var key in src) {
						dst[key] = src[key];
					}
				}
				if (
					Buffer.from &&
					Buffer.alloc &&
					Buffer.allocUnsafe &&
					Buffer.allocUnsafeSlow
				) {
					module.exports = buffer;
				} else {
					// Copy properties from require('buffer')
					copyProps(buffer, exports);
					exports.Buffer = SafeBuffer;
				}

				function SafeBuffer(arg, encodingOrOffset, length) {
					return Buffer(arg, encodingOrOffset, length);
				}

				// Copy static methods from Buffer
				copyProps(Buffer, SafeBuffer);

				SafeBuffer.from = function(arg, encodingOrOffset, length) {
					if (typeof arg === "number") {
						throw new TypeError("Argument must not be a number");
					}
					return Buffer(arg, encodingOrOffset, length);
				};

				SafeBuffer.alloc = function(size, fill, encoding) {
					if (typeof size !== "number") {
						throw new TypeError("Argument must be a number");
					}
					var buf = Buffer(size);
					if (fill !== undefined) {
						if (typeof encoding === "string") {
							buf.fill(fill, encoding);
						} else {
							buf.fill(fill);
						}
					} else {
						buf.fill(0);
					}
					return buf;
				};

				SafeBuffer.allocUnsafe = function(size) {
					if (typeof size !== "number") {
						throw new TypeError("Argument must be a number");
					}
					return Buffer(size);
				};

				SafeBuffer.allocUnsafeSlow = function(size) {
					if (typeof size !== "number") {
						throw new TypeError("Argument must be a number");
					}
					return buffer.SlowBuffer(size);
				};

				/***/
			},

		/***/ "./node_modules/setimmediate/setImmediate.js":
			/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(global, process) {
					(function(global, undefined) {
						"use strict";

						if (global.setImmediate) {
							return;
						}

						var nextHandle = 1; // Spec says greater than zero
						var tasksByHandle = {};
						var currentlyRunningATask = false;
						var doc = global.document;
						var registerImmediate;

						function setImmediate(callback) {
							// Callback can either be a function or a string
							if (typeof callback !== "function") {
								callback = new Function("" + callback);
							}
							// Copy function arguments
							var args = new Array(arguments.length - 1);
							for (var i = 0; i < args.length; i++) {
								args[i] = arguments[i + 1];
							}
							// Store and register the task
							var task = {callback: callback, args: args};
							tasksByHandle[nextHandle] = task;
							registerImmediate(nextHandle);
							return nextHandle++;
						}

						function clearImmediate(handle) {
							delete tasksByHandle[handle];
						}

						function run(task) {
							var callback = task.callback;
							var args = task.args;
							switch (args.length) {
								case 0:
									callback();
									break;
								case 1:
									callback(args[0]);
									break;
								case 2:
									callback(args[0], args[1]);
									break;
								case 3:
									callback(args[0], args[1], args[2]);
									break;
								default:
									callback.apply(undefined, args);
									break;
							}
						}

						function runIfPresent(handle) {
							// From the spec: "Wait until any invocations of this algorithm started before this one have completed."
							// So if we're currently running a task, we'll need to delay this invocation.
							if (currentlyRunningATask) {
								// Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
								// "too much recursion" error.
								setTimeout(runIfPresent, 0, handle);
							} else {
								var task = tasksByHandle[handle];
								if (task) {
									currentlyRunningATask = true;
									try {
										run(task);
									} finally {
										clearImmediate(handle);
										currentlyRunningATask = false;
									}
								}
							}
						}

						function installNextTickImplementation() {
							registerImmediate = function(handle) {
								process.nextTick(function() {
									runIfPresent(handle);
								});
							};
						}

						function canUsePostMessage() {
							// The test against `importScripts` prevents this implementation from being installed inside a web worker,
							// where `global.postMessage` means something completely different and can't be used for this purpose.
							if (global.postMessage && !global.importScripts) {
								var postMessageIsAsynchronous = true;
								var oldOnMessage = global.onmessage;
								global.onmessage = function() {
									postMessageIsAsynchronous = false;
								};
								global.postMessage("", "*");
								global.onmessage = oldOnMessage;
								return postMessageIsAsynchronous;
							}
						}

						function installPostMessageImplementation() {
							// Installs an event handler on `global` for the `message` event: see
							// * https://developer.mozilla.org/en/DOM/window.postMessage
							// * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

							var messagePrefix =
								"setImmediate$" + Math.random() + "$";
							var onGlobalMessage = function(event) {
								if (
									event.source === global &&
									typeof event.data === "string" &&
									event.data.indexOf(messagePrefix) === 0
								) {
									runIfPresent(
										+event.data.slice(messagePrefix.length)
									);
								}
							};

							if (global.addEventListener) {
								global.addEventListener(
									"message",
									onGlobalMessage,
									false
								);
							} else {
								global.attachEvent(
									"onmessage",
									onGlobalMessage
								);
							}

							registerImmediate = function(handle) {
								global.postMessage(messagePrefix + handle, "*");
							};
						}

						function installMessageChannelImplementation() {
							var channel = new MessageChannel();
							channel.port1.onmessage = function(event) {
								var handle = event.data;
								runIfPresent(handle);
							};

							registerImmediate = function(handle) {
								channel.port2.postMessage(handle);
							};
						}

						function installReadyStateChangeImplementation() {
							var html = doc.documentElement;
							registerImmediate = function(handle) {
								// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
								// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
								var script = doc.createElement("script");
								script.onreadystatechange = function() {
									runIfPresent(handle);
									script.onreadystatechange = null;
									html.removeChild(script);
									script = null;
								};
								html.appendChild(script);
							};
						}

						function installSetTimeoutImplementation() {
							registerImmediate = function(handle) {
								setTimeout(runIfPresent, 0, handle);
							};
						}

						// If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
						var attachTo =
							Object.getPrototypeOf &&
							Object.getPrototypeOf(global);
						attachTo =
							attachTo && attachTo.setTimeout ? attachTo : global;

						// Don't get fooled by e.g. browserify environments.
						if (
							{}.toString.call(global.process) ===
							"[object process]"
						) {
							// For Node.js before 0.9
							installNextTickImplementation();
						} else if (canUsePostMessage()) {
							// For non-IE10 modern browsers
							installPostMessageImplementation();
						} else if (global.MessageChannel) {
							// For web workers, where supported
							installMessageChannelImplementation();
						} else if (
							doc &&
							"onreadystatechange" in doc.createElement("script")
						) {
							// For IE 6–8
							installReadyStateChangeImplementation();
						} else {
							// For older browsers
							installSetTimeoutImplementation();
						}

						attachTo.setImmediate = setImmediate;
						attachTo.clearImmediate = clearImmediate;
					})(
						typeof self === "undefined"
							? typeof global === "undefined"
								? this
								: global
							: self
					);

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
					),
					__webpack_require__(
						/*! ./../process/browser.js */ "./node_modules/process/browser.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/snekfetch/esm.mjs":
			/*!****************************************!*\
  !*** ./node_modules/snekfetch/esm.mjs ***!
  \****************************************/
			/*! exports provided: default, version, METHODS, acl, bind, checkout, connect, copy, delete, get, head, link, lock, merge, mkactivity, mkcalendar, mkcol, move, notify, options, patch, post, propfind, proppatch, purge, put, rebind, report, search, subscribe, trace, unbind, unlink, unlock, unsubscribe, brew */
			/***/ function(
				__webpack_module__,
				__webpack_exports__,
				__webpack_require__
			) {
				"use strict";
				__webpack_require__.r(__webpack_exports__);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"version",
					function() {
						return version;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"METHODS",
					function() {
						return METHODS;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"acl",
					function() {
						return acl;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"bind",
					function() {
						return bind;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"checkout",
					function() {
						return checkout;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"connect",
					function() {
						return connect;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"copy",
					function() {
						return copy;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"delete",
					function() {
						return _delete;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"get",
					function() {
						return get;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"head",
					function() {
						return head;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"link",
					function() {
						return link;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"lock",
					function() {
						return lock;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"merge",
					function() {
						return merge;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"mkactivity",
					function() {
						return mkactivity;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"mkcalendar",
					function() {
						return mkcalendar;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"mkcol",
					function() {
						return mkcol;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"move",
					function() {
						return move;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"notify",
					function() {
						return notify;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"options",
					function() {
						return options;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"patch",
					function() {
						return patch;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"post",
					function() {
						return post;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"propfind",
					function() {
						return propfind;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"proppatch",
					function() {
						return proppatch;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"purge",
					function() {
						return purge;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"put",
					function() {
						return put;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"rebind",
					function() {
						return rebind;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"report",
					function() {
						return report;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"search",
					function() {
						return search;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"subscribe",
					function() {
						return subscribe;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"trace",
					function() {
						return trace;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"unbind",
					function() {
						return unbind;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"unlink",
					function() {
						return unlink;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"unlock",
					function() {
						return unlock;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"unsubscribe",
					function() {
						return unsubscribe;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"brew",
					function() {
						return brew;
					}
				);
				/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
					/*! ./index.js */ "./node_modules/snekfetch/index.js"
				);

				/* harmony default export */ __webpack_exports__[
					"default"
				] = _index_js__WEBPACK_IMPORTED_MODULE_0__;

				const version = _index_js__WEBPACK_IMPORTED_MODULE_0__.version;
				const METHODS = _index_js__WEBPACK_IMPORTED_MODULE_0__.METHODS;

				const acl = _index_js__WEBPACK_IMPORTED_MODULE_0__.acl;
				const bind = _index_js__WEBPACK_IMPORTED_MODULE_0__.bind;
				const checkout =
					_index_js__WEBPACK_IMPORTED_MODULE_0__.checkout;
				const connect = _index_js__WEBPACK_IMPORTED_MODULE_0__.connect;
				const copy = _index_js__WEBPACK_IMPORTED_MODULE_0__.copy;
				const _delete = _index_js__WEBPACK_IMPORTED_MODULE_0__.delete;

				const get = _index_js__WEBPACK_IMPORTED_MODULE_0__.get;
				const head = _index_js__WEBPACK_IMPORTED_MODULE_0__.head;
				const link = _index_js__WEBPACK_IMPORTED_MODULE_0__.link;
				const lock = _index_js__WEBPACK_IMPORTED_MODULE_0__.lock;
				const merge = _index_js__WEBPACK_IMPORTED_MODULE_0__.merge;
				const mkactivity =
					_index_js__WEBPACK_IMPORTED_MODULE_0__.mkactivity;
				const mkcalendar =
					_index_js__WEBPACK_IMPORTED_MODULE_0__.mkcalendar;
				const mkcol = _index_js__WEBPACK_IMPORTED_MODULE_0__.mkcol;
				const move = _index_js__WEBPACK_IMPORTED_MODULE_0__.move;
				const notify = _index_js__WEBPACK_IMPORTED_MODULE_0__.notify;
				const options = _index_js__WEBPACK_IMPORTED_MODULE_0__.options;
				const patch = _index_js__WEBPACK_IMPORTED_MODULE_0__.patch;
				const post = _index_js__WEBPACK_IMPORTED_MODULE_0__.post;
				const propfind =
					_index_js__WEBPACK_IMPORTED_MODULE_0__.propfind;
				const proppatch =
					_index_js__WEBPACK_IMPORTED_MODULE_0__.proppatch;
				const purge = _index_js__WEBPACK_IMPORTED_MODULE_0__.purge;
				const put = _index_js__WEBPACK_IMPORTED_MODULE_0__.put;
				const rebind = _index_js__WEBPACK_IMPORTED_MODULE_0__.rebind;
				const report = _index_js__WEBPACK_IMPORTED_MODULE_0__.report;
				const search = _index_js__WEBPACK_IMPORTED_MODULE_0__.search;
				const subscribe =
					_index_js__WEBPACK_IMPORTED_MODULE_0__.subscribe;
				const trace = _index_js__WEBPACK_IMPORTED_MODULE_0__.trace;
				const unbind = _index_js__WEBPACK_IMPORTED_MODULE_0__.unbind;
				const unlink = _index_js__WEBPACK_IMPORTED_MODULE_0__.unlink;
				const unlock = _index_js__WEBPACK_IMPORTED_MODULE_0__.unlock;
				const unsubscribe =
					_index_js__WEBPACK_IMPORTED_MODULE_0__.unsubscribe;
				const brew = _index_js__WEBPACK_IMPORTED_MODULE_0__.brew;

				/***/
			},

		/***/ "./node_modules/snekfetch/index.js":
			/*!*****************************************!*\
  !*** ./node_modules/snekfetch/index.js ***!
  \*****************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				module.exports = __webpack_require__(
					/*! ./src */ "./node_modules/snekfetch/src/index.js"
				);

				/***/
			},

		/***/ "./node_modules/snekfetch/src/browser.js":
			/*!***********************************************!*\
  !*** ./node_modules/snekfetch/src/browser.js ***!
  \***********************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				function buildRequest(method, url) {
					return {
						method,
						path: url,
						redirect: this.options.followRedirects
							? "follow"
							: "manual",
						headers: {},
						setHeader(name, value) {
							this.headers[name.toLowerCase()] = value;
						},
						getHeader(name) {
							return this.headers[name.toLowerCase()];
						},
					};
				}

				function finalizeRequest() {
					this._finalizeRequest();
					if (this.data) this.request.body = this.data;
					return window
						.fetch(this.request.path, this.request)
						.then((r) =>
							r.text().then((t) => {
								const headers = {};
								for (const [k, v] of r.headers.entries())
									headers[k.toLowerCase()] = v;
								return {response: r, raw: t, headers};
							})
						);
				}

				module.exports = {
					buildRequest,
					finalizeRequest,
					shouldSendRaw: () => false,
					METHODS: [
						"GET",
						"HEAD",
						"POST",
						"PUT",
						"DELETE",
						"CONNECT",
						"OPTIONS",
						"PATCH",
					],
					STATUS_CODES: {},
					Extension: Object,
					FormData: window.FormData,
				};

				/***/
			},

		/***/ "./node_modules/snekfetch/src/index.js":
			/*!*********************************************!*\
  !*** ./node_modules/snekfetch/src/index.js ***!
  \*********************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				const browser = typeof window !== "undefined";
				const querystring = __webpack_require__(
					/*! querystring */ "./node_modules/querystring-es3/index.js"
				);
				const transport = browser
					? __webpack_require__(
							/*! ./browser */ "./node_modules/snekfetch/src/browser.js"
					  )
					: __webpack_require__(/*! ./node */ 1);

				/**
				 * Snekfetch
				 * @extends Stream.Readable
				 * @extends Promise
				 */
				class Snekfetch extends transport.Extension {
					/**
					 * Options to pass to the Snekfetch constructor
					 * @typedef {object} SnekfetchOptions
					 * @memberof Snekfetch
					 * @property {object} [headers] Headers to initialize the request with
					 * @property {object|string|Buffer} [data] Data to initialize the request with
					 * @property {string|Object} [query] Query to intialize the request with
					 * @property {boolean} [followRedirects=true] If the request should follow redirects
					 * @property {object} [qs=querystring] Querystring module to use, any object providing
					 * `stringify` and `parse` for querystrings
					 * @property {number} [version = 1] The http version to use [1 or 2]
					 * @property {external:Agent} [agent] Whether to use an http agent
					 */

					/**
					 * Create a request.
					 * Usually you'll want to do `Snekfetch#method(url [, options])` instead of
					 * `new Snekfetch(method, url [, options])`
					 * @param {string} method HTTP method
					 * @param {string} url URL
					 * @param {SnekfetchOptions} [opts] Options
					 */
					constructor(method, url, opts = {}) {
						super();
						this.options = Object.assign(
							{
								version: 1,
								qs: querystring,
								followRedirects: true,
							},
							opts
						);
						this.request = transport.buildRequest.call(
							this,
							method,
							url,
							opts
						);
						if (opts.headers) this.set(opts.headers);
						if (opts.query) this.query(opts.query);
						if (opts.data) this.send(opts.data);
					}

					/**
					 * Add a query param to the request
					 * @param {string|Object} name Name of query param or object to add to query
					 * @param {string} [value] If name is a string value, this will be the value of the query param
					 * @returns {Snekfetch} This request
					 */
					query(name, value) {
						if (!this.request.query) this.request.query = {};
						if (name !== null && typeof name === "object") {
							for (const [k, v] of Object.entries(name))
								this.query(k, v);
						} else {
							this.request.query[name] = value;
						}

						return this;
					}

					/**
					 * Add a header to the request
					 * @param {string|Object} name Name of query param or object to add to headers
					 * @param {string} [value] If name is a string value, this will be the value of the header
					 * @returns {Snekfetch} This request
					 */
					set(name, value) {
						if (name !== null && typeof name === "object") {
							for (const key of Object.keys(name))
								this.set(key, name[key]);
						} else {
							this.request.setHeader(name, value);
						}

						return this;
					}

					/**
					 * Attach a form data object
					 * @param {string} name Name of the form attachment
					 * @param {string|Object|Buffer} data Data for the attachment
					 * @param {string} [filename] Optional filename if form attachment name needs to be overridden
					 * @returns {Snekfetch} This request
					 */
					attach(...args) {
						const form =
							this.data instanceof transport.FormData
								? this.data
								: (this.data = new transport.FormData());
						if (typeof args[0] === "object") {
							for (const [k, v] of Object.entries(args[0]))
								this.attach(k, v);
						} else {
							form.append(...args);
						}

						return this;
					}

					/**
					 * Send data with the request
					 * @param {string|Buffer|Object} data Data to send
					 * @returns {Snekfetch} This request
					 */
					send(data) {
						if (
							data instanceof transport.FormData ||
							transport.shouldSendRaw(data)
						) {
							this.data = data;
						} else if (data !== null && typeof data === "object") {
							const header = this.request.getHeader(
								"content-type"
							);
							let serialize;
							if (header) {
								if (header.includes("json"))
									serialize = JSON.stringify;
								else if (header.includes("urlencoded"))
									serialize = this.options.qs.stringify;
							} else {
								this.set("Content-Type", "application/json");
								serialize = JSON.stringify;
							}
							this.data = serialize(data);
						} else {
							this.data = data;
						}
						return this;
					}

					then(resolver, rejector) {
						if (this._response)
							return this._response.then(resolver, rejector);
						// eslint-disable-next-line no-return-assign
						return (this._response = transport.finalizeRequest
							.call(this)
							.then(({response, raw, redirect, headers}) => {
								if (redirect) {
									let method = this.request.method;
									if (
										[301, 302].includes(response.statusCode)
									) {
										if (method !== "HEAD") method = "GET";
										this.data = null;
									} else if (response.statusCode === 303) {
										method = "GET";
									}

									const redirectHeaders = this.request.getHeaders();
									delete redirectHeaders.host;
									return new Snekfetch(method, redirect, {
										data: this.data,
										headers: redirectHeaders,
										version: this.options.version,
									});
								}

								const statusCode =
									response.statusCode || response.status;
								// forgive me :(
								const self = this; // eslint-disable-line consistent-this
								/**
								 * Response from Snekfetch
								 * @typedef {Object} SnekfetchResponse
								 * @memberof Snekfetch
								 * @prop {HTTP.Request} request
								 * @prop {?string|object|Buffer} body Processed response body
								 * @prop {string} text Raw response body
								 * @prop {boolean} ok If the response code is >= 200 and < 300
								 * @prop {number} status HTTP status code
								 * @prop {string} statusText Human readable HTTP status
								 */
								const res = {
									request: this.request,
									get body() {
										delete res.body;
										const type = this.headers[
											"content-type"
										];
										if (
											type &&
											type.includes("application/json")
										) {
											try {
												res.body = JSON.parse(res.text);
											} catch (err) {
												res.body = res.text;
											}
										} else if (
											type &&
											type.includes(
												"application/x-www-form-urlencoded"
											)
										) {
											res.body = self.options.qs.parse(
												res.text
											);
										} else {
											res.body = raw;
										}

										return res.body;
									},
									text: raw.toString(),
									ok: statusCode >= 200 && statusCode < 400,
									headers: headers || response.headers,
									status: statusCode,
									statusText:
										response.statusText ||
										transport.STATUS_CODES[
											response.statusCode
										],
								};

								if (res.ok) {
									return res;
								} else {
									const err = new Error(
										`${res.status} ${res.statusText}`.trim()
									);
									Object.assign(err, res);
									return Promise.reject(err);
								}
							})
							.then(resolver, rejector));
					}

					catch(rejector) {
						return this.then(null, rejector);
					}

					/**
					 * End the request
					 * @param {Function} [cb] Optional callback to handle the response
					 * @returns {Promise} This request
					 */
					end(cb) {
						return this.then(
							(res) => (cb ? cb(null, res) : res),
							(err) =>
								cb
									? cb(err, err.status ? err : null)
									: Promise.reject(err)
						);
					}

					_finalizeRequest() {
						if (!this.request) return;

						if (this.request.method !== "HEAD")
							this.set("Accept-Encoding", "gzip, deflate");
						if (this.data && this.data.getBoundary)
							this.set(
								"Content-Type",
								`multipart/form-data; boundary=${this.data.getBoundary()}`
							);

						if (this.request.query) {
							const [path, query] = this.request.path.split("?");
							this.request.path = `${path}?${this.options.qs.stringify(
								this.request.query
							)}${query ? `&${query}` : ""}`;
						}
					}
				}

				/**
				 * Create a ((THIS)) request
				 * @dynamic this.METHODS
				 * @method Snekfetch.((THIS)lowerCase)
				 * @param {string} url The url to request
				 * @param {Snekfetch.snekfetchOptions} [opts] Options
				 * @returns {Snekfetch}
				 */
				Snekfetch.METHODS = transport.METHODS.concat("BREW").filter(
					(m) => m !== "M-SEARCH"
				);
				for (const method of Snekfetch.METHODS) {
					Snekfetch[method.toLowerCase()] = function runMethod(
						url,
						opts
					) {
						const Constructor =
							this.prototype instanceof Snekfetch
								? this
								: Snekfetch;
						return new Constructor(method, url, opts);
					};
				}

				module.exports = Snekfetch;

				/**
				 * @external Agent
				 * @see {@link https://nodejs.org/api/http.html#http_class_http_agent}
				 */

				/***/
			},

		/***/ "./node_modules/stream-browserify/index.js":
			/*!*************************************************!*\
  !*** ./node_modules/stream-browserify/index.js ***!
  \*************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				// Copyright Joyent, Inc. and other Node contributors.
				//
				// Permission is hereby granted, free of charge, to any person obtaining a
				// copy of this software and associated documentation files (the
				// "Software"), to deal in the Software without restriction, including
				// without limitation the rights to use, copy, modify, merge, publish,
				// distribute, sublicense, and/or sell copies of the Software, and to permit
				// persons to whom the Software is furnished to do so, subject to the
				// following conditions:
				//
				// The above copyright notice and this permission notice shall be included
				// in all copies or substantial portions of the Software.
				//
				// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
				// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
				// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
				// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
				// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
				// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
				// USE OR OTHER DEALINGS IN THE SOFTWARE.

				module.exports = Stream;

				var EE = __webpack_require__(
					/*! events */ "./node_modules/events/events.js"
				).EventEmitter;
				var inherits = __webpack_require__(
					/*! inherits */ "./node_modules/inherits/inherits_browser.js"
				);

				inherits(Stream, EE);
				Stream.Readable = __webpack_require__(
					/*! readable-stream/readable.js */ "./node_modules/readable-stream/readable-browser.js"
				);
				Stream.Writable = __webpack_require__(
					/*! readable-stream/writable.js */ "./node_modules/readable-stream/writable-browser.js"
				);
				Stream.Duplex = __webpack_require__(
					/*! readable-stream/duplex.js */ "./node_modules/readable-stream/duplex-browser.js"
				);
				Stream.Transform = __webpack_require__(
					/*! readable-stream/transform.js */ "./node_modules/readable-stream/transform.js"
				);
				Stream.PassThrough = __webpack_require__(
					/*! readable-stream/passthrough.js */ "./node_modules/readable-stream/passthrough.js"
				);

				// Backwards-compat with node 0.4.x
				Stream.Stream = Stream;

				// old-style streams.  Note that the pipe method (the only relevant
				// part of this class) is overridden in the Readable class.

				function Stream() {
					EE.call(this);
				}

				Stream.prototype.pipe = function(dest, options) {
					var source = this;

					function ondata(chunk) {
						if (dest.writable) {
							if (false === dest.write(chunk) && source.pause) {
								source.pause();
							}
						}
					}

					source.on("data", ondata);

					function ondrain() {
						if (source.readable && source.resume) {
							source.resume();
						}
					}

					dest.on("drain", ondrain);

					// If the 'end' option is not supplied, dest.end() will be called when
					// source gets the 'end' or 'close' events.  Only dest.end() once.
					if (!dest._isStdio && (!options || options.end !== false)) {
						source.on("end", onend);
						source.on("close", onclose);
					}

					var didOnEnd = false;
					function onend() {
						if (didOnEnd) return;
						didOnEnd = true;

						dest.end();
					}

					function onclose() {
						if (didOnEnd) return;
						didOnEnd = true;

						if (typeof dest.destroy === "function") dest.destroy();
					}

					// don't leave dangling pipes when there are errors.
					function onerror(er) {
						cleanup();
						if (EE.listenerCount(this, "error") === 0) {
							throw er; // Unhandled stream error in pipe.
						}
					}

					source.on("error", onerror);
					dest.on("error", onerror);

					// remove all the event listeners that were added.
					function cleanup() {
						source.removeListener("data", ondata);
						dest.removeListener("drain", ondrain);

						source.removeListener("end", onend);
						source.removeListener("close", onclose);

						source.removeListener("error", onerror);
						dest.removeListener("error", onerror);

						source.removeListener("end", cleanup);
						source.removeListener("close", cleanup);

						dest.removeListener("close", cleanup);
					}

					source.on("end", cleanup);
					source.on("close", cleanup);

					dest.on("close", cleanup);

					dest.emit("pipe", source);

					// Allow for unix-like usage: A.pipe(B).pipe(C)
					return dest;
				};

				/***/
			},

		/***/ "./node_modules/stream-http/index.js":
			/*!*******************************************!*\
  !*** ./node_modules/stream-http/index.js ***!
  \*******************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(global) {
					var ClientRequest = __webpack_require__(
						/*! ./lib/request */ "./node_modules/stream-http/lib/request.js"
					);
					var response = __webpack_require__(
						/*! ./lib/response */ "./node_modules/stream-http/lib/response.js"
					);
					var extend = __webpack_require__(
						/*! xtend */ "./node_modules/xtend/immutable.js"
					);
					var statusCodes = __webpack_require__(
						/*! builtin-status-codes */ "./node_modules/builtin-status-codes/browser.js"
					);
					var url = __webpack_require__(
						/*! url */ "./node_modules/url/url.js"
					);

					var http = exports;

					http.request = function(opts, cb) {
						if (typeof opts === "string") opts = url.parse(opts);
						else opts = extend(opts);

						// Normally, the page is loaded from http or https, so not specifying a protocol
						// will result in a (valid) protocol-relative url. However, this won't work if
						// the protocol is something else, like 'file:'
						var defaultProtocol =
							global.location.protocol.search(/^https?:$/) === -1
								? "http:"
								: "";

						var protocol = opts.protocol || defaultProtocol;
						var host = opts.hostname || opts.host;
						var port = opts.port;
						var path = opts.path || "/";

						// Necessary for IPv6 addresses
						if (host && host.indexOf(":") !== -1)
							host = "[" + host + "]";

						// This may be a relative url. The browser should always be able to interpret it correctly.
						opts.url =
							(host ? protocol + "//" + host : "") +
							(port ? ":" + port : "") +
							path;
						opts.method = (opts.method || "GET").toUpperCase();
						opts.headers = opts.headers || {};

						// Also valid opts.auth, opts.mode

						var req = new ClientRequest(opts);
						if (cb) req.on("response", cb);
						return req;
					};

					http.get = function get(opts, cb) {
						var req = http.request(opts, cb);
						req.end();
						return req;
					};

					http.ClientRequest = ClientRequest;
					http.IncomingMessage = response.IncomingMessage;

					http.Agent = function() {};
					http.Agent.defaultMaxSockets = 4;

					http.globalAgent = new http.Agent();

					http.STATUS_CODES = statusCodes;

					http.METHODS = [
						"CHECKOUT",
						"CONNECT",
						"COPY",
						"DELETE",
						"GET",
						"HEAD",
						"LOCK",
						"M-SEARCH",
						"MERGE",
						"MKACTIVITY",
						"MKCOL",
						"MOVE",
						"NOTIFY",
						"OPTIONS",
						"PATCH",
						"POST",
						"PROPFIND",
						"PROPPATCH",
						"PURGE",
						"PUT",
						"REPORT",
						"SEARCH",
						"SUBSCRIBE",
						"TRACE",
						"UNLOCK",
						"UNSUBSCRIBE",
					];
					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/stream-http/lib/capability.js":
			/*!****************************************************!*\
  !*** ./node_modules/stream-http/lib/capability.js ***!
  \****************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(global) {
					exports.fetch =
						isFunction(global.fetch) &&
						isFunction(global.ReadableStream);

					exports.writableStream = isFunction(global.WritableStream);

					exports.abortController = isFunction(
						global.AbortController
					);

					exports.blobConstructor = false;
					try {
						new Blob([new ArrayBuffer(1)]);
						exports.blobConstructor = true;
					} catch (e) {}

					// The xhr request to example.com may violate some restrictive CSP configurations,
					// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
					// and assume support for certain features below.
					var xhr;
					function getXHR() {
						// Cache the xhr value
						if (xhr !== undefined) return xhr;

						if (global.XMLHttpRequest) {
							xhr = new global.XMLHttpRequest();
							// If XDomainRequest is available (ie only, where xhr might not work
							// cross domain), use the page location. Otherwise use example.com
							// Note: this doesn't actually make an http request.
							try {
								xhr.open(
									"GET",
									global.XDomainRequest
										? "/"
										: "https://example.com"
								);
							} catch (e) {
								xhr = null;
							}
						} else {
							// Service workers don't have XHR
							xhr = null;
						}
						return xhr;
					}

					function checkTypeSupport(type) {
						var xhr = getXHR();
						if (!xhr) return false;
						try {
							xhr.responseType = type;
							return xhr.responseType === type;
						} catch (e) {}
						return false;
					}

					// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
					// Safari 7.1 appears to have fixed this bug.
					var haveArrayBuffer =
						typeof global.ArrayBuffer !== "undefined";
					var haveSlice =
						haveArrayBuffer &&
						isFunction(global.ArrayBuffer.prototype.slice);

					// If fetch is supported, then arraybuffer will be supported too. Skip calling
					// checkTypeSupport(), since that calls getXHR().
					exports.arraybuffer =
						exports.fetch ||
						(haveArrayBuffer && checkTypeSupport("arraybuffer"));

					// These next two tests unavoidably show warnings in Chrome. Since fetch will always
					// be used if it's available, just return false for these to avoid the warnings.
					exports.msstream =
						!exports.fetch &&
						haveSlice &&
						checkTypeSupport("ms-stream");
					exports.mozchunkedarraybuffer =
						!exports.fetch &&
						haveArrayBuffer &&
						checkTypeSupport("moz-chunked-arraybuffer");

					// If fetch is supported, then overrideMimeType will be supported too. Skip calling
					// getXHR().
					exports.overrideMimeType =
						exports.fetch ||
						(getXHR()
							? isFunction(getXHR().overrideMimeType)
							: false);

					exports.vbArray = isFunction(global.VBArray);

					function isFunction(value) {
						return typeof value === "function";
					}

					xhr = null; // Help gc

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/stream-http/lib/request.js":
			/*!*************************************************!*\
  !*** ./node_modules/stream-http/lib/request.js ***!
  \*************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(Buffer, global, process) {
					var capability = __webpack_require__(
						/*! ./capability */ "./node_modules/stream-http/lib/capability.js"
					);
					var inherits = __webpack_require__(
						/*! inherits */ "./node_modules/inherits/inherits_browser.js"
					);
					var response = __webpack_require__(
						/*! ./response */ "./node_modules/stream-http/lib/response.js"
					);
					var stream = __webpack_require__(
						/*! readable-stream */ "./node_modules/readable-stream/readable-browser.js"
					);
					var toArrayBuffer = __webpack_require__(
						/*! to-arraybuffer */ "./node_modules/to-arraybuffer/index.js"
					);

					var IncomingMessage = response.IncomingMessage;
					var rStates = response.readyStates;

					function decideMode(preferBinary, useFetch) {
						if (capability.fetch && useFetch) {
							return "fetch";
						} else if (capability.mozchunkedarraybuffer) {
							return "moz-chunked-arraybuffer";
						} else if (capability.msstream) {
							return "ms-stream";
						} else if (capability.arraybuffer && preferBinary) {
							return "arraybuffer";
						} else if (capability.vbArray && preferBinary) {
							return "text:vbarray";
						} else {
							return "text";
						}
					}

					var ClientRequest = (module.exports = function(opts) {
						var self = this;
						stream.Writable.call(self);

						self._opts = opts;
						self._body = [];
						self._headers = {};
						if (opts.auth)
							self.setHeader(
								"Authorization",
								"Basic " +
									new Buffer(opts.auth).toString("base64")
							);
						Object.keys(opts.headers).forEach(function(name) {
							self.setHeader(name, opts.headers[name]);
						});

						var preferBinary;
						var useFetch = true;
						if (
							opts.mode === "disable-fetch" ||
							("requestTimeout" in opts &&
								!capability.abortController)
						) {
							// If the use of XHR should be preferred. Not typically needed.
							useFetch = false;
							preferBinary = true;
						} else if (opts.mode === "prefer-streaming") {
							// If streaming is a high priority but binary compatibility and
							// the accuracy of the 'content-type' header aren't
							preferBinary = false;
						} else if (opts.mode === "allow-wrong-content-type") {
							// If streaming is more important than preserving the 'content-type' header
							preferBinary = !capability.overrideMimeType;
						} else if (
							!opts.mode ||
							opts.mode === "default" ||
							opts.mode === "prefer-fast"
						) {
							// Use binary if text streaming may corrupt data or the content-type header, or for speed
							preferBinary = true;
						} else {
							throw new Error("Invalid value for opts.mode");
						}
						self._mode = decideMode(preferBinary, useFetch);
						self._fetchTimer = null;

						self.on("finish", function() {
							self._onFinish();
						});
					});

					inherits(ClientRequest, stream.Writable);

					ClientRequest.prototype.setHeader = function(name, value) {
						var self = this;
						var lowerName = name.toLowerCase();
						// This check is not necessary, but it prevents warnings from browsers about setting unsafe
						// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
						// http-browserify did it, so I will too.
						if (unsafeHeaders.indexOf(lowerName) !== -1) return;

						self._headers[lowerName] = {
							name: name,
							value: value,
						};
					};

					ClientRequest.prototype.getHeader = function(name) {
						var header = this._headers[name.toLowerCase()];
						if (header) return header.value;
						return null;
					};

					ClientRequest.prototype.removeHeader = function(name) {
						var self = this;
						delete self._headers[name.toLowerCase()];
					};

					ClientRequest.prototype._onFinish = function() {
						var self = this;

						if (self._destroyed) return;
						var opts = self._opts;

						var headersObj = self._headers;
						var body = null;
						if (opts.method !== "GET" && opts.method !== "HEAD") {
							if (capability.arraybuffer) {
								body = toArrayBuffer(Buffer.concat(self._body));
							} else if (capability.blobConstructor) {
								body = new global.Blob(
									self._body.map(function(buffer) {
										return toArrayBuffer(buffer);
									}),
									{
										type:
											(headersObj["content-type"] || {})
												.value || "",
									}
								);
							} else {
								// get utf8 string
								body = Buffer.concat(self._body).toString();
							}
						}

						// create flattened list of headers
						var headersList = [];
						Object.keys(headersObj).forEach(function(keyName) {
							var name = headersObj[keyName].name;
							var value = headersObj[keyName].value;
							if (Array.isArray(value)) {
								value.forEach(function(v) {
									headersList.push([name, v]);
								});
							} else {
								headersList.push([name, value]);
							}
						});

						if (self._mode === "fetch") {
							var signal = null;
							var fetchTimer = null;
							if (capability.abortController) {
								var controller = new AbortController();
								signal = controller.signal;
								self._fetchAbortController = controller;

								if (
									"requestTimeout" in opts &&
									opts.requestTimeout !== 0
								) {
									self._fetchTimer = global.setTimeout(
										function() {
											self.emit("requestTimeout");
											if (self._fetchAbortController)
												self._fetchAbortController.abort();
										},
										opts.requestTimeout
									);
								}
							}

							global
								.fetch(self._opts.url, {
									method: self._opts.method,
									headers: headersList,
									body: body || undefined,
									mode: "cors",
									credentials: opts.withCredentials
										? "include"
										: "same-origin",
									signal: signal,
								})
								.then(
									function(response) {
										self._fetchResponse = response;
										self._connect();
									},
									function(reason) {
										global.clearTimeout(self._fetchTimer);
										if (!self._destroyed)
											self.emit("error", reason);
									}
								);
						} else {
							var xhr = (self._xhr = new global.XMLHttpRequest());
							try {
								xhr.open(
									self._opts.method,
									self._opts.url,
									true
								);
							} catch (err) {
								process.nextTick(function() {
									self.emit("error", err);
								});
								return;
							}

							// Can't set responseType on really old browsers
							if ("responseType" in xhr)
								xhr.responseType = self._mode.split(":")[0];

							if ("withCredentials" in xhr)
								xhr.withCredentials = !!opts.withCredentials;

							if (
								self._mode === "text" &&
								"overrideMimeType" in xhr
							)
								xhr.overrideMimeType(
									"text/plain; charset=x-user-defined"
								);

							if ("requestTimeout" in opts) {
								xhr.timeout = opts.requestTimeout;
								xhr.ontimeout = function() {
									self.emit("requestTimeout");
								};
							}

							headersList.forEach(function(header) {
								xhr.setRequestHeader(header[0], header[1]);
							});

							self._response = null;
							xhr.onreadystatechange = function() {
								switch (xhr.readyState) {
									case rStates.LOADING:
									case rStates.DONE:
										self._onXHRProgress();
										break;
								}
							};
							// Necessary for streaming in Firefox, since xhr.response is ONLY defined
							// in onprogress, not in onreadystatechange with xhr.readyState = 3
							if (self._mode === "moz-chunked-arraybuffer") {
								xhr.onprogress = function() {
									self._onXHRProgress();
								};
							}

							xhr.onerror = function() {
								if (self._destroyed) return;
								self.emit("error", new Error("XHR error"));
							};

							try {
								xhr.send(body);
							} catch (err) {
								process.nextTick(function() {
									self.emit("error", err);
								});
								return;
							}
						}
					};

					/**
					 * Checks if xhr.status is readable and non-zero, indicating no error.
					 * Even though the spec says it should be available in readyState 3,
					 * accessing it throws an exception in IE8
					 */
					function statusValid(xhr) {
						try {
							var status = xhr.status;
							return status !== null && status !== 0;
						} catch (e) {
							return false;
						}
					}

					ClientRequest.prototype._onXHRProgress = function() {
						var self = this;

						if (!statusValid(self._xhr) || self._destroyed) return;

						if (!self._response) self._connect();

						self._response._onXHRProgress();
					};

					ClientRequest.prototype._connect = function() {
						var self = this;

						if (self._destroyed) return;

						self._response = new IncomingMessage(
							self._xhr,
							self._fetchResponse,
							self._mode,
							self._fetchTimer
						);
						self._response.on("error", function(err) {
							self.emit("error", err);
						});

						self.emit("response", self._response);
					};

					ClientRequest.prototype._write = function(
						chunk,
						encoding,
						cb
					) {
						var self = this;

						self._body.push(chunk);
						cb();
					};

					ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function() {
						var self = this;
						self._destroyed = true;
						global.clearTimeout(self._fetchTimer);
						if (self._response) self._response._destroyed = true;
						if (self._xhr) self._xhr.abort();
						else if (self._fetchAbortController)
							self._fetchAbortController.abort();
					};

					ClientRequest.prototype.end = function(data, encoding, cb) {
						var self = this;
						if (typeof data === "function") {
							cb = data;
							data = undefined;
						}

						stream.Writable.prototype.end.call(
							self,
							data,
							encoding,
							cb
						);
					};

					ClientRequest.prototype.flushHeaders = function() {};
					ClientRequest.prototype.setTimeout = function() {};
					ClientRequest.prototype.setNoDelay = function() {};
					ClientRequest.prototype.setSocketKeepAlive = function() {};

					// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
					var unsafeHeaders = [
						"accept-charset",
						"accept-encoding",
						"access-control-request-headers",
						"access-control-request-method",
						"connection",
						"content-length",
						"cookie",
						"cookie2",
						"date",
						"dnt",
						"expect",
						"host",
						"keep-alive",
						"origin",
						"referer",
						"te",
						"trailer",
						"transfer-encoding",
						"upgrade",
						"via",
					];

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js"
					).Buffer,
					__webpack_require__(
						/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
					),
					__webpack_require__(
						/*! ./../../process/browser.js */ "./node_modules/process/browser.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/stream-http/lib/response.js":
			/*!**************************************************!*\
  !*** ./node_modules/stream-http/lib/response.js ***!
  \**************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(process, Buffer, global) {
					var capability = __webpack_require__(
						/*! ./capability */ "./node_modules/stream-http/lib/capability.js"
					);
					var inherits = __webpack_require__(
						/*! inherits */ "./node_modules/inherits/inherits_browser.js"
					);
					var stream = __webpack_require__(
						/*! readable-stream */ "./node_modules/readable-stream/readable-browser.js"
					);

					var rStates = (exports.readyStates = {
						UNSENT: 0,
						OPENED: 1,
						HEADERS_RECEIVED: 2,
						LOADING: 3,
						DONE: 4,
					});

					var IncomingMessage = (exports.IncomingMessage = function(
						xhr,
						response,
						mode,
						fetchTimer
					) {
						var self = this;
						stream.Readable.call(self);

						self._mode = mode;
						self.headers = {};
						self.rawHeaders = [];
						self.trailers = {};
						self.rawTrailers = [];

						// Fake the 'close' event, but only once 'end' fires
						self.on("end", function() {
							// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
							process.nextTick(function() {
								self.emit("close");
							});
						});

						if (mode === "fetch") {
							self._fetchResponse = response;

							self.url = response.url;
							self.statusCode = response.status;
							self.statusMessage = response.statusText;

							response.headers.forEach(function(header, key) {
								self.headers[key.toLowerCase()] = header;
								self.rawHeaders.push(key, header);
							});

							if (capability.writableStream) {
								var writable = new WritableStream({
									write: function(chunk) {
										return new Promise(function(
											resolve,
											reject
										) {
											if (self._destroyed) {
												reject();
											} else if (
												self.push(new Buffer(chunk))
											) {
												resolve();
											} else {
												self._resumeFetch = resolve;
											}
										});
									},
									close: function() {
										global.clearTimeout(fetchTimer);
										if (!self._destroyed) self.push(null);
									},
									abort: function(err) {
										if (!self._destroyed)
											self.emit("error", err);
									},
								});

								try {
									response.body
										.pipeTo(writable)
										.catch(function(err) {
											global.clearTimeout(fetchTimer);
											if (!self._destroyed)
												self.emit("error", err);
										});
									return;
								} catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
							}
							// fallback for when writableStream or pipeTo aren't available
							var reader = response.body.getReader();
							function read() {
								reader
									.read()
									.then(function(result) {
										if (self._destroyed) return;
										if (result.done) {
											global.clearTimeout(fetchTimer);
											self.push(null);
											return;
										}
										self.push(new Buffer(result.value));
										read();
									})
									.catch(function(err) {
										global.clearTimeout(fetchTimer);
										if (!self._destroyed)
											self.emit("error", err);
									});
							}
							read();
						} else {
							self._xhr = xhr;
							self._pos = 0;

							self.url = xhr.responseURL;
							self.statusCode = xhr.status;
							self.statusMessage = xhr.statusText;
							var headers = xhr
								.getAllResponseHeaders()
								.split(/\r?\n/);
							headers.forEach(function(header) {
								var matches = header.match(/^([^:]+):\s*(.*)/);
								if (matches) {
									var key = matches[1].toLowerCase();
									if (key === "set-cookie") {
										if (self.headers[key] === undefined) {
											self.headers[key] = [];
										}
										self.headers[key].push(matches[2]);
									} else if (
										self.headers[key] !== undefined
									) {
										self.headers[key] += ", " + matches[2];
									} else {
										self.headers[key] = matches[2];
									}
									self.rawHeaders.push(
										matches[1],
										matches[2]
									);
								}
							});

							self._charset = "x-user-defined";
							if (!capability.overrideMimeType) {
								var mimeType = self.rawHeaders["mime-type"];
								if (mimeType) {
									var charsetMatch = mimeType.match(
										/;\s*charset=([^;])(;|$)/
									);
									if (charsetMatch) {
										self._charset = charsetMatch[1].toLowerCase();
									}
								}
								if (!self._charset) self._charset = "utf-8"; // best guess
							}
						}
					});

					inherits(IncomingMessage, stream.Readable);

					IncomingMessage.prototype._read = function() {
						var self = this;

						var resolve = self._resumeFetch;
						if (resolve) {
							self._resumeFetch = null;
							resolve();
						}
					};

					IncomingMessage.prototype._onXHRProgress = function() {
						var self = this;

						var xhr = self._xhr;

						var response = null;
						switch (self._mode) {
							case "text:vbarray": // For IE9
								if (xhr.readyState !== rStates.DONE) break;
								try {
									// This fails in IE8
									response = new global.VBArray(
										xhr.responseBody
									).toArray();
								} catch (e) {}
								if (response !== null) {
									self.push(new Buffer(response));
									break;
								}
							// Falls through in IE8
							case "text":
								try {
									// This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
									response = xhr.responseText;
								} catch (e) {
									self._mode = "text:vbarray";
									break;
								}
								if (response.length > self._pos) {
									var newData = response.substr(self._pos);
									if (self._charset === "x-user-defined") {
										var buffer = new Buffer(newData.length);
										for (var i = 0; i < newData.length; i++)
											buffer[i] =
												newData.charCodeAt(i) & 0xff;

										self.push(buffer);
									} else {
										self.push(newData, self._charset);
									}
									self._pos = response.length;
								}
								break;
							case "arraybuffer":
								if (
									xhr.readyState !== rStates.DONE ||
									!xhr.response
								)
									break;
								response = xhr.response;
								self.push(new Buffer(new Uint8Array(response)));
								break;
							case "moz-chunked-arraybuffer": // take whole
								response = xhr.response;
								if (
									xhr.readyState !== rStates.LOADING ||
									!response
								)
									break;
								self.push(new Buffer(new Uint8Array(response)));
								break;
							case "ms-stream":
								response = xhr.response;
								if (xhr.readyState !== rStates.LOADING) break;
								var reader = new global.MSStreamReader();
								reader.onprogress = function() {
									if (reader.result.byteLength > self._pos) {
										self.push(
											new Buffer(
												new Uint8Array(
													reader.result.slice(
														self._pos
													)
												)
											)
										);
										self._pos = reader.result.byteLength;
									}
								};
								reader.onload = function() {
									self.push(null);
								};
								// reader.onerror = ??? // TODO: this
								reader.readAsArrayBuffer(response);
								break;
						}

						// The ms-stream case handles end separately in reader.onload()
						if (
							self._xhr.readyState === rStates.DONE &&
							self._mode !== "ms-stream"
						) {
							self.push(null);
						}
					};

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../process/browser.js */ "./node_modules/process/browser.js"
					),
					__webpack_require__(
						/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js"
					).Buffer,
					__webpack_require__(
						/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/string_decoder/lib/string_decoder.js":
			/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				// Copyright Joyent, Inc. and other Node contributors.
				//
				// Permission is hereby granted, free of charge, to any person obtaining a
				// copy of this software and associated documentation files (the
				// "Software"), to deal in the Software without restriction, including
				// without limitation the rights to use, copy, modify, merge, publish,
				// distribute, sublicense, and/or sell copies of the Software, and to permit
				// persons to whom the Software is furnished to do so, subject to the
				// following conditions:
				//
				// The above copyright notice and this permission notice shall be included
				// in all copies or substantial portions of the Software.
				//
				// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
				// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
				// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
				// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
				// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
				// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
				// USE OR OTHER DEALINGS IN THE SOFTWARE.

				/*<replacement>*/

				var Buffer = __webpack_require__(
					/*! safe-buffer */ "./node_modules/safe-buffer/index.js"
				).Buffer;
				/*</replacement>*/

				var isEncoding =
					Buffer.isEncoding ||
					function(encoding) {
						encoding = "" + encoding;
						switch (encoding && encoding.toLowerCase()) {
							case "hex":
							case "utf8":
							case "utf-8":
							case "ascii":
							case "binary":
							case "base64":
							case "ucs2":
							case "ucs-2":
							case "utf16le":
							case "utf-16le":
							case "raw":
								return true;
							default:
								return false;
						}
					};

				function _normalizeEncoding(enc) {
					if (!enc) return "utf8";
					var retried;
					while (true) {
						switch (enc) {
							case "utf8":
							case "utf-8":
								return "utf8";
							case "ucs2":
							case "ucs-2":
							case "utf16le":
							case "utf-16le":
								return "utf16le";
							case "latin1":
							case "binary":
								return "latin1";
							case "base64":
							case "ascii":
							case "hex":
								return enc;
							default:
								if (retried) return; // undefined
								enc = ("" + enc).toLowerCase();
								retried = true;
						}
					}
				}

				// Do not cache `Buffer.isEncoding` when checking encoding names as some
				// modules monkey-patch it to support additional encodings
				function normalizeEncoding(enc) {
					var nenc = _normalizeEncoding(enc);
					if (
						typeof nenc !== "string" &&
						(Buffer.isEncoding === isEncoding || !isEncoding(enc))
					)
						throw new Error("Unknown encoding: " + enc);
					return nenc || enc;
				}

				// StringDecoder provides an interface for efficiently splitting a series of
				// buffers into a series of JS strings without breaking apart multi-byte
				// characters.
				exports.StringDecoder = StringDecoder;
				function StringDecoder(encoding) {
					this.encoding = normalizeEncoding(encoding);
					var nb;
					switch (this.encoding) {
						case "utf16le":
							this.text = utf16Text;
							this.end = utf16End;
							nb = 4;
							break;
						case "utf8":
							this.fillLast = utf8FillLast;
							nb = 4;
							break;
						case "base64":
							this.text = base64Text;
							this.end = base64End;
							nb = 3;
							break;
						default:
							this.write = simpleWrite;
							this.end = simpleEnd;
							return;
					}
					this.lastNeed = 0;
					this.lastTotal = 0;
					this.lastChar = Buffer.allocUnsafe(nb);
				}

				StringDecoder.prototype.write = function(buf) {
					if (buf.length === 0) return "";
					var r;
					var i;
					if (this.lastNeed) {
						r = this.fillLast(buf);
						if (r === undefined) return "";
						i = this.lastNeed;
						this.lastNeed = 0;
					} else {
						i = 0;
					}
					if (i < buf.length)
						return r ? r + this.text(buf, i) : this.text(buf, i);
					return r || "";
				};

				StringDecoder.prototype.end = utf8End;

				// Returns only complete characters in a Buffer
				StringDecoder.prototype.text = utf8Text;

				// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
				StringDecoder.prototype.fillLast = function(buf) {
					if (this.lastNeed <= buf.length) {
						buf.copy(
							this.lastChar,
							this.lastTotal - this.lastNeed,
							0,
							this.lastNeed
						);
						return this.lastChar.toString(
							this.encoding,
							0,
							this.lastTotal
						);
					}
					buf.copy(
						this.lastChar,
						this.lastTotal - this.lastNeed,
						0,
						buf.length
					);
					this.lastNeed -= buf.length;
				};

				// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
				// continuation byte. If an invalid byte is detected, -2 is returned.
				function utf8CheckByte(byte) {
					if (byte <= 0x7f) return 0;
					else if (byte >> 5 === 0x06) return 2;
					else if (byte >> 4 === 0x0e) return 3;
					else if (byte >> 3 === 0x1e) return 4;
					return byte >> 6 === 0x02 ? -1 : -2;
				}

				// Checks at most 3 bytes at the end of a Buffer in order to detect an
				// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
				// needed to complete the UTF-8 character (if applicable) are returned.
				function utf8CheckIncomplete(self, buf, i) {
					var j = buf.length - 1;
					if (j < i) return 0;
					var nb = utf8CheckByte(buf[j]);
					if (nb >= 0) {
						if (nb > 0) self.lastNeed = nb - 1;
						return nb;
					}
					if (--j < i || nb === -2) return 0;
					nb = utf8CheckByte(buf[j]);
					if (nb >= 0) {
						if (nb > 0) self.lastNeed = nb - 2;
						return nb;
					}
					if (--j < i || nb === -2) return 0;
					nb = utf8CheckByte(buf[j]);
					if (nb >= 0) {
						if (nb > 0) {
							if (nb === 2) nb = 0;
							else self.lastNeed = nb - 3;
						}
						return nb;
					}
					return 0;
				}

				// Validates as many continuation bytes for a multi-byte UTF-8 character as
				// needed or are available. If we see a non-continuation byte where we expect
				// one, we "replace" the validated continuation bytes we've seen so far with
				// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
				// behavior. The continuation byte check is included three times in the case
				// where all of the continuation bytes for a character exist in the same buffer.
				// It is also done this way as a slight performance increase instead of using a
				// loop.
				function utf8CheckExtraBytes(self, buf, p) {
					if ((buf[0] & 0xc0) !== 0x80) {
						self.lastNeed = 0;
						return "\ufffd";
					}
					if (self.lastNeed > 1 && buf.length > 1) {
						if ((buf[1] & 0xc0) !== 0x80) {
							self.lastNeed = 1;
							return "\ufffd";
						}
						if (self.lastNeed > 2 && buf.length > 2) {
							if ((buf[2] & 0xc0) !== 0x80) {
								self.lastNeed = 2;
								return "\ufffd";
							}
						}
					}
				}

				// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
				function utf8FillLast(buf) {
					var p = this.lastTotal - this.lastNeed;
					var r = utf8CheckExtraBytes(this, buf, p);
					if (r !== undefined) return r;
					if (this.lastNeed <= buf.length) {
						buf.copy(this.lastChar, p, 0, this.lastNeed);
						return this.lastChar.toString(
							this.encoding,
							0,
							this.lastTotal
						);
					}
					buf.copy(this.lastChar, p, 0, buf.length);
					this.lastNeed -= buf.length;
				}

				// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
				// partial character, the character's bytes are buffered until the required
				// number of bytes are available.
				function utf8Text(buf, i) {
					var total = utf8CheckIncomplete(this, buf, i);
					if (!this.lastNeed) return buf.toString("utf8", i);
					this.lastTotal = total;
					var end = buf.length - (total - this.lastNeed);
					buf.copy(this.lastChar, 0, end);
					return buf.toString("utf8", i, end);
				}

				// For UTF-8, a replacement character is added when ending on a partial
				// character.
				function utf8End(buf) {
					var r = buf && buf.length ? this.write(buf) : "";
					if (this.lastNeed) return r + "\ufffd";
					return r;
				}

				// UTF-16LE typically needs two bytes per character, but even if we have an even
				// number of bytes available, we need to check if we end on a leading/high
				// surrogate. In that case, we need to wait for the next two bytes in order to
				// decode the last character properly.
				function utf16Text(buf, i) {
					if ((buf.length - i) % 2 === 0) {
						var r = buf.toString("utf16le", i);
						if (r) {
							var c = r.charCodeAt(r.length - 1);
							if (c >= 0xd800 && c <= 0xdbff) {
								this.lastNeed = 2;
								this.lastTotal = 4;
								this.lastChar[0] = buf[buf.length - 2];
								this.lastChar[1] = buf[buf.length - 1];
								return r.slice(0, -1);
							}
						}
						return r;
					}
					this.lastNeed = 1;
					this.lastTotal = 2;
					this.lastChar[0] = buf[buf.length - 1];
					return buf.toString("utf16le", i, buf.length - 1);
				}

				// For UTF-16LE we do not explicitly append special replacement characters if we
				// end on a partial character, we simply let v8 handle that.
				function utf16End(buf) {
					var r = buf && buf.length ? this.write(buf) : "";
					if (this.lastNeed) {
						var end = this.lastTotal - this.lastNeed;
						return r + this.lastChar.toString("utf16le", 0, end);
					}
					return r;
				}

				function base64Text(buf, i) {
					var n = (buf.length - i) % 3;
					if (n === 0) return buf.toString("base64", i);
					this.lastNeed = 3 - n;
					this.lastTotal = 3;
					if (n === 1) {
						this.lastChar[0] = buf[buf.length - 1];
					} else {
						this.lastChar[0] = buf[buf.length - 2];
						this.lastChar[1] = buf[buf.length - 1];
					}
					return buf.toString("base64", i, buf.length - n);
				}

				function base64End(buf) {
					var r = buf && buf.length ? this.write(buf) : "";
					if (this.lastNeed)
						return (
							r +
							this.lastChar.toString(
								"base64",
								0,
								3 - this.lastNeed
							)
						);
					return r;
				}

				// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
				function simpleWrite(buf) {
					return buf.toString(this.encoding);
				}

				function simpleEnd(buf) {
					return buf && buf.length ? this.write(buf) : "";
				}

				/***/
			},

		/***/ "./node_modules/timers-browserify/main.js":
			/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(global) {
					var scope =
						(typeof global !== "undefined" && global) ||
						(typeof self !== "undefined" && self) ||
						window;
					var apply = Function.prototype.apply;

					// DOM APIs, for completeness

					exports.setTimeout = function() {
						return new Timeout(
							apply.call(setTimeout, scope, arguments),
							clearTimeout
						);
					};
					exports.setInterval = function() {
						return new Timeout(
							apply.call(setInterval, scope, arguments),
							clearInterval
						);
					};
					exports.clearTimeout = exports.clearInterval = function(
						timeout
					) {
						if (timeout) {
							timeout.close();
						}
					};

					function Timeout(id, clearFn) {
						this._id = id;
						this._clearFn = clearFn;
					}
					Timeout.prototype.unref = Timeout.prototype.ref = function() {};
					Timeout.prototype.close = function() {
						this._clearFn.call(scope, this._id);
					};

					// Does not start the time, just sets up the members needed.
					exports.enroll = function(item, msecs) {
						clearTimeout(item._idleTimeoutId);
						item._idleTimeout = msecs;
					};

					exports.unenroll = function(item) {
						clearTimeout(item._idleTimeoutId);
						item._idleTimeout = -1;
					};

					exports._unrefActive = exports.active = function(item) {
						clearTimeout(item._idleTimeoutId);

						var msecs = item._idleTimeout;
						if (msecs >= 0) {
							item._idleTimeoutId = setTimeout(
								function onTimeout() {
									if (item._onTimeout) item._onTimeout();
								},
								msecs
							);
						}
					};

					// setimmediate attaches itself to the global object
					__webpack_require__(
						/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js"
					);
					// On some exotic environments, it's not clear which object `setimmediate` was
					// able to install onto.  Search each possibility in the same order as the
					// `setimmediate` library.
					exports.setImmediate =
						(typeof self !== "undefined" && self.setImmediate) ||
						(typeof global !== "undefined" &&
							global.setImmediate) ||
						(this && this.setImmediate);
					exports.clearImmediate =
						(typeof self !== "undefined" && self.clearImmediate) ||
						(typeof global !== "undefined" &&
							global.clearImmediate) ||
						(this && this.clearImmediate);

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/to-arraybuffer/index.js":
			/*!**********************************************!*\
  !*** ./node_modules/to-arraybuffer/index.js ***!
  \**********************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				var Buffer = __webpack_require__(
					/*! buffer */ "./node_modules/buffer/index.js"
				).Buffer;

				module.exports = function(buf) {
					// If the buffer is backed by a Uint8Array, a faster version will work
					if (buf instanceof Uint8Array) {
						// If the buffer isn't a subarray, return the underlying ArrayBuffer
						if (
							buf.byteOffset === 0 &&
							buf.byteLength === buf.buffer.byteLength
						) {
							return buf.buffer;
						} else if (typeof buf.buffer.slice === "function") {
							// Otherwise we need to get a proper copy
							return buf.buffer.slice(
								buf.byteOffset,
								buf.byteOffset + buf.byteLength
							);
						}
					}

					if (Buffer.isBuffer(buf)) {
						// This is the slow version that will work with any Buffer
						// implementation (even in old browsers)
						var arrayCopy = new Uint8Array(buf.length);
						var len = buf.length;
						for (var i = 0; i < len; i++) {
							arrayCopy[i] = buf[i];
						}
						return arrayCopy.buffer;
					} else {
						throw new Error("Argument must be a Buffer");
					}
				};

				/***/
			},

		/***/ "./node_modules/url/url.js":
			/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				// Copyright Joyent, Inc. and other Node contributors.
				//
				// Permission is hereby granted, free of charge, to any person obtaining a
				// copy of this software and associated documentation files (the
				// "Software"), to deal in the Software without restriction, including
				// without limitation the rights to use, copy, modify, merge, publish,
				// distribute, sublicense, and/or sell copies of the Software, and to permit
				// persons to whom the Software is furnished to do so, subject to the
				// following conditions:
				//
				// The above copyright notice and this permission notice shall be included
				// in all copies or substantial portions of the Software.
				//
				// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
				// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
				// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
				// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
				// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
				// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
				// USE OR OTHER DEALINGS IN THE SOFTWARE.

				var punycode = __webpack_require__(
					/*! punycode */ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js"
				);
				var util = __webpack_require__(
					/*! ./util */ "./node_modules/url/util.js"
				);

				exports.parse = urlParse;
				exports.resolve = urlResolve;
				exports.resolveObject = urlResolveObject;
				exports.format = urlFormat;

				exports.Url = Url;

				function Url() {
					this.protocol = null;
					this.slashes = null;
					this.auth = null;
					this.host = null;
					this.port = null;
					this.hostname = null;
					this.hash = null;
					this.search = null;
					this.query = null;
					this.pathname = null;
					this.path = null;
					this.href = null;
				}

				// Reference: RFC 3986, RFC 1808, RFC 2396

				// define these here so at least they only have to be
				// compiled once on the first module load.
				var protocolPattern = /^([a-z0-9.+-]+:)/i,
					portPattern = /:[0-9]*$/,
					// Special case for a simple path URL
					simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
					// RFC 2396: characters reserved for delimiting URLs.
					// We actually just auto-escape these.
					delims = ["<", ">", '"', "`", " ", "\r", "\n", "\t"],
					// RFC 2396: characters not allowed for various reasons.
					unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims),
					// Allowed by RFCs, but cause of XSS attacks.  Always escape these.
					autoEscape = ["'"].concat(unwise),
					// Characters that are never ever allowed in a hostname.
					// Note that any invalid chars are also handled, but these
					// are the ones that are *expected* to be seen, so we fast-path
					// them.
					nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape),
					hostEndingChars = ["/", "?", "#"],
					hostnameMaxLen = 255,
					hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
					hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
					// protocols that can allow "unsafe" and "unwise" chars.
					unsafeProtocol = {
						javascript: true,
						"javascript:": true,
					},
					// protocols that never have a hostname.
					hostlessProtocol = {
						javascript: true,
						"javascript:": true,
					},
					// protocols that always contain a // bit.
					slashedProtocol = {
						http: true,
						https: true,
						ftp: true,
						gopher: true,
						file: true,
						"http:": true,
						"https:": true,
						"ftp:": true,
						"gopher:": true,
						"file:": true,
					},
					querystring = __webpack_require__(
						/*! querystring */ "./node_modules/querystring-es3/index.js"
					);

				function urlParse(url, parseQueryString, slashesDenoteHost) {
					if (url && util.isObject(url) && url instanceof Url)
						return url;

					var u = new Url();
					u.parse(url, parseQueryString, slashesDenoteHost);
					return u;
				}

				Url.prototype.parse = function(
					url,
					parseQueryString,
					slashesDenoteHost
				) {
					if (!util.isString(url)) {
						throw new TypeError(
							"Parameter 'url' must be a string, not " +
								typeof url
						);
					}

					// Copy chrome, IE, opera backslash-handling behavior.
					// Back slashes before the query string get converted to forward slashes
					// See: https://code.google.com/p/chromium/issues/detail?id=25916
					var queryIndex = url.indexOf("?"),
						splitter =
							queryIndex !== -1 && queryIndex < url.indexOf("#")
								? "?"
								: "#",
						uSplit = url.split(splitter),
						slashRegex = /\\/g;
					uSplit[0] = uSplit[0].replace(slashRegex, "/");
					url = uSplit.join(splitter);

					var rest = url;

					// trim before proceeding.
					// This is to support parse stuff like "  http://foo.com  \n"
					rest = rest.trim();

					if (!slashesDenoteHost && url.split("#").length === 1) {
						// Try fast path regexp
						var simplePath = simplePathPattern.exec(rest);
						if (simplePath) {
							this.path = rest;
							this.href = rest;
							this.pathname = simplePath[1];
							if (simplePath[2]) {
								this.search = simplePath[2];
								if (parseQueryString) {
									this.query = querystring.parse(
										this.search.substr(1)
									);
								} else {
									this.query = this.search.substr(1);
								}
							} else if (parseQueryString) {
								this.search = "";
								this.query = {};
							}
							return this;
						}
					}

					var proto = protocolPattern.exec(rest);
					if (proto) {
						proto = proto[0];
						var lowerProto = proto.toLowerCase();
						this.protocol = lowerProto;
						rest = rest.substr(proto.length);
					}

					// figure out if it's got a host
					// user@server is *always* interpreted as a hostname, and url
					// resolution will treat //foo/bar as host=foo,path=bar because that's
					// how the browser resolves relative URLs.
					if (
						slashesDenoteHost ||
						proto ||
						rest.match(/^\/\/[^@\/]+@[^@\/]+/)
					) {
						var slashes = rest.substr(0, 2) === "//";
						if (slashes && !(proto && hostlessProtocol[proto])) {
							rest = rest.substr(2);
							this.slashes = true;
						}
					}

					if (
						!hostlessProtocol[proto] &&
						(slashes || (proto && !slashedProtocol[proto]))
					) {
						// there's a hostname.
						// the first instance of /, ?, ;, or # ends the host.
						//
						// If there is an @ in the hostname, then non-host chars *are* allowed
						// to the left of the last @ sign, unless some host-ending character
						// comes *before* the @-sign.
						// URLs are obnoxious.
						//
						// ex:
						// http://a@b@c/ => user:a@b host:c
						// http://a@b?@c => user:a host:c path:/?@c

						// v0.12 TODO(isaacs): This is not quite how Chrome does things.
						// Review our test case against browsers more comprehensively.

						// find the first instance of any hostEndingChars
						var hostEnd = -1;
						for (var i = 0; i < hostEndingChars.length; i++) {
							var hec = rest.indexOf(hostEndingChars[i]);
							if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
								hostEnd = hec;
						}

						// at this point, either we have an explicit point where the
						// auth portion cannot go past, or the last @ char is the decider.
						var auth, atSign;
						if (hostEnd === -1) {
							// atSign can be anywhere.
							atSign = rest.lastIndexOf("@");
						} else {
							// atSign must be in auth portion.
							// http://a@b/c@d => host:b auth:a path:/c@d
							atSign = rest.lastIndexOf("@", hostEnd);
						}

						// Now we have a portion which is definitely the auth.
						// Pull that off.
						if (atSign !== -1) {
							auth = rest.slice(0, atSign);
							rest = rest.slice(atSign + 1);
							this.auth = decodeURIComponent(auth);
						}

						// the host is the remaining to the left of the first non-host char
						hostEnd = -1;
						for (var i = 0; i < nonHostChars.length; i++) {
							var hec = rest.indexOf(nonHostChars[i]);
							if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
								hostEnd = hec;
						}
						// if we still have not hit it, then the entire thing is a host.
						if (hostEnd === -1) hostEnd = rest.length;

						this.host = rest.slice(0, hostEnd);
						rest = rest.slice(hostEnd);

						// pull out port.
						this.parseHost();

						// we've indicated that there is a hostname,
						// so even if it's empty, it has to be present.
						this.hostname = this.hostname || "";

						// if hostname begins with [ and ends with ]
						// assume that it's an IPv6 address.
						var ipv6Hostname =
							this.hostname[0] === "[" &&
							this.hostname[this.hostname.length - 1] === "]";

						// validate a little.
						if (!ipv6Hostname) {
							var hostparts = this.hostname.split(/\./);
							for (var i = 0, l = hostparts.length; i < l; i++) {
								var part = hostparts[i];
								if (!part) continue;
								if (!part.match(hostnamePartPattern)) {
									var newpart = "";
									for (
										var j = 0, k = part.length;
										j < k;
										j++
									) {
										if (part.charCodeAt(j) > 127) {
											// we replace non-ASCII char with a temporary placeholder
											// we need this to make sure size of hostname is not
											// broken by replacing non-ASCII by nothing
											newpart += "x";
										} else {
											newpart += part[j];
										}
									}
									// we test again with ASCII char only
									if (!newpart.match(hostnamePartPattern)) {
										var validParts = hostparts.slice(0, i);
										var notHost = hostparts.slice(i + 1);
										var bit = part.match(hostnamePartStart);
										if (bit) {
											validParts.push(bit[1]);
											notHost.unshift(bit[2]);
										}
										if (notHost.length) {
											rest =
												"/" + notHost.join(".") + rest;
										}
										this.hostname = validParts.join(".");
										break;
									}
								}
							}
						}

						if (this.hostname.length > hostnameMaxLen) {
							this.hostname = "";
						} else {
							// hostnames are always lower case.
							this.hostname = this.hostname.toLowerCase();
						}

						if (!ipv6Hostname) {
							// IDNA Support: Returns a punycoded representation of "domain".
							// It only converts parts of the domain name that
							// have non-ASCII characters, i.e. it doesn't matter if
							// you call it with a domain that already is ASCII-only.
							this.hostname = punycode.toASCII(this.hostname);
						}

						var p = this.port ? ":" + this.port : "";
						var h = this.hostname || "";
						this.host = h + p;
						this.href += this.host;

						// strip [ and ] from the hostname
						// the host field still retains them, though
						if (ipv6Hostname) {
							this.hostname = this.hostname.substr(
								1,
								this.hostname.length - 2
							);
							if (rest[0] !== "/") {
								rest = "/" + rest;
							}
						}
					}

					// now rest is set to the post-host stuff.
					// chop off any delim chars.
					if (!unsafeProtocol[lowerProto]) {
						// First, make 100% sure that any "autoEscape" chars get
						// escaped, even if encodeURIComponent doesn't think they
						// need to be.
						for (var i = 0, l = autoEscape.length; i < l; i++) {
							var ae = autoEscape[i];
							if (rest.indexOf(ae) === -1) continue;
							var esc = encodeURIComponent(ae);
							if (esc === ae) {
								esc = escape(ae);
							}
							rest = rest.split(ae).join(esc);
						}
					}

					// chop off from the tail first.
					var hash = rest.indexOf("#");
					if (hash !== -1) {
						// got a fragment string.
						this.hash = rest.substr(hash);
						rest = rest.slice(0, hash);
					}
					var qm = rest.indexOf("?");
					if (qm !== -1) {
						this.search = rest.substr(qm);
						this.query = rest.substr(qm + 1);
						if (parseQueryString) {
							this.query = querystring.parse(this.query);
						}
						rest = rest.slice(0, qm);
					} else if (parseQueryString) {
						// no query string, but parseQueryString still requested
						this.search = "";
						this.query = {};
					}
					if (rest) this.pathname = rest;
					if (
						slashedProtocol[lowerProto] &&
						this.hostname &&
						!this.pathname
					) {
						this.pathname = "/";
					}

					//to support http.request
					if (this.pathname || this.search) {
						var p = this.pathname || "";
						var s = this.search || "";
						this.path = p + s;
					}

					// finally, reconstruct the href based on what has been validated.
					this.href = this.format();
					return this;
				};

				// format a parsed object into a url string
				function urlFormat(obj) {
					// ensure it's an object, and not a string url.
					// If it's an obj, this is a no-op.
					// this way, you can call url_format() on strings
					// to clean up potentially wonky urls.
					if (util.isString(obj)) obj = urlParse(obj);
					if (!(obj instanceof Url))
						return Url.prototype.format.call(obj);
					return obj.format();
				}

				Url.prototype.format = function() {
					var auth = this.auth || "";
					if (auth) {
						auth = encodeURIComponent(auth);
						auth = auth.replace(/%3A/i, ":");
						auth += "@";
					}

					var protocol = this.protocol || "",
						pathname = this.pathname || "",
						hash = this.hash || "",
						host = false,
						query = "";

					if (this.host) {
						host = auth + this.host;
					} else if (this.hostname) {
						host =
							auth +
							(this.hostname.indexOf(":") === -1
								? this.hostname
								: "[" + this.hostname + "]");
						if (this.port) {
							host += ":" + this.port;
						}
					}

					if (
						this.query &&
						util.isObject(this.query) &&
						Object.keys(this.query).length
					) {
						query = querystring.stringify(this.query);
					}

					var search = this.search || (query && "?" + query) || "";

					if (protocol && protocol.substr(-1) !== ":")
						protocol += ":";

					// only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
					// unless they had them to begin with.
					if (
						this.slashes ||
						((!protocol || slashedProtocol[protocol]) &&
							host !== false)
					) {
						host = "//" + (host || "");
						if (pathname && pathname.charAt(0) !== "/")
							pathname = "/" + pathname;
					} else if (!host) {
						host = "";
					}

					if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
					if (search && search.charAt(0) !== "?")
						search = "?" + search;

					pathname = pathname.replace(/[?#]/g, function(match) {
						return encodeURIComponent(match);
					});
					search = search.replace("#", "%23");

					return protocol + host + pathname + search + hash;
				};

				function urlResolve(source, relative) {
					return urlParse(source, false, true).resolve(relative);
				}

				Url.prototype.resolve = function(relative) {
					return this.resolveObject(
						urlParse(relative, false, true)
					).format();
				};

				function urlResolveObject(source, relative) {
					if (!source) return relative;
					return urlParse(source, false, true).resolveObject(
						relative
					);
				}

				Url.prototype.resolveObject = function(relative) {
					if (util.isString(relative)) {
						var rel = new Url();
						rel.parse(relative, false, true);
						relative = rel;
					}

					var result = new Url();
					var tkeys = Object.keys(this);
					for (var tk = 0; tk < tkeys.length; tk++) {
						var tkey = tkeys[tk];
						result[tkey] = this[tkey];
					}

					// hash is always overridden, no matter what.
					// even href="" will remove it.
					result.hash = relative.hash;

					// if the relative url is empty, then there's nothing left to do here.
					if (relative.href === "") {
						result.href = result.format();
						return result;
					}

					// hrefs like //foo/bar always cut to the protocol.
					if (relative.slashes && !relative.protocol) {
						// take everything except the protocol from relative
						var rkeys = Object.keys(relative);
						for (var rk = 0; rk < rkeys.length; rk++) {
							var rkey = rkeys[rk];
							if (rkey !== "protocol")
								result[rkey] = relative[rkey];
						}

						//urlParse appends trailing / to urls like http://www.example.com
						if (
							slashedProtocol[result.protocol] &&
							result.hostname &&
							!result.pathname
						) {
							result.path = result.pathname = "/";
						}

						result.href = result.format();
						return result;
					}

					if (
						relative.protocol &&
						relative.protocol !== result.protocol
					) {
						// if it's a known url protocol, then changing
						// the protocol does weird things
						// first, if it's not file:, then we MUST have a host,
						// and if there was a path
						// to begin with, then we MUST have a path.
						// if it is file:, then the host is dropped,
						// because that's known to be hostless.
						// anything else is assumed to be absolute.
						if (!slashedProtocol[relative.protocol]) {
							var keys = Object.keys(relative);
							for (var v = 0; v < keys.length; v++) {
								var k = keys[v];
								result[k] = relative[k];
							}
							result.href = result.format();
							return result;
						}

						result.protocol = relative.protocol;
						if (
							!relative.host &&
							!hostlessProtocol[relative.protocol]
						) {
							var relPath = (relative.pathname || "").split("/");
							while (
								relPath.length &&
								!(relative.host = relPath.shift())
							);
							if (!relative.host) relative.host = "";
							if (!relative.hostname) relative.hostname = "";
							if (relPath[0] !== "") relPath.unshift("");
							if (relPath.length < 2) relPath.unshift("");
							result.pathname = relPath.join("/");
						} else {
							result.pathname = relative.pathname;
						}
						result.search = relative.search;
						result.query = relative.query;
						result.host = relative.host || "";
						result.auth = relative.auth;
						result.hostname = relative.hostname || relative.host;
						result.port = relative.port;
						// to support http.request
						if (result.pathname || result.search) {
							var p = result.pathname || "";
							var s = result.search || "";
							result.path = p + s;
						}
						result.slashes = result.slashes || relative.slashes;
						result.href = result.format();
						return result;
					}

					var isSourceAbs =
							result.pathname &&
							result.pathname.charAt(0) === "/",
						isRelAbs =
							relative.host ||
							(relative.pathname &&
								relative.pathname.charAt(0) === "/"),
						mustEndAbs =
							isRelAbs ||
							isSourceAbs ||
							(result.host && relative.pathname),
						removeAllDots = mustEndAbs,
						srcPath =
							(result.pathname && result.pathname.split("/")) ||
							[],
						relPath =
							(relative.pathname &&
								relative.pathname.split("/")) ||
							[],
						psychotic =
							result.protocol &&
							!slashedProtocol[result.protocol];

					// if the url is a non-slashed url, then relative
					// links like ../.. should be able
					// to crawl up to the hostname, as well.  This is strange.
					// result.protocol has already been set by now.
					// Later on, put the first path part into the host field.
					if (psychotic) {
						result.hostname = "";
						result.port = null;
						if (result.host) {
							if (srcPath[0] === "") srcPath[0] = result.host;
							else srcPath.unshift(result.host);
						}
						result.host = "";
						if (relative.protocol) {
							relative.hostname = null;
							relative.port = null;
							if (relative.host) {
								if (relPath[0] === "")
									relPath[0] = relative.host;
								else relPath.unshift(relative.host);
							}
							relative.host = null;
						}
						mustEndAbs =
							mustEndAbs &&
							(relPath[0] === "" || srcPath[0] === "");
					}

					if (isRelAbs) {
						// it's absolute.
						result.host =
							relative.host || relative.host === ""
								? relative.host
								: result.host;
						result.hostname =
							relative.hostname || relative.hostname === ""
								? relative.hostname
								: result.hostname;
						result.search = relative.search;
						result.query = relative.query;
						srcPath = relPath;
						// fall through to the dot-handling below.
					} else if (relPath.length) {
						// it's relative
						// throw away the existing file, and take the new path instead.
						if (!srcPath) srcPath = [];
						srcPath.pop();
						srcPath = srcPath.concat(relPath);
						result.search = relative.search;
						result.query = relative.query;
					} else if (!util.isNullOrUndefined(relative.search)) {
						// just pull out the search.
						// like href='?foo'.
						// Put this after the other two cases because it simplifies the booleans
						if (psychotic) {
							result.hostname = result.host = srcPath.shift();
							//occationaly the auth can get stuck only in host
							//this especially happens in cases like
							//url.resolveObject('mailto:local1@domain1', 'local2@domain2')
							var authInHost =
								result.host && result.host.indexOf("@") > 0
									? result.host.split("@")
									: false;
							if (authInHost) {
								result.auth = authInHost.shift();
								result.host = result.hostname = authInHost.shift();
							}
						}
						result.search = relative.search;
						result.query = relative.query;
						//to support http.request
						if (
							!util.isNull(result.pathname) ||
							!util.isNull(result.search)
						) {
							result.path =
								(result.pathname ? result.pathname : "") +
								(result.search ? result.search : "");
						}
						result.href = result.format();
						return result;
					}

					if (!srcPath.length) {
						// no path at all.  easy.
						// we've already handled the other stuff above.
						result.pathname = null;
						//to support http.request
						if (result.search) {
							result.path = "/" + result.search;
						} else {
							result.path = null;
						}
						result.href = result.format();
						return result;
					}

					// if a url ENDs in . or .., then it must get a trailing slash.
					// however, if it ends in anything else non-slashy,
					// then it must NOT get a trailing slash.
					var last = srcPath.slice(-1)[0];
					var hasTrailingSlash =
						((result.host || relative.host || srcPath.length > 1) &&
							(last === "." || last === "..")) ||
						last === "";

					// strip single dots, resolve double dots to parent dir
					// if the path tries to go above the root, `up` ends up > 0
					var up = 0;
					for (var i = srcPath.length; i >= 0; i--) {
						last = srcPath[i];
						if (last === ".") {
							srcPath.splice(i, 1);
						} else if (last === "..") {
							srcPath.splice(i, 1);
							up++;
						} else if (up) {
							srcPath.splice(i, 1);
							up--;
						}
					}

					// if the path is allowed to go above the root, restore leading ..s
					if (!mustEndAbs && !removeAllDots) {
						for (; up--; up) {
							srcPath.unshift("..");
						}
					}

					if (
						mustEndAbs &&
						srcPath[0] !== "" &&
						(!srcPath[0] || srcPath[0].charAt(0) !== "/")
					) {
						srcPath.unshift("");
					}

					if (
						hasTrailingSlash &&
						srcPath.join("/").substr(-1) !== "/"
					) {
						srcPath.push("");
					}

					var isAbsolute =
						srcPath[0] === "" ||
						(srcPath[0] && srcPath[0].charAt(0) === "/");

					// put the host back
					if (psychotic) {
						result.hostname = result.host = isAbsolute
							? ""
							: srcPath.length
							? srcPath.shift()
							: "";
						//occationaly the auth can get stuck only in host
						//this especially happens in cases like
						//url.resolveObject('mailto:local1@domain1', 'local2@domain2')
						var authInHost =
							result.host && result.host.indexOf("@") > 0
								? result.host.split("@")
								: false;
						if (authInHost) {
							result.auth = authInHost.shift();
							result.host = result.hostname = authInHost.shift();
						}
					}

					mustEndAbs = mustEndAbs || (result.host && srcPath.length);

					if (mustEndAbs && !isAbsolute) {
						srcPath.unshift("");
					}

					if (!srcPath.length) {
						result.pathname = null;
						result.path = null;
					} else {
						result.pathname = srcPath.join("/");
					}

					//to support request.http
					if (
						!util.isNull(result.pathname) ||
						!util.isNull(result.search)
					) {
						result.path =
							(result.pathname ? result.pathname : "") +
							(result.search ? result.search : "");
					}
					result.auth = relative.auth || result.auth;
					result.slashes = result.slashes || relative.slashes;
					result.href = result.format();
					return result;
				};

				Url.prototype.parseHost = function() {
					var host = this.host;
					var port = portPattern.exec(host);
					if (port) {
						port = port[0];
						if (port !== ":") {
							this.port = port.substr(1);
						}
						host = host.substr(0, host.length - port.length);
					}
					if (host) this.hostname = host;
				};

				/***/
			},

		/***/ "./node_modules/url/util.js":
			/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";

				module.exports = {
					isString: function(arg) {
						return typeof arg === "string";
					},
					isObject: function(arg) {
						return typeof arg === "object" && arg !== null;
					},
					isNull: function(arg) {
						return arg === null;
					},
					isNullOrUndefined: function(arg) {
						return arg == null;
					},
				};

				/***/
			},

		/***/ "./node_modules/util-deprecate/browser.js":
			/*!************************************************!*\
  !*** ./node_modules/util-deprecate/browser.js ***!
  \************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(global) {
					/**
					 * Module exports.
					 */

					module.exports = deprecate;

					/**
					 * Mark that a method should not be used.
					 * Returns a modified function which warns once by default.
					 *
					 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
					 *
					 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
					 * will throw an Error when invoked.
					 *
					 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
					 * will invoke `console.trace()` instead of `console.error()`.
					 *
					 * @param {Function} fn - the function to deprecate
					 * @param {String} msg - the string to print to the console when `fn` is invoked
					 * @returns {Function} a new "deprecated" version of `fn`
					 * @api public
					 */

					function deprecate(fn, msg) {
						if (config("noDeprecation")) {
							return fn;
						}

						var warned = false;
						function deprecated() {
							if (!warned) {
								if (config("throwDeprecation")) {
									throw new Error(msg);
								} else if (config("traceDeprecation")) {
									console.trace(msg);
								} else {
									console.warn(msg);
								}
								warned = true;
							}
							return fn.apply(this, arguments);
						}

						return deprecated;
					}

					/**
					 * Checks `localStorage` for boolean values for the given `name`.
					 *
					 * @param {String} name
					 * @returns {Boolean}
					 * @api private
					 */

					function config(name) {
						// accessing global.localStorage can trigger a DOMException in sandboxed iframes
						try {
							if (!global.localStorage) return false;
						} catch (_) {
							return false;
						}
						var val = global.localStorage[name];
						if (null == val) return false;
						return String(val).toLowerCase() === "true";
					}

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/util/support/isBufferBrowser.js":
			/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				module.exports = function isBuffer(arg) {
					return (
						arg &&
						typeof arg === "object" &&
						typeof arg.copy === "function" &&
						typeof arg.fill === "function" &&
						typeof arg.readUInt8 === "function"
					);
				};

				/***/
			},

		/***/ "./node_modules/util/util.js":
			/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(process) {
					// Copyright Joyent, Inc. and other Node contributors.
					//
					// Permission is hereby granted, free of charge, to any person obtaining a
					// copy of this software and associated documentation files (the
					// "Software"), to deal in the Software without restriction, including
					// without limitation the rights to use, copy, modify, merge, publish,
					// distribute, sublicense, and/or sell copies of the Software, and to permit
					// persons to whom the Software is furnished to do so, subject to the
					// following conditions:
					//
					// The above copyright notice and this permission notice shall be included
					// in all copies or substantial portions of the Software.
					//
					// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
					// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
					// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
					// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
					// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
					// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
					// USE OR OTHER DEALINGS IN THE SOFTWARE.

					var getOwnPropertyDescriptors =
						Object.getOwnPropertyDescriptors ||
						function getOwnPropertyDescriptors(obj) {
							var keys = Object.keys(obj);
							var descriptors = {};
							for (var i = 0; i < keys.length; i++) {
								descriptors[
									keys[i]
								] = Object.getOwnPropertyDescriptor(
									obj,
									keys[i]
								);
							}
							return descriptors;
						};

					var formatRegExp = /%[sdj%]/g;
					exports.format = function(f) {
						if (!isString(f)) {
							var objects = [];
							for (var i = 0; i < arguments.length; i++) {
								objects.push(inspect(arguments[i]));
							}
							return objects.join(" ");
						}

						var i = 1;
						var args = arguments;
						var len = args.length;
						var str = String(f).replace(formatRegExp, function(x) {
							if (x === "%%") return "%";
							if (i >= len) return x;
							switch (x) {
								case "%s":
									return String(args[i++]);
								case "%d":
									return Number(args[i++]);
								case "%j":
									try {
										return JSON.stringify(args[i++]);
									} catch (_) {
										return "[Circular]";
									}
								default:
									return x;
							}
						});
						for (var x = args[i]; i < len; x = args[++i]) {
							if (isNull(x) || !isObject(x)) {
								str += " " + x;
							} else {
								str += " " + inspect(x);
							}
						}
						return str;
					};

					// Mark that a method should not be used.
					// Returns a modified function which warns once by default.
					// If --no-deprecation is set, then it is a no-op.
					exports.deprecate = function(fn, msg) {
						if (
							typeof process !== "undefined" &&
							process.noDeprecation === true
						) {
							return fn;
						}

						// Allow for deprecating things in the process of starting up.
						if (typeof process === "undefined") {
							return function() {
								return exports
									.deprecate(fn, msg)
									.apply(this, arguments);
							};
						}

						var warned = false;
						function deprecated() {
							if (!warned) {
								if (process.throwDeprecation) {
									throw new Error(msg);
								} else if (process.traceDeprecation) {
									console.trace(msg);
								} else {
									console.error(msg);
								}
								warned = true;
							}
							return fn.apply(this, arguments);
						}

						return deprecated;
					};

					var debugs = {};
					var debugEnviron;
					exports.debuglog = function(set) {
						if (isUndefined(debugEnviron))
							debugEnviron =
								Object({
									MIX_PUSHER_APP_CLUSTER: "mt1",
									MIX_PUSHER_APP_KEY: "",
									NODE_ENV: "development",
								}).NODE_DEBUG || "";
						set = set.toUpperCase();
						if (!debugs[set]) {
							if (
								new RegExp("\\b" + set + "\\b", "i").test(
									debugEnviron
								)
							) {
								var pid = process.pid;
								debugs[set] = function() {
									var msg = exports.format.apply(
										exports,
										arguments
									);
									console.error("%s %d: %s", set, pid, msg);
								};
							} else {
								debugs[set] = function() {};
							}
						}
						return debugs[set];
					};

					/**
					 * Echos the value of a value. Trys to print the value out
					 * in the best way possible given the different types.
					 *
					 * @param {Object} obj The object to print out.
					 * @param {Object} opts Optional options object that alters the output.
					 */
					/* legacy: obj, showHidden, depth, colors*/
					function inspect(obj, opts) {
						// default options
						var ctx = {
							seen: [],
							stylize: stylizeNoColor,
						};
						// legacy...
						if (arguments.length >= 3) ctx.depth = arguments[2];
						if (arguments.length >= 4) ctx.colors = arguments[3];
						if (isBoolean(opts)) {
							// legacy...
							ctx.showHidden = opts;
						} else if (opts) {
							// got an "options" object
							exports._extend(ctx, opts);
						}
						// set default options
						if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
						if (isUndefined(ctx.depth)) ctx.depth = 2;
						if (isUndefined(ctx.colors)) ctx.colors = false;
						if (isUndefined(ctx.customInspect))
							ctx.customInspect = true;
						if (ctx.colors) ctx.stylize = stylizeWithColor;
						return formatValue(ctx, obj, ctx.depth);
					}
					exports.inspect = inspect;

					// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
					inspect.colors = {
						bold: [1, 22],
						italic: [3, 23],
						underline: [4, 24],
						inverse: [7, 27],
						white: [37, 39],
						grey: [90, 39],
						black: [30, 39],
						blue: [34, 39],
						cyan: [36, 39],
						green: [32, 39],
						magenta: [35, 39],
						red: [31, 39],
						yellow: [33, 39],
					};

					// Don't use 'blue' not visible on cmd.exe
					inspect.styles = {
						special: "cyan",
						number: "yellow",
						boolean: "yellow",
						undefined: "grey",
						null: "bold",
						string: "green",
						date: "magenta",
						// "name": intentionally not styling
						regexp: "red",
					};

					function stylizeWithColor(str, styleType) {
						var style = inspect.styles[styleType];

						if (style) {
							return (
								"\u001b[" +
								inspect.colors[style][0] +
								"m" +
								str +
								"\u001b[" +
								inspect.colors[style][1] +
								"m"
							);
						} else {
							return str;
						}
					}

					function stylizeNoColor(str, styleType) {
						return str;
					}

					function arrayToHash(array) {
						var hash = {};

						array.forEach(function(val, idx) {
							hash[val] = true;
						});

						return hash;
					}

					function formatValue(ctx, value, recurseTimes) {
						// Provide a hook for user-specified inspect functions.
						// Check that value is an object with an inspect function on it
						if (
							ctx.customInspect &&
							value &&
							isFunction(value.inspect) &&
							// Filter out the util module, it's inspect function is special
							value.inspect !== exports.inspect &&
							// Also filter out any prototype objects using the circular check.
							!(
								value.constructor &&
								value.constructor.prototype === value
							)
						) {
							var ret = value.inspect(recurseTimes, ctx);
							if (!isString(ret)) {
								ret = formatValue(ctx, ret, recurseTimes);
							}
							return ret;
						}

						// Primitive types cannot have properties
						var primitive = formatPrimitive(ctx, value);
						if (primitive) {
							return primitive;
						}

						// Look up the keys of the object.
						var keys = Object.keys(value);
						var visibleKeys = arrayToHash(keys);

						if (ctx.showHidden) {
							keys = Object.getOwnPropertyNames(value);
						}

						// IE doesn't make error fields non-enumerable
						// http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
						if (
							isError(value) &&
							(keys.indexOf("message") >= 0 ||
								keys.indexOf("description") >= 0)
						) {
							return formatError(value);
						}

						// Some type of object without properties can be shortcutted.
						if (keys.length === 0) {
							if (isFunction(value)) {
								var name = value.name ? ": " + value.name : "";
								return ctx.stylize(
									"[Function" + name + "]",
									"special"
								);
							}
							if (isRegExp(value)) {
								return ctx.stylize(
									RegExp.prototype.toString.call(value),
									"regexp"
								);
							}
							if (isDate(value)) {
								return ctx.stylize(
									Date.prototype.toString.call(value),
									"date"
								);
							}
							if (isError(value)) {
								return formatError(value);
							}
						}

						var base = "",
							array = false,
							braces = ["{", "}"];

						// Make Array say that they are Array
						if (isArray(value)) {
							array = true;
							braces = ["[", "]"];
						}

						// Make functions say that they are functions
						if (isFunction(value)) {
							var n = value.name ? ": " + value.name : "";
							base = " [Function" + n + "]";
						}

						// Make RegExps say that they are RegExps
						if (isRegExp(value)) {
							base = " " + RegExp.prototype.toString.call(value);
						}

						// Make dates with properties first say the date
						if (isDate(value)) {
							base = " " + Date.prototype.toUTCString.call(value);
						}

						// Make error with message first say the error
						if (isError(value)) {
							base = " " + formatError(value);
						}

						if (
							keys.length === 0 &&
							(!array || value.length == 0)
						) {
							return braces[0] + base + braces[1];
						}

						if (recurseTimes < 0) {
							if (isRegExp(value)) {
								return ctx.stylize(
									RegExp.prototype.toString.call(value),
									"regexp"
								);
							} else {
								return ctx.stylize("[Object]", "special");
							}
						}

						ctx.seen.push(value);

						var output;
						if (array) {
							output = formatArray(
								ctx,
								value,
								recurseTimes,
								visibleKeys,
								keys
							);
						} else {
							output = keys.map(function(key) {
								return formatProperty(
									ctx,
									value,
									recurseTimes,
									visibleKeys,
									key,
									array
								);
							});
						}

						ctx.seen.pop();

						return reduceToSingleString(output, base, braces);
					}

					function formatPrimitive(ctx, value) {
						if (isUndefined(value))
							return ctx.stylize("undefined", "undefined");
						if (isString(value)) {
							var simple =
								"'" +
								JSON.stringify(value)
									.replace(/^"|"$/g, "")
									.replace(/'/g, "\\'")
									.replace(/\\"/g, '"') +
								"'";
							return ctx.stylize(simple, "string");
						}
						if (isNumber(value))
							return ctx.stylize("" + value, "number");
						if (isBoolean(value))
							return ctx.stylize("" + value, "boolean");
						// For some reason typeof null is "object", so special case here.
						if (isNull(value)) return ctx.stylize("null", "null");
					}

					function formatError(value) {
						return "[" + Error.prototype.toString.call(value) + "]";
					}

					function formatArray(
						ctx,
						value,
						recurseTimes,
						visibleKeys,
						keys
					) {
						var output = [];
						for (var i = 0, l = value.length; i < l; ++i) {
							if (hasOwnProperty(value, String(i))) {
								output.push(
									formatProperty(
										ctx,
										value,
										recurseTimes,
										visibleKeys,
										String(i),
										true
									)
								);
							} else {
								output.push("");
							}
						}
						keys.forEach(function(key) {
							if (!key.match(/^\d+$/)) {
								output.push(
									formatProperty(
										ctx,
										value,
										recurseTimes,
										visibleKeys,
										key,
										true
									)
								);
							}
						});
						return output;
					}

					function formatProperty(
						ctx,
						value,
						recurseTimes,
						visibleKeys,
						key,
						array
					) {
						var name, str, desc;
						desc = Object.getOwnPropertyDescriptor(value, key) || {
							value: value[key],
						};
						if (desc.get) {
							if (desc.set) {
								str = ctx.stylize("[Getter/Setter]", "special");
							} else {
								str = ctx.stylize("[Getter]", "special");
							}
						} else {
							if (desc.set) {
								str = ctx.stylize("[Setter]", "special");
							}
						}
						if (!hasOwnProperty(visibleKeys, key)) {
							name = "[" + key + "]";
						}
						if (!str) {
							if (ctx.seen.indexOf(desc.value) < 0) {
								if (isNull(recurseTimes)) {
									str = formatValue(ctx, desc.value, null);
								} else {
									str = formatValue(
										ctx,
										desc.value,
										recurseTimes - 1
									);
								}
								if (str.indexOf("\n") > -1) {
									if (array) {
										str = str
											.split("\n")
											.map(function(line) {
												return "  " + line;
											})
											.join("\n")
											.substr(2);
									} else {
										str =
											"\n" +
											str
												.split("\n")
												.map(function(line) {
													return "   " + line;
												})
												.join("\n");
									}
								}
							} else {
								str = ctx.stylize("[Circular]", "special");
							}
						}
						if (isUndefined(name)) {
							if (array && key.match(/^\d+$/)) {
								return str;
							}
							name = JSON.stringify("" + key);
							if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
								name = name.substr(1, name.length - 2);
								name = ctx.stylize(name, "name");
							} else {
								name = name
									.replace(/'/g, "\\'")
									.replace(/\\"/g, '"')
									.replace(/(^"|"$)/g, "'");
								name = ctx.stylize(name, "string");
							}
						}

						return name + ": " + str;
					}

					function reduceToSingleString(output, base, braces) {
						var numLinesEst = 0;
						var length = output.reduce(function(prev, cur) {
							numLinesEst++;
							if (cur.indexOf("\n") >= 0) numLinesEst++;
							return (
								prev +
								cur.replace(/\u001b\[\d\d?m/g, "").length +
								1
							);
						}, 0);

						if (length > 60) {
							return (
								braces[0] +
								(base === "" ? "" : base + "\n ") +
								" " +
								output.join(",\n  ") +
								" " +
								braces[1]
							);
						}

						return (
							braces[0] +
							base +
							" " +
							output.join(", ") +
							" " +
							braces[1]
						);
					}

					// NOTE: These type checking functions intentionally don't use `instanceof`
					// because it is fragile and can be easily faked with `Object.create()`.
					function isArray(ar) {
						return Array.isArray(ar);
					}
					exports.isArray = isArray;

					function isBoolean(arg) {
						return typeof arg === "boolean";
					}
					exports.isBoolean = isBoolean;

					function isNull(arg) {
						return arg === null;
					}
					exports.isNull = isNull;

					function isNullOrUndefined(arg) {
						return arg == null;
					}
					exports.isNullOrUndefined = isNullOrUndefined;

					function isNumber(arg) {
						return typeof arg === "number";
					}
					exports.isNumber = isNumber;

					function isString(arg) {
						return typeof arg === "string";
					}
					exports.isString = isString;

					function isSymbol(arg) {
						return typeof arg === "symbol";
					}
					exports.isSymbol = isSymbol;

					function isUndefined(arg) {
						return arg === void 0;
					}
					exports.isUndefined = isUndefined;

					function isRegExp(re) {
						return (
							isObject(re) &&
							objectToString(re) === "[object RegExp]"
						);
					}
					exports.isRegExp = isRegExp;

					function isObject(arg) {
						return typeof arg === "object" && arg !== null;
					}
					exports.isObject = isObject;

					function isDate(d) {
						return (
							isObject(d) && objectToString(d) === "[object Date]"
						);
					}
					exports.isDate = isDate;

					function isError(e) {
						return (
							isObject(e) &&
							(objectToString(e) === "[object Error]" ||
								e instanceof Error)
						);
					}
					exports.isError = isError;

					function isFunction(arg) {
						return typeof arg === "function";
					}
					exports.isFunction = isFunction;

					function isPrimitive(arg) {
						return (
							arg === null ||
							typeof arg === "boolean" ||
							typeof arg === "number" ||
							typeof arg === "string" ||
							typeof arg === "symbol" || // ES6 symbol
							typeof arg === "undefined"
						);
					}
					exports.isPrimitive = isPrimitive;

					exports.isBuffer = __webpack_require__(
						/*! ./support/isBuffer */ "./node_modules/util/support/isBufferBrowser.js"
					);

					function objectToString(o) {
						return Object.prototype.toString.call(o);
					}

					function pad(n) {
						return n < 10 ? "0" + n.toString(10) : n.toString(10);
					}

					var months = [
						"Jan",
						"Feb",
						"Mar",
						"Apr",
						"May",
						"Jun",
						"Jul",
						"Aug",
						"Sep",
						"Oct",
						"Nov",
						"Dec",
					];

					// 26 Feb 16:19:34
					function timestamp() {
						var d = new Date();
						var time = [
							pad(d.getHours()),
							pad(d.getMinutes()),
							pad(d.getSeconds()),
						].join(":");
						return [d.getDate(), months[d.getMonth()], time].join(
							" "
						);
					}

					// log is just a thin wrapper to console.log that prepends a timestamp
					exports.log = function() {
						console.log(
							"%s - %s",
							timestamp(),
							exports.format.apply(exports, arguments)
						);
					};

					/**
					 * Inherit the prototype methods from one constructor into another.
					 *
					 * The Function.prototype.inherits from lang.js rewritten as a standalone
					 * function (not on Function.prototype). NOTE: If this file is to be loaded
					 * during bootstrapping this function needs to be rewritten using some native
					 * functions as prototype setup using normal JavaScript does not work as
					 * expected during bootstrapping (see mirror.js in r114903).
					 *
					 * @param {function} ctor Constructor function which needs to inherit the
					 *     prototype.
					 * @param {function} superCtor Constructor function to inherit prototype from.
					 */
					exports.inherits = __webpack_require__(
						/*! inherits */ "./node_modules/inherits/inherits_browser.js"
					);

					exports._extend = function(origin, add) {
						// Don't do anything if add isn't an object
						if (!add || !isObject(add)) return origin;

						var keys = Object.keys(add);
						var i = keys.length;
						while (i--) {
							origin[keys[i]] = add[keys[i]];
						}
						return origin;
					};

					function hasOwnProperty(obj, prop) {
						return Object.prototype.hasOwnProperty.call(obj, prop);
					}

					var kCustomPromisifiedSymbol =
						typeof Symbol !== "undefined"
							? Symbol("util.promisify.custom")
							: undefined;

					exports.promisify = function promisify(original) {
						if (typeof original !== "function")
							throw new TypeError(
								'The "original" argument must be of type Function'
							);

						if (
							kCustomPromisifiedSymbol &&
							original[kCustomPromisifiedSymbol]
						) {
							var fn = original[kCustomPromisifiedSymbol];
							if (typeof fn !== "function") {
								throw new TypeError(
									'The "util.promisify.custom" argument must be of type Function'
								);
							}
							Object.defineProperty(
								fn,
								kCustomPromisifiedSymbol,
								{
									value: fn,
									enumerable: false,
									writable: false,
									configurable: true,
								}
							);
							return fn;
						}

						function fn() {
							var promiseResolve, promiseReject;
							var promise = new Promise(function(
								resolve,
								reject
							) {
								promiseResolve = resolve;
								promiseReject = reject;
							});

							var args = [];
							for (var i = 0; i < arguments.length; i++) {
								args.push(arguments[i]);
							}
							args.push(function(err, value) {
								if (err) {
									promiseReject(err);
								} else {
									promiseResolve(value);
								}
							});

							try {
								original.apply(this, args);
							} catch (err) {
								promiseReject(err);
							}

							return promise;
						}

						Object.setPrototypeOf(
							fn,
							Object.getPrototypeOf(original)
						);

						if (kCustomPromisifiedSymbol)
							Object.defineProperty(
								fn,
								kCustomPromisifiedSymbol,
								{
									value: fn,
									enumerable: false,
									writable: false,
									configurable: true,
								}
							);
						return Object.defineProperties(
							fn,
							getOwnPropertyDescriptors(original)
						);
					};

					exports.promisify.custom = kCustomPromisifiedSymbol;

					function callbackifyOnRejected(reason, cb) {
						// `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
						// Because `null` is a special error value in callbacks which means "no error
						// occurred", we error-wrap so the callback consumer can distinguish between
						// "the promise rejected with null" or "the promise fulfilled with undefined".
						if (!reason) {
							var newReason = new Error(
								"Promise was rejected with a falsy value"
							);
							newReason.reason = reason;
							reason = newReason;
						}
						return cb(reason);
					}

					function callbackify(original) {
						if (typeof original !== "function") {
							throw new TypeError(
								'The "original" argument must be of type Function'
							);
						}

						// We DO NOT return the promise as it gives the user a false sense that
						// the promise is actually somehow related to the callback's execution
						// and that the callback throwing will reject the promise.
						function callbackified() {
							var args = [];
							for (var i = 0; i < arguments.length; i++) {
								args.push(arguments[i]);
							}

							var maybeCb = args.pop();
							if (typeof maybeCb !== "function") {
								throw new TypeError(
									"The last argument must be of type Function"
								);
							}
							var self = this;
							var cb = function() {
								return maybeCb.apply(self, arguments);
							};
							// In true node style we process the callback on `nextTick` with all the
							// implications (stack, `uncaughtException`, `async_hooks`)
							original.apply(this, args).then(
								function(ret) {
									process.nextTick(cb, null, ret);
								},
								function(rej) {
									process.nextTick(
										callbackifyOnRejected,
										rej,
										cb
									);
								}
							);
						}

						Object.setPrototypeOf(
							callbackified,
							Object.getPrototypeOf(original)
						);
						Object.defineProperties(
							callbackified,
							getOwnPropertyDescriptors(original)
						);
						return callbackified;
					}
					exports.callbackify = callbackify;

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../process/browser.js */ "./node_modules/process/browser.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/ExampleComponent.vue?vue&type=template&id=299e239e&":
			/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/ExampleComponent.vue?vue&type=template&id=299e239e& ***!
  \*******************************************************************************************************************************************************************************************************************/
			/*! exports provided: render, staticRenderFns */
			/***/ function(module, __webpack_exports__, __webpack_require__) {
				"use strict";
				__webpack_require__.r(__webpack_exports__);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"render",
					function() {
						return render;
					}
				);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"staticRenderFns",
					function() {
						return staticRenderFns;
					}
				);
				var render = function() {
					var _vm = this;
					var _h = _vm.$createElement;
					var _c = _vm._self._c || _h;
					return _vm._m(0);
				};
				var staticRenderFns = [
					function() {
						var _vm = this;
						var _h = _vm.$createElement;
						var _c = _vm._self._c || _h;
						return _c("div", {staticClass: "container"}, [
							_c(
								"div",
								{staticClass: "row justify-content-center"},
								[
									_c("div", {staticClass: "col-md-8"}, [
										_c("div", {staticClass: "card"}, [
											_c(
												"div",
												{staticClass: "card-header"},
												[_vm._v("Example Component")]
											),
											_vm._v(" "),
											_c(
												"div",
												{staticClass: "card-body"},
												[
													_vm._v(
														"\n                    I'm an example component.\n                "
													),
												]
											),
										]),
									]),
								]
							),
						]);
					},
				];
				render._withStripped = true;

				/***/
			},

		/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
			/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
			/*! exports provided: default */
			/***/ function(module, __webpack_exports__, __webpack_require__) {
				"use strict";
				__webpack_require__.r(__webpack_exports__);
				/* harmony export (binding) */ __webpack_require__.d(
					__webpack_exports__,
					"default",
					function() {
						return normalizeComponent;
					}
				);
				/* globals __VUE_SSR_CONTEXT__ */

				// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
				// This module is a runtime utility for cleaner component module output and will
				// be included in the final webpack user bundle.

				function normalizeComponent(
					scriptExports,
					render,
					staticRenderFns,
					functionalTemplate,
					injectStyles,
					scopeId,
					moduleIdentifier /* server only */,
					shadowMode /* vue-cli only */
				) {
					// Vue.extend constructor export interop
					var options =
						typeof scriptExports === "function"
							? scriptExports.options
							: scriptExports;

					// render functions
					if (render) {
						options.render = render;
						options.staticRenderFns = staticRenderFns;
						options._compiled = true;
					}

					// functional template
					if (functionalTemplate) {
						options.functional = true;
					}

					// scopedId
					if (scopeId) {
						options._scopeId = "data-v-" + scopeId;
					}

					var hook;
					if (moduleIdentifier) {
						// server build
						hook = function(context) {
							// 2.3 injection
							context =
								context || // cached call
								(this.$vnode && this.$vnode.ssrContext) || // stateful
								(this.parent &&
									this.parent.$vnode &&
									this.parent.$vnode.ssrContext); // functional
							// 2.2 with runInNewContext: true
							if (
								!context &&
								typeof __VUE_SSR_CONTEXT__ !== "undefined"
							) {
								context = __VUE_SSR_CONTEXT__;
							}
							// inject component styles
							if (injectStyles) {
								injectStyles.call(this, context);
							}
							// register component module identifier for async chunk inferrence
							if (context && context._registeredComponents) {
								context._registeredComponents.add(
									moduleIdentifier
								);
							}
						};
						// used by ssr in case component is cached and beforeCreate
						// never gets called
						options._ssrRegister = hook;
					} else if (injectStyles) {
						hook = shadowMode
							? function() {
									injectStyles.call(
										this,
										this.$root.$options.shadowRoot
									);
							  }
							: injectStyles;
					}

					if (hook) {
						if (options.functional) {
							// for template-only hot-reload because in that case the render fn doesn't
							// go through the normalizer
							options._injectStyles = hook;
							// register for functioal component in vue file
							var originalRender = options.render;
							options.render = function renderWithStyleInjection(
								h,
								context
							) {
								hook.call(context);
								return originalRender(h, context);
							};
						} else {
							// inject component registration as beforeCreate hook
							var existing = options.beforeCreate;
							options.beforeCreate = existing
								? [].concat(existing, hook)
								: [hook];
						}
					}

					return {
						exports: scriptExports,
						options: options,
					};
				}

				/***/
			},

		/***/ "./node_modules/vue/dist/vue.common.dev.js":
			/*!*************************************************!*\
  !*** ./node_modules/vue/dist/vue.common.dev.js ***!
  \*************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				"use strict";
				/* WEBPACK VAR INJECTION */ (function(global, setImmediate) {
					/*!
					 * Vue.js v2.6.10
					 * (c) 2014-2019 Evan You
					 * Released under the MIT License.
					 */

					/*  */

					var emptyObject = Object.freeze({});

					// These helpers produce better VM code in JS engines due to their
					// explicitness and function inlining.
					function isUndef(v) {
						return v === undefined || v === null;
					}

					function isDef(v) {
						return v !== undefined && v !== null;
					}

					function isTrue(v) {
						return v === true;
					}

					function isFalse(v) {
						return v === false;
					}

					/**
					 * Check if value is primitive.
					 */
					function isPrimitive(value) {
						return (
							typeof value === "string" ||
							typeof value === "number" ||
							// $flow-disable-line
							typeof value === "symbol" ||
							typeof value === "boolean"
						);
					}

					/**
					 * Quick object check - this is primarily used to tell
					 * Objects from primitive values when we know the value
					 * is a JSON-compliant type.
					 */
					function isObject(obj) {
						return obj !== null && typeof obj === "object";
					}

					/**
					 * Get the raw type string of a value, e.g., [object Object].
					 */
					var _toString = Object.prototype.toString;

					function toRawType(value) {
						return _toString.call(value).slice(8, -1);
					}

					/**
					 * Strict object type check. Only returns true
					 * for plain JavaScript objects.
					 */
					function isPlainObject(obj) {
						return _toString.call(obj) === "[object Object]";
					}

					function isRegExp(v) {
						return _toString.call(v) === "[object RegExp]";
					}

					/**
					 * Check if val is a valid array index.
					 */
					function isValidArrayIndex(val) {
						var n = parseFloat(String(val));
						return n >= 0 && Math.floor(n) === n && isFinite(val);
					}

					function isPromise(val) {
						return (
							isDef(val) &&
							typeof val.then === "function" &&
							typeof val.catch === "function"
						);
					}

					/**
					 * Convert a value to a string that is actually rendered.
					 */
					function toString(val) {
						return val == null
							? ""
							: Array.isArray(val) ||
							  (isPlainObject(val) && val.toString === _toString)
							? JSON.stringify(val, null, 2)
							: String(val);
					}

					/**
					 * Convert an input value to a number for persistence.
					 * If the conversion fails, return original string.
					 */
					function toNumber(val) {
						var n = parseFloat(val);
						return isNaN(n) ? val : n;
					}

					/**
					 * Make a map and return a function for checking if a key
					 * is in that map.
					 */
					function makeMap(str, expectsLowerCase) {
						var map = Object.create(null);
						var list = str.split(",");
						for (var i = 0; i < list.length; i++) {
							map[list[i]] = true;
						}
						return expectsLowerCase
							? function(val) {
									return map[val.toLowerCase()];
							  }
							: function(val) {
									return map[val];
							  };
					}

					/**
					 * Check if a tag is a built-in tag.
					 */
					var isBuiltInTag = makeMap("slot,component", true);

					/**
					 * Check if an attribute is a reserved attribute.
					 */
					var isReservedAttribute = makeMap(
						"key,ref,slot,slot-scope,is"
					);

					/**
					 * Remove an item from an array.
					 */
					function remove(arr, item) {
						if (arr.length) {
							var index = arr.indexOf(item);
							if (index > -1) {
								return arr.splice(index, 1);
							}
						}
					}

					/**
					 * Check whether an object has the property.
					 */
					var hasOwnProperty = Object.prototype.hasOwnProperty;
					function hasOwn(obj, key) {
						return hasOwnProperty.call(obj, key);
					}

					/**
					 * Create a cached version of a pure function.
					 */
					function cached(fn) {
						var cache = Object.create(null);
						return function cachedFn(str) {
							var hit = cache[str];
							return hit || (cache[str] = fn(str));
						};
					}

					/**
					 * Camelize a hyphen-delimited string.
					 */
					var camelizeRE = /-(\w)/g;
					var camelize = cached(function(str) {
						return str.replace(camelizeRE, function(_, c) {
							return c ? c.toUpperCase() : "";
						});
					});

					/**
					 * Capitalize a string.
					 */
					var capitalize = cached(function(str) {
						return str.charAt(0).toUpperCase() + str.slice(1);
					});

					/**
					 * Hyphenate a camelCase string.
					 */
					var hyphenateRE = /\B([A-Z])/g;
					var hyphenate = cached(function(str) {
						return str.replace(hyphenateRE, "-$1").toLowerCase();
					});

					/**
					 * Simple bind polyfill for environments that do not support it,
					 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
					 * since native bind is now performant enough in most browsers.
					 * But removing it would mean breaking code that was able to run in
					 * PhantomJS 1.x, so this must be kept for backward compatibility.
					 */

					/* istanbul ignore next */
					function polyfillBind(fn, ctx) {
						function boundFn(a) {
							var l = arguments.length;
							return l
								? l > 1
									? fn.apply(ctx, arguments)
									: fn.call(ctx, a)
								: fn.call(ctx);
						}

						boundFn._length = fn.length;
						return boundFn;
					}

					function nativeBind(fn, ctx) {
						return fn.bind(ctx);
					}

					var bind = Function.prototype.bind
						? nativeBind
						: polyfillBind;

					/**
					 * Convert an Array-like object to a real Array.
					 */
					function toArray(list, start) {
						start = start || 0;
						var i = list.length - start;
						var ret = new Array(i);
						while (i--) {
							ret[i] = list[i + start];
						}
						return ret;
					}

					/**
					 * Mix properties into target object.
					 */
					function extend(to, _from) {
						for (var key in _from) {
							to[key] = _from[key];
						}
						return to;
					}

					/**
					 * Merge an Array of Objects into a single Object.
					 */
					function toObject(arr) {
						var res = {};
						for (var i = 0; i < arr.length; i++) {
							if (arr[i]) {
								extend(res, arr[i]);
							}
						}
						return res;
					}

					/* eslint-disable no-unused-vars */

					/**
					 * Perform no operation.
					 * Stubbing args to make Flow happy without leaving useless transpiled code
					 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
					 */
					function noop(a, b, c) {}

					/**
					 * Always return false.
					 */
					var no = function(a, b, c) {
						return false;
					};

					/* eslint-enable no-unused-vars */

					/**
					 * Return the same value.
					 */
					var identity = function(_) {
						return _;
					};

					/**
					 * Generate a string containing static keys from compiler modules.
					 */
					function genStaticKeys(modules) {
						return modules
							.reduce(function(keys, m) {
								return keys.concat(m.staticKeys || []);
							}, [])
							.join(",");
					}

					/**
					 * Check if two values are loosely equal - that is,
					 * if they are plain objects, do they have the same shape?
					 */
					function looseEqual(a, b) {
						if (a === b) {
							return true;
						}
						var isObjectA = isObject(a);
						var isObjectB = isObject(b);
						if (isObjectA && isObjectB) {
							try {
								var isArrayA = Array.isArray(a);
								var isArrayB = Array.isArray(b);
								if (isArrayA && isArrayB) {
									return (
										a.length === b.length &&
										a.every(function(e, i) {
											return looseEqual(e, b[i]);
										})
									);
								} else if (
									a instanceof Date &&
									b instanceof Date
								) {
									return a.getTime() === b.getTime();
								} else if (!isArrayA && !isArrayB) {
									var keysA = Object.keys(a);
									var keysB = Object.keys(b);
									return (
										keysA.length === keysB.length &&
										keysA.every(function(key) {
											return looseEqual(a[key], b[key]);
										})
									);
								} else {
									/* istanbul ignore next */
									return false;
								}
							} catch (e) {
								/* istanbul ignore next */
								return false;
							}
						} else if (!isObjectA && !isObjectB) {
							return String(a) === String(b);
						} else {
							return false;
						}
					}

					/**
					 * Return the first index at which a loosely equal value can be
					 * found in the array (if value is a plain object, the array must
					 * contain an object of the same shape), or -1 if it is not present.
					 */
					function looseIndexOf(arr, val) {
						for (var i = 0; i < arr.length; i++) {
							if (looseEqual(arr[i], val)) {
								return i;
							}
						}
						return -1;
					}

					/**
					 * Ensure a function is called only once.
					 */
					function once(fn) {
						var called = false;
						return function() {
							if (!called) {
								called = true;
								fn.apply(this, arguments);
							}
						};
					}

					var SSR_ATTR = "data-server-rendered";

					var ASSET_TYPES = ["component", "directive", "filter"];

					var LIFECYCLE_HOOKS = [
						"beforeCreate",
						"created",
						"beforeMount",
						"mounted",
						"beforeUpdate",
						"updated",
						"beforeDestroy",
						"destroyed",
						"activated",
						"deactivated",
						"errorCaptured",
						"serverPrefetch",
					];

					/*  */

					var config = {
						/**
						 * Option merge strategies (used in core/util/options)
						 */
						// $flow-disable-line
						optionMergeStrategies: Object.create(null),

						/**
						 * Whether to suppress warnings.
						 */
						silent: false,

						/**
						 * Show production mode tip message on boot?
						 */
						productionTip: "development" !== "production",

						/**
						 * Whether to enable devtools
						 */
						devtools: "development" !== "production",

						/**
						 * Whether to record perf
						 */
						performance: false,

						/**
						 * Error handler for watcher errors
						 */
						errorHandler: null,

						/**
						 * Warn handler for watcher warns
						 */
						warnHandler: null,

						/**
						 * Ignore certain custom elements
						 */
						ignoredElements: [],

						/**
						 * Custom user key aliases for v-on
						 */
						// $flow-disable-line
						keyCodes: Object.create(null),

						/**
						 * Check if a tag is reserved so that it cannot be registered as a
						 * component. This is platform-dependent and may be overwritten.
						 */
						isReservedTag: no,

						/**
						 * Check if an attribute is reserved so that it cannot be used as a component
						 * prop. This is platform-dependent and may be overwritten.
						 */
						isReservedAttr: no,

						/**
						 * Check if a tag is an unknown element.
						 * Platform-dependent.
						 */
						isUnknownElement: no,

						/**
						 * Get the namespace of an element
						 */
						getTagNamespace: noop,

						/**
						 * Parse the real tag name for the specific platform.
						 */
						parsePlatformTagName: identity,

						/**
						 * Check if an attribute must be bound using property, e.g. value
						 * Platform-dependent.
						 */
						mustUseProp: no,

						/**
						 * Perform updates asynchronously. Intended to be used by Vue Test Utils
						 * This will significantly reduce performance if set to false.
						 */
						async: true,

						/**
						 * Exposed for legacy reasons
						 */
						_lifecycleHooks: LIFECYCLE_HOOKS,
					};

					/*  */

					/**
					 * unicode letters used for parsing html tags, component names and property paths.
					 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
					 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
					 */
					var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

					/**
					 * Check if a string starts with $ or _
					 */
					function isReserved(str) {
						var c = (str + "").charCodeAt(0);
						return c === 0x24 || c === 0x5f;
					}

					/**
					 * Define a property.
					 */
					function def(obj, key, val, enumerable) {
						Object.defineProperty(obj, key, {
							value: val,
							enumerable: !!enumerable,
							writable: true,
							configurable: true,
						});
					}

					/**
					 * Parse simple path.
					 */
					var bailRE = new RegExp(
						"[^" + unicodeRegExp.source + ".$_\\d]"
					);
					function parsePath(path) {
						if (bailRE.test(path)) {
							return;
						}
						var segments = path.split(".");
						return function(obj) {
							for (var i = 0; i < segments.length; i++) {
								if (!obj) {
									return;
								}
								obj = obj[segments[i]];
							}
							return obj;
						};
					}

					/*  */

					// can we use __proto__?
					var hasProto = "__proto__" in {};

					// Browser environment sniffing
					var inBrowser = typeof window !== "undefined";
					var inWeex =
						typeof WXEnvironment !== "undefined" &&
						!!WXEnvironment.platform;
					var weexPlatform =
						inWeex && WXEnvironment.platform.toLowerCase();
					var UA =
						inBrowser && window.navigator.userAgent.toLowerCase();
					var isIE = UA && /msie|trident/.test(UA);
					var isIE9 = UA && UA.indexOf("msie 9.0") > 0;
					var isEdge = UA && UA.indexOf("edge/") > 0;
					var isAndroid =
						(UA && UA.indexOf("android") > 0) ||
						weexPlatform === "android";
					var isIOS =
						(UA && /iphone|ipad|ipod|ios/.test(UA)) ||
						weexPlatform === "ios";
					var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
					var isPhantomJS = UA && /phantomjs/.test(UA);
					var isFF = UA && UA.match(/firefox\/(\d+)/);

					// Firefox has a "watch" function on Object.prototype...
					var nativeWatch = {}.watch;

					var supportsPassive = false;
					if (inBrowser) {
						try {
							var opts = {};
							Object.defineProperty(opts, "passive", {
								get: function get() {
									/* istanbul ignore next */
									supportsPassive = true;
								},
							}); // https://github.com/facebook/flow/issues/285
							window.addEventListener("test-passive", null, opts);
						} catch (e) {}
					}

					// this needs to be lazy-evaled because vue may be required before
					// vue-server-renderer can set VUE_ENV
					var _isServer;
					var isServerRendering = function() {
						if (_isServer === undefined) {
							/* istanbul ignore if */
							if (
								!inBrowser &&
								!inWeex &&
								typeof global !== "undefined"
							) {
								// detect presence of vue-server-renderer and avoid
								// Webpack shimming the process
								_isServer =
									global["process"] &&
									global["process"].env.VUE_ENV === "server";
							} else {
								_isServer = false;
							}
						}
						return _isServer;
					};

					// detect devtools
					var devtools =
						inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

					/* istanbul ignore next */
					function isNative(Ctor) {
						return (
							typeof Ctor === "function" &&
							/native code/.test(Ctor.toString())
						);
					}

					var hasSymbol =
						typeof Symbol !== "undefined" &&
						isNative(Symbol) &&
						typeof Reflect !== "undefined" &&
						isNative(Reflect.ownKeys);

					var _Set; // $flow-disable-line
					/* istanbul ignore if */ if (
						typeof Set !== "undefined" &&
						isNative(Set)
					) {
						// use native Set when available.
						_Set = Set;
					} else {
						// a non-standard Set polyfill that only works with primitive keys.
						_Set = /*@__PURE__*/ (function() {
							function Set() {
								this.set = Object.create(null);
							}
							Set.prototype.has = function has(key) {
								return this.set[key] === true;
							};
							Set.prototype.add = function add(key) {
								this.set[key] = true;
							};
							Set.prototype.clear = function clear() {
								this.set = Object.create(null);
							};

							return Set;
						})();
					}

					/*  */

					var warn = noop;
					var tip = noop;
					var generateComponentTrace = noop; // work around flow check
					var formatComponentName = noop;

					{
						var hasConsole = typeof console !== "undefined";
						var classifyRE = /(?:^|[-_])(\w)/g;
						var classify = function(str) {
							return str
								.replace(classifyRE, function(c) {
									return c.toUpperCase();
								})
								.replace(/[-_]/g, "");
						};

						warn = function(msg, vm) {
							var trace = vm ? generateComponentTrace(vm) : "";

							if (config.warnHandler) {
								config.warnHandler.call(null, msg, vm, trace);
							} else if (hasConsole && !config.silent) {
								console.error("[Vue warn]: " + msg + trace);
							}
						};

						tip = function(msg, vm) {
							if (hasConsole && !config.silent) {
								console.warn(
									"[Vue tip]: " +
										msg +
										(vm ? generateComponentTrace(vm) : "")
								);
							}
						};

						formatComponentName = function(vm, includeFile) {
							if (vm.$root === vm) {
								return "<Root>";
							}
							var options =
								typeof vm === "function" && vm.cid != null
									? vm.options
									: vm._isVue
									? vm.$options || vm.constructor.options
									: vm;
							var name = options.name || options._componentTag;
							var file = options.__file;
							if (!name && file) {
								var match = file.match(/([^/\\]+)\.vue$/);
								name = match && match[1];
							}

							return (
								(name
									? "<" + classify(name) + ">"
									: "<Anonymous>") +
								(file && includeFile !== false
									? " at " + file
									: "")
							);
						};

						var repeat = function(str, n) {
							var res = "";
							while (n) {
								if (n % 2 === 1) {
									res += str;
								}
								if (n > 1) {
									str += str;
								}
								n >>= 1;
							}
							return res;
						};

						generateComponentTrace = function(vm) {
							if (vm._isVue && vm.$parent) {
								var tree = [];
								var currentRecursiveSequence = 0;
								while (vm) {
									if (tree.length > 0) {
										var last = tree[tree.length - 1];
										if (
											last.constructor === vm.constructor
										) {
											currentRecursiveSequence++;
											vm = vm.$parent;
											continue;
										} else if (
											currentRecursiveSequence > 0
										) {
											tree[tree.length - 1] = [
												last,
												currentRecursiveSequence,
											];
											currentRecursiveSequence = 0;
										}
									}
									tree.push(vm);
									vm = vm.$parent;
								}
								return (
									"\n\nfound in\n\n" +
									tree
										.map(function(vm, i) {
											return (
												"" +
												(i === 0
													? "---> "
													: repeat(" ", 5 + i * 2)) +
												(Array.isArray(vm)
													? formatComponentName(
															vm[0]
													  ) +
													  "... (" +
													  vm[1] +
													  " recursive calls)"
													: formatComponentName(vm))
											);
										})
										.join("\n")
								);
							} else {
								return (
									"\n\n(found in " +
									formatComponentName(vm) +
									")"
								);
							}
						};
					}

					/*  */

					var uid = 0;

					/**
					 * A dep is an observable that can have multiple
					 * directives subscribing to it.
					 */
					var Dep = function Dep() {
						this.id = uid++;
						this.subs = [];
					};

					Dep.prototype.addSub = function addSub(sub) {
						this.subs.push(sub);
					};

					Dep.prototype.removeSub = function removeSub(sub) {
						remove(this.subs, sub);
					};

					Dep.prototype.depend = function depend() {
						if (Dep.target) {
							Dep.target.addDep(this);
						}
					};

					Dep.prototype.notify = function notify() {
						// stabilize the subscriber list first
						var subs = this.subs.slice();
						if (!config.async) {
							// subs aren't sorted in scheduler if not running async
							// we need to sort them now to make sure they fire in correct
							// order
							subs.sort(function(a, b) {
								return a.id - b.id;
							});
						}
						for (var i = 0, l = subs.length; i < l; i++) {
							subs[i].update();
						}
					};

					// The current target watcher being evaluated.
					// This is globally unique because only one watcher
					// can be evaluated at a time.
					Dep.target = null;
					var targetStack = [];

					function pushTarget(target) {
						targetStack.push(target);
						Dep.target = target;
					}

					function popTarget() {
						targetStack.pop();
						Dep.target = targetStack[targetStack.length - 1];
					}

					/*  */

					var VNode = function VNode(
						tag,
						data,
						children,
						text,
						elm,
						context,
						componentOptions,
						asyncFactory
					) {
						this.tag = tag;
						this.data = data;
						this.children = children;
						this.text = text;
						this.elm = elm;
						this.ns = undefined;
						this.context = context;
						this.fnContext = undefined;
						this.fnOptions = undefined;
						this.fnScopeId = undefined;
						this.key = data && data.key;
						this.componentOptions = componentOptions;
						this.componentInstance = undefined;
						this.parent = undefined;
						this.raw = false;
						this.isStatic = false;
						this.isRootInsert = true;
						this.isComment = false;
						this.isCloned = false;
						this.isOnce = false;
						this.asyncFactory = asyncFactory;
						this.asyncMeta = undefined;
						this.isAsyncPlaceholder = false;
					};

					var prototypeAccessors = {child: {configurable: true}};

					// DEPRECATED: alias for componentInstance for backwards compat.
					/* istanbul ignore next */
					prototypeAccessors.child.get = function() {
						return this.componentInstance;
					};

					Object.defineProperties(
						VNode.prototype,
						prototypeAccessors
					);

					var createEmptyVNode = function(text) {
						if (text === void 0) text = "";

						var node = new VNode();
						node.text = text;
						node.isComment = true;
						return node;
					};

					function createTextVNode(val) {
						return new VNode(
							undefined,
							undefined,
							undefined,
							String(val)
						);
					}

					// optimized shallow clone
					// used for static nodes and slot nodes because they may be reused across
					// multiple renders, cloning them avoids errors when DOM manipulations rely
					// on their elm reference.
					function cloneVNode(vnode) {
						var cloned = new VNode(
							vnode.tag,
							vnode.data,
							// #7975
							// clone children array to avoid mutating original in case of cloning
							// a child.
							vnode.children && vnode.children.slice(),
							vnode.text,
							vnode.elm,
							vnode.context,
							vnode.componentOptions,
							vnode.asyncFactory
						);
						cloned.ns = vnode.ns;
						cloned.isStatic = vnode.isStatic;
						cloned.key = vnode.key;
						cloned.isComment = vnode.isComment;
						cloned.fnContext = vnode.fnContext;
						cloned.fnOptions = vnode.fnOptions;
						cloned.fnScopeId = vnode.fnScopeId;
						cloned.asyncMeta = vnode.asyncMeta;
						cloned.isCloned = true;
						return cloned;
					}

					/*
					 * not type checking this file because flow doesn't play well with
					 * dynamically accessing methods on Array prototype
					 */

					var arrayProto = Array.prototype;
					var arrayMethods = Object.create(arrayProto);

					var methodsToPatch = [
						"push",
						"pop",
						"shift",
						"unshift",
						"splice",
						"sort",
						"reverse",
					];

					/**
					 * Intercept mutating methods and emit events
					 */
					methodsToPatch.forEach(function(method) {
						// cache original method
						var original = arrayProto[method];
						def(arrayMethods, method, function mutator() {
							var args = [],
								len = arguments.length;
							while (len--) args[len] = arguments[len];

							var result = original.apply(this, args);
							var ob = this.__ob__;
							var inserted;
							switch (method) {
								case "push":
								case "unshift":
									inserted = args;
									break;
								case "splice":
									inserted = args.slice(2);
									break;
							}
							if (inserted) {
								ob.observeArray(inserted);
							}
							// notify change
							ob.dep.notify();
							return result;
						});
					});

					/*  */

					var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

					/**
					 * In some cases we may want to disable observation inside a component's
					 * update computation.
					 */
					var shouldObserve = true;

					function toggleObserving(value) {
						shouldObserve = value;
					}

					/**
					 * Observer class that is attached to each observed
					 * object. Once attached, the observer converts the target
					 * object's property keys into getter/setters that
					 * collect dependencies and dispatch updates.
					 */
					var Observer = function Observer(value) {
						this.value = value;
						this.dep = new Dep();
						this.vmCount = 0;
						def(value, "__ob__", this);
						if (Array.isArray(value)) {
							if (hasProto) {
								protoAugment(value, arrayMethods);
							} else {
								copyAugment(value, arrayMethods, arrayKeys);
							}
							this.observeArray(value);
						} else {
							this.walk(value);
						}
					};

					/**
					 * Walk through all properties and convert them into
					 * getter/setters. This method should only be called when
					 * value type is Object.
					 */
					Observer.prototype.walk = function walk(obj) {
						var keys = Object.keys(obj);
						for (var i = 0; i < keys.length; i++) {
							defineReactive$$1(obj, keys[i]);
						}
					};

					/**
					 * Observe a list of Array items.
					 */
					Observer.prototype.observeArray = function observeArray(
						items
					) {
						for (var i = 0, l = items.length; i < l; i++) {
							observe(items[i]);
						}
					};

					// helpers

					/**
					 * Augment a target Object or Array by intercepting
					 * the prototype chain using __proto__
					 */
					function protoAugment(target, src) {
						/* eslint-disable no-proto */
						target.__proto__ = src;
						/* eslint-enable no-proto */
					}

					/**
					 * Augment a target Object or Array by defining
					 * hidden properties.
					 */
					/* istanbul ignore next */
					function copyAugment(target, src, keys) {
						for (var i = 0, l = keys.length; i < l; i++) {
							var key = keys[i];
							def(target, key, src[key]);
						}
					}

					/**
					 * Attempt to create an observer instance for a value,
					 * returns the new observer if successfully observed,
					 * or the existing observer if the value already has one.
					 */
					function observe(value, asRootData) {
						if (!isObject(value) || value instanceof VNode) {
							return;
						}
						var ob;
						if (
							hasOwn(value, "__ob__") &&
							value.__ob__ instanceof Observer
						) {
							ob = value.__ob__;
						} else if (
							shouldObserve &&
							!isServerRendering() &&
							(Array.isArray(value) || isPlainObject(value)) &&
							Object.isExtensible(value) &&
							!value._isVue
						) {
							ob = new Observer(value);
						}
						if (asRootData && ob) {
							ob.vmCount++;
						}
						return ob;
					}

					/**
					 * Define a reactive property on an Object.
					 */
					function defineReactive$$1(
						obj,
						key,
						val,
						customSetter,
						shallow
					) {
						var dep = new Dep();

						var property = Object.getOwnPropertyDescriptor(
							obj,
							key
						);
						if (property && property.configurable === false) {
							return;
						}

						// cater for pre-defined getter/setters
						var getter = property && property.get;
						var setter = property && property.set;
						if ((!getter || setter) && arguments.length === 2) {
							val = obj[key];
						}

						var childOb = !shallow && observe(val);
						Object.defineProperty(obj, key, {
							enumerable: true,
							configurable: true,
							get: function reactiveGetter() {
								var value = getter ? getter.call(obj) : val;
								if (Dep.target) {
									dep.depend();
									if (childOb) {
										childOb.dep.depend();
										if (Array.isArray(value)) {
											dependArray(value);
										}
									}
								}
								return value;
							},
							set: function reactiveSetter(newVal) {
								var value = getter ? getter.call(obj) : val;
								/* eslint-disable no-self-compare */
								if (
									newVal === value ||
									(newVal !== newVal && value !== value)
								) {
									return;
								}
								/* eslint-enable no-self-compare */
								if (customSetter) {
									customSetter();
								}
								// #7981: for accessor properties without setter
								if (getter && !setter) {
									return;
								}
								if (setter) {
									setter.call(obj, newVal);
								} else {
									val = newVal;
								}
								childOb = !shallow && observe(newVal);
								dep.notify();
							},
						});
					}

					/**
					 * Set a property on an object. Adds the new property and
					 * triggers change notification if the property doesn't
					 * already exist.
					 */
					function set(target, key, val) {
						if (isUndef(target) || isPrimitive(target)) {
							warn(
								"Cannot set reactive property on undefined, null, or primitive value: " +
									target
							);
						}
						if (Array.isArray(target) && isValidArrayIndex(key)) {
							target.length = Math.max(target.length, key);
							target.splice(key, 1, val);
							return val;
						}
						if (key in target && !(key in Object.prototype)) {
							target[key] = val;
							return val;
						}
						var ob = target.__ob__;
						if (target._isVue || (ob && ob.vmCount)) {
							warn(
								"Avoid adding reactive properties to a Vue instance or its root $data " +
									"at runtime - declare it upfront in the data option."
							);
							return val;
						}
						if (!ob) {
							target[key] = val;
							return val;
						}
						defineReactive$$1(ob.value, key, val);
						ob.dep.notify();
						return val;
					}

					/**
					 * Delete a property and trigger change if necessary.
					 */
					function del(target, key) {
						if (isUndef(target) || isPrimitive(target)) {
							warn(
								"Cannot delete reactive property on undefined, null, or primitive value: " +
									target
							);
						}
						if (Array.isArray(target) && isValidArrayIndex(key)) {
							target.splice(key, 1);
							return;
						}
						var ob = target.__ob__;
						if (target._isVue || (ob && ob.vmCount)) {
							warn(
								"Avoid deleting properties on a Vue instance or its root $data " +
									"- just set it to null."
							);
							return;
						}
						if (!hasOwn(target, key)) {
							return;
						}
						delete target[key];
						if (!ob) {
							return;
						}
						ob.dep.notify();
					}

					/**
					 * Collect dependencies on array elements when the array is touched, since
					 * we cannot intercept array element access like property getters.
					 */
					function dependArray(value) {
						for (
							var e = void 0, i = 0, l = value.length;
							i < l;
							i++
						) {
							e = value[i];
							e && e.__ob__ && e.__ob__.dep.depend();
							if (Array.isArray(e)) {
								dependArray(e);
							}
						}
					}

					/*  */

					/**
					 * Option overwriting strategies are functions that handle
					 * how to merge a parent option value and a child option
					 * value into the final value.
					 */
					var strats = config.optionMergeStrategies;

					/**
					 * Options with restrictions
					 */
					{
						strats.el = strats.propsData = function(
							parent,
							child,
							vm,
							key
						) {
							if (!vm) {
								warn(
									'option "' +
										key +
										'" can only be used during instance ' +
										"creation with the `new` keyword."
								);
							}
							return defaultStrat(parent, child);
						};
					}

					/**
					 * Helper that recursively merges two data objects together.
					 */
					function mergeData(to, from) {
						if (!from) {
							return to;
						}
						var key, toVal, fromVal;

						var keys = hasSymbol
							? Reflect.ownKeys(from)
							: Object.keys(from);

						for (var i = 0; i < keys.length; i++) {
							key = keys[i];
							// in case the object is already observed...
							if (key === "__ob__") {
								continue;
							}
							toVal = to[key];
							fromVal = from[key];
							if (!hasOwn(to, key)) {
								set(to, key, fromVal);
							} else if (
								toVal !== fromVal &&
								isPlainObject(toVal) &&
								isPlainObject(fromVal)
							) {
								mergeData(toVal, fromVal);
							}
						}
						return to;
					}

					/**
					 * Data
					 */
					function mergeDataOrFn(parentVal, childVal, vm) {
						if (!vm) {
							// in a Vue.extend merge, both should be functions
							if (!childVal) {
								return parentVal;
							}
							if (!parentVal) {
								return childVal;
							}
							// when parentVal & childVal are both present,
							// we need to return a function that returns the
							// merged result of both functions... no need to
							// check if parentVal is a function here because
							// it has to be a function to pass previous merges.
							return function mergedDataFn() {
								return mergeData(
									typeof childVal === "function"
										? childVal.call(this, this)
										: childVal,
									typeof parentVal === "function"
										? parentVal.call(this, this)
										: parentVal
								);
							};
						} else {
							return function mergedInstanceDataFn() {
								// instance merge
								var instanceData =
									typeof childVal === "function"
										? childVal.call(vm, vm)
										: childVal;
								var defaultData =
									typeof parentVal === "function"
										? parentVal.call(vm, vm)
										: parentVal;
								if (instanceData) {
									return mergeData(instanceData, defaultData);
								} else {
									return defaultData;
								}
							};
						}
					}

					strats.data = function(parentVal, childVal, vm) {
						if (!vm) {
							if (childVal && typeof childVal !== "function") {
								warn(
									'The "data" option should be a function ' +
										"that returns a per-instance value in component " +
										"definitions.",
									vm
								);

								return parentVal;
							}
							return mergeDataOrFn(parentVal, childVal);
						}

						return mergeDataOrFn(parentVal, childVal, vm);
					};

					/**
					 * Hooks and props are merged as arrays.
					 */
					function mergeHook(parentVal, childVal) {
						var res = childVal
							? parentVal
								? parentVal.concat(childVal)
								: Array.isArray(childVal)
								? childVal
								: [childVal]
							: parentVal;
						return res ? dedupeHooks(res) : res;
					}

					function dedupeHooks(hooks) {
						var res = [];
						for (var i = 0; i < hooks.length; i++) {
							if (res.indexOf(hooks[i]) === -1) {
								res.push(hooks[i]);
							}
						}
						return res;
					}

					LIFECYCLE_HOOKS.forEach(function(hook) {
						strats[hook] = mergeHook;
					});

					/**
					 * Assets
					 *
					 * When a vm is present (instance creation), we need to do
					 * a three-way merge between constructor options, instance
					 * options and parent options.
					 */
					function mergeAssets(parentVal, childVal, vm, key) {
						var res = Object.create(parentVal || null);
						if (childVal) {
							assertObjectType(key, childVal, vm);
							return extend(res, childVal);
						} else {
							return res;
						}
					}

					ASSET_TYPES.forEach(function(type) {
						strats[type + "s"] = mergeAssets;
					});

					/**
					 * Watchers.
					 *
					 * Watchers hashes should not overwrite one
					 * another, so we merge them as arrays.
					 */
					strats.watch = function(parentVal, childVal, vm, key) {
						// work around Firefox's Object.prototype.watch...
						if (parentVal === nativeWatch) {
							parentVal = undefined;
						}
						if (childVal === nativeWatch) {
							childVal = undefined;
						}
						/* istanbul ignore if */
						if (!childVal) {
							return Object.create(parentVal || null);
						}
						{
							assertObjectType(key, childVal, vm);
						}
						if (!parentVal) {
							return childVal;
						}
						var ret = {};
						extend(ret, parentVal);
						for (var key$1 in childVal) {
							var parent = ret[key$1];
							var child = childVal[key$1];
							if (parent && !Array.isArray(parent)) {
								parent = [parent];
							}
							ret[key$1] = parent
								? parent.concat(child)
								: Array.isArray(child)
								? child
								: [child];
						}
						return ret;
					};

					/**
					 * Other object hashes.
					 */
					strats.props = strats.methods = strats.inject = strats.computed = function(
						parentVal,
						childVal,
						vm,
						key
					) {
						if (childVal && "development" !== "production") {
							assertObjectType(key, childVal, vm);
						}
						if (!parentVal) {
							return childVal;
						}
						var ret = Object.create(null);
						extend(ret, parentVal);
						if (childVal) {
							extend(ret, childVal);
						}
						return ret;
					};
					strats.provide = mergeDataOrFn;

					/**
					 * Default strategy.
					 */
					var defaultStrat = function(parentVal, childVal) {
						return childVal === undefined ? parentVal : childVal;
					};

					/**
					 * Validate component names
					 */
					function checkComponents(options) {
						for (var key in options.components) {
							validateComponentName(key);
						}
					}

					function validateComponentName(name) {
						if (
							!new RegExp(
								"^[a-zA-Z][\\-\\.0-9_" +
									unicodeRegExp.source +
									"]*$"
							).test(name)
						) {
							warn(
								'Invalid component name: "' +
									name +
									'". Component names ' +
									"should conform to valid custom element name in html5 specification."
							);
						}
						if (isBuiltInTag(name) || config.isReservedTag(name)) {
							warn(
								"Do not use built-in or reserved HTML elements as component " +
									"id: " +
									name
							);
						}
					}

					/**
					 * Ensure all props option syntax are normalized into the
					 * Object-based format.
					 */
					function normalizeProps(options, vm) {
						var props = options.props;
						if (!props) {
							return;
						}
						var res = {};
						var i, val, name;
						if (Array.isArray(props)) {
							i = props.length;
							while (i--) {
								val = props[i];
								if (typeof val === "string") {
									name = camelize(val);
									res[name] = {type: null};
								} else {
									warn(
										"props must be strings when using array syntax."
									);
								}
							}
						} else if (isPlainObject(props)) {
							for (var key in props) {
								val = props[key];
								name = camelize(key);
								res[name] = isPlainObject(val)
									? val
									: {type: val};
							}
						} else {
							warn(
								'Invalid value for option "props": expected an Array or an Object, ' +
									"but got " +
									toRawType(props) +
									".",
								vm
							);
						}
						options.props = res;
					}

					/**
					 * Normalize all injections into Object-based format
					 */
					function normalizeInject(options, vm) {
						var inject = options.inject;
						if (!inject) {
							return;
						}
						var normalized = (options.inject = {});
						if (Array.isArray(inject)) {
							for (var i = 0; i < inject.length; i++) {
								normalized[inject[i]] = {from: inject[i]};
							}
						} else if (isPlainObject(inject)) {
							for (var key in inject) {
								var val = inject[key];
								normalized[key] = isPlainObject(val)
									? extend({from: key}, val)
									: {from: val};
							}
						} else {
							warn(
								'Invalid value for option "inject": expected an Array or an Object, ' +
									"but got " +
									toRawType(inject) +
									".",
								vm
							);
						}
					}

					/**
					 * Normalize raw function directives into object format.
					 */
					function normalizeDirectives(options) {
						var dirs = options.directives;
						if (dirs) {
							for (var key in dirs) {
								var def$$1 = dirs[key];
								if (typeof def$$1 === "function") {
									dirs[key] = {bind: def$$1, update: def$$1};
								}
							}
						}
					}

					function assertObjectType(name, value, vm) {
						if (!isPlainObject(value)) {
							warn(
								'Invalid value for option "' +
									name +
									'": expected an Object, ' +
									"but got " +
									toRawType(value) +
									".",
								vm
							);
						}
					}

					/**
					 * Merge two option objects into a new one.
					 * Core utility used in both instantiation and inheritance.
					 */
					function mergeOptions(parent, child, vm) {
						{
							checkComponents(child);
						}

						if (typeof child === "function") {
							child = child.options;
						}

						normalizeProps(child, vm);
						normalizeInject(child, vm);
						normalizeDirectives(child);

						// Apply extends and mixins on the child options,
						// but only if it is a raw options object that isn't
						// the result of another mergeOptions call.
						// Only merged options has the _base property.
						if (!child._base) {
							if (child.extends) {
								parent = mergeOptions(
									parent,
									child.extends,
									vm
								);
							}
							if (child.mixins) {
								for (
									var i = 0, l = child.mixins.length;
									i < l;
									i++
								) {
									parent = mergeOptions(
										parent,
										child.mixins[i],
										vm
									);
								}
							}
						}

						var options = {};
						var key;
						for (key in parent) {
							mergeField(key);
						}
						for (key in child) {
							if (!hasOwn(parent, key)) {
								mergeField(key);
							}
						}
						function mergeField(key) {
							var strat = strats[key] || defaultStrat;
							options[key] = strat(
								parent[key],
								child[key],
								vm,
								key
							);
						}
						return options;
					}

					/**
					 * Resolve an asset.
					 * This function is used because child instances need access
					 * to assets defined in its ancestor chain.
					 */
					function resolveAsset(options, type, id, warnMissing) {
						/* istanbul ignore if */
						if (typeof id !== "string") {
							return;
						}
						var assets = options[type];
						// check local registration variations first
						if (hasOwn(assets, id)) {
							return assets[id];
						}
						var camelizedId = camelize(id);
						if (hasOwn(assets, camelizedId)) {
							return assets[camelizedId];
						}
						var PascalCaseId = capitalize(camelizedId);
						if (hasOwn(assets, PascalCaseId)) {
							return assets[PascalCaseId];
						}
						// fallback to prototype chain
						var res =
							assets[id] ||
							assets[camelizedId] ||
							assets[PascalCaseId];
						if (warnMissing && !res) {
							warn(
								"Failed to resolve " +
									type.slice(0, -1) +
									": " +
									id,
								options
							);
						}
						return res;
					}

					/*  */

					function validateProp(key, propOptions, propsData, vm) {
						var prop = propOptions[key];
						var absent = !hasOwn(propsData, key);
						var value = propsData[key];
						// boolean casting
						var booleanIndex = getTypeIndex(Boolean, prop.type);
						if (booleanIndex > -1) {
							if (absent && !hasOwn(prop, "default")) {
								value = false;
							} else if (
								value === "" ||
								value === hyphenate(key)
							) {
								// only cast empty string / same name to boolean if
								// boolean has higher priority
								var stringIndex = getTypeIndex(
									String,
									prop.type
								);
								if (
									stringIndex < 0 ||
									booleanIndex < stringIndex
								) {
									value = true;
								}
							}
						}
						// check default value
						if (value === undefined) {
							value = getPropDefaultValue(vm, prop, key);
							// since the default value is a fresh copy,
							// make sure to observe it.
							var prevShouldObserve = shouldObserve;
							toggleObserving(true);
							observe(value);
							toggleObserving(prevShouldObserve);
						}
						{
							assertProp(prop, key, value, vm, absent);
						}
						return value;
					}

					/**
					 * Get the default value of a prop.
					 */
					function getPropDefaultValue(vm, prop, key) {
						// no default, return undefined
						if (!hasOwn(prop, "default")) {
							return undefined;
						}
						var def = prop.default;
						// warn against non-factory defaults for Object & Array
						if (isObject(def)) {
							warn(
								'Invalid default value for prop "' +
									key +
									'": ' +
									"Props with type Object/Array must use a factory function " +
									"to return the default value.",
								vm
							);
						}
						// the raw prop value was also undefined from previous render,
						// return previous default value to avoid unnecessary watcher trigger
						if (
							vm &&
							vm.$options.propsData &&
							vm.$options.propsData[key] === undefined &&
							vm._props[key] !== undefined
						) {
							return vm._props[key];
						}
						// call factory function for non-Function types
						// a value is Function if its prototype is function even across different execution context
						return typeof def === "function" &&
							getType(prop.type) !== "Function"
							? def.call(vm)
							: def;
					}

					/**
					 * Assert whether a prop is valid.
					 */
					function assertProp(prop, name, value, vm, absent) {
						if (prop.required && absent) {
							warn('Missing required prop: "' + name + '"', vm);
							return;
						}
						if (value == null && !prop.required) {
							return;
						}
						var type = prop.type;
						var valid = !type || type === true;
						var expectedTypes = [];
						if (type) {
							if (!Array.isArray(type)) {
								type = [type];
							}
							for (var i = 0; i < type.length && !valid; i++) {
								var assertedType = assertType(value, type[i]);
								expectedTypes.push(
									assertedType.expectedType || ""
								);
								valid = assertedType.valid;
							}
						}

						if (!valid) {
							warn(
								getInvalidTypeMessage(
									name,
									value,
									expectedTypes
								),
								vm
							);
							return;
						}
						var validator = prop.validator;
						if (validator) {
							if (!validator(value)) {
								warn(
									'Invalid prop: custom validator check failed for prop "' +
										name +
										'".',
									vm
								);
							}
						}
					}

					var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

					function assertType(value, type) {
						var valid;
						var expectedType = getType(type);
						if (simpleCheckRE.test(expectedType)) {
							var t = typeof value;
							valid = t === expectedType.toLowerCase();
							// for primitive wrapper objects
							if (!valid && t === "object") {
								valid = value instanceof type;
							}
						} else if (expectedType === "Object") {
							valid = isPlainObject(value);
						} else if (expectedType === "Array") {
							valid = Array.isArray(value);
						} else {
							valid = value instanceof type;
						}
						return {
							valid: valid,
							expectedType: expectedType,
						};
					}

					/**
					 * Use function string name to check built-in types,
					 * because a simple equality check will fail when running
					 * across different vms / iframes.
					 */
					function getType(fn) {
						var match =
							fn && fn.toString().match(/^\s*function (\w+)/);
						return match ? match[1] : "";
					}

					function isSameType(a, b) {
						return getType(a) === getType(b);
					}

					function getTypeIndex(type, expectedTypes) {
						if (!Array.isArray(expectedTypes)) {
							return isSameType(expectedTypes, type) ? 0 : -1;
						}
						for (
							var i = 0, len = expectedTypes.length;
							i < len;
							i++
						) {
							if (isSameType(expectedTypes[i], type)) {
								return i;
							}
						}
						return -1;
					}

					function getInvalidTypeMessage(name, value, expectedTypes) {
						var message =
							'Invalid prop: type check failed for prop "' +
							name +
							'".' +
							" Expected " +
							expectedTypes.map(capitalize).join(", ");
						var expectedType = expectedTypes[0];
						var receivedType = toRawType(value);
						var expectedValue = styleValue(value, expectedType);
						var receivedValue = styleValue(value, receivedType);
						// check if we need to specify expected value
						if (
							expectedTypes.length === 1 &&
							isExplicable(expectedType) &&
							!isBoolean(expectedType, receivedType)
						) {
							message += " with value " + expectedValue;
						}
						message += ", got " + receivedType + " ";
						// check if we need to specify received value
						if (isExplicable(receivedType)) {
							message += "with value " + receivedValue + ".";
						}
						return message;
					}

					function styleValue(value, type) {
						if (type === "String") {
							return '"' + value + '"';
						} else if (type === "Number") {
							return "" + Number(value);
						} else {
							return "" + value;
						}
					}

					function isExplicable(value) {
						var explicitTypes = ["string", "number", "boolean"];
						return explicitTypes.some(function(elem) {
							return value.toLowerCase() === elem;
						});
					}

					function isBoolean() {
						var args = [],
							len = arguments.length;
						while (len--) args[len] = arguments[len];

						return args.some(function(elem) {
							return elem.toLowerCase() === "boolean";
						});
					}

					/*  */

					function handleError(err, vm, info) {
						// Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
						// See: https://github.com/vuejs/vuex/issues/1505
						pushTarget();
						try {
							if (vm) {
								var cur = vm;
								while ((cur = cur.$parent)) {
									var hooks = cur.$options.errorCaptured;
									if (hooks) {
										for (var i = 0; i < hooks.length; i++) {
											try {
												var capture =
													hooks[i].call(
														cur,
														err,
														vm,
														info
													) === false;
												if (capture) {
													return;
												}
											} catch (e) {
												globalHandleError(
													e,
													cur,
													"errorCaptured hook"
												);
											}
										}
									}
								}
							}
							globalHandleError(err, vm, info);
						} finally {
							popTarget();
						}
					}

					function invokeWithErrorHandling(
						handler,
						context,
						args,
						vm,
						info
					) {
						var res;
						try {
							res = args
								? handler.apply(context, args)
								: handler.call(context);
							if (
								res &&
								!res._isVue &&
								isPromise(res) &&
								!res._handled
							) {
								res.catch(function(e) {
									return handleError(
										e,
										vm,
										info + " (Promise/async)"
									);
								});
								// issue #9511
								// avoid catch triggering multiple times when nested calls
								res._handled = true;
							}
						} catch (e) {
							handleError(e, vm, info);
						}
						return res;
					}

					function globalHandleError(err, vm, info) {
						if (config.errorHandler) {
							try {
								return config.errorHandler.call(
									null,
									err,
									vm,
									info
								);
							} catch (e) {
								// if the user intentionally throws the original error in the handler,
								// do not log it twice
								if (e !== err) {
									logError(e, null, "config.errorHandler");
								}
							}
						}
						logError(err, vm, info);
					}

					function logError(err, vm, info) {
						{
							warn(
								"Error in " +
									info +
									': "' +
									err.toString() +
									'"',
								vm
							);
						}
						/* istanbul ignore else */
						if (
							(inBrowser || inWeex) &&
							typeof console !== "undefined"
						) {
							console.error(err);
						} else {
							throw err;
						}
					}

					/*  */

					var isUsingMicroTask = false;

					var callbacks = [];
					var pending = false;

					function flushCallbacks() {
						pending = false;
						var copies = callbacks.slice(0);
						callbacks.length = 0;
						for (var i = 0; i < copies.length; i++) {
							copies[i]();
						}
					}

					// Here we have async deferring wrappers using microtasks.
					// In 2.5 we used (macro) tasks (in combination with microtasks).
					// However, it has subtle problems when state is changed right before repaint
					// (e.g. #6813, out-in transitions).
					// Also, using (macro) tasks in event handler would cause some weird behaviors
					// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
					// So we now use microtasks everywhere, again.
					// A major drawback of this tradeoff is that there are some scenarios
					// where microtasks have too high a priority and fire in between supposedly
					// sequential events (e.g. #4521, #6690, which have workarounds)
					// or even between bubbling of the same event (#6566).
					var timerFunc;

					// The nextTick behavior leverages the microtask queue, which can be accessed
					// via either native Promise.then or MutationObserver.
					// MutationObserver has wider support, however it is seriously bugged in
					// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
					// completely stops working after triggering a few times... so, if native
					// Promise is available, we will use it:
					/* istanbul ignore next, $flow-disable-line */
					if (typeof Promise !== "undefined" && isNative(Promise)) {
						var p = Promise.resolve();
						timerFunc = function() {
							p.then(flushCallbacks);
							// In problematic UIWebViews, Promise.then doesn't completely break, but
							// it can get stuck in a weird state where callbacks are pushed into the
							// microtask queue but the queue isn't being flushed, until the browser
							// needs to do some other work, e.g. handle a timer. Therefore we can
							// "force" the microtask queue to be flushed by adding an empty timer.
							if (isIOS) {
								setTimeout(noop);
							}
						};
						isUsingMicroTask = true;
					} else if (
						!isIE &&
						typeof MutationObserver !== "undefined" &&
						(isNative(MutationObserver) ||
							// PhantomJS and iOS 7.x
							MutationObserver.toString() ===
								"[object MutationObserverConstructor]")
					) {
						// Use MutationObserver where native Promise is not available,
						// e.g. PhantomJS, iOS7, Android 4.4
						// (#6466 MutationObserver is unreliable in IE11)
						var counter = 1;
						var observer = new MutationObserver(flushCallbacks);
						var textNode = document.createTextNode(String(counter));
						observer.observe(textNode, {
							characterData: true,
						});
						timerFunc = function() {
							counter = (counter + 1) % 2;
							textNode.data = String(counter);
						};
						isUsingMicroTask = true;
					} else if (
						typeof setImmediate !== "undefined" &&
						isNative(setImmediate)
					) {
						// Fallback to setImmediate.
						// Techinically it leverages the (macro) task queue,
						// but it is still a better choice than setTimeout.
						timerFunc = function() {
							setImmediate(flushCallbacks);
						};
					} else {
						// Fallback to setTimeout.
						timerFunc = function() {
							setTimeout(flushCallbacks, 0);
						};
					}

					function nextTick(cb, ctx) {
						var _resolve;
						callbacks.push(function() {
							if (cb) {
								try {
									cb.call(ctx);
								} catch (e) {
									handleError(e, ctx, "nextTick");
								}
							} else if (_resolve) {
								_resolve(ctx);
							}
						});
						if (!pending) {
							pending = true;
							timerFunc();
						}
						// $flow-disable-line
						if (!cb && typeof Promise !== "undefined") {
							return new Promise(function(resolve) {
								_resolve = resolve;
							});
						}
					}

					/*  */

					var mark;
					var measure;

					{
						var perf = inBrowser && window.performance;
						/* istanbul ignore if */
						if (
							perf &&
							perf.mark &&
							perf.measure &&
							perf.clearMarks &&
							perf.clearMeasures
						) {
							mark = function(tag) {
								return perf.mark(tag);
							};
							measure = function(name, startTag, endTag) {
								perf.measure(name, startTag, endTag);
								perf.clearMarks(startTag);
								perf.clearMarks(endTag);
								// perf.clearMeasures(name)
							};
						}
					}

					/* not type checking this file because flow doesn't play well with Proxy */

					var initProxy;

					{
						var allowedGlobals = makeMap(
							"Infinity,undefined,NaN,isFinite,isNaN," +
								"parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent," +
								"Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl," +
								"require" // for Webpack/Browserify
						);

						var warnNonPresent = function(target, key) {
							warn(
								'Property or method "' +
									key +
									'" is not defined on the instance but ' +
									"referenced during render. Make sure that this property is reactive, " +
									"either in the data option, or for class-based components, by " +
									"initializing the property. " +
									"See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.",
								target
							);
						};

						var warnReservedPrefix = function(target, key) {
							warn(
								'Property "' +
									key +
									'" must be accessed with "$data.' +
									key +
									'" because ' +
									'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
									"prevent conflicts with Vue internals" +
									"See: https://vuejs.org/v2/api/#data",
								target
							);
						};

						var hasProxy =
							typeof Proxy !== "undefined" && isNative(Proxy);

						if (hasProxy) {
							var isBuiltInModifier = makeMap(
								"stop,prevent,self,ctrl,shift,alt,meta,exact"
							);
							config.keyCodes = new Proxy(config.keyCodes, {
								set: function set(target, key, value) {
									if (isBuiltInModifier(key)) {
										warn(
											"Avoid overwriting built-in modifier in config.keyCodes: ." +
												key
										);
										return false;
									} else {
										target[key] = value;
										return true;
									}
								},
							});
						}

						var hasHandler = {
							has: function has(target, key) {
								var has = key in target;
								var isAllowed =
									allowedGlobals(key) ||
									(typeof key === "string" &&
										key.charAt(0) === "_" &&
										!(key in target.$data));
								if (!has && !isAllowed) {
									if (key in target.$data) {
										warnReservedPrefix(target, key);
									} else {
										warnNonPresent(target, key);
									}
								}
								return has || !isAllowed;
							},
						};

						var getHandler = {
							get: function get(target, key) {
								if (
									typeof key === "string" &&
									!(key in target)
								) {
									if (key in target.$data) {
										warnReservedPrefix(target, key);
									} else {
										warnNonPresent(target, key);
									}
								}
								return target[key];
							},
						};

						initProxy = function initProxy(vm) {
							if (hasProxy) {
								// determine which proxy handler to use
								var options = vm.$options;
								var handlers =
									options.render &&
									options.render._withStripped
										? getHandler
										: hasHandler;
								vm._renderProxy = new Proxy(vm, handlers);
							} else {
								vm._renderProxy = vm;
							}
						};
					}

					/*  */

					var seenObjects = new _Set();

					/**
					 * Recursively traverse an object to evoke all converted
					 * getters, so that every nested property inside the object
					 * is collected as a "deep" dependency.
					 */
					function traverse(val) {
						_traverse(val, seenObjects);
						seenObjects.clear();
					}

					function _traverse(val, seen) {
						var i, keys;
						var isA = Array.isArray(val);
						if (
							(!isA && !isObject(val)) ||
							Object.isFrozen(val) ||
							val instanceof VNode
						) {
							return;
						}
						if (val.__ob__) {
							var depId = val.__ob__.dep.id;
							if (seen.has(depId)) {
								return;
							}
							seen.add(depId);
						}
						if (isA) {
							i = val.length;
							while (i--) {
								_traverse(val[i], seen);
							}
						} else {
							keys = Object.keys(val);
							i = keys.length;
							while (i--) {
								_traverse(val[keys[i]], seen);
							}
						}
					}

					/*  */

					var normalizeEvent = cached(function(name) {
						var passive = name.charAt(0) === "&";
						name = passive ? name.slice(1) : name;
						var once$$1 = name.charAt(0) === "~"; // Prefixed last, checked first
						name = once$$1 ? name.slice(1) : name;
						var capture = name.charAt(0) === "!";
						name = capture ? name.slice(1) : name;
						return {
							name: name,
							once: once$$1,
							capture: capture,
							passive: passive,
						};
					});

					function createFnInvoker(fns, vm) {
						function invoker() {
							var arguments$1 = arguments;

							var fns = invoker.fns;
							if (Array.isArray(fns)) {
								var cloned = fns.slice();
								for (var i = 0; i < cloned.length; i++) {
									invokeWithErrorHandling(
										cloned[i],
										null,
										arguments$1,
										vm,
										"v-on handler"
									);
								}
							} else {
								// return handler return value for single handlers
								return invokeWithErrorHandling(
									fns,
									null,
									arguments,
									vm,
									"v-on handler"
								);
							}
						}
						invoker.fns = fns;
						return invoker;
					}

					function updateListeners(
						on,
						oldOn,
						add,
						remove$$1,
						createOnceHandler,
						vm
					) {
						var name, def$$1, cur, old, event;
						for (name in on) {
							def$$1 = cur = on[name];
							old = oldOn[name];
							event = normalizeEvent(name);
							if (isUndef(cur)) {
								warn(
									'Invalid handler for event "' +
										event.name +
										'": got ' +
										String(cur),
									vm
								);
							} else if (isUndef(old)) {
								if (isUndef(cur.fns)) {
									cur = on[name] = createFnInvoker(cur, vm);
								}
								if (isTrue(event.once)) {
									cur = on[name] = createOnceHandler(
										event.name,
										cur,
										event.capture
									);
								}
								add(
									event.name,
									cur,
									event.capture,
									event.passive,
									event.params
								);
							} else if (cur !== old) {
								old.fns = cur;
								on[name] = old;
							}
						}
						for (name in oldOn) {
							if (isUndef(on[name])) {
								event = normalizeEvent(name);
								remove$$1(
									event.name,
									oldOn[name],
									event.capture
								);
							}
						}
					}

					/*  */

					function mergeVNodeHook(def, hookKey, hook) {
						if (def instanceof VNode) {
							def = def.data.hook || (def.data.hook = {});
						}
						var invoker;
						var oldHook = def[hookKey];

						function wrappedHook() {
							hook.apply(this, arguments);
							// important: remove merged hook to ensure it's called only once
							// and prevent memory leak
							remove(invoker.fns, wrappedHook);
						}

						if (isUndef(oldHook)) {
							// no existing hook
							invoker = createFnInvoker([wrappedHook]);
						} else {
							/* istanbul ignore if */
							if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
								// already a merged invoker
								invoker = oldHook;
								invoker.fns.push(wrappedHook);
							} else {
								// existing plain hook
								invoker = createFnInvoker([
									oldHook,
									wrappedHook,
								]);
							}
						}

						invoker.merged = true;
						def[hookKey] = invoker;
					}

					/*  */

					function extractPropsFromVNodeData(data, Ctor, tag) {
						// we are only extracting raw values here.
						// validation and default values are handled in the child
						// component itself.
						var propOptions = Ctor.options.props;
						if (isUndef(propOptions)) {
							return;
						}
						var res = {};
						var attrs = data.attrs;
						var props = data.props;
						if (isDef(attrs) || isDef(props)) {
							for (var key in propOptions) {
								var altKey = hyphenate(key);
								{
									var keyInLowerCase = key.toLowerCase();
									if (
										key !== keyInLowerCase &&
										attrs &&
										hasOwn(attrs, keyInLowerCase)
									) {
										tip(
											'Prop "' +
												keyInLowerCase +
												'" is passed to component ' +
												formatComponentName(
													tag || Ctor
												) +
												", but the declared prop name is" +
												' "' +
												key +
												'". ' +
												"Note that HTML attributes are case-insensitive and camelCased " +
												"props need to use their kebab-case equivalents when using in-DOM " +
												'templates. You should probably use "' +
												altKey +
												'" instead of "' +
												key +
												'".'
										);
									}
								}
								checkProp(res, props, key, altKey, true) ||
									checkProp(res, attrs, key, altKey, false);
							}
						}
						return res;
					}

					function checkProp(res, hash, key, altKey, preserve) {
						if (isDef(hash)) {
							if (hasOwn(hash, key)) {
								res[key] = hash[key];
								if (!preserve) {
									delete hash[key];
								}
								return true;
							} else if (hasOwn(hash, altKey)) {
								res[key] = hash[altKey];
								if (!preserve) {
									delete hash[altKey];
								}
								return true;
							}
						}
						return false;
					}

					/*  */

					// The template compiler attempts to minimize the need for normalization by
					// statically analyzing the template at compile time.
					//
					// For plain HTML markup, normalization can be completely skipped because the
					// generated render function is guaranteed to return Array<VNode>. There are
					// two cases where extra normalization is needed:

					// 1. When the children contains components - because a functional component
					// may return an Array instead of a single root. In this case, just a simple
					// normalization is needed - if any child is an Array, we flatten the whole
					// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
					// because functional components already normalize their own children.
					function simpleNormalizeChildren(children) {
						for (var i = 0; i < children.length; i++) {
							if (Array.isArray(children[i])) {
								return Array.prototype.concat.apply(
									[],
									children
								);
							}
						}
						return children;
					}

					// 2. When the children contains constructs that always generated nested Arrays,
					// e.g. <template>, <slot>, v-for, or when the children is provided by user
					// with hand-written render functions / JSX. In such cases a full normalization
					// is needed to cater to all possible types of children values.
					function normalizeChildren(children) {
						return isPrimitive(children)
							? [createTextVNode(children)]
							: Array.isArray(children)
							? normalizeArrayChildren(children)
							: undefined;
					}

					function isTextNode(node) {
						return (
							isDef(node) &&
							isDef(node.text) &&
							isFalse(node.isComment)
						);
					}

					function normalizeArrayChildren(children, nestedIndex) {
						var res = [];
						var i, c, lastIndex, last;
						for (i = 0; i < children.length; i++) {
							c = children[i];
							if (isUndef(c) || typeof c === "boolean") {
								continue;
							}
							lastIndex = res.length - 1;
							last = res[lastIndex];
							//  nested
							if (Array.isArray(c)) {
								if (c.length > 0) {
									c = normalizeArrayChildren(
										c,
										(nestedIndex || "") + "_" + i
									);
									// merge adjacent text nodes
									if (isTextNode(c[0]) && isTextNode(last)) {
										res[lastIndex] = createTextVNode(
											last.text + c[0].text
										);
										c.shift();
									}
									res.push.apply(res, c);
								}
							} else if (isPrimitive(c)) {
								if (isTextNode(last)) {
									// merge adjacent text nodes
									// this is necessary for SSR hydration because text nodes are
									// essentially merged when rendered to HTML strings
									res[lastIndex] = createTextVNode(
										last.text + c
									);
								} else if (c !== "") {
									// convert primitive to vnode
									res.push(createTextVNode(c));
								}
							} else {
								if (isTextNode(c) && isTextNode(last)) {
									// merge adjacent text nodes
									res[lastIndex] = createTextVNode(
										last.text + c.text
									);
								} else {
									// default key for nested array children (likely generated by v-for)
									if (
										isTrue(children._isVList) &&
										isDef(c.tag) &&
										isUndef(c.key) &&
										isDef(nestedIndex)
									) {
										c.key =
											"__vlist" +
											nestedIndex +
											"_" +
											i +
											"__";
									}
									res.push(c);
								}
							}
						}
						return res;
					}

					/*  */

					function initProvide(vm) {
						var provide = vm.$options.provide;
						if (provide) {
							vm._provided =
								typeof provide === "function"
									? provide.call(vm)
									: provide;
						}
					}

					function initInjections(vm) {
						var result = resolveInject(vm.$options.inject, vm);
						if (result) {
							toggleObserving(false);
							Object.keys(result).forEach(function(key) {
								/* istanbul ignore else */
								{
									defineReactive$$1(
										vm,
										key,
										result[key],
										function() {
											warn(
												"Avoid mutating an injected value directly since the changes will be " +
													"overwritten whenever the provided component re-renders. " +
													'injection being mutated: "' +
													key +
													'"',
												vm
											);
										}
									);
								}
							});
							toggleObserving(true);
						}
					}

					function resolveInject(inject, vm) {
						if (inject) {
							// inject is :any because flow is not smart enough to figure out cached
							var result = Object.create(null);
							var keys = hasSymbol
								? Reflect.ownKeys(inject)
								: Object.keys(inject);

							for (var i = 0; i < keys.length; i++) {
								var key = keys[i];
								// #6574 in case the inject object is observed...
								if (key === "__ob__") {
									continue;
								}
								var provideKey = inject[key].from;
								var source = vm;
								while (source) {
									if (
										source._provided &&
										hasOwn(source._provided, provideKey)
									) {
										result[key] =
											source._provided[provideKey];
										break;
									}
									source = source.$parent;
								}
								if (!source) {
									if ("default" in inject[key]) {
										var provideDefault =
											inject[key].default;
										result[key] =
											typeof provideDefault === "function"
												? provideDefault.call(vm)
												: provideDefault;
									} else {
										warn(
											'Injection "' + key + '" not found',
											vm
										);
									}
								}
							}
							return result;
						}
					}

					/*  */

					/**
					 * Runtime helper for resolving raw children VNodes into a slot object.
					 */
					function resolveSlots(children, context) {
						if (!children || !children.length) {
							return {};
						}
						var slots = {};
						for (var i = 0, l = children.length; i < l; i++) {
							var child = children[i];
							var data = child.data;
							// remove slot attribute if the node is resolved as a Vue slot node
							if (data && data.attrs && data.attrs.slot) {
								delete data.attrs.slot;
							}
							// named slots should only be respected if the vnode was rendered in the
							// same context.
							if (
								(child.context === context ||
									child.fnContext === context) &&
								data &&
								data.slot != null
							) {
								var name = data.slot;
								var slot = slots[name] || (slots[name] = []);
								if (child.tag === "template") {
									slot.push.apply(slot, child.children || []);
								} else {
									slot.push(child);
								}
							} else {
								(slots.default || (slots.default = [])).push(
									child
								);
							}
						}
						// ignore slots that contains only whitespace
						for (var name$1 in slots) {
							if (slots[name$1].every(isWhitespace)) {
								delete slots[name$1];
							}
						}
						return slots;
					}

					function isWhitespace(node) {
						return (
							(node.isComment && !node.asyncFactory) ||
							node.text === " "
						);
					}

					/*  */

					function normalizeScopedSlots(
						slots,
						normalSlots,
						prevSlots
					) {
						var res;
						var hasNormalSlots =
							Object.keys(normalSlots).length > 0;
						var isStable = slots
							? !!slots.$stable
							: !hasNormalSlots;
						var key = slots && slots.$key;
						if (!slots) {
							res = {};
						} else if (slots._normalized) {
							// fast path 1: child component re-render only, parent did not change
							return slots._normalized;
						} else if (
							isStable &&
							prevSlots &&
							prevSlots !== emptyObject &&
							key === prevSlots.$key &&
							!hasNormalSlots &&
							!prevSlots.$hasNormal
						) {
							// fast path 2: stable scoped slots w/ no normal slots to proxy,
							// only need to normalize once
							return prevSlots;
						} else {
							res = {};
							for (var key$1 in slots) {
								if (slots[key$1] && key$1[0] !== "$") {
									res[key$1] = normalizeScopedSlot(
										normalSlots,
										key$1,
										slots[key$1]
									);
								}
							}
						}
						// expose normal slots on scopedSlots
						for (var key$2 in normalSlots) {
							if (!(key$2 in res)) {
								res[key$2] = proxyNormalSlot(
									normalSlots,
									key$2
								);
							}
						}
						// avoriaz seems to mock a non-extensible $scopedSlots object
						// and when that is passed down this would cause an error
						if (slots && Object.isExtensible(slots)) {
							slots._normalized = res;
						}
						def(res, "$stable", isStable);
						def(res, "$key", key);
						def(res, "$hasNormal", hasNormalSlots);
						return res;
					}

					function normalizeScopedSlot(normalSlots, key, fn) {
						var normalized = function() {
							var res = arguments.length
								? fn.apply(null, arguments)
								: fn({});
							res =
								res &&
								typeof res === "object" &&
								!Array.isArray(res)
									? [res] // single vnode
									: normalizeChildren(res);
							return res &&
								(res.length === 0 ||
									(res.length === 1 && res[0].isComment)) // #9658
								? undefined
								: res;
						};
						// this is a slot using the new v-slot syntax without scope. although it is
						// compiled as a scoped slot, render fn users would expect it to be present
						// on this.$slots because the usage is semantically a normal slot.
						if (fn.proxy) {
							Object.defineProperty(normalSlots, key, {
								get: normalized,
								enumerable: true,
								configurable: true,
							});
						}
						return normalized;
					}

					function proxyNormalSlot(slots, key) {
						return function() {
							return slots[key];
						};
					}

					/*  */

					/**
					 * Runtime helper for rendering v-for lists.
					 */
					function renderList(val, render) {
						var ret, i, l, keys, key;
						if (Array.isArray(val) || typeof val === "string") {
							ret = new Array(val.length);
							for (i = 0, l = val.length; i < l; i++) {
								ret[i] = render(val[i], i);
							}
						} else if (typeof val === "number") {
							ret = new Array(val);
							for (i = 0; i < val; i++) {
								ret[i] = render(i + 1, i);
							}
						} else if (isObject(val)) {
							if (hasSymbol && val[Symbol.iterator]) {
								ret = [];
								var iterator = val[Symbol.iterator]();
								var result = iterator.next();
								while (!result.done) {
									ret.push(render(result.value, ret.length));
									result = iterator.next();
								}
							} else {
								keys = Object.keys(val);
								ret = new Array(keys.length);
								for (i = 0, l = keys.length; i < l; i++) {
									key = keys[i];
									ret[i] = render(val[key], key, i);
								}
							}
						}
						if (!isDef(ret)) {
							ret = [];
						}
						ret._isVList = true;
						return ret;
					}

					/*  */

					/**
					 * Runtime helper for rendering <slot>
					 */
					function renderSlot(name, fallback, props, bindObject) {
						var scopedSlotFn = this.$scopedSlots[name];
						var nodes;
						if (scopedSlotFn) {
							// scoped slot
							props = props || {};
							if (bindObject) {
								if (!isObject(bindObject)) {
									warn(
										"slot v-bind without argument expects an Object",
										this
									);
								}
								props = extend(extend({}, bindObject), props);
							}
							nodes = scopedSlotFn(props) || fallback;
						} else {
							nodes = this.$slots[name] || fallback;
						}

						var target = props && props.slot;
						if (target) {
							return this.$createElement(
								"template",
								{slot: target},
								nodes
							);
						} else {
							return nodes;
						}
					}

					/*  */

					/**
					 * Runtime helper for resolving filters
					 */
					function resolveFilter(id) {
						return (
							resolveAsset(this.$options, "filters", id, true) ||
							identity
						);
					}

					/*  */

					function isKeyNotMatch(expect, actual) {
						if (Array.isArray(expect)) {
							return expect.indexOf(actual) === -1;
						} else {
							return expect !== actual;
						}
					}

					/**
					 * Runtime helper for checking keyCodes from config.
					 * exposed as Vue.prototype._k
					 * passing in eventKeyName as last argument separately for backwards compat
					 */
					function checkKeyCodes(
						eventKeyCode,
						key,
						builtInKeyCode,
						eventKeyName,
						builtInKeyName
					) {
						var mappedKeyCode =
							config.keyCodes[key] || builtInKeyCode;
						if (
							builtInKeyName &&
							eventKeyName &&
							!config.keyCodes[key]
						) {
							return isKeyNotMatch(builtInKeyName, eventKeyName);
						} else if (mappedKeyCode) {
							return isKeyNotMatch(mappedKeyCode, eventKeyCode);
						} else if (eventKeyName) {
							return hyphenate(eventKeyName) !== key;
						}
					}

					/*  */

					/**
					 * Runtime helper for merging v-bind="object" into a VNode's data.
					 */
					function bindObjectProps(data, tag, value, asProp, isSync) {
						if (value) {
							if (!isObject(value)) {
								warn(
									"v-bind without argument expects an Object or Array value",
									this
								);
							} else {
								if (Array.isArray(value)) {
									value = toObject(value);
								}
								var hash;
								var loop = function(key) {
									if (
										key === "class" ||
										key === "style" ||
										isReservedAttribute(key)
									) {
										hash = data;
									} else {
										var type =
											data.attrs && data.attrs.type;
										hash =
											asProp ||
											config.mustUseProp(tag, type, key)
												? data.domProps ||
												  (data.domProps = {})
												: data.attrs ||
												  (data.attrs = {});
									}
									var camelizedKey = camelize(key);
									var hyphenatedKey = hyphenate(key);
									if (
										!(camelizedKey in hash) &&
										!(hyphenatedKey in hash)
									) {
										hash[key] = value[key];

										if (isSync) {
											var on = data.on || (data.on = {});
											on["update:" + key] = function(
												$event
											) {
												value[key] = $event;
											};
										}
									}
								};

								for (var key in value) loop(key);
							}
						}
						return data;
					}

					/*  */

					/**
					 * Runtime helper for rendering static trees.
					 */
					function renderStatic(index, isInFor) {
						var cached =
							this._staticTrees || (this._staticTrees = []);
						var tree = cached[index];
						// if has already-rendered static tree and not inside v-for,
						// we can reuse the same tree.
						if (tree && !isInFor) {
							return tree;
						}
						// otherwise, render a fresh tree.
						tree = cached[index] = this.$options.staticRenderFns[
							index
						].call(
							this._renderProxy,
							null,
							this // for render fns generated for functional component templates
						);
						markStatic(tree, "__static__" + index, false);
						return tree;
					}

					/**
					 * Runtime helper for v-once.
					 * Effectively it means marking the node as static with a unique key.
					 */
					function markOnce(tree, index, key) {
						markStatic(
							tree,
							"__once__" + index + (key ? "_" + key : ""),
							true
						);
						return tree;
					}

					function markStatic(tree, key, isOnce) {
						if (Array.isArray(tree)) {
							for (var i = 0; i < tree.length; i++) {
								if (tree[i] && typeof tree[i] !== "string") {
									markStaticNode(
										tree[i],
										key + "_" + i,
										isOnce
									);
								}
							}
						} else {
							markStaticNode(tree, key, isOnce);
						}
					}

					function markStaticNode(node, key, isOnce) {
						node.isStatic = true;
						node.key = key;
						node.isOnce = isOnce;
					}

					/*  */

					function bindObjectListeners(data, value) {
						if (value) {
							if (!isPlainObject(value)) {
								warn(
									"v-on without argument expects an Object value",
									this
								);
							} else {
								var on = (data.on = data.on
									? extend({}, data.on)
									: {});
								for (var key in value) {
									var existing = on[key];
									var ours = value[key];
									on[key] = existing
										? [].concat(existing, ours)
										: ours;
								}
							}
						}
						return data;
					}

					/*  */

					function resolveScopedSlots(
						fns, // see flow/vnode
						res,
						// the following are added in 2.6
						hasDynamicKeys,
						contentHashKey
					) {
						res = res || {$stable: !hasDynamicKeys};
						for (var i = 0; i < fns.length; i++) {
							var slot = fns[i];
							if (Array.isArray(slot)) {
								resolveScopedSlots(slot, res, hasDynamicKeys);
							} else if (slot) {
								// marker for reverse proxying v-slot without scope on this.$slots
								if (slot.proxy) {
									slot.fn.proxy = true;
								}
								res[slot.key] = slot.fn;
							}
						}
						if (contentHashKey) {
							res.$key = contentHashKey;
						}
						return res;
					}

					/*  */

					function bindDynamicKeys(baseObj, values) {
						for (var i = 0; i < values.length; i += 2) {
							var key = values[i];
							if (typeof key === "string" && key) {
								baseObj[values[i]] = values[i + 1];
							} else if (key !== "" && key !== null) {
								// null is a speical value for explicitly removing a binding
								warn(
									"Invalid value for dynamic directive argument (expected string or null): " +
										key,
									this
								);
							}
						}
						return baseObj;
					}

					// helper to dynamically append modifier runtime markers to event names.
					// ensure only append when value is already string, otherwise it will be cast
					// to string and cause the type check to miss.
					function prependModifier(value, symbol) {
						return typeof value === "string"
							? symbol + value
							: value;
					}

					/*  */

					function installRenderHelpers(target) {
						target._o = markOnce;
						target._n = toNumber;
						target._s = toString;
						target._l = renderList;
						target._t = renderSlot;
						target._q = looseEqual;
						target._i = looseIndexOf;
						target._m = renderStatic;
						target._f = resolveFilter;
						target._k = checkKeyCodes;
						target._b = bindObjectProps;
						target._v = createTextVNode;
						target._e = createEmptyVNode;
						target._u = resolveScopedSlots;
						target._g = bindObjectListeners;
						target._d = bindDynamicKeys;
						target._p = prependModifier;
					}

					/*  */

					function FunctionalRenderContext(
						data,
						props,
						children,
						parent,
						Ctor
					) {
						var this$1 = this;

						var options = Ctor.options;
						// ensure the createElement function in functional components
						// gets a unique context - this is necessary for correct named slot check
						var contextVm;
						if (hasOwn(parent, "_uid")) {
							contextVm = Object.create(parent);
							// $flow-disable-line
							contextVm._original = parent;
						} else {
							// the context vm passed in is a functional context as well.
							// in this case we want to make sure we are able to get a hold to the
							// real context instance.
							contextVm = parent;
							// $flow-disable-line
							parent = parent._original;
						}
						var isCompiled = isTrue(options._compiled);
						var needNormalization = !isCompiled;

						this.data = data;
						this.props = props;
						this.children = children;
						this.parent = parent;
						this.listeners = data.on || emptyObject;
						this.injections = resolveInject(options.inject, parent);
						this.slots = function() {
							if (!this$1.$slots) {
								normalizeScopedSlots(
									data.scopedSlots,
									(this$1.$slots = resolveSlots(
										children,
										parent
									))
								);
							}
							return this$1.$slots;
						};

						Object.defineProperty(this, "scopedSlots", {
							enumerable: true,
							get: function get() {
								return normalizeScopedSlots(
									data.scopedSlots,
									this.slots()
								);
							},
						});

						// support for compiled functional template
						if (isCompiled) {
							// exposing $options for renderStatic()
							this.$options = options;
							// pre-resolve slots for renderSlot()
							this.$slots = this.slots();
							this.$scopedSlots = normalizeScopedSlots(
								data.scopedSlots,
								this.$slots
							);
						}

						if (options._scopeId) {
							this._c = function(a, b, c, d) {
								var vnode = createElement(
									contextVm,
									a,
									b,
									c,
									d,
									needNormalization
								);
								if (vnode && !Array.isArray(vnode)) {
									vnode.fnScopeId = options._scopeId;
									vnode.fnContext = parent;
								}
								return vnode;
							};
						} else {
							this._c = function(a, b, c, d) {
								return createElement(
									contextVm,
									a,
									b,
									c,
									d,
									needNormalization
								);
							};
						}
					}

					installRenderHelpers(FunctionalRenderContext.prototype);

					function createFunctionalComponent(
						Ctor,
						propsData,
						data,
						contextVm,
						children
					) {
						var options = Ctor.options;
						var props = {};
						var propOptions = options.props;
						if (isDef(propOptions)) {
							for (var key in propOptions) {
								props[key] = validateProp(
									key,
									propOptions,
									propsData || emptyObject
								);
							}
						} else {
							if (isDef(data.attrs)) {
								mergeProps(props, data.attrs);
							}
							if (isDef(data.props)) {
								mergeProps(props, data.props);
							}
						}

						var renderContext = new FunctionalRenderContext(
							data,
							props,
							children,
							contextVm,
							Ctor
						);

						var vnode = options.render.call(
							null,
							renderContext._c,
							renderContext
						);

						if (vnode instanceof VNode) {
							return cloneAndMarkFunctionalResult(
								vnode,
								data,
								renderContext.parent,
								options,
								renderContext
							);
						} else if (Array.isArray(vnode)) {
							var vnodes = normalizeChildren(vnode) || [];
							var res = new Array(vnodes.length);
							for (var i = 0; i < vnodes.length; i++) {
								res[i] = cloneAndMarkFunctionalResult(
									vnodes[i],
									data,
									renderContext.parent,
									options,
									renderContext
								);
							}
							return res;
						}
					}

					function cloneAndMarkFunctionalResult(
						vnode,
						data,
						contextVm,
						options,
						renderContext
					) {
						// #7817 clone node before setting fnContext, otherwise if the node is reused
						// (e.g. it was from a cached normal slot) the fnContext causes named slots
						// that should not be matched to match.
						var clone = cloneVNode(vnode);
						clone.fnContext = contextVm;
						clone.fnOptions = options;
						{
							(clone.devtoolsMeta =
								clone.devtoolsMeta ||
								{}).renderContext = renderContext;
						}
						if (data.slot) {
							(clone.data || (clone.data = {})).slot = data.slot;
						}
						return clone;
					}

					function mergeProps(to, from) {
						for (var key in from) {
							to[camelize(key)] = from[key];
						}
					}

					/*  */

					/*  */

					/*  */

					/*  */

					// inline hooks to be invoked on component VNodes during patch
					var componentVNodeHooks = {
						init: function init(vnode, hydrating) {
							if (
								vnode.componentInstance &&
								!vnode.componentInstance._isDestroyed &&
								vnode.data.keepAlive
							) {
								// kept-alive components, treat as a patch
								var mountedNode = vnode; // work around flow
								componentVNodeHooks.prepatch(
									mountedNode,
									mountedNode
								);
							} else {
								var child = (vnode.componentInstance = createComponentInstanceForVnode(
									vnode,
									activeInstance
								));
								child.$mount(
									hydrating ? vnode.elm : undefined,
									hydrating
								);
							}
						},

						prepatch: function prepatch(oldVnode, vnode) {
							var options = vnode.componentOptions;
							var child = (vnode.componentInstance =
								oldVnode.componentInstance);
							updateChildComponent(
								child,
								options.propsData, // updated props
								options.listeners, // updated listeners
								vnode, // new parent vnode
								options.children // new children
							);
						},

						insert: function insert(vnode) {
							var context = vnode.context;
							var componentInstance = vnode.componentInstance;
							if (!componentInstance._isMounted) {
								componentInstance._isMounted = true;
								callHook(componentInstance, "mounted");
							}
							if (vnode.data.keepAlive) {
								if (context._isMounted) {
									// vue-router#1212
									// During updates, a kept-alive component's child components may
									// change, so directly walking the tree here may call activated hooks
									// on incorrect children. Instead we push them into a queue which will
									// be processed after the whole patch process ended.
									queueActivatedComponent(componentInstance);
								} else {
									activateChildComponent(
										componentInstance,
										true /* direct */
									);
								}
							}
						},

						destroy: function destroy(vnode) {
							var componentInstance = vnode.componentInstance;
							if (!componentInstance._isDestroyed) {
								if (!vnode.data.keepAlive) {
									componentInstance.$destroy();
								} else {
									deactivateChildComponent(
										componentInstance,
										true /* direct */
									);
								}
							}
						},
					};

					var hooksToMerge = Object.keys(componentVNodeHooks);

					function createComponent(
						Ctor,
						data,
						context,
						children,
						tag
					) {
						if (isUndef(Ctor)) {
							return;
						}

						var baseCtor = context.$options._base;

						// plain options object: turn it into a constructor
						if (isObject(Ctor)) {
							Ctor = baseCtor.extend(Ctor);
						}

						// if at this stage it's not a constructor or an async component factory,
						// reject.
						if (typeof Ctor !== "function") {
							{
								warn(
									"Invalid Component definition: " +
										String(Ctor),
									context
								);
							}
							return;
						}

						// async component
						var asyncFactory;
						if (isUndef(Ctor.cid)) {
							asyncFactory = Ctor;
							Ctor = resolveAsyncComponent(
								asyncFactory,
								baseCtor
							);
							if (Ctor === undefined) {
								// return a placeholder node for async component, which is rendered
								// as a comment node but preserves all the raw information for the node.
								// the information will be used for async server-rendering and hydration.
								return createAsyncPlaceholder(
									asyncFactory,
									data,
									context,
									children,
									tag
								);
							}
						}

						data = data || {};

						// resolve constructor options in case global mixins are applied after
						// component constructor creation
						resolveConstructorOptions(Ctor);

						// transform component v-model data into props & events
						if (isDef(data.model)) {
							transformModel(Ctor.options, data);
						}

						// extract props
						var propsData = extractPropsFromVNodeData(
							data,
							Ctor,
							tag
						);

						// functional component
						if (isTrue(Ctor.options.functional)) {
							return createFunctionalComponent(
								Ctor,
								propsData,
								data,
								context,
								children
							);
						}

						// extract listeners, since these needs to be treated as
						// child component listeners instead of DOM listeners
						var listeners = data.on;
						// replace with listeners with .native modifier
						// so it gets processed during parent component patch.
						data.on = data.nativeOn;

						if (isTrue(Ctor.options.abstract)) {
							// abstract components do not keep anything
							// other than props & listeners & slot

							// work around flow
							var slot = data.slot;
							data = {};
							if (slot) {
								data.slot = slot;
							}
						}

						// install component management hooks onto the placeholder node
						installComponentHooks(data);

						// return a placeholder vnode
						var name = Ctor.options.name || tag;
						var vnode = new VNode(
							"vue-component-" +
								Ctor.cid +
								(name ? "-" + name : ""),
							data,
							undefined,
							undefined,
							undefined,
							context,
							{
								Ctor: Ctor,
								propsData: propsData,
								listeners: listeners,
								tag: tag,
								children: children,
							},
							asyncFactory
						);

						return vnode;
					}

					function createComponentInstanceForVnode(
						vnode, // we know it's MountedComponentVNode but flow doesn't
						parent // activeInstance in lifecycle state
					) {
						var options = {
							_isComponent: true,
							_parentVnode: vnode,
							parent: parent,
						};
						// check inline-template render functions
						var inlineTemplate = vnode.data.inlineTemplate;
						if (isDef(inlineTemplate)) {
							options.render = inlineTemplate.render;
							options.staticRenderFns =
								inlineTemplate.staticRenderFns;
						}
						return new vnode.componentOptions.Ctor(options);
					}

					function installComponentHooks(data) {
						var hooks = data.hook || (data.hook = {});
						for (var i = 0; i < hooksToMerge.length; i++) {
							var key = hooksToMerge[i];
							var existing = hooks[key];
							var toMerge = componentVNodeHooks[key];
							if (
								existing !== toMerge &&
								!(existing && existing._merged)
							) {
								hooks[key] = existing
									? mergeHook$1(toMerge, existing)
									: toMerge;
							}
						}
					}

					function mergeHook$1(f1, f2) {
						var merged = function(a, b) {
							// flow complains about extra args which is why we use any
							f1(a, b);
							f2(a, b);
						};
						merged._merged = true;
						return merged;
					}

					// transform component v-model info (value and callback) into
					// prop and event handler respectively.
					function transformModel(options, data) {
						var prop =
							(options.model && options.model.prop) || "value";
						var event =
							(options.model && options.model.event) || "input";
						(data.attrs || (data.attrs = {}))[prop] =
							data.model.value;
						var on = data.on || (data.on = {});
						var existing = on[event];
						var callback = data.model.callback;
						if (isDef(existing)) {
							if (
								Array.isArray(existing)
									? existing.indexOf(callback) === -1
									: existing !== callback
							) {
								on[event] = [callback].concat(existing);
							}
						} else {
							on[event] = callback;
						}
					}

					/*  */

					var SIMPLE_NORMALIZE = 1;
					var ALWAYS_NORMALIZE = 2;

					// wrapper function for providing a more flexible interface
					// without getting yelled at by flow
					function createElement(
						context,
						tag,
						data,
						children,
						normalizationType,
						alwaysNormalize
					) {
						if (Array.isArray(data) || isPrimitive(data)) {
							normalizationType = children;
							children = data;
							data = undefined;
						}
						if (isTrue(alwaysNormalize)) {
							normalizationType = ALWAYS_NORMALIZE;
						}
						return _createElement(
							context,
							tag,
							data,
							children,
							normalizationType
						);
					}

					function _createElement(
						context,
						tag,
						data,
						children,
						normalizationType
					) {
						if (isDef(data) && isDef(data.__ob__)) {
							warn(
								"Avoid using observed data object as vnode data: " +
									JSON.stringify(data) +
									"\n" +
									"Always create fresh vnode data objects in each render!",
								context
							);
							return createEmptyVNode();
						}
						// object syntax in v-bind
						if (isDef(data) && isDef(data.is)) {
							tag = data.is;
						}
						if (!tag) {
							// in case of component :is set to falsy value
							return createEmptyVNode();
						}
						// warn against non-primitive key
						if (
							isDef(data) &&
							isDef(data.key) &&
							!isPrimitive(data.key)
						) {
							{
								warn(
									"Avoid using non-primitive value as key, " +
										"use string/number value instead.",
									context
								);
							}
						}
						// support single function children as default scoped slot
						if (
							Array.isArray(children) &&
							typeof children[0] === "function"
						) {
							data = data || {};
							data.scopedSlots = {default: children[0]};
							children.length = 0;
						}
						if (normalizationType === ALWAYS_NORMALIZE) {
							children = normalizeChildren(children);
						} else if (normalizationType === SIMPLE_NORMALIZE) {
							children = simpleNormalizeChildren(children);
						}
						var vnode, ns;
						if (typeof tag === "string") {
							var Ctor;
							ns =
								(context.$vnode && context.$vnode.ns) ||
								config.getTagNamespace(tag);
							if (config.isReservedTag(tag)) {
								// platform built-in elements
								vnode = new VNode(
									config.parsePlatformTagName(tag),
									data,
									children,
									undefined,
									undefined,
									context
								);
							} else if (
								(!data || !data.pre) &&
								isDef(
									(Ctor = resolveAsset(
										context.$options,
										"components",
										tag
									))
								)
							) {
								// component
								vnode = createComponent(
									Ctor,
									data,
									context,
									children,
									tag
								);
							} else {
								// unknown or unlisted namespaced elements
								// check at runtime because it may get assigned a namespace when its
								// parent normalizes children
								vnode = new VNode(
									tag,
									data,
									children,
									undefined,
									undefined,
									context
								);
							}
						} else {
							// direct component options / constructor
							vnode = createComponent(
								tag,
								data,
								context,
								children
							);
						}
						if (Array.isArray(vnode)) {
							return vnode;
						} else if (isDef(vnode)) {
							if (isDef(ns)) {
								applyNS(vnode, ns);
							}
							if (isDef(data)) {
								registerDeepBindings(data);
							}
							return vnode;
						} else {
							return createEmptyVNode();
						}
					}

					function applyNS(vnode, ns, force) {
						vnode.ns = ns;
						if (vnode.tag === "foreignObject") {
							// use default namespace inside foreignObject
							ns = undefined;
							force = true;
						}
						if (isDef(vnode.children)) {
							for (
								var i = 0, l = vnode.children.length;
								i < l;
								i++
							) {
								var child = vnode.children[i];
								if (
									isDef(child.tag) &&
									(isUndef(child.ns) ||
										(isTrue(force) && child.tag !== "svg"))
								) {
									applyNS(child, ns, force);
								}
							}
						}
					}

					// ref #5318
					// necessary to ensure parent re-render when deep bindings like :style and
					// :class are used on slot nodes
					function registerDeepBindings(data) {
						if (isObject(data.style)) {
							traverse(data.style);
						}
						if (isObject(data.class)) {
							traverse(data.class);
						}
					}

					/*  */

					function initRender(vm) {
						vm._vnode = null; // the root of the child tree
						vm._staticTrees = null; // v-once cached trees
						var options = vm.$options;
						var parentVnode = (vm.$vnode = options._parentVnode); // the placeholder node in parent tree
						var renderContext = parentVnode && parentVnode.context;
						vm.$slots = resolveSlots(
							options._renderChildren,
							renderContext
						);
						vm.$scopedSlots = emptyObject;
						// bind the createElement fn to this instance
						// so that we get proper render context inside it.
						// args order: tag, data, children, normalizationType, alwaysNormalize
						// internal version is used by render functions compiled from templates
						vm._c = function(a, b, c, d) {
							return createElement(vm, a, b, c, d, false);
						};
						// normalization is always applied for the public version, used in
						// user-written render functions.
						vm.$createElement = function(a, b, c, d) {
							return createElement(vm, a, b, c, d, true);
						};

						// $attrs & $listeners are exposed for easier HOC creation.
						// they need to be reactive so that HOCs using them are always updated
						var parentData = parentVnode && parentVnode.data;

						/* istanbul ignore else */
						{
							defineReactive$$1(
								vm,
								"$attrs",
								(parentData && parentData.attrs) || emptyObject,
								function() {
									!isUpdatingChildComponent &&
										warn("$attrs is readonly.", vm);
								},
								true
							);
							defineReactive$$1(
								vm,
								"$listeners",
								options._parentListeners || emptyObject,
								function() {
									!isUpdatingChildComponent &&
										warn("$listeners is readonly.", vm);
								},
								true
							);
						}
					}

					var currentRenderingInstance = null;

					function renderMixin(Vue) {
						// install runtime convenience helpers
						installRenderHelpers(Vue.prototype);

						Vue.prototype.$nextTick = function(fn) {
							return nextTick(fn, this);
						};

						Vue.prototype._render = function() {
							var vm = this;
							var ref = vm.$options;
							var render = ref.render;
							var _parentVnode = ref._parentVnode;

							if (_parentVnode) {
								vm.$scopedSlots = normalizeScopedSlots(
									_parentVnode.data.scopedSlots,
									vm.$slots,
									vm.$scopedSlots
								);
							}

							// set parent vnode. this allows render functions to have access
							// to the data on the placeholder node.
							vm.$vnode = _parentVnode;
							// render self
							var vnode;
							try {
								// There's no need to maintain a stack becaues all render fns are called
								// separately from one another. Nested component's render fns are called
								// when parent component is patched.
								currentRenderingInstance = vm;
								vnode = render.call(
									vm._renderProxy,
									vm.$createElement
								);
							} catch (e) {
								handleError(e, vm, "render");
								// return error render result,
								// or previous vnode to prevent render error causing blank component
								/* istanbul ignore else */
								if (vm.$options.renderError) {
									try {
										vnode = vm.$options.renderError.call(
											vm._renderProxy,
											vm.$createElement,
											e
										);
									} catch (e) {
										handleError(e, vm, "renderError");
										vnode = vm._vnode;
									}
								} else {
									vnode = vm._vnode;
								}
							} finally {
								currentRenderingInstance = null;
							}
							// if the returned array contains only a single node, allow it
							if (Array.isArray(vnode) && vnode.length === 1) {
								vnode = vnode[0];
							}
							// return empty vnode in case the render function errored out
							if (!(vnode instanceof VNode)) {
								if (Array.isArray(vnode)) {
									warn(
										"Multiple root nodes returned from render function. Render function " +
											"should return a single root node.",
										vm
									);
								}
								vnode = createEmptyVNode();
							}
							// set parent
							vnode.parent = _parentVnode;
							return vnode;
						};
					}

					/*  */

					function ensureCtor(comp, base) {
						if (
							comp.__esModule ||
							(hasSymbol && comp[Symbol.toStringTag] === "Module")
						) {
							comp = comp.default;
						}
						return isObject(comp) ? base.extend(comp) : comp;
					}

					function createAsyncPlaceholder(
						factory,
						data,
						context,
						children,
						tag
					) {
						var node = createEmptyVNode();
						node.asyncFactory = factory;
						node.asyncMeta = {
							data: data,
							context: context,
							children: children,
							tag: tag,
						};
						return node;
					}

					function resolveAsyncComponent(factory, baseCtor) {
						if (isTrue(factory.error) && isDef(factory.errorComp)) {
							return factory.errorComp;
						}

						if (isDef(factory.resolved)) {
							return factory.resolved;
						}

						var owner = currentRenderingInstance;
						if (
							owner &&
							isDef(factory.owners) &&
							factory.owners.indexOf(owner) === -1
						) {
							// already pending
							factory.owners.push(owner);
						}

						if (
							isTrue(factory.loading) &&
							isDef(factory.loadingComp)
						) {
							return factory.loadingComp;
						}

						if (owner && !isDef(factory.owners)) {
							var owners = (factory.owners = [owner]);
							var sync = true;
							var timerLoading = null;
							var timerTimeout = null;

							owner.$on("hook:destroyed", function() {
								return remove(owners, owner);
							});

							var forceRender = function(renderCompleted) {
								for (var i = 0, l = owners.length; i < l; i++) {
									owners[i].$forceUpdate();
								}

								if (renderCompleted) {
									owners.length = 0;
									if (timerLoading !== null) {
										clearTimeout(timerLoading);
										timerLoading = null;
									}
									if (timerTimeout !== null) {
										clearTimeout(timerTimeout);
										timerTimeout = null;
									}
								}
							};

							var resolve = once(function(res) {
								// cache resolved
								factory.resolved = ensureCtor(res, baseCtor);
								// invoke callbacks only if this is not a synchronous resolve
								// (async resolves are shimmed as synchronous during SSR)
								if (!sync) {
									forceRender(true);
								} else {
									owners.length = 0;
								}
							});

							var reject = once(function(reason) {
								warn(
									"Failed to resolve async component: " +
										String(factory) +
										(reason ? "\nReason: " + reason : "")
								);
								if (isDef(factory.errorComp)) {
									factory.error = true;
									forceRender(true);
								}
							});

							var res = factory(resolve, reject);

							if (isObject(res)) {
								if (isPromise(res)) {
									// () => Promise
									if (isUndef(factory.resolved)) {
										res.then(resolve, reject);
									}
								} else if (isPromise(res.component)) {
									res.component.then(resolve, reject);

									if (isDef(res.error)) {
										factory.errorComp = ensureCtor(
											res.error,
											baseCtor
										);
									}

									if (isDef(res.loading)) {
										factory.loadingComp = ensureCtor(
											res.loading,
											baseCtor
										);
										if (res.delay === 0) {
											factory.loading = true;
										} else {
											timerLoading = setTimeout(
												function() {
													timerLoading = null;
													if (
														isUndef(
															factory.resolved
														) &&
														isUndef(factory.error)
													) {
														factory.loading = true;
														forceRender(false);
													}
												},
												res.delay || 200
											);
										}
									}

									if (isDef(res.timeout)) {
										timerTimeout = setTimeout(function() {
											timerTimeout = null;
											if (isUndef(factory.resolved)) {
												reject(
													"timeout (" +
														res.timeout +
														"ms)"
												);
											}
										}, res.timeout);
									}
								}
							}

							sync = false;
							// return in case resolved synchronously
							return factory.loading
								? factory.loadingComp
								: factory.resolved;
						}
					}

					/*  */

					function isAsyncPlaceholder(node) {
						return node.isComment && node.asyncFactory;
					}

					/*  */

					function getFirstComponentChild(children) {
						if (Array.isArray(children)) {
							for (var i = 0; i < children.length; i++) {
								var c = children[i];
								if (
									isDef(c) &&
									(isDef(c.componentOptions) ||
										isAsyncPlaceholder(c))
								) {
									return c;
								}
							}
						}
					}

					/*  */

					/*  */

					function initEvents(vm) {
						vm._events = Object.create(null);
						vm._hasHookEvent = false;
						// init parent attached events
						var listeners = vm.$options._parentListeners;
						if (listeners) {
							updateComponentListeners(vm, listeners);
						}
					}

					var target;

					function add(event, fn) {
						target.$on(event, fn);
					}

					function remove$1(event, fn) {
						target.$off(event, fn);
					}

					function createOnceHandler(event, fn) {
						var _target = target;
						return function onceHandler() {
							var res = fn.apply(null, arguments);
							if (res !== null) {
								_target.$off(event, onceHandler);
							}
						};
					}

					function updateComponentListeners(
						vm,
						listeners,
						oldListeners
					) {
						target = vm;
						updateListeners(
							listeners,
							oldListeners || {},
							add,
							remove$1,
							createOnceHandler,
							vm
						);
						target = undefined;
					}

					function eventsMixin(Vue) {
						var hookRE = /^hook:/;
						Vue.prototype.$on = function(event, fn) {
							var vm = this;
							if (Array.isArray(event)) {
								for (var i = 0, l = event.length; i < l; i++) {
									vm.$on(event[i], fn);
								}
							} else {
								(
									vm._events[event] ||
									(vm._events[event] = [])
								).push(fn);
								// optimize hook:event cost by using a boolean flag marked at registration
								// instead of a hash lookup
								if (hookRE.test(event)) {
									vm._hasHookEvent = true;
								}
							}
							return vm;
						};

						Vue.prototype.$once = function(event, fn) {
							var vm = this;
							function on() {
								vm.$off(event, on);
								fn.apply(vm, arguments);
							}
							on.fn = fn;
							vm.$on(event, on);
							return vm;
						};

						Vue.prototype.$off = function(event, fn) {
							var vm = this;
							// all
							if (!arguments.length) {
								vm._events = Object.create(null);
								return vm;
							}
							// array of events
							if (Array.isArray(event)) {
								for (
									var i$1 = 0, l = event.length;
									i$1 < l;
									i$1++
								) {
									vm.$off(event[i$1], fn);
								}
								return vm;
							}
							// specific event
							var cbs = vm._events[event];
							if (!cbs) {
								return vm;
							}
							if (!fn) {
								vm._events[event] = null;
								return vm;
							}
							// specific handler
							var cb;
							var i = cbs.length;
							while (i--) {
								cb = cbs[i];
								if (cb === fn || cb.fn === fn) {
									cbs.splice(i, 1);
									break;
								}
							}
							return vm;
						};

						Vue.prototype.$emit = function(event) {
							var vm = this;
							{
								var lowerCaseEvent = event.toLowerCase();
								if (
									lowerCaseEvent !== event &&
									vm._events[lowerCaseEvent]
								) {
									tip(
										'Event "' +
											lowerCaseEvent +
											'" is emitted in component ' +
											formatComponentName(vm) +
											' but the handler is registered for "' +
											event +
											'". ' +
											"Note that HTML attributes are case-insensitive and you cannot use " +
											"v-on to listen to camelCase events when using in-DOM templates. " +
											'You should probably use "' +
											hyphenate(event) +
											'" instead of "' +
											event +
											'".'
									);
								}
							}
							var cbs = vm._events[event];
							if (cbs) {
								cbs = cbs.length > 1 ? toArray(cbs) : cbs;
								var args = toArray(arguments, 1);
								var info = 'event handler for "' + event + '"';
								for (var i = 0, l = cbs.length; i < l; i++) {
									invokeWithErrorHandling(
										cbs[i],
										vm,
										args,
										vm,
										info
									);
								}
							}
							return vm;
						};
					}

					/*  */

					var activeInstance = null;
					var isUpdatingChildComponent = false;

					function setActiveInstance(vm) {
						var prevActiveInstance = activeInstance;
						activeInstance = vm;
						return function() {
							activeInstance = prevActiveInstance;
						};
					}

					function initLifecycle(vm) {
						var options = vm.$options;

						// locate first non-abstract parent
						var parent = options.parent;
						if (parent && !options.abstract) {
							while (parent.$options.abstract && parent.$parent) {
								parent = parent.$parent;
							}
							parent.$children.push(vm);
						}

						vm.$parent = parent;
						vm.$root = parent ? parent.$root : vm;

						vm.$children = [];
						vm.$refs = {};

						vm._watcher = null;
						vm._inactive = null;
						vm._directInactive = false;
						vm._isMounted = false;
						vm._isDestroyed = false;
						vm._isBeingDestroyed = false;
					}

					function lifecycleMixin(Vue) {
						Vue.prototype._update = function(vnode, hydrating) {
							var vm = this;
							var prevEl = vm.$el;
							var prevVnode = vm._vnode;
							var restoreActiveInstance = setActiveInstance(vm);
							vm._vnode = vnode;
							// Vue.prototype.__patch__ is injected in entry points
							// based on the rendering backend used.
							if (!prevVnode) {
								// initial render
								vm.$el = vm.__patch__(
									vm.$el,
									vnode,
									hydrating,
									false /* removeOnly */
								);
							} else {
								// updates
								vm.$el = vm.__patch__(prevVnode, vnode);
							}
							restoreActiveInstance();
							// update __vue__ reference
							if (prevEl) {
								prevEl.__vue__ = null;
							}
							if (vm.$el) {
								vm.$el.__vue__ = vm;
							}
							// if parent is an HOC, update its $el as well
							if (
								vm.$vnode &&
								vm.$parent &&
								vm.$vnode === vm.$parent._vnode
							) {
								vm.$parent.$el = vm.$el;
							}
							// updated hook is called by the scheduler to ensure that children are
							// updated in a parent's updated hook.
						};

						Vue.prototype.$forceUpdate = function() {
							var vm = this;
							if (vm._watcher) {
								vm._watcher.update();
							}
						};

						Vue.prototype.$destroy = function() {
							var vm = this;
							if (vm._isBeingDestroyed) {
								return;
							}
							callHook(vm, "beforeDestroy");
							vm._isBeingDestroyed = true;
							// remove self from parent
							var parent = vm.$parent;
							if (
								parent &&
								!parent._isBeingDestroyed &&
								!vm.$options.abstract
							) {
								remove(parent.$children, vm);
							}
							// teardown watchers
							if (vm._watcher) {
								vm._watcher.teardown();
							}
							var i = vm._watchers.length;
							while (i--) {
								vm._watchers[i].teardown();
							}
							// remove reference from data ob
							// frozen object may not have observer.
							if (vm._data.__ob__) {
								vm._data.__ob__.vmCount--;
							}
							// call the last hook...
							vm._isDestroyed = true;
							// invoke destroy hooks on current rendered tree
							vm.__patch__(vm._vnode, null);
							// fire destroyed hook
							callHook(vm, "destroyed");
							// turn off all instance listeners.
							vm.$off();
							// remove __vue__ reference
							if (vm.$el) {
								vm.$el.__vue__ = null;
							}
							// release circular reference (#6759)
							if (vm.$vnode) {
								vm.$vnode.parent = null;
							}
						};
					}

					function mountComponent(vm, el, hydrating) {
						vm.$el = el;
						if (!vm.$options.render) {
							vm.$options.render = createEmptyVNode;
							{
								/* istanbul ignore if */
								if (
									(vm.$options.template &&
										vm.$options.template.charAt(0) !==
											"#") ||
									vm.$options.el ||
									el
								) {
									warn(
										"You are using the runtime-only build of Vue where the template " +
											"compiler is not available. Either pre-compile the templates into " +
											"render functions, or use the compiler-included build.",
										vm
									);
								} else {
									warn(
										"Failed to mount component: template or render function not defined.",
										vm
									);
								}
							}
						}
						callHook(vm, "beforeMount");

						var updateComponent;
						/* istanbul ignore if */
						if (config.performance && mark) {
							updateComponent = function() {
								var name = vm._name;
								var id = vm._uid;
								var startTag = "vue-perf-start:" + id;
								var endTag = "vue-perf-end:" + id;

								mark(startTag);
								var vnode = vm._render();
								mark(endTag);
								measure(
									"vue " + name + " render",
									startTag,
									endTag
								);

								mark(startTag);
								vm._update(vnode, hydrating);
								mark(endTag);
								measure(
									"vue " + name + " patch",
									startTag,
									endTag
								);
							};
						} else {
							updateComponent = function() {
								vm._update(vm._render(), hydrating);
							};
						}

						// we set this to vm._watcher inside the watcher's constructor
						// since the watcher's initial patch may call $forceUpdate (e.g. inside child
						// component's mounted hook), which relies on vm._watcher being already defined
						new Watcher(
							vm,
							updateComponent,
							noop,
							{
								before: function before() {
									if (vm._isMounted && !vm._isDestroyed) {
										callHook(vm, "beforeUpdate");
									}
								},
							},
							true /* isRenderWatcher */
						);
						hydrating = false;

						// manually mounted instance, call mounted on self
						// mounted is called for render-created child components in its inserted hook
						if (vm.$vnode == null) {
							vm._isMounted = true;
							callHook(vm, "mounted");
						}
						return vm;
					}

					function updateChildComponent(
						vm,
						propsData,
						listeners,
						parentVnode,
						renderChildren
					) {
						{
							isUpdatingChildComponent = true;
						}

						// determine whether component has slot children
						// we need to do this before overwriting $options._renderChildren.

						// check if there are dynamic scopedSlots (hand-written or compiled but with
						// dynamic slot names). Static scoped slots compiled from template has the
						// "$stable" marker.
						var newScopedSlots = parentVnode.data.scopedSlots;
						var oldScopedSlots = vm.$scopedSlots;
						var hasDynamicScopedSlot = !!(
							(newScopedSlots && !newScopedSlots.$stable) ||
							(oldScopedSlots !== emptyObject &&
								!oldScopedSlots.$stable) ||
							(newScopedSlots &&
								vm.$scopedSlots.$key !== newScopedSlots.$key)
						);

						// Any static slot children from the parent may have changed during parent's
						// update. Dynamic scoped slots may also have changed. In such cases, a forced
						// update is necessary to ensure correctness.
						var needsForceUpdate = !!(
							renderChildren || // has new static slots
							vm.$options._renderChildren || // has old static slots
							hasDynamicScopedSlot
						);

						vm.$options._parentVnode = parentVnode;
						vm.$vnode = parentVnode; // update vm's placeholder node without re-render

						if (vm._vnode) {
							// update child tree's parent
							vm._vnode.parent = parentVnode;
						}
						vm.$options._renderChildren = renderChildren;

						// update $attrs and $listeners hash
						// these are also reactive so they may trigger child update if the child
						// used them during render
						vm.$attrs = parentVnode.data.attrs || emptyObject;
						vm.$listeners = listeners || emptyObject;

						// update props
						if (propsData && vm.$options.props) {
							toggleObserving(false);
							var props = vm._props;
							var propKeys = vm.$options._propKeys || [];
							for (var i = 0; i < propKeys.length; i++) {
								var key = propKeys[i];
								var propOptions = vm.$options.props; // wtf flow?
								props[key] = validateProp(
									key,
									propOptions,
									propsData,
									vm
								);
							}
							toggleObserving(true);
							// keep a copy of raw propsData
							vm.$options.propsData = propsData;
						}

						// update listeners
						listeners = listeners || emptyObject;
						var oldListeners = vm.$options._parentListeners;
						vm.$options._parentListeners = listeners;
						updateComponentListeners(vm, listeners, oldListeners);

						// resolve slots + force update if has children
						if (needsForceUpdate) {
							vm.$slots = resolveSlots(
								renderChildren,
								parentVnode.context
							);
							vm.$forceUpdate();
						}

						{
							isUpdatingChildComponent = false;
						}
					}

					function isInInactiveTree(vm) {
						while (vm && (vm = vm.$parent)) {
							if (vm._inactive) {
								return true;
							}
						}
						return false;
					}

					function activateChildComponent(vm, direct) {
						if (direct) {
							vm._directInactive = false;
							if (isInInactiveTree(vm)) {
								return;
							}
						} else if (vm._directInactive) {
							return;
						}
						if (vm._inactive || vm._inactive === null) {
							vm._inactive = false;
							for (var i = 0; i < vm.$children.length; i++) {
								activateChildComponent(vm.$children[i]);
							}
							callHook(vm, "activated");
						}
					}

					function deactivateChildComponent(vm, direct) {
						if (direct) {
							vm._directInactive = true;
							if (isInInactiveTree(vm)) {
								return;
							}
						}
						if (!vm._inactive) {
							vm._inactive = true;
							for (var i = 0; i < vm.$children.length; i++) {
								deactivateChildComponent(vm.$children[i]);
							}
							callHook(vm, "deactivated");
						}
					}

					function callHook(vm, hook) {
						// #7573 disable dep collection when invoking lifecycle hooks
						pushTarget();
						var handlers = vm.$options[hook];
						var info = hook + " hook";
						if (handlers) {
							for (var i = 0, j = handlers.length; i < j; i++) {
								invokeWithErrorHandling(
									handlers[i],
									vm,
									null,
									vm,
									info
								);
							}
						}
						if (vm._hasHookEvent) {
							vm.$emit("hook:" + hook);
						}
						popTarget();
					}

					/*  */

					var MAX_UPDATE_COUNT = 100;

					var queue = [];
					var activatedChildren = [];
					var has = {};
					var circular = {};
					var waiting = false;
					var flushing = false;
					var index = 0;

					/**
					 * Reset the scheduler's state.
					 */
					function resetSchedulerState() {
						index = queue.length = activatedChildren.length = 0;
						has = {};
						{
							circular = {};
						}
						waiting = flushing = false;
					}

					// Async edge case #6566 requires saving the timestamp when event listeners are
					// attached. However, calling performance.now() has a perf overhead especially
					// if the page has thousands of event listeners. Instead, we take a timestamp
					// every time the scheduler flushes and use that for all event listeners
					// attached during that flush.
					var currentFlushTimestamp = 0;

					// Async edge case fix requires storing an event listener's attach timestamp.
					var getNow = Date.now;

					// Determine what event timestamp the browser is using. Annoyingly, the
					// timestamp can either be hi-res (relative to page load) or low-res
					// (relative to UNIX epoch), so in order to compare time we have to use the
					// same timestamp type when saving the flush timestamp.
					// All IE versions use low-res event timestamps, and have problematic clock
					// implementations (#9632)
					if (inBrowser && !isIE) {
						var performance = window.performance;
						if (
							performance &&
							typeof performance.now === "function" &&
							getNow() > document.createEvent("Event").timeStamp
						) {
							// if the event timestamp, although evaluated AFTER the Date.now(), is
							// smaller than it, it means the event is using a hi-res timestamp,
							// and we need to use the hi-res version for event listener timestamps as
							// well.
							getNow = function() {
								return performance.now();
							};
						}
					}

					/**
					 * Flush both queues and run the watchers.
					 */
					function flushSchedulerQueue() {
						currentFlushTimestamp = getNow();
						flushing = true;
						var watcher, id;

						// Sort queue before flush.
						// This ensures that:
						// 1. Components are updated from parent to child. (because parent is always
						//    created before the child)
						// 2. A component's user watchers are run before its render watcher (because
						//    user watchers are created before the render watcher)
						// 3. If a component is destroyed during a parent component's watcher run,
						//    its watchers can be skipped.
						queue.sort(function(a, b) {
							return a.id - b.id;
						});

						// do not cache length because more watchers might be pushed
						// as we run existing watchers
						for (index = 0; index < queue.length; index++) {
							watcher = queue[index];
							if (watcher.before) {
								watcher.before();
							}
							id = watcher.id;
							has[id] = null;
							watcher.run();
							// in dev build, check and stop circular updates.
							if (has[id] != null) {
								circular[id] = (circular[id] || 0) + 1;
								if (circular[id] > MAX_UPDATE_COUNT) {
									warn(
										"You may have an infinite update loop " +
											(watcher.user
												? 'in watcher with expression "' +
												  watcher.expression +
												  '"'
												: "in a component render function."),
										watcher.vm
									);
									break;
								}
							}
						}

						// keep copies of post queues before resetting state
						var activatedQueue = activatedChildren.slice();
						var updatedQueue = queue.slice();

						resetSchedulerState();

						// call component updated and activated hooks
						callActivatedHooks(activatedQueue);
						callUpdatedHooks(updatedQueue);

						// devtool hook
						/* istanbul ignore if */
						if (devtools && config.devtools) {
							devtools.emit("flush");
						}
					}

					function callUpdatedHooks(queue) {
						var i = queue.length;
						while (i--) {
							var watcher = queue[i];
							var vm = watcher.vm;
							if (
								vm._watcher === watcher &&
								vm._isMounted &&
								!vm._isDestroyed
							) {
								callHook(vm, "updated");
							}
						}
					}

					/**
					 * Queue a kept-alive component that was activated during patch.
					 * The queue will be processed after the entire tree has been patched.
					 */
					function queueActivatedComponent(vm) {
						// setting _inactive to false here so that a render function can
						// rely on checking whether it's in an inactive tree (e.g. router-view)
						vm._inactive = false;
						activatedChildren.push(vm);
					}

					function callActivatedHooks(queue) {
						for (var i = 0; i < queue.length; i++) {
							queue[i]._inactive = true;
							activateChildComponent(queue[i], true /* true */);
						}
					}

					/**
					 * Push a watcher into the watcher queue.
					 * Jobs with duplicate IDs will be skipped unless it's
					 * pushed when the queue is being flushed.
					 */
					function queueWatcher(watcher) {
						var id = watcher.id;
						if (has[id] == null) {
							has[id] = true;
							if (!flushing) {
								queue.push(watcher);
							} else {
								// if already flushing, splice the watcher based on its id
								// if already past its id, it will be run next immediately.
								var i = queue.length - 1;
								while (i > index && queue[i].id > watcher.id) {
									i--;
								}
								queue.splice(i + 1, 0, watcher);
							}
							// queue the flush
							if (!waiting) {
								waiting = true;

								if (!config.async) {
									flushSchedulerQueue();
									return;
								}
								nextTick(flushSchedulerQueue);
							}
						}
					}

					/*  */

					var uid$2 = 0;

					/**
					 * A watcher parses an expression, collects dependencies,
					 * and fires callback when the expression value changes.
					 * This is used for both the $watch() api and directives.
					 */
					var Watcher = function Watcher(
						vm,
						expOrFn,
						cb,
						options,
						isRenderWatcher
					) {
						this.vm = vm;
						if (isRenderWatcher) {
							vm._watcher = this;
						}
						vm._watchers.push(this);
						// options
						if (options) {
							this.deep = !!options.deep;
							this.user = !!options.user;
							this.lazy = !!options.lazy;
							this.sync = !!options.sync;
							this.before = options.before;
						} else {
							this.deep = this.user = this.lazy = this.sync = false;
						}
						this.cb = cb;
						this.id = ++uid$2; // uid for batching
						this.active = true;
						this.dirty = this.lazy; // for lazy watchers
						this.deps = [];
						this.newDeps = [];
						this.depIds = new _Set();
						this.newDepIds = new _Set();
						this.expression = expOrFn.toString();
						// parse expression for getter
						if (typeof expOrFn === "function") {
							this.getter = expOrFn;
						} else {
							this.getter = parsePath(expOrFn);
							if (!this.getter) {
								this.getter = noop;
								warn(
									'Failed watching path: "' +
										expOrFn +
										'" ' +
										"Watcher only accepts simple dot-delimited paths. " +
										"For full control, use a function instead.",
									vm
								);
							}
						}
						this.value = this.lazy ? undefined : this.get();
					};

					/**
					 * Evaluate the getter, and re-collect dependencies.
					 */
					Watcher.prototype.get = function get() {
						pushTarget(this);
						var value;
						var vm = this.vm;
						try {
							value = this.getter.call(vm, vm);
						} catch (e) {
							if (this.user) {
								handleError(
									e,
									vm,
									'getter for watcher "' +
										this.expression +
										'"'
								);
							} else {
								throw e;
							}
						} finally {
							// "touch" every property so they are all tracked as
							// dependencies for deep watching
							if (this.deep) {
								traverse(value);
							}
							popTarget();
							this.cleanupDeps();
						}
						return value;
					};

					/**
					 * Add a dependency to this directive.
					 */
					Watcher.prototype.addDep = function addDep(dep) {
						var id = dep.id;
						if (!this.newDepIds.has(id)) {
							this.newDepIds.add(id);
							this.newDeps.push(dep);
							if (!this.depIds.has(id)) {
								dep.addSub(this);
							}
						}
					};

					/**
					 * Clean up for dependency collection.
					 */
					Watcher.prototype.cleanupDeps = function cleanupDeps() {
						var i = this.deps.length;
						while (i--) {
							var dep = this.deps[i];
							if (!this.newDepIds.has(dep.id)) {
								dep.removeSub(this);
							}
						}
						var tmp = this.depIds;
						this.depIds = this.newDepIds;
						this.newDepIds = tmp;
						this.newDepIds.clear();
						tmp = this.deps;
						this.deps = this.newDeps;
						this.newDeps = tmp;
						this.newDeps.length = 0;
					};

					/**
					 * Subscriber interface.
					 * Will be called when a dependency changes.
					 */
					Watcher.prototype.update = function update() {
						/* istanbul ignore else */
						if (this.lazy) {
							this.dirty = true;
						} else if (this.sync) {
							this.run();
						} else {
							queueWatcher(this);
						}
					};

					/**
					 * Scheduler job interface.
					 * Will be called by the scheduler.
					 */
					Watcher.prototype.run = function run() {
						if (this.active) {
							var value = this.get();
							if (
								value !== this.value ||
								// Deep watchers and watchers on Object/Arrays should fire even
								// when the value is the same, because the value may
								// have mutated.
								isObject(value) ||
								this.deep
							) {
								// set new value
								var oldValue = this.value;
								this.value = value;
								if (this.user) {
									try {
										this.cb.call(this.vm, value, oldValue);
									} catch (e) {
										handleError(
											e,
											this.vm,
											'callback for watcher "' +
												this.expression +
												'"'
										);
									}
								} else {
									this.cb.call(this.vm, value, oldValue);
								}
							}
						}
					};

					/**
					 * Evaluate the value of the watcher.
					 * This only gets called for lazy watchers.
					 */
					Watcher.prototype.evaluate = function evaluate() {
						this.value = this.get();
						this.dirty = false;
					};

					/**
					 * Depend on all deps collected by this watcher.
					 */
					Watcher.prototype.depend = function depend() {
						var i = this.deps.length;
						while (i--) {
							this.deps[i].depend();
						}
					};

					/**
					 * Remove self from all dependencies' subscriber list.
					 */
					Watcher.prototype.teardown = function teardown() {
						if (this.active) {
							// remove self from vm's watcher list
							// this is a somewhat expensive operation so we skip it
							// if the vm is being destroyed.
							if (!this.vm._isBeingDestroyed) {
								remove(this.vm._watchers, this);
							}
							var i = this.deps.length;
							while (i--) {
								this.deps[i].removeSub(this);
							}
							this.active = false;
						}
					};

					/*  */

					var sharedPropertyDefinition = {
						enumerable: true,
						configurable: true,
						get: noop,
						set: noop,
					};

					function proxy(target, sourceKey, key) {
						sharedPropertyDefinition.get = function proxyGetter() {
							return this[sourceKey][key];
						};
						sharedPropertyDefinition.set = function proxySetter(
							val
						) {
							this[sourceKey][key] = val;
						};
						Object.defineProperty(
							target,
							key,
							sharedPropertyDefinition
						);
					}

					function initState(vm) {
						vm._watchers = [];
						var opts = vm.$options;
						if (opts.props) {
							initProps(vm, opts.props);
						}
						if (opts.methods) {
							initMethods(vm, opts.methods);
						}
						if (opts.data) {
							initData(vm);
						} else {
							observe((vm._data = {}), true /* asRootData */);
						}
						if (opts.computed) {
							initComputed(vm, opts.computed);
						}
						if (opts.watch && opts.watch !== nativeWatch) {
							initWatch(vm, opts.watch);
						}
					}

					function initProps(vm, propsOptions) {
						var propsData = vm.$options.propsData || {};
						var props = (vm._props = {});
						// cache prop keys so that future props updates can iterate using Array
						// instead of dynamic object key enumeration.
						var keys = (vm.$options._propKeys = []);
						var isRoot = !vm.$parent;
						// root instance props should be converted
						if (!isRoot) {
							toggleObserving(false);
						}
						var loop = function(key) {
							keys.push(key);
							var value = validateProp(
								key,
								propsOptions,
								propsData,
								vm
							);
							/* istanbul ignore else */
							{
								var hyphenatedKey = hyphenate(key);
								if (
									isReservedAttribute(hyphenatedKey) ||
									config.isReservedAttr(hyphenatedKey)
								) {
									warn(
										'"' +
											hyphenatedKey +
											'" is a reserved attribute and cannot be used as component prop.',
										vm
									);
								}
								defineReactive$$1(
									props,
									key,
									value,
									function() {
										if (
											!isRoot &&
											!isUpdatingChildComponent
										) {
											warn(
												"Avoid mutating a prop directly since the value will be " +
													"overwritten whenever the parent component re-renders. " +
													"Instead, use a data or computed property based on the prop's " +
													'value. Prop being mutated: "' +
													key +
													'"',
												vm
											);
										}
									}
								);
							}
							// static props are already proxied on the component's prototype
							// during Vue.extend(). We only need to proxy props defined at
							// instantiation here.
							if (!(key in vm)) {
								proxy(vm, "_props", key);
							}
						};

						for (var key in propsOptions) loop(key);
						toggleObserving(true);
					}

					function initData(vm) {
						var data = vm.$options.data;
						data = vm._data =
							typeof data === "function"
								? getData(data, vm)
								: data || {};
						if (!isPlainObject(data)) {
							data = {};
							warn(
								"data functions should return an object:\n" +
									"https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",
								vm
							);
						}
						// proxy data on instance
						var keys = Object.keys(data);
						var props = vm.$options.props;
						var methods = vm.$options.methods;
						var i = keys.length;
						while (i--) {
							var key = keys[i];
							{
								if (methods && hasOwn(methods, key)) {
									warn(
										'Method "' +
											key +
											'" has already been defined as a data property.',
										vm
									);
								}
							}
							if (props && hasOwn(props, key)) {
								warn(
									'The data property "' +
										key +
										'" is already declared as a prop. ' +
										"Use prop default value instead.",
									vm
								);
							} else if (!isReserved(key)) {
								proxy(vm, "_data", key);
							}
						}
						// observe data
						observe(data, true /* asRootData */);
					}

					function getData(data, vm) {
						// #7573 disable dep collection when invoking data getters
						pushTarget();
						try {
							return data.call(vm, vm);
						} catch (e) {
							handleError(e, vm, "data()");
							return {};
						} finally {
							popTarget();
						}
					}

					var computedWatcherOptions = {lazy: true};

					function initComputed(vm, computed) {
						// $flow-disable-line
						var watchers = (vm._computedWatchers = Object.create(
							null
						));
						// computed properties are just getters during SSR
						var isSSR = isServerRendering();

						for (var key in computed) {
							var userDef = computed[key];
							var getter =
								typeof userDef === "function"
									? userDef
									: userDef.get;
							if (getter == null) {
								warn(
									'Getter is missing for computed property "' +
										key +
										'".',
									vm
								);
							}

							if (!isSSR) {
								// create internal watcher for the computed property.
								watchers[key] = new Watcher(
									vm,
									getter || noop,
									noop,
									computedWatcherOptions
								);
							}

							// component-defined computed properties are already defined on the
							// component prototype. We only need to define computed properties defined
							// at instantiation here.
							if (!(key in vm)) {
								defineComputed(vm, key, userDef);
							} else {
								if (key in vm.$data) {
									warn(
										'The computed property "' +
											key +
											'" is already defined in data.',
										vm
									);
								} else if (
									vm.$options.props &&
									key in vm.$options.props
								) {
									warn(
										'The computed property "' +
											key +
											'" is already defined as a prop.',
										vm
									);
								}
							}
						}
					}

					function defineComputed(target, key, userDef) {
						var shouldCache = !isServerRendering();
						if (typeof userDef === "function") {
							sharedPropertyDefinition.get = shouldCache
								? createComputedGetter(key)
								: createGetterInvoker(userDef);
							sharedPropertyDefinition.set = noop;
						} else {
							sharedPropertyDefinition.get = userDef.get
								? shouldCache && userDef.cache !== false
									? createComputedGetter(key)
									: createGetterInvoker(userDef.get)
								: noop;
							sharedPropertyDefinition.set = userDef.set || noop;
						}
						if (sharedPropertyDefinition.set === noop) {
							sharedPropertyDefinition.set = function() {
								warn(
									'Computed property "' +
										key +
										'" was assigned to but it has no setter.',
									this
								);
							};
						}
						Object.defineProperty(
							target,
							key,
							sharedPropertyDefinition
						);
					}

					function createComputedGetter(key) {
						return function computedGetter() {
							var watcher =
								this._computedWatchers &&
								this._computedWatchers[key];
							if (watcher) {
								if (watcher.dirty) {
									watcher.evaluate();
								}
								if (Dep.target) {
									watcher.depend();
								}
								return watcher.value;
							}
						};
					}

					function createGetterInvoker(fn) {
						return function computedGetter() {
							return fn.call(this, this);
						};
					}

					function initMethods(vm, methods) {
						var props = vm.$options.props;
						for (var key in methods) {
							{
								if (typeof methods[key] !== "function") {
									warn(
										'Method "' +
											key +
											'" has type "' +
											typeof methods[key] +
											'" in the component definition. ' +
											"Did you reference the function correctly?",
										vm
									);
								}
								if (props && hasOwn(props, key)) {
									warn(
										'Method "' +
											key +
											'" has already been defined as a prop.',
										vm
									);
								}
								if (key in vm && isReserved(key)) {
									warn(
										'Method "' +
											key +
											'" conflicts with an existing Vue instance method. ' +
											"Avoid defining component methods that start with _ or $."
									);
								}
							}
							vm[key] =
								typeof methods[key] !== "function"
									? noop
									: bind(methods[key], vm);
						}
					}

					function initWatch(vm, watch) {
						for (var key in watch) {
							var handler = watch[key];
							if (Array.isArray(handler)) {
								for (var i = 0; i < handler.length; i++) {
									createWatcher(vm, key, handler[i]);
								}
							} else {
								createWatcher(vm, key, handler);
							}
						}
					}

					function createWatcher(vm, expOrFn, handler, options) {
						if (isPlainObject(handler)) {
							options = handler;
							handler = handler.handler;
						}
						if (typeof handler === "string") {
							handler = vm[handler];
						}
						return vm.$watch(expOrFn, handler, options);
					}

					function stateMixin(Vue) {
						// flow somehow has problems with directly declared definition object
						// when using Object.defineProperty, so we have to procedurally build up
						// the object here.
						var dataDef = {};
						dataDef.get = function() {
							return this._data;
						};
						var propsDef = {};
						propsDef.get = function() {
							return this._props;
						};
						{
							dataDef.set = function() {
								warn(
									"Avoid replacing instance root $data. " +
										"Use nested data properties instead.",
									this
								);
							};
							propsDef.set = function() {
								warn("$props is readonly.", this);
							};
						}
						Object.defineProperty(Vue.prototype, "$data", dataDef);
						Object.defineProperty(
							Vue.prototype,
							"$props",
							propsDef
						);

						Vue.prototype.$set = set;
						Vue.prototype.$delete = del;

						Vue.prototype.$watch = function(expOrFn, cb, options) {
							var vm = this;
							if (isPlainObject(cb)) {
								return createWatcher(vm, expOrFn, cb, options);
							}
							options = options || {};
							options.user = true;
							var watcher = new Watcher(vm, expOrFn, cb, options);
							if (options.immediate) {
								try {
									cb.call(vm, watcher.value);
								} catch (error) {
									handleError(
										error,
										vm,
										'callback for immediate watcher "' +
											watcher.expression +
											'"'
									);
								}
							}
							return function unwatchFn() {
								watcher.teardown();
							};
						};
					}

					/*  */

					var uid$3 = 0;

					function initMixin(Vue) {
						Vue.prototype._init = function(options) {
							var vm = this;
							// a uid
							vm._uid = uid$3++;

							var startTag, endTag;
							/* istanbul ignore if */
							if (config.performance && mark) {
								startTag = "vue-perf-start:" + vm._uid;
								endTag = "vue-perf-end:" + vm._uid;
								mark(startTag);
							}

							// a flag to avoid this being observed
							vm._isVue = true;
							// merge options
							if (options && options._isComponent) {
								// optimize internal component instantiation
								// since dynamic options merging is pretty slow, and none of the
								// internal component options needs special treatment.
								initInternalComponent(vm, options);
							} else {
								vm.$options = mergeOptions(
									resolveConstructorOptions(vm.constructor),
									options || {},
									vm
								);
							}
							/* istanbul ignore else */
							{
								initProxy(vm);
							}
							// expose real self
							vm._self = vm;
							initLifecycle(vm);
							initEvents(vm);
							initRender(vm);
							callHook(vm, "beforeCreate");
							initInjections(vm); // resolve injections before data/props
							initState(vm);
							initProvide(vm); // resolve provide after data/props
							callHook(vm, "created");

							/* istanbul ignore if */
							if (config.performance && mark) {
								vm._name = formatComponentName(vm, false);
								mark(endTag);
								measure(
									"vue " + vm._name + " init",
									startTag,
									endTag
								);
							}

							if (vm.$options.el) {
								vm.$mount(vm.$options.el);
							}
						};
					}

					function initInternalComponent(vm, options) {
						var opts = (vm.$options = Object.create(
							vm.constructor.options
						));
						// doing this because it's faster than dynamic enumeration.
						var parentVnode = options._parentVnode;
						opts.parent = options.parent;
						opts._parentVnode = parentVnode;

						var vnodeComponentOptions =
							parentVnode.componentOptions;
						opts.propsData = vnodeComponentOptions.propsData;
						opts._parentListeners = vnodeComponentOptions.listeners;
						opts._renderChildren = vnodeComponentOptions.children;
						opts._componentTag = vnodeComponentOptions.tag;

						if (options.render) {
							opts.render = options.render;
							opts.staticRenderFns = options.staticRenderFns;
						}
					}

					function resolveConstructorOptions(Ctor) {
						var options = Ctor.options;
						if (Ctor.super) {
							var superOptions = resolveConstructorOptions(
								Ctor.super
							);
							var cachedSuperOptions = Ctor.superOptions;
							if (superOptions !== cachedSuperOptions) {
								// super option changed,
								// need to resolve new options.
								Ctor.superOptions = superOptions;
								// check if there are any late-modified/attached options (#4976)
								var modifiedOptions = resolveModifiedOptions(
									Ctor
								);
								// update base extend options
								if (modifiedOptions) {
									extend(Ctor.extendOptions, modifiedOptions);
								}
								options = Ctor.options = mergeOptions(
									superOptions,
									Ctor.extendOptions
								);
								if (options.name) {
									options.components[options.name] = Ctor;
								}
							}
						}
						return options;
					}

					function resolveModifiedOptions(Ctor) {
						var modified;
						var latest = Ctor.options;
						var sealed = Ctor.sealedOptions;
						for (var key in latest) {
							if (latest[key] !== sealed[key]) {
								if (!modified) {
									modified = {};
								}
								modified[key] = latest[key];
							}
						}
						return modified;
					}

					function Vue(options) {
						if (!(this instanceof Vue)) {
							warn(
								"Vue is a constructor and should be called with the `new` keyword"
							);
						}
						this._init(options);
					}

					initMixin(Vue);
					stateMixin(Vue);
					eventsMixin(Vue);
					lifecycleMixin(Vue);
					renderMixin(Vue);

					/*  */

					function initUse(Vue) {
						Vue.use = function(plugin) {
							var installedPlugins =
								this._installedPlugins ||
								(this._installedPlugins = []);
							if (installedPlugins.indexOf(plugin) > -1) {
								return this;
							}

							// additional parameters
							var args = toArray(arguments, 1);
							args.unshift(this);
							if (typeof plugin.install === "function") {
								plugin.install.apply(plugin, args);
							} else if (typeof plugin === "function") {
								plugin.apply(null, args);
							}
							installedPlugins.push(plugin);
							return this;
						};
					}

					/*  */

					function initMixin$1(Vue) {
						Vue.mixin = function(mixin) {
							this.options = mergeOptions(this.options, mixin);
							return this;
						};
					}

					/*  */

					function initExtend(Vue) {
						/**
						 * Each instance constructor, including Vue, has a unique
						 * cid. This enables us to create wrapped "child
						 * constructors" for prototypal inheritance and cache them.
						 */
						Vue.cid = 0;
						var cid = 1;

						/**
						 * Class inheritance
						 */
						Vue.extend = function(extendOptions) {
							extendOptions = extendOptions || {};
							var Super = this;
							var SuperId = Super.cid;
							var cachedCtors =
								extendOptions._Ctor ||
								(extendOptions._Ctor = {});
							if (cachedCtors[SuperId]) {
								return cachedCtors[SuperId];
							}

							var name = extendOptions.name || Super.options.name;
							if (name) {
								validateComponentName(name);
							}

							var Sub = function VueComponent(options) {
								this._init(options);
							};
							Sub.prototype = Object.create(Super.prototype);
							Sub.prototype.constructor = Sub;
							Sub.cid = cid++;
							Sub.options = mergeOptions(
								Super.options,
								extendOptions
							);
							Sub["super"] = Super;

							// For props and computed properties, we define the proxy getters on
							// the Vue instances at extension time, on the extended prototype. This
							// avoids Object.defineProperty calls for each instance created.
							if (Sub.options.props) {
								initProps$1(Sub);
							}
							if (Sub.options.computed) {
								initComputed$1(Sub);
							}

							// allow further extension/mixin/plugin usage
							Sub.extend = Super.extend;
							Sub.mixin = Super.mixin;
							Sub.use = Super.use;

							// create asset registers, so extended classes
							// can have their private assets too.
							ASSET_TYPES.forEach(function(type) {
								Sub[type] = Super[type];
							});
							// enable recursive self-lookup
							if (name) {
								Sub.options.components[name] = Sub;
							}

							// keep a reference to the super options at extension time.
							// later at instantiation we can check if Super's options have
							// been updated.
							Sub.superOptions = Super.options;
							Sub.extendOptions = extendOptions;
							Sub.sealedOptions = extend({}, Sub.options);

							// cache constructor
							cachedCtors[SuperId] = Sub;
							return Sub;
						};
					}

					function initProps$1(Comp) {
						var props = Comp.options.props;
						for (var key in props) {
							proxy(Comp.prototype, "_props", key);
						}
					}

					function initComputed$1(Comp) {
						var computed = Comp.options.computed;
						for (var key in computed) {
							defineComputed(Comp.prototype, key, computed[key]);
						}
					}

					/*  */

					function initAssetRegisters(Vue) {
						/**
						 * Create asset registration methods.
						 */
						ASSET_TYPES.forEach(function(type) {
							Vue[type] = function(id, definition) {
								if (!definition) {
									return this.options[type + "s"][id];
								} else {
									/* istanbul ignore if */
									if (type === "component") {
										validateComponentName(id);
									}
									if (
										type === "component" &&
										isPlainObject(definition)
									) {
										definition.name = definition.name || id;
										definition = this.options._base.extend(
											definition
										);
									}
									if (
										type === "directive" &&
										typeof definition === "function"
									) {
										definition = {
											bind: definition,
											update: definition,
										};
									}
									this.options[type + "s"][id] = definition;
									return definition;
								}
							};
						});
					}

					/*  */

					function getComponentName(opts) {
						return opts && (opts.Ctor.options.name || opts.tag);
					}

					function matches(pattern, name) {
						if (Array.isArray(pattern)) {
							return pattern.indexOf(name) > -1;
						} else if (typeof pattern === "string") {
							return pattern.split(",").indexOf(name) > -1;
						} else if (isRegExp(pattern)) {
							return pattern.test(name);
						}
						/* istanbul ignore next */
						return false;
					}

					function pruneCache(keepAliveInstance, filter) {
						var cache = keepAliveInstance.cache;
						var keys = keepAliveInstance.keys;
						var _vnode = keepAliveInstance._vnode;
						for (var key in cache) {
							var cachedNode = cache[key];
							if (cachedNode) {
								var name = getComponentName(
									cachedNode.componentOptions
								);
								if (name && !filter(name)) {
									pruneCacheEntry(cache, key, keys, _vnode);
								}
							}
						}
					}

					function pruneCacheEntry(cache, key, keys, current) {
						var cached$$1 = cache[key];
						if (
							cached$$1 &&
							(!current || cached$$1.tag !== current.tag)
						) {
							cached$$1.componentInstance.$destroy();
						}
						cache[key] = null;
						remove(keys, key);
					}

					var patternTypes = [String, RegExp, Array];

					var KeepAlive = {
						name: "keep-alive",
						abstract: true,

						props: {
							include: patternTypes,
							exclude: patternTypes,
							max: [String, Number],
						},

						created: function created() {
							this.cache = Object.create(null);
							this.keys = [];
						},

						destroyed: function destroyed() {
							for (var key in this.cache) {
								pruneCacheEntry(this.cache, key, this.keys);
							}
						},

						mounted: function mounted() {
							var this$1 = this;

							this.$watch("include", function(val) {
								pruneCache(this$1, function(name) {
									return matches(val, name);
								});
							});
							this.$watch("exclude", function(val) {
								pruneCache(this$1, function(name) {
									return !matches(val, name);
								});
							});
						},

						render: function render() {
							var slot = this.$slots.default;
							var vnode = getFirstComponentChild(slot);
							var componentOptions =
								vnode && vnode.componentOptions;
							if (componentOptions) {
								// check pattern
								var name = getComponentName(componentOptions);
								var ref = this;
								var include = ref.include;
								var exclude = ref.exclude;
								if (
									// not included
									(include &&
										(!name || !matches(include, name))) ||
									// excluded
									(exclude && name && matches(exclude, name))
								) {
									return vnode;
								}

								var ref$1 = this;
								var cache = ref$1.cache;
								var keys = ref$1.keys;
								var key =
									vnode.key == null
										? // same constructor may get registered as different local components
										  // so cid alone is not enough (#3269)
										  componentOptions.Ctor.cid +
										  (componentOptions.tag
												? "::" + componentOptions.tag
												: "")
										: vnode.key;
								if (cache[key]) {
									vnode.componentInstance =
										cache[key].componentInstance;
									// make current key freshest
									remove(keys, key);
									keys.push(key);
								} else {
									cache[key] = vnode;
									keys.push(key);
									// prune oldest entry
									if (
										this.max &&
										keys.length > parseInt(this.max)
									) {
										pruneCacheEntry(
											cache,
											keys[0],
											keys,
											this._vnode
										);
									}
								}

								vnode.data.keepAlive = true;
							}
							return vnode || (slot && slot[0]);
						},
					};

					var builtInComponents = {
						KeepAlive: KeepAlive,
					};

					/*  */

					function initGlobalAPI(Vue) {
						// config
						var configDef = {};
						configDef.get = function() {
							return config;
						};
						{
							configDef.set = function() {
								warn(
									"Do not replace the Vue.config object, set individual fields instead."
								);
							};
						}
						Object.defineProperty(Vue, "config", configDef);

						// exposed util methods.
						// NOTE: these are not considered part of the public API - avoid relying on
						// them unless you are aware of the risk.
						Vue.util = {
							warn: warn,
							extend: extend,
							mergeOptions: mergeOptions,
							defineReactive: defineReactive$$1,
						};

						Vue.set = set;
						Vue.delete = del;
						Vue.nextTick = nextTick;

						// 2.6 explicit observable API
						Vue.observable = function(obj) {
							observe(obj);
							return obj;
						};

						Vue.options = Object.create(null);
						ASSET_TYPES.forEach(function(type) {
							Vue.options[type + "s"] = Object.create(null);
						});

						// this is used to identify the "base" constructor to extend all plain-object
						// components with in Weex's multi-instance scenarios.
						Vue.options._base = Vue;

						extend(Vue.options.components, builtInComponents);

						initUse(Vue);
						initMixin$1(Vue);
						initExtend(Vue);
						initAssetRegisters(Vue);
					}

					initGlobalAPI(Vue);

					Object.defineProperty(Vue.prototype, "$isServer", {
						get: isServerRendering,
					});

					Object.defineProperty(Vue.prototype, "$ssrContext", {
						get: function get() {
							/* istanbul ignore next */
							return this.$vnode && this.$vnode.ssrContext;
						},
					});

					// expose FunctionalRenderContext for ssr runtime helper installation
					Object.defineProperty(Vue, "FunctionalRenderContext", {
						value: FunctionalRenderContext,
					});

					Vue.version = "2.6.10";

					/*  */

					// these are reserved for web because they are directly compiled away
					// during template compilation
					var isReservedAttr = makeMap("style,class");

					// attributes that should be using props for binding
					var acceptValue = makeMap(
						"input,textarea,option,select,progress"
					);
					var mustUseProp = function(tag, type, attr) {
						return (
							(attr === "value" &&
								acceptValue(tag) &&
								type !== "button") ||
							(attr === "selected" && tag === "option") ||
							(attr === "checked" && tag === "input") ||
							(attr === "muted" && tag === "video")
						);
					};

					var isEnumeratedAttr = makeMap(
						"contenteditable,draggable,spellcheck"
					);

					var isValidContentEditableValue = makeMap(
						"events,caret,typing,plaintext-only"
					);

					var convertEnumeratedValue = function(key, value) {
						return isFalsyAttrValue(value) || value === "false"
							? "false"
							: // allow arbitrary string value for contenteditable
							key === "contenteditable" &&
							  isValidContentEditableValue(value)
							? value
							: "true";
					};

					var isBooleanAttr = makeMap(
						"allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare," +
							"default,defaultchecked,defaultmuted,defaultselected,defer,disabled," +
							"enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple," +
							"muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly," +
							"required,reversed,scoped,seamless,selected,sortable,translate," +
							"truespeed,typemustmatch,visible"
					);

					var xlinkNS = "http://www.w3.org/1999/xlink";

					var isXlink = function(name) {
						return (
							name.charAt(5) === ":" &&
							name.slice(0, 5) === "xlink"
						);
					};

					var getXlinkProp = function(name) {
						return isXlink(name) ? name.slice(6, name.length) : "";
					};

					var isFalsyAttrValue = function(val) {
						return val == null || val === false;
					};

					/*  */

					function genClassForVnode(vnode) {
						var data = vnode.data;
						var parentNode = vnode;
						var childNode = vnode;
						while (isDef(childNode.componentInstance)) {
							childNode = childNode.componentInstance._vnode;
							if (childNode && childNode.data) {
								data = mergeClassData(childNode.data, data);
							}
						}
						while (isDef((parentNode = parentNode.parent))) {
							if (parentNode && parentNode.data) {
								data = mergeClassData(data, parentNode.data);
							}
						}
						return renderClass(data.staticClass, data.class);
					}

					function mergeClassData(child, parent) {
						return {
							staticClass: concat(
								child.staticClass,
								parent.staticClass
							),
							class: isDef(child.class)
								? [child.class, parent.class]
								: parent.class,
						};
					}

					function renderClass(staticClass, dynamicClass) {
						if (isDef(staticClass) || isDef(dynamicClass)) {
							return concat(
								staticClass,
								stringifyClass(dynamicClass)
							);
						}
						/* istanbul ignore next */
						return "";
					}

					function concat(a, b) {
						return a ? (b ? a + " " + b : a) : b || "";
					}

					function stringifyClass(value) {
						if (Array.isArray(value)) {
							return stringifyArray(value);
						}
						if (isObject(value)) {
							return stringifyObject(value);
						}
						if (typeof value === "string") {
							return value;
						}
						/* istanbul ignore next */
						return "";
					}

					function stringifyArray(value) {
						var res = "";
						var stringified;
						for (var i = 0, l = value.length; i < l; i++) {
							if (
								isDef(
									(stringified = stringifyClass(value[i]))
								) &&
								stringified !== ""
							) {
								if (res) {
									res += " ";
								}
								res += stringified;
							}
						}
						return res;
					}

					function stringifyObject(value) {
						var res = "";
						for (var key in value) {
							if (value[key]) {
								if (res) {
									res += " ";
								}
								res += key;
							}
						}
						return res;
					}

					/*  */

					var namespaceMap = {
						svg: "http://www.w3.org/2000/svg",
						math: "http://www.w3.org/1998/Math/MathML",
					};

					var isHTMLTag = makeMap(
						"html,body,base,head,link,meta,style,title," +
							"address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section," +
							"div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul," +
							"a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby," +
							"s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video," +
							"embed,object,param,source,canvas,script,noscript,del,ins," +
							"caption,col,colgroup,table,thead,tbody,td,th,tr," +
							"button,datalist,fieldset,form,input,label,legend,meter,optgroup,option," +
							"output,progress,select,textarea," +
							"details,dialog,menu,menuitem,summary," +
							"content,element,shadow,template,blockquote,iframe,tfoot"
					);

					// this map is intentionally selective, only covering SVG elements that may
					// contain child elements.
					var isSVG = makeMap(
						"svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face," +
							"foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern," +
							"polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",
						true
					);

					var isPreTag = function(tag) {
						return tag === "pre";
					};

					var isReservedTag = function(tag) {
						return isHTMLTag(tag) || isSVG(tag);
					};

					function getTagNamespace(tag) {
						if (isSVG(tag)) {
							return "svg";
						}
						// basic support for MathML
						// note it doesn't support other MathML elements being component roots
						if (tag === "math") {
							return "math";
						}
					}

					var unknownElementCache = Object.create(null);
					function isUnknownElement(tag) {
						/* istanbul ignore if */
						if (!inBrowser) {
							return true;
						}
						if (isReservedTag(tag)) {
							return false;
						}
						tag = tag.toLowerCase();
						/* istanbul ignore if */
						if (unknownElementCache[tag] != null) {
							return unknownElementCache[tag];
						}
						var el = document.createElement(tag);
						if (tag.indexOf("-") > -1) {
							// http://stackoverflow.com/a/28210364/1070244
							return (unknownElementCache[tag] =
								el.constructor === window.HTMLUnknownElement ||
								el.constructor === window.HTMLElement);
						} else {
							return (unknownElementCache[
								tag
							] = /HTMLUnknownElement/.test(el.toString()));
						}
					}

					var isTextInputType = makeMap(
						"text,number,password,search,email,tel,url"
					);

					/*  */

					/**
					 * Query an element selector if it's not an element already.
					 */
					function query(el) {
						if (typeof el === "string") {
							var selected = document.querySelector(el);
							if (!selected) {
								warn("Cannot find element: " + el);
								return document.createElement("div");
							}
							return selected;
						} else {
							return el;
						}
					}

					/*  */

					function createElement$1(tagName, vnode) {
						var elm = document.createElement(tagName);
						if (tagName !== "select") {
							return elm;
						}
						// false or null will remove the attribute but undefined will not
						if (
							vnode.data &&
							vnode.data.attrs &&
							vnode.data.attrs.multiple !== undefined
						) {
							elm.setAttribute("multiple", "multiple");
						}
						return elm;
					}

					function createElementNS(namespace, tagName) {
						return document.createElementNS(
							namespaceMap[namespace],
							tagName
						);
					}

					function createTextNode(text) {
						return document.createTextNode(text);
					}

					function createComment(text) {
						return document.createComment(text);
					}

					function insertBefore(parentNode, newNode, referenceNode) {
						parentNode.insertBefore(newNode, referenceNode);
					}

					function removeChild(node, child) {
						node.removeChild(child);
					}

					function appendChild(node, child) {
						node.appendChild(child);
					}

					function parentNode(node) {
						return node.parentNode;
					}

					function nextSibling(node) {
						return node.nextSibling;
					}

					function tagName(node) {
						return node.tagName;
					}

					function setTextContent(node, text) {
						node.textContent = text;
					}

					function setStyleScope(node, scopeId) {
						node.setAttribute(scopeId, "");
					}

					var nodeOps = /*#__PURE__*/ Object.freeze({
						createElement: createElement$1,
						createElementNS: createElementNS,
						createTextNode: createTextNode,
						createComment: createComment,
						insertBefore: insertBefore,
						removeChild: removeChild,
						appendChild: appendChild,
						parentNode: parentNode,
						nextSibling: nextSibling,
						tagName: tagName,
						setTextContent: setTextContent,
						setStyleScope: setStyleScope,
					});

					/*  */

					var ref = {
						create: function create(_, vnode) {
							registerRef(vnode);
						},
						update: function update(oldVnode, vnode) {
							if (oldVnode.data.ref !== vnode.data.ref) {
								registerRef(oldVnode, true);
								registerRef(vnode);
							}
						},
						destroy: function destroy(vnode) {
							registerRef(vnode, true);
						},
					};

					function registerRef(vnode, isRemoval) {
						var key = vnode.data.ref;
						if (!isDef(key)) {
							return;
						}

						var vm = vnode.context;
						var ref = vnode.componentInstance || vnode.elm;
						var refs = vm.$refs;
						if (isRemoval) {
							if (Array.isArray(refs[key])) {
								remove(refs[key], ref);
							} else if (refs[key] === ref) {
								refs[key] = undefined;
							}
						} else {
							if (vnode.data.refInFor) {
								if (!Array.isArray(refs[key])) {
									refs[key] = [ref];
								} else if (refs[key].indexOf(ref) < 0) {
									// $flow-disable-line
									refs[key].push(ref);
								}
							} else {
								refs[key] = ref;
							}
						}
					}

					/**
					 * Virtual DOM patching algorithm based on Snabbdom by
					 * Simon Friis Vindum (@paldepind)
					 * Licensed under the MIT License
					 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
					 *
					 * modified by Evan You (@yyx990803)
					 *
					 * Not type-checking this because this file is perf-critical and the cost
					 * of making flow understand it is not worth it.
					 */

					var emptyNode = new VNode("", {}, []);

					var hooks = [
						"create",
						"activate",
						"update",
						"remove",
						"destroy",
					];

					function sameVnode(a, b) {
						return (
							a.key === b.key &&
							((a.tag === b.tag &&
								a.isComment === b.isComment &&
								isDef(a.data) === isDef(b.data) &&
								sameInputType(a, b)) ||
								(isTrue(a.isAsyncPlaceholder) &&
									a.asyncFactory === b.asyncFactory &&
									isUndef(b.asyncFactory.error)))
						);
					}

					function sameInputType(a, b) {
						if (a.tag !== "input") {
							return true;
						}
						var i;
						var typeA =
							isDef((i = a.data)) &&
							isDef((i = i.attrs)) &&
							i.type;
						var typeB =
							isDef((i = b.data)) &&
							isDef((i = i.attrs)) &&
							i.type;
						return (
							typeA === typeB ||
							(isTextInputType(typeA) && isTextInputType(typeB))
						);
					}

					function createKeyToOldIdx(children, beginIdx, endIdx) {
						var i, key;
						var map = {};
						for (i = beginIdx; i <= endIdx; ++i) {
							key = children[i].key;
							if (isDef(key)) {
								map[key] = i;
							}
						}
						return map;
					}

					function createPatchFunction(backend) {
						var i, j;
						var cbs = {};

						var modules = backend.modules;
						var nodeOps = backend.nodeOps;

						for (i = 0; i < hooks.length; ++i) {
							cbs[hooks[i]] = [];
							for (j = 0; j < modules.length; ++j) {
								if (isDef(modules[j][hooks[i]])) {
									cbs[hooks[i]].push(modules[j][hooks[i]]);
								}
							}
						}

						function emptyNodeAt(elm) {
							return new VNode(
								nodeOps.tagName(elm).toLowerCase(),
								{},
								[],
								undefined,
								elm
							);
						}

						function createRmCb(childElm, listeners) {
							function remove$$1() {
								if (--remove$$1.listeners === 0) {
									removeNode(childElm);
								}
							}
							remove$$1.listeners = listeners;
							return remove$$1;
						}

						function removeNode(el) {
							var parent = nodeOps.parentNode(el);
							// element may have already been removed due to v-html / v-text
							if (isDef(parent)) {
								nodeOps.removeChild(parent, el);
							}
						}

						function isUnknownElement$$1(vnode, inVPre) {
							return (
								!inVPre &&
								!vnode.ns &&
								!(
									config.ignoredElements.length &&
									config.ignoredElements.some(function(
										ignore
									) {
										return isRegExp(ignore)
											? ignore.test(vnode.tag)
											: ignore === vnode.tag;
									})
								) &&
								config.isUnknownElement(vnode.tag)
							);
						}

						var creatingElmInVPre = 0;

						function createElm(
							vnode,
							insertedVnodeQueue,
							parentElm,
							refElm,
							nested,
							ownerArray,
							index
						) {
							if (isDef(vnode.elm) && isDef(ownerArray)) {
								// This vnode was used in a previous render!
								// now it's used as a new node, overwriting its elm would cause
								// potential patch errors down the road when it's used as an insertion
								// reference node. Instead, we clone the node on-demand before creating
								// associated DOM element for it.
								vnode = ownerArray[index] = cloneVNode(vnode);
							}

							vnode.isRootInsert = !nested; // for transition enter check
							if (
								createComponent(
									vnode,
									insertedVnodeQueue,
									parentElm,
									refElm
								)
							) {
								return;
							}

							var data = vnode.data;
							var children = vnode.children;
							var tag = vnode.tag;
							if (isDef(tag)) {
								{
									if (data && data.pre) {
										creatingElmInVPre++;
									}
									if (
										isUnknownElement$$1(
											vnode,
											creatingElmInVPre
										)
									) {
										warn(
											"Unknown custom element: <" +
												tag +
												"> - did you " +
												"register the component correctly? For recursive components, " +
												'make sure to provide the "name" option.',
											vnode.context
										);
									}
								}

								vnode.elm = vnode.ns
									? nodeOps.createElementNS(vnode.ns, tag)
									: nodeOps.createElement(tag, vnode);
								setScope(vnode);

								/* istanbul ignore if */
								{
									createChildren(
										vnode,
										children,
										insertedVnodeQueue
									);
									if (isDef(data)) {
										invokeCreateHooks(
											vnode,
											insertedVnodeQueue
										);
									}
									insert(parentElm, vnode.elm, refElm);
								}

								if (data && data.pre) {
									creatingElmInVPre--;
								}
							} else if (isTrue(vnode.isComment)) {
								vnode.elm = nodeOps.createComment(vnode.text);
								insert(parentElm, vnode.elm, refElm);
							} else {
								vnode.elm = nodeOps.createTextNode(vnode.text);
								insert(parentElm, vnode.elm, refElm);
							}
						}

						function createComponent(
							vnode,
							insertedVnodeQueue,
							parentElm,
							refElm
						) {
							var i = vnode.data;
							if (isDef(i)) {
								var isReactivated =
									isDef(vnode.componentInstance) &&
									i.keepAlive;
								if (
									isDef((i = i.hook)) &&
									isDef((i = i.init))
								) {
									i(vnode, false /* hydrating */);
								}
								// after calling the init hook, if the vnode is a child component
								// it should've created a child instance and mounted it. the child
								// component also has set the placeholder vnode's elm.
								// in that case we can just return the element and be done.
								if (isDef(vnode.componentInstance)) {
									initComponent(vnode, insertedVnodeQueue);
									insert(parentElm, vnode.elm, refElm);
									if (isTrue(isReactivated)) {
										reactivateComponent(
											vnode,
											insertedVnodeQueue,
											parentElm,
											refElm
										);
									}
									return true;
								}
							}
						}

						function initComponent(vnode, insertedVnodeQueue) {
							if (isDef(vnode.data.pendingInsert)) {
								insertedVnodeQueue.push.apply(
									insertedVnodeQueue,
									vnode.data.pendingInsert
								);
								vnode.data.pendingInsert = null;
							}
							vnode.elm = vnode.componentInstance.$el;
							if (isPatchable(vnode)) {
								invokeCreateHooks(vnode, insertedVnodeQueue);
								setScope(vnode);
							} else {
								// empty component root.
								// skip all element-related modules except for ref (#3455)
								registerRef(vnode);
								// make sure to invoke the insert hook
								insertedVnodeQueue.push(vnode);
							}
						}

						function reactivateComponent(
							vnode,
							insertedVnodeQueue,
							parentElm,
							refElm
						) {
							var i;
							// hack for #4339: a reactivated component with inner transition
							// does not trigger because the inner node's created hooks are not called
							// again. It's not ideal to involve module-specific logic in here but
							// there doesn't seem to be a better way to do it.
							var innerNode = vnode;
							while (innerNode.componentInstance) {
								innerNode = innerNode.componentInstance._vnode;
								if (
									isDef((i = innerNode.data)) &&
									isDef((i = i.transition))
								) {
									for (i = 0; i < cbs.activate.length; ++i) {
										cbs.activate[i](emptyNode, innerNode);
									}
									insertedVnodeQueue.push(innerNode);
									break;
								}
							}
							// unlike a newly created component,
							// a reactivated keep-alive component doesn't insert itself
							insert(parentElm, vnode.elm, refElm);
						}

						function insert(parent, elm, ref$$1) {
							if (isDef(parent)) {
								if (isDef(ref$$1)) {
									if (nodeOps.parentNode(ref$$1) === parent) {
										nodeOps.insertBefore(
											parent,
											elm,
											ref$$1
										);
									}
								} else {
									nodeOps.appendChild(parent, elm);
								}
							}
						}

						function createChildren(
							vnode,
							children,
							insertedVnodeQueue
						) {
							if (Array.isArray(children)) {
								{
									checkDuplicateKeys(children);
								}
								for (var i = 0; i < children.length; ++i) {
									createElm(
										children[i],
										insertedVnodeQueue,
										vnode.elm,
										null,
										true,
										children,
										i
									);
								}
							} else if (isPrimitive(vnode.text)) {
								nodeOps.appendChild(
									vnode.elm,
									nodeOps.createTextNode(String(vnode.text))
								);
							}
						}

						function isPatchable(vnode) {
							while (vnode.componentInstance) {
								vnode = vnode.componentInstance._vnode;
							}
							return isDef(vnode.tag);
						}

						function invokeCreateHooks(vnode, insertedVnodeQueue) {
							for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
								cbs.create[i$1](emptyNode, vnode);
							}
							i = vnode.data.hook; // Reuse variable
							if (isDef(i)) {
								if (isDef(i.create)) {
									i.create(emptyNode, vnode);
								}
								if (isDef(i.insert)) {
									insertedVnodeQueue.push(vnode);
								}
							}
						}

						// set scope id attribute for scoped CSS.
						// this is implemented as a special case to avoid the overhead
						// of going through the normal attribute patching process.
						function setScope(vnode) {
							var i;
							if (isDef((i = vnode.fnScopeId))) {
								nodeOps.setStyleScope(vnode.elm, i);
							} else {
								var ancestor = vnode;
								while (ancestor) {
									if (
										isDef((i = ancestor.context)) &&
										isDef((i = i.$options._scopeId))
									) {
										nodeOps.setStyleScope(vnode.elm, i);
									}
									ancestor = ancestor.parent;
								}
							}
							// for slot content they should also get the scopeId from the host instance.
							if (
								isDef((i = activeInstance)) &&
								i !== vnode.context &&
								i !== vnode.fnContext &&
								isDef((i = i.$options._scopeId))
							) {
								nodeOps.setStyleScope(vnode.elm, i);
							}
						}

						function addVnodes(
							parentElm,
							refElm,
							vnodes,
							startIdx,
							endIdx,
							insertedVnodeQueue
						) {
							for (; startIdx <= endIdx; ++startIdx) {
								createElm(
									vnodes[startIdx],
									insertedVnodeQueue,
									parentElm,
									refElm,
									false,
									vnodes,
									startIdx
								);
							}
						}

						function invokeDestroyHook(vnode) {
							var i, j;
							var data = vnode.data;
							if (isDef(data)) {
								if (
									isDef((i = data.hook)) &&
									isDef((i = i.destroy))
								) {
									i(vnode);
								}
								for (i = 0; i < cbs.destroy.length; ++i) {
									cbs.destroy[i](vnode);
								}
							}
							if (isDef((i = vnode.children))) {
								for (j = 0; j < vnode.children.length; ++j) {
									invokeDestroyHook(vnode.children[j]);
								}
							}
						}

						function removeVnodes(
							parentElm,
							vnodes,
							startIdx,
							endIdx
						) {
							for (; startIdx <= endIdx; ++startIdx) {
								var ch = vnodes[startIdx];
								if (isDef(ch)) {
									if (isDef(ch.tag)) {
										removeAndInvokeRemoveHook(ch);
										invokeDestroyHook(ch);
									} else {
										// Text node
										removeNode(ch.elm);
									}
								}
							}
						}

						function removeAndInvokeRemoveHook(vnode, rm) {
							if (isDef(rm) || isDef(vnode.data)) {
								var i;
								var listeners = cbs.remove.length + 1;
								if (isDef(rm)) {
									// we have a recursively passed down rm callback
									// increase the listeners count
									rm.listeners += listeners;
								} else {
									// directly removing
									rm = createRmCb(vnode.elm, listeners);
								}
								// recursively invoke hooks on child component root node
								if (
									isDef((i = vnode.componentInstance)) &&
									isDef((i = i._vnode)) &&
									isDef(i.data)
								) {
									removeAndInvokeRemoveHook(i, rm);
								}
								for (i = 0; i < cbs.remove.length; ++i) {
									cbs.remove[i](vnode, rm);
								}
								if (
									isDef((i = vnode.data.hook)) &&
									isDef((i = i.remove))
								) {
									i(vnode, rm);
								} else {
									rm();
								}
							} else {
								removeNode(vnode.elm);
							}
						}

						function updateChildren(
							parentElm,
							oldCh,
							newCh,
							insertedVnodeQueue,
							removeOnly
						) {
							var oldStartIdx = 0;
							var newStartIdx = 0;
							var oldEndIdx = oldCh.length - 1;
							var oldStartVnode = oldCh[0];
							var oldEndVnode = oldCh[oldEndIdx];
							var newEndIdx = newCh.length - 1;
							var newStartVnode = newCh[0];
							var newEndVnode = newCh[newEndIdx];
							var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

							// removeOnly is a special flag used only by <transition-group>
							// to ensure removed elements stay in correct relative positions
							// during leaving transitions
							var canMove = !removeOnly;

							{
								checkDuplicateKeys(newCh);
							}

							while (
								oldStartIdx <= oldEndIdx &&
								newStartIdx <= newEndIdx
							) {
								if (isUndef(oldStartVnode)) {
									oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
								} else if (isUndef(oldEndVnode)) {
									oldEndVnode = oldCh[--oldEndIdx];
								} else if (
									sameVnode(oldStartVnode, newStartVnode)
								) {
									patchVnode(
										oldStartVnode,
										newStartVnode,
										insertedVnodeQueue,
										newCh,
										newStartIdx
									);
									oldStartVnode = oldCh[++oldStartIdx];
									newStartVnode = newCh[++newStartIdx];
								} else if (
									sameVnode(oldEndVnode, newEndVnode)
								) {
									patchVnode(
										oldEndVnode,
										newEndVnode,
										insertedVnodeQueue,
										newCh,
										newEndIdx
									);
									oldEndVnode = oldCh[--oldEndIdx];
									newEndVnode = newCh[--newEndIdx];
								} else if (
									sameVnode(oldStartVnode, newEndVnode)
								) {
									// Vnode moved right
									patchVnode(
										oldStartVnode,
										newEndVnode,
										insertedVnodeQueue,
										newCh,
										newEndIdx
									);
									canMove &&
										nodeOps.insertBefore(
											parentElm,
											oldStartVnode.elm,
											nodeOps.nextSibling(oldEndVnode.elm)
										);
									oldStartVnode = oldCh[++oldStartIdx];
									newEndVnode = newCh[--newEndIdx];
								} else if (
									sameVnode(oldEndVnode, newStartVnode)
								) {
									// Vnode moved left
									patchVnode(
										oldEndVnode,
										newStartVnode,
										insertedVnodeQueue,
										newCh,
										newStartIdx
									);
									canMove &&
										nodeOps.insertBefore(
											parentElm,
											oldEndVnode.elm,
											oldStartVnode.elm
										);
									oldEndVnode = oldCh[--oldEndIdx];
									newStartVnode = newCh[++newStartIdx];
								} else {
									if (isUndef(oldKeyToIdx)) {
										oldKeyToIdx = createKeyToOldIdx(
											oldCh,
											oldStartIdx,
											oldEndIdx
										);
									}
									idxInOld = isDef(newStartVnode.key)
										? oldKeyToIdx[newStartVnode.key]
										: findIdxInOld(
												newStartVnode,
												oldCh,
												oldStartIdx,
												oldEndIdx
										  );
									if (isUndef(idxInOld)) {
										// New element
										createElm(
											newStartVnode,
											insertedVnodeQueue,
											parentElm,
											oldStartVnode.elm,
											false,
											newCh,
											newStartIdx
										);
									} else {
										vnodeToMove = oldCh[idxInOld];
										if (
											sameVnode(
												vnodeToMove,
												newStartVnode
											)
										) {
											patchVnode(
												vnodeToMove,
												newStartVnode,
												insertedVnodeQueue,
												newCh,
												newStartIdx
											);
											oldCh[idxInOld] = undefined;
											canMove &&
												nodeOps.insertBefore(
													parentElm,
													vnodeToMove.elm,
													oldStartVnode.elm
												);
										} else {
											// same key but different element. treat as new element
											createElm(
												newStartVnode,
												insertedVnodeQueue,
												parentElm,
												oldStartVnode.elm,
												false,
												newCh,
												newStartIdx
											);
										}
									}
									newStartVnode = newCh[++newStartIdx];
								}
							}
							if (oldStartIdx > oldEndIdx) {
								refElm = isUndef(newCh[newEndIdx + 1])
									? null
									: newCh[newEndIdx + 1].elm;
								addVnodes(
									parentElm,
									refElm,
									newCh,
									newStartIdx,
									newEndIdx,
									insertedVnodeQueue
								);
							} else if (newStartIdx > newEndIdx) {
								removeVnodes(
									parentElm,
									oldCh,
									oldStartIdx,
									oldEndIdx
								);
							}
						}

						function checkDuplicateKeys(children) {
							var seenKeys = {};
							for (var i = 0; i < children.length; i++) {
								var vnode = children[i];
								var key = vnode.key;
								if (isDef(key)) {
									if (seenKeys[key]) {
										warn(
											"Duplicate keys detected: '" +
												key +
												"'. This may cause an update error.",
											vnode.context
										);
									} else {
										seenKeys[key] = true;
									}
								}
							}
						}

						function findIdxInOld(node, oldCh, start, end) {
							for (var i = start; i < end; i++) {
								var c = oldCh[i];
								if (isDef(c) && sameVnode(node, c)) {
									return i;
								}
							}
						}

						function patchVnode(
							oldVnode,
							vnode,
							insertedVnodeQueue,
							ownerArray,
							index,
							removeOnly
						) {
							if (oldVnode === vnode) {
								return;
							}

							if (isDef(vnode.elm) && isDef(ownerArray)) {
								// clone reused vnode
								vnode = ownerArray[index] = cloneVNode(vnode);
							}

							var elm = (vnode.elm = oldVnode.elm);

							if (isTrue(oldVnode.isAsyncPlaceholder)) {
								if (isDef(vnode.asyncFactory.resolved)) {
									hydrate(
										oldVnode.elm,
										vnode,
										insertedVnodeQueue
									);
								} else {
									vnode.isAsyncPlaceholder = true;
								}
								return;
							}

							// reuse element for static trees.
							// note we only do this if the vnode is cloned -
							// if the new node is not cloned it means the render functions have been
							// reset by the hot-reload-api and we need to do a proper re-render.
							if (
								isTrue(vnode.isStatic) &&
								isTrue(oldVnode.isStatic) &&
								vnode.key === oldVnode.key &&
								(isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
							) {
								vnode.componentInstance =
									oldVnode.componentInstance;
								return;
							}

							var i;
							var data = vnode.data;
							if (
								isDef(data) &&
								isDef((i = data.hook)) &&
								isDef((i = i.prepatch))
							) {
								i(oldVnode, vnode);
							}

							var oldCh = oldVnode.children;
							var ch = vnode.children;
							if (isDef(data) && isPatchable(vnode)) {
								for (i = 0; i < cbs.update.length; ++i) {
									cbs.update[i](oldVnode, vnode);
								}
								if (
									isDef((i = data.hook)) &&
									isDef((i = i.update))
								) {
									i(oldVnode, vnode);
								}
							}
							if (isUndef(vnode.text)) {
								if (isDef(oldCh) && isDef(ch)) {
									if (oldCh !== ch) {
										updateChildren(
											elm,
											oldCh,
											ch,
											insertedVnodeQueue,
											removeOnly
										);
									}
								} else if (isDef(ch)) {
									{
										checkDuplicateKeys(ch);
									}
									if (isDef(oldVnode.text)) {
										nodeOps.setTextContent(elm, "");
									}
									addVnodes(
										elm,
										null,
										ch,
										0,
										ch.length - 1,
										insertedVnodeQueue
									);
								} else if (isDef(oldCh)) {
									removeVnodes(
										elm,
										oldCh,
										0,
										oldCh.length - 1
									);
								} else if (isDef(oldVnode.text)) {
									nodeOps.setTextContent(elm, "");
								}
							} else if (oldVnode.text !== vnode.text) {
								nodeOps.setTextContent(elm, vnode.text);
							}
							if (isDef(data)) {
								if (
									isDef((i = data.hook)) &&
									isDef((i = i.postpatch))
								) {
									i(oldVnode, vnode);
								}
							}
						}

						function invokeInsertHook(vnode, queue, initial) {
							// delay insert hooks for component root nodes, invoke them after the
							// element is really inserted
							if (isTrue(initial) && isDef(vnode.parent)) {
								vnode.parent.data.pendingInsert = queue;
							} else {
								for (var i = 0; i < queue.length; ++i) {
									queue[i].data.hook.insert(queue[i]);
								}
							}
						}

						var hydrationBailed = false;
						// list of modules that can skip create hook during hydration because they
						// are already rendered on the client or has no need for initialization
						// Note: style is excluded because it relies on initial clone for future
						// deep updates (#7063).
						var isRenderedModule = makeMap(
							"attrs,class,staticClass,staticStyle,key"
						);

						// Note: this is a browser-only function so we can assume elms are DOM nodes.
						function hydrate(
							elm,
							vnode,
							insertedVnodeQueue,
							inVPre
						) {
							var i;
							var tag = vnode.tag;
							var data = vnode.data;
							var children = vnode.children;
							inVPre = inVPre || (data && data.pre);
							vnode.elm = elm;

							if (
								isTrue(vnode.isComment) &&
								isDef(vnode.asyncFactory)
							) {
								vnode.isAsyncPlaceholder = true;
								return true;
							}
							// assert node match
							{
								if (!assertNodeMatch(elm, vnode, inVPre)) {
									return false;
								}
							}
							if (isDef(data)) {
								if (
									isDef((i = data.hook)) &&
									isDef((i = i.init))
								) {
									i(vnode, true /* hydrating */);
								}
								if (isDef((i = vnode.componentInstance))) {
									// child component. it should have hydrated its own tree.
									initComponent(vnode, insertedVnodeQueue);
									return true;
								}
							}
							if (isDef(tag)) {
								if (isDef(children)) {
									// empty element, allow client to pick up and populate children
									if (!elm.hasChildNodes()) {
										createChildren(
											vnode,
											children,
											insertedVnodeQueue
										);
									} else {
										// v-html and domProps: innerHTML
										if (
											isDef((i = data)) &&
											isDef((i = i.domProps)) &&
											isDef((i = i.innerHTML))
										) {
											if (i !== elm.innerHTML) {
												/* istanbul ignore if */
												if (
													typeof console !==
														"undefined" &&
													!hydrationBailed
												) {
													hydrationBailed = true;
													console.warn(
														"Parent: ",
														elm
													);
													console.warn(
														"server innerHTML: ",
														i
													);
													console.warn(
														"client innerHTML: ",
														elm.innerHTML
													);
												}
												return false;
											}
										} else {
											// iterate and compare children lists
											var childrenMatch = true;
											var childNode = elm.firstChild;
											for (
												var i$1 = 0;
												i$1 < children.length;
												i$1++
											) {
												if (
													!childNode ||
													!hydrate(
														childNode,
														children[i$1],
														insertedVnodeQueue,
														inVPre
													)
												) {
													childrenMatch = false;
													break;
												}
												childNode =
													childNode.nextSibling;
											}
											// if childNode is not null, it means the actual childNodes list is
											// longer than the virtual children list.
											if (!childrenMatch || childNode) {
												/* istanbul ignore if */
												if (
													typeof console !==
														"undefined" &&
													!hydrationBailed
												) {
													hydrationBailed = true;
													console.warn(
														"Parent: ",
														elm
													);
													console.warn(
														"Mismatching childNodes vs. VNodes: ",
														elm.childNodes,
														children
													);
												}
												return false;
											}
										}
									}
								}
								if (isDef(data)) {
									var fullInvoke = false;
									for (var key in data) {
										if (!isRenderedModule(key)) {
											fullInvoke = true;
											invokeCreateHooks(
												vnode,
												insertedVnodeQueue
											);
											break;
										}
									}
									if (!fullInvoke && data["class"]) {
										// ensure collecting deps for deep class bindings for future updates
										traverse(data["class"]);
									}
								}
							} else if (elm.data !== vnode.text) {
								elm.data = vnode.text;
							}
							return true;
						}

						function assertNodeMatch(node, vnode, inVPre) {
							if (isDef(vnode.tag)) {
								return (
									vnode.tag.indexOf("vue-component") === 0 ||
									(!isUnknownElement$$1(vnode, inVPre) &&
										vnode.tag.toLowerCase() ===
											(node.tagName &&
												node.tagName.toLowerCase()))
								);
							} else {
								return (
									node.nodeType === (vnode.isComment ? 8 : 3)
								);
							}
						}

						return function patch(
							oldVnode,
							vnode,
							hydrating,
							removeOnly
						) {
							if (isUndef(vnode)) {
								if (isDef(oldVnode)) {
									invokeDestroyHook(oldVnode);
								}
								return;
							}

							var isInitialPatch = false;
							var insertedVnodeQueue = [];

							if (isUndef(oldVnode)) {
								// empty mount (likely as component), create new root element
								isInitialPatch = true;
								createElm(vnode, insertedVnodeQueue);
							} else {
								var isRealElement = isDef(oldVnode.nodeType);
								if (
									!isRealElement &&
									sameVnode(oldVnode, vnode)
								) {
									// patch existing root node
									patchVnode(
										oldVnode,
										vnode,
										insertedVnodeQueue,
										null,
										null,
										removeOnly
									);
								} else {
									if (isRealElement) {
										// mounting to a real element
										// check if this is server-rendered content and if we can perform
										// a successful hydration.
										if (
											oldVnode.nodeType === 1 &&
											oldVnode.hasAttribute(SSR_ATTR)
										) {
											oldVnode.removeAttribute(SSR_ATTR);
											hydrating = true;
										}
										if (isTrue(hydrating)) {
											if (
												hydrate(
													oldVnode,
													vnode,
													insertedVnodeQueue
												)
											) {
												invokeInsertHook(
													vnode,
													insertedVnodeQueue,
													true
												);
												return oldVnode;
											} else {
												warn(
													"The client-side rendered virtual DOM tree is not matching " +
														"server-rendered content. This is likely caused by incorrect " +
														"HTML markup, for example nesting block-level elements inside " +
														"<p>, or missing <tbody>. Bailing hydration and performing " +
														"full client-side render."
												);
											}
										}
										// either not server-rendered, or hydration failed.
										// create an empty node and replace it
										oldVnode = emptyNodeAt(oldVnode);
									}

									// replacing existing element
									var oldElm = oldVnode.elm;
									var parentElm = nodeOps.parentNode(oldElm);

									// create new node
									createElm(
										vnode,
										insertedVnodeQueue,
										// extremely rare edge case: do not insert if old element is in a
										// leaving transition. Only happens when combining transition +
										// keep-alive + HOCs. (#4590)
										oldElm._leaveCb ? null : parentElm,
										nodeOps.nextSibling(oldElm)
									);

									// update parent placeholder node element, recursively
									if (isDef(vnode.parent)) {
										var ancestor = vnode.parent;
										var patchable = isPatchable(vnode);
										while (ancestor) {
											for (
												var i = 0;
												i < cbs.destroy.length;
												++i
											) {
												cbs.destroy[i](ancestor);
											}
											ancestor.elm = vnode.elm;
											if (patchable) {
												for (
													var i$1 = 0;
													i$1 < cbs.create.length;
													++i$1
												) {
													cbs.create[i$1](
														emptyNode,
														ancestor
													);
												}
												// #6513
												// invoke insert hooks that may have been merged by create hooks.
												// e.g. for directives that uses the "inserted" hook.
												var insert =
													ancestor.data.hook.insert;
												if (insert.merged) {
													// start at index 1 to avoid re-invoking component mounted hook
													for (
														var i$2 = 1;
														i$2 < insert.fns.length;
														i$2++
													) {
														insert.fns[i$2]();
													}
												}
											} else {
												registerRef(ancestor);
											}
											ancestor = ancestor.parent;
										}
									}

									// destroy old node
									if (isDef(parentElm)) {
										removeVnodes(
											parentElm,
											[oldVnode],
											0,
											0
										);
									} else if (isDef(oldVnode.tag)) {
										invokeDestroyHook(oldVnode);
									}
								}
							}

							invokeInsertHook(
								vnode,
								insertedVnodeQueue,
								isInitialPatch
							);
							return vnode.elm;
						};
					}

					/*  */

					var directives = {
						create: updateDirectives,
						update: updateDirectives,
						destroy: function unbindDirectives(vnode) {
							updateDirectives(vnode, emptyNode);
						},
					};

					function updateDirectives(oldVnode, vnode) {
						if (oldVnode.data.directives || vnode.data.directives) {
							_update(oldVnode, vnode);
						}
					}

					function _update(oldVnode, vnode) {
						var isCreate = oldVnode === emptyNode;
						var isDestroy = vnode === emptyNode;
						var oldDirs = normalizeDirectives$1(
							oldVnode.data.directives,
							oldVnode.context
						);
						var newDirs = normalizeDirectives$1(
							vnode.data.directives,
							vnode.context
						);

						var dirsWithInsert = [];
						var dirsWithPostpatch = [];

						var key, oldDir, dir;
						for (key in newDirs) {
							oldDir = oldDirs[key];
							dir = newDirs[key];
							if (!oldDir) {
								// new directive, bind
								callHook$1(dir, "bind", vnode, oldVnode);
								if (dir.def && dir.def.inserted) {
									dirsWithInsert.push(dir);
								}
							} else {
								// existing directive, update
								dir.oldValue = oldDir.value;
								dir.oldArg = oldDir.arg;
								callHook$1(dir, "update", vnode, oldVnode);
								if (dir.def && dir.def.componentUpdated) {
									dirsWithPostpatch.push(dir);
								}
							}
						}

						if (dirsWithInsert.length) {
							var callInsert = function() {
								for (
									var i = 0;
									i < dirsWithInsert.length;
									i++
								) {
									callHook$1(
										dirsWithInsert[i],
										"inserted",
										vnode,
										oldVnode
									);
								}
							};
							if (isCreate) {
								mergeVNodeHook(vnode, "insert", callInsert);
							} else {
								callInsert();
							}
						}

						if (dirsWithPostpatch.length) {
							mergeVNodeHook(vnode, "postpatch", function() {
								for (
									var i = 0;
									i < dirsWithPostpatch.length;
									i++
								) {
									callHook$1(
										dirsWithPostpatch[i],
										"componentUpdated",
										vnode,
										oldVnode
									);
								}
							});
						}

						if (!isCreate) {
							for (key in oldDirs) {
								if (!newDirs[key]) {
									// no longer present, unbind
									callHook$1(
										oldDirs[key],
										"unbind",
										oldVnode,
										oldVnode,
										isDestroy
									);
								}
							}
						}
					}

					var emptyModifiers = Object.create(null);

					function normalizeDirectives$1(dirs, vm) {
						var res = Object.create(null);
						if (!dirs) {
							// $flow-disable-line
							return res;
						}
						var i, dir;
						for (i = 0; i < dirs.length; i++) {
							dir = dirs[i];
							if (!dir.modifiers) {
								// $flow-disable-line
								dir.modifiers = emptyModifiers;
							}
							res[getRawDirName(dir)] = dir;
							dir.def = resolveAsset(
								vm.$options,
								"directives",
								dir.name,
								true
							);
						}
						// $flow-disable-line
						return res;
					}

					function getRawDirName(dir) {
						return (
							dir.rawName ||
							dir.name +
								"." +
								Object.keys(dir.modifiers || {}).join(".")
						);
					}

					function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
						var fn = dir.def && dir.def[hook];
						if (fn) {
							try {
								fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
							} catch (e) {
								handleError(
									e,
									vnode.context,
									"directive " +
										dir.name +
										" " +
										hook +
										" hook"
								);
							}
						}
					}

					var baseModules = [ref, directives];

					/*  */

					function updateAttrs(oldVnode, vnode) {
						var opts = vnode.componentOptions;
						if (
							isDef(opts) &&
							opts.Ctor.options.inheritAttrs === false
						) {
							return;
						}
						if (
							isUndef(oldVnode.data.attrs) &&
							isUndef(vnode.data.attrs)
						) {
							return;
						}
						var key, cur, old;
						var elm = vnode.elm;
						var oldAttrs = oldVnode.data.attrs || {};
						var attrs = vnode.data.attrs || {};
						// clone observed objects, as the user probably wants to mutate it
						if (isDef(attrs.__ob__)) {
							attrs = vnode.data.attrs = extend({}, attrs);
						}

						for (key in attrs) {
							cur = attrs[key];
							old = oldAttrs[key];
							if (old !== cur) {
								setAttr(elm, key, cur);
							}
						}
						// #4391: in IE9, setting type can reset value for input[type=radio]
						// #6666: IE/Edge forces progress value down to 1 before setting a max
						/* istanbul ignore if */
						if (
							(isIE || isEdge) &&
							attrs.value !== oldAttrs.value
						) {
							setAttr(elm, "value", attrs.value);
						}
						for (key in oldAttrs) {
							if (isUndef(attrs[key])) {
								if (isXlink(key)) {
									elm.removeAttributeNS(
										xlinkNS,
										getXlinkProp(key)
									);
								} else if (!isEnumeratedAttr(key)) {
									elm.removeAttribute(key);
								}
							}
						}
					}

					function setAttr(el, key, value) {
						if (el.tagName.indexOf("-") > -1) {
							baseSetAttr(el, key, value);
						} else if (isBooleanAttr(key)) {
							// set attribute for blank value
							// e.g. <option disabled>Select one</option>
							if (isFalsyAttrValue(value)) {
								el.removeAttribute(key);
							} else {
								// technically allowfullscreen is a boolean attribute for <iframe>,
								// but Flash expects a value of "true" when used on <embed> tag
								value =
									key === "allowfullscreen" &&
									el.tagName === "EMBED"
										? "true"
										: key;
								el.setAttribute(key, value);
							}
						} else if (isEnumeratedAttr(key)) {
							el.setAttribute(
								key,
								convertEnumeratedValue(key, value)
							);
						} else if (isXlink(key)) {
							if (isFalsyAttrValue(value)) {
								el.removeAttributeNS(
									xlinkNS,
									getXlinkProp(key)
								);
							} else {
								el.setAttributeNS(xlinkNS, key, value);
							}
						} else {
							baseSetAttr(el, key, value);
						}
					}

					function baseSetAttr(el, key, value) {
						if (isFalsyAttrValue(value)) {
							el.removeAttribute(key);
						} else {
							// #7138: IE10 & 11 fires input event when setting placeholder on
							// <textarea>... block the first input event and remove the blocker
							// immediately.
							/* istanbul ignore if */
							if (
								isIE &&
								!isIE9 &&
								el.tagName === "TEXTAREA" &&
								key === "placeholder" &&
								value !== "" &&
								!el.__ieph
							) {
								var blocker = function(e) {
									e.stopImmediatePropagation();
									el.removeEventListener("input", blocker);
								};
								el.addEventListener("input", blocker);
								// $flow-disable-line
								el.__ieph = true; /* IE placeholder patched */
							}
							el.setAttribute(key, value);
						}
					}

					var attrs = {
						create: updateAttrs,
						update: updateAttrs,
					};

					/*  */

					function updateClass(oldVnode, vnode) {
						var el = vnode.elm;
						var data = vnode.data;
						var oldData = oldVnode.data;
						if (
							isUndef(data.staticClass) &&
							isUndef(data.class) &&
							(isUndef(oldData) ||
								(isUndef(oldData.staticClass) &&
									isUndef(oldData.class)))
						) {
							return;
						}

						var cls = genClassForVnode(vnode);

						// handle transition classes
						var transitionClass = el._transitionClasses;
						if (isDef(transitionClass)) {
							cls = concat(cls, stringifyClass(transitionClass));
						}

						// set the class
						if (cls !== el._prevClass) {
							el.setAttribute("class", cls);
							el._prevClass = cls;
						}
					}

					var klass = {
						create: updateClass,
						update: updateClass,
					};

					/*  */

					var validDivisionCharRE = /[\w).+\-_$\]]/;

					function parseFilters(exp) {
						var inSingle = false;
						var inDouble = false;
						var inTemplateString = false;
						var inRegex = false;
						var curly = 0;
						var square = 0;
						var paren = 0;
						var lastFilterIndex = 0;
						var c, prev, i, expression, filters;

						for (i = 0; i < exp.length; i++) {
							prev = c;
							c = exp.charCodeAt(i);
							if (inSingle) {
								if (c === 0x27 && prev !== 0x5c) {
									inSingle = false;
								}
							} else if (inDouble) {
								if (c === 0x22 && prev !== 0x5c) {
									inDouble = false;
								}
							} else if (inTemplateString) {
								if (c === 0x60 && prev !== 0x5c) {
									inTemplateString = false;
								}
							} else if (inRegex) {
								if (c === 0x2f && prev !== 0x5c) {
									inRegex = false;
								}
							} else if (
								c === 0x7c && // pipe
								exp.charCodeAt(i + 1) !== 0x7c &&
								exp.charCodeAt(i - 1) !== 0x7c &&
								!curly &&
								!square &&
								!paren
							) {
								if (expression === undefined) {
									// first filter, end of expression
									lastFilterIndex = i + 1;
									expression = exp.slice(0, i).trim();
								} else {
									pushFilter();
								}
							} else {
								switch (c) {
									case 0x22:
										inDouble = true;
										break; // "
									case 0x27:
										inSingle = true;
										break; // '
									case 0x60:
										inTemplateString = true;
										break; // `
									case 0x28:
										paren++;
										break; // (
									case 0x29:
										paren--;
										break; // )
									case 0x5b:
										square++;
										break; // [
									case 0x5d:
										square--;
										break; // ]
									case 0x7b:
										curly++;
										break; // {
									case 0x7d:
										curly--;
										break; // }
								}
								if (c === 0x2f) {
									// /
									var j = i - 1;
									var p = void 0;
									// find first non-whitespace prev char
									for (; j >= 0; j--) {
										p = exp.charAt(j);
										if (p !== " ") {
											break;
										}
									}
									if (!p || !validDivisionCharRE.test(p)) {
										inRegex = true;
									}
								}
							}
						}

						if (expression === undefined) {
							expression = exp.slice(0, i).trim();
						} else if (lastFilterIndex !== 0) {
							pushFilter();
						}

						function pushFilter() {
							(filters || (filters = [])).push(
								exp.slice(lastFilterIndex, i).trim()
							);
							lastFilterIndex = i + 1;
						}

						if (filters) {
							for (i = 0; i < filters.length; i++) {
								expression = wrapFilter(expression, filters[i]);
							}
						}

						return expression;
					}

					function wrapFilter(exp, filter) {
						var i = filter.indexOf("(");
						if (i < 0) {
							// _f: resolveFilter
							return '_f("' + filter + '")(' + exp + ")";
						} else {
							var name = filter.slice(0, i);
							var args = filter.slice(i + 1);
							return (
								'_f("' +
								name +
								'")(' +
								exp +
								(args !== ")" ? "," + args : args)
							);
						}
					}

					/*  */

					/* eslint-disable no-unused-vars */
					function baseWarn(msg, range) {
						console.error("[Vue compiler]: " + msg);
					}
					/* eslint-enable no-unused-vars */

					function pluckModuleFunction(modules, key) {
						return modules
							? modules
									.map(function(m) {
										return m[key];
									})
									.filter(function(_) {
										return _;
									})
							: [];
					}

					function addProp(el, name, value, range, dynamic) {
						(el.props || (el.props = [])).push(
							rangeSetItem(
								{name: name, value: value, dynamic: dynamic},
								range
							)
						);
						el.plain = false;
					}

					function addAttr(el, name, value, range, dynamic) {
						var attrs = dynamic
							? el.dynamicAttrs || (el.dynamicAttrs = [])
							: el.attrs || (el.attrs = []);
						attrs.push(
							rangeSetItem(
								{name: name, value: value, dynamic: dynamic},
								range
							)
						);
						el.plain = false;
					}

					// add a raw attr (use this in preTransforms)
					function addRawAttr(el, name, value, range) {
						el.attrsMap[name] = value;
						el.attrsList.push(
							rangeSetItem({name: name, value: value}, range)
						);
					}

					function addDirective(
						el,
						name,
						rawName,
						value,
						arg,
						isDynamicArg,
						modifiers,
						range
					) {
						(el.directives || (el.directives = [])).push(
							rangeSetItem(
								{
									name: name,
									rawName: rawName,
									value: value,
									arg: arg,
									isDynamicArg: isDynamicArg,
									modifiers: modifiers,
								},
								range
							)
						);
						el.plain = false;
					}

					function prependModifierMarker(symbol, name, dynamic) {
						return dynamic
							? "_p(" + name + ',"' + symbol + '")'
							: symbol + name; // mark the event as captured
					}

					function addHandler(
						el,
						name,
						value,
						modifiers,
						important,
						warn,
						range,
						dynamic
					) {
						modifiers = modifiers || emptyObject;
						// warn prevent and passive modifier
						/* istanbul ignore if */
						if (warn && modifiers.prevent && modifiers.passive) {
							warn(
								"passive and prevent can't be used together. " +
									"Passive handler can't prevent default event.",
								range
							);
						}

						// normalize click.right and click.middle since they don't actually fire
						// this is technically browser-specific, but at least for now browsers are
						// the only target envs that have right/middle clicks.
						if (modifiers.right) {
							if (dynamic) {
								name =
									"(" +
									name +
									")==='click'?'contextmenu':(" +
									name +
									")";
							} else if (name === "click") {
								name = "contextmenu";
								delete modifiers.right;
							}
						} else if (modifiers.middle) {
							if (dynamic) {
								name =
									"(" +
									name +
									")==='click'?'mouseup':(" +
									name +
									")";
							} else if (name === "click") {
								name = "mouseup";
							}
						}

						// check capture modifier
						if (modifiers.capture) {
							delete modifiers.capture;
							name = prependModifierMarker("!", name, dynamic);
						}
						if (modifiers.once) {
							delete modifiers.once;
							name = prependModifierMarker("~", name, dynamic);
						}
						/* istanbul ignore if */
						if (modifiers.passive) {
							delete modifiers.passive;
							name = prependModifierMarker("&", name, dynamic);
						}

						var events;
						if (modifiers.native) {
							delete modifiers.native;
							events = el.nativeEvents || (el.nativeEvents = {});
						} else {
							events = el.events || (el.events = {});
						}

						var newHandler = rangeSetItem(
							{value: value.trim(), dynamic: dynamic},
							range
						);
						if (modifiers !== emptyObject) {
							newHandler.modifiers = modifiers;
						}

						var handlers = events[name];
						/* istanbul ignore if */
						if (Array.isArray(handlers)) {
							important
								? handlers.unshift(newHandler)
								: handlers.push(newHandler);
						} else if (handlers) {
							events[name] = important
								? [newHandler, handlers]
								: [handlers, newHandler];
						} else {
							events[name] = newHandler;
						}

						el.plain = false;
					}

					function getRawBindingAttr(el, name) {
						return (
							el.rawAttrsMap[":" + name] ||
							el.rawAttrsMap["v-bind:" + name] ||
							el.rawAttrsMap[name]
						);
					}

					function getBindingAttr(el, name, getStatic) {
						var dynamicValue =
							getAndRemoveAttr(el, ":" + name) ||
							getAndRemoveAttr(el, "v-bind:" + name);
						if (dynamicValue != null) {
							return parseFilters(dynamicValue);
						} else if (getStatic !== false) {
							var staticValue = getAndRemoveAttr(el, name);
							if (staticValue != null) {
								return JSON.stringify(staticValue);
							}
						}
					}

					// note: this only removes the attr from the Array (attrsList) so that it
					// doesn't get processed by processAttrs.
					// By default it does NOT remove it from the map (attrsMap) because the map is
					// needed during codegen.
					function getAndRemoveAttr(el, name, removeFromMap) {
						var val;
						if ((val = el.attrsMap[name]) != null) {
							var list = el.attrsList;
							for (var i = 0, l = list.length; i < l; i++) {
								if (list[i].name === name) {
									list.splice(i, 1);
									break;
								}
							}
						}
						if (removeFromMap) {
							delete el.attrsMap[name];
						}
						return val;
					}

					function getAndRemoveAttrByRegex(el, name) {
						var list = el.attrsList;
						for (var i = 0, l = list.length; i < l; i++) {
							var attr = list[i];
							if (name.test(attr.name)) {
								list.splice(i, 1);
								return attr;
							}
						}
					}

					function rangeSetItem(item, range) {
						if (range) {
							if (range.start != null) {
								item.start = range.start;
							}
							if (range.end != null) {
								item.end = range.end;
							}
						}
						return item;
					}

					/*  */

					/**
					 * Cross-platform code generation for component v-model
					 */
					function genComponentModel(el, value, modifiers) {
						var ref = modifiers || {};
						var number = ref.number;
						var trim = ref.trim;

						var baseValueExpression = "$$v";
						var valueExpression = baseValueExpression;
						if (trim) {
							valueExpression =
								"(typeof " +
								baseValueExpression +
								" === 'string'" +
								"? " +
								baseValueExpression +
								".trim()" +
								": " +
								baseValueExpression +
								")";
						}
						if (number) {
							valueExpression = "_n(" + valueExpression + ")";
						}
						var assignment = genAssignmentCode(
							value,
							valueExpression
						);

						el.model = {
							value: "(" + value + ")",
							expression: JSON.stringify(value),
							callback:
								"function (" +
								baseValueExpression +
								") {" +
								assignment +
								"}",
						};
					}

					/**
					 * Cross-platform codegen helper for generating v-model value assignment code.
					 */
					function genAssignmentCode(value, assignment) {
						var res = parseModel(value);
						if (res.key === null) {
							return value + "=" + assignment;
						} else {
							return (
								"$set(" +
								res.exp +
								", " +
								res.key +
								", " +
								assignment +
								")"
							);
						}
					}

					/**
					 * Parse a v-model expression into a base path and a final key segment.
					 * Handles both dot-path and possible square brackets.
					 *
					 * Possible cases:
					 *
					 * - test
					 * - test[key]
					 * - test[test1[key]]
					 * - test["a"][key]
					 * - xxx.test[a[a].test1[key]]
					 * - test.xxx.a["asa"][test1[key]]
					 *
					 */

					var len, str, chr, index$1, expressionPos, expressionEndPos;

					function parseModel(val) {
						// Fix https://github.com/vuejs/vue/pull/7730
						// allow v-model="obj.val " (trailing whitespace)
						val = val.trim();
						len = val.length;

						if (
							val.indexOf("[") < 0 ||
							val.lastIndexOf("]") < len - 1
						) {
							index$1 = val.lastIndexOf(".");
							if (index$1 > -1) {
								return {
									exp: val.slice(0, index$1),
									key: '"' + val.slice(index$1 + 1) + '"',
								};
							} else {
								return {
									exp: val,
									key: null,
								};
							}
						}

						str = val;
						index$1 = expressionPos = expressionEndPos = 0;

						while (!eof()) {
							chr = next();
							/* istanbul ignore if */
							if (isStringStart(chr)) {
								parseString(chr);
							} else if (chr === 0x5b) {
								parseBracket(chr);
							}
						}

						return {
							exp: val.slice(0, expressionPos),
							key: val.slice(expressionPos + 1, expressionEndPos),
						};
					}

					function next() {
						return str.charCodeAt(++index$1);
					}

					function eof() {
						return index$1 >= len;
					}

					function isStringStart(chr) {
						return chr === 0x22 || chr === 0x27;
					}

					function parseBracket(chr) {
						var inBracket = 1;
						expressionPos = index$1;
						while (!eof()) {
							chr = next();
							if (isStringStart(chr)) {
								parseString(chr);
								continue;
							}
							if (chr === 0x5b) {
								inBracket++;
							}
							if (chr === 0x5d) {
								inBracket--;
							}
							if (inBracket === 0) {
								expressionEndPos = index$1;
								break;
							}
						}
					}

					function parseString(chr) {
						var stringQuote = chr;
						while (!eof()) {
							chr = next();
							if (chr === stringQuote) {
								break;
							}
						}
					}

					/*  */

					var warn$1;

					// in some cases, the event used has to be determined at runtime
					// so we used some reserved tokens during compile.
					var RANGE_TOKEN = "__r";
					var CHECKBOX_RADIO_TOKEN = "__c";

					function model(el, dir, _warn) {
						warn$1 = _warn;
						var value = dir.value;
						var modifiers = dir.modifiers;
						var tag = el.tag;
						var type = el.attrsMap.type;

						{
							// inputs with type="file" are read only and setting the input's
							// value will throw an error.
							if (tag === "input" && type === "file") {
								warn$1(
									"<" +
										el.tag +
										' v-model="' +
										value +
										'" type="file">:\n' +
										"File inputs are read only. Use a v-on:change listener instead.",
									el.rawAttrsMap["v-model"]
								);
							}
						}

						if (el.component) {
							genComponentModel(el, value, modifiers);
							// component v-model doesn't need extra runtime
							return false;
						} else if (tag === "select") {
							genSelect(el, value, modifiers);
						} else if (tag === "input" && type === "checkbox") {
							genCheckboxModel(el, value, modifiers);
						} else if (tag === "input" && type === "radio") {
							genRadioModel(el, value, modifiers);
						} else if (tag === "input" || tag === "textarea") {
							genDefaultModel(el, value, modifiers);
						} else if (!config.isReservedTag(tag)) {
							genComponentModel(el, value, modifiers);
							// component v-model doesn't need extra runtime
							return false;
						} else {
							warn$1(
								"<" +
									el.tag +
									' v-model="' +
									value +
									'">: ' +
									"v-model is not supported on this element type. " +
									"If you are working with contenteditable, it's recommended to " +
									"wrap a library dedicated for that purpose inside a custom component.",
								el.rawAttrsMap["v-model"]
							);
						}

						// ensure runtime directive metadata
						return true;
					}

					function genCheckboxModel(el, value, modifiers) {
						var number = modifiers && modifiers.number;
						var valueBinding =
							getBindingAttr(el, "value") || "null";
						var trueValueBinding =
							getBindingAttr(el, "true-value") || "true";
						var falseValueBinding =
							getBindingAttr(el, "false-value") || "false";
						addProp(
							el,
							"checked",
							"Array.isArray(" +
								value +
								")" +
								"?_i(" +
								value +
								"," +
								valueBinding +
								")>-1" +
								(trueValueBinding === "true"
									? ":(" + value + ")"
									: ":_q(" +
									  value +
									  "," +
									  trueValueBinding +
									  ")")
						);
						addHandler(
							el,
							"change",
							"var $$a=" +
								value +
								"," +
								"$$el=$event.target," +
								"$$c=$$el.checked?(" +
								trueValueBinding +
								"):(" +
								falseValueBinding +
								");" +
								"if(Array.isArray($$a)){" +
								"var $$v=" +
								(number
									? "_n(" + valueBinding + ")"
									: valueBinding) +
								"," +
								"$$i=_i($$a,$$v);" +
								"if($$el.checked){$$i<0&&(" +
								genAssignmentCode(value, "$$a.concat([$$v])") +
								")}" +
								"else{$$i>-1&&(" +
								genAssignmentCode(
									value,
									"$$a.slice(0,$$i).concat($$a.slice($$i+1))"
								) +
								")}" +
								"}else{" +
								genAssignmentCode(value, "$$c") +
								"}",
							null,
							true
						);
					}

					function genRadioModel(el, value, modifiers) {
						var number = modifiers && modifiers.number;
						var valueBinding =
							getBindingAttr(el, "value") || "null";
						valueBinding = number
							? "_n(" + valueBinding + ")"
							: valueBinding;
						addProp(
							el,
							"checked",
							"_q(" + value + "," + valueBinding + ")"
						);
						addHandler(
							el,
							"change",
							genAssignmentCode(value, valueBinding),
							null,
							true
						);
					}

					function genSelect(el, value, modifiers) {
						var number = modifiers && modifiers.number;
						var selectedVal =
							"Array.prototype.filter" +
							".call($event.target.options,function(o){return o.selected})" +
							'.map(function(o){var val = "_value" in o ? o._value : o.value;' +
							"return " +
							(number ? "_n(val)" : "val") +
							"})";

						var assignment =
							"$event.target.multiple ? $$selectedVal : $$selectedVal[0]";
						var code = "var $$selectedVal = " + selectedVal + ";";
						code =
							code + " " + genAssignmentCode(value, assignment);
						addHandler(el, "change", code, null, true);
					}

					function genDefaultModel(el, value, modifiers) {
						var type = el.attrsMap.type;

						// warn if v-bind:value conflicts with v-model
						// except for inputs with v-bind:type
						{
							var value$1 =
								el.attrsMap["v-bind:value"] ||
								el.attrsMap[":value"];
							var typeBinding =
								el.attrsMap["v-bind:type"] ||
								el.attrsMap[":type"];
							if (value$1 && !typeBinding) {
								var binding = el.attrsMap["v-bind:value"]
									? "v-bind:value"
									: ":value";
								warn$1(
									binding +
										'="' +
										value$1 +
										'" conflicts with v-model on the same element ' +
										"because the latter already expands to a value binding internally",
									el.rawAttrsMap[binding]
								);
							}
						}

						var ref = modifiers || {};
						var lazy = ref.lazy;
						var number = ref.number;
						var trim = ref.trim;
						var needCompositionGuard = !lazy && type !== "range";
						var event = lazy
							? "change"
							: type === "range"
							? RANGE_TOKEN
							: "input";

						var valueExpression = "$event.target.value";
						if (trim) {
							valueExpression = "$event.target.value.trim()";
						}
						if (number) {
							valueExpression = "_n(" + valueExpression + ")";
						}

						var code = genAssignmentCode(value, valueExpression);
						if (needCompositionGuard) {
							code = "if($event.target.composing)return;" + code;
						}

						addProp(el, "value", "(" + value + ")");
						addHandler(el, event, code, null, true);
						if (trim || number) {
							addHandler(el, "blur", "$forceUpdate()");
						}
					}

					/*  */

					// normalize v-model event tokens that can only be determined at runtime.
					// it's important to place the event as the first in the array because
					// the whole point is ensuring the v-model callback gets called before
					// user-attached handlers.
					function normalizeEvents(on) {
						/* istanbul ignore if */
						if (isDef(on[RANGE_TOKEN])) {
							// IE input[type=range] only supports `change` event
							var event = isIE ? "change" : "input";
							on[event] = [].concat(
								on[RANGE_TOKEN],
								on[event] || []
							);
							delete on[RANGE_TOKEN];
						}
						// This was originally intended to fix #4521 but no longer necessary
						// after 2.5. Keeping it for backwards compat with generated code from < 2.4
						/* istanbul ignore if */
						if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
							on.change = [].concat(
								on[CHECKBOX_RADIO_TOKEN],
								on.change || []
							);
							delete on[CHECKBOX_RADIO_TOKEN];
						}
					}

					var target$1;

					function createOnceHandler$1(event, handler, capture) {
						var _target = target$1; // save current target element in closure
						return function onceHandler() {
							var res = handler.apply(null, arguments);
							if (res !== null) {
								remove$2(event, onceHandler, capture, _target);
							}
						};
					}

					// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
					// implementation and does not fire microtasks in between event propagation, so
					// safe to exclude.
					var useMicrotaskFix =
						isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

					function add$1(name, handler, capture, passive) {
						// async edge case #6566: inner click event triggers patch, event handler
						// attached to outer element during patch, and triggered again. This
						// happens because browsers fire microtask ticks between event propagation.
						// the solution is simple: we save the timestamp when a handler is attached,
						// and the handler would only fire if the event passed to it was fired
						// AFTER it was attached.
						if (useMicrotaskFix) {
							var attachedTimestamp = currentFlushTimestamp;
							var original = handler;
							handler = original._wrapper = function(e) {
								if (
									// no bubbling, should always fire.
									// this is just a safety net in case event.timeStamp is unreliable in
									// certain weird environments...
									e.target === e.currentTarget ||
									// event is fired after handler attachment
									e.timeStamp >= attachedTimestamp ||
									// bail for environments that have buggy event.timeStamp implementations
									// #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
									// #9681 QtWebEngine event.timeStamp is negative value
									e.timeStamp <= 0 ||
									// #9448 bail if event is fired in another document in a multi-page
									// electron/nw.js app, since event.timeStamp will be using a different
									// starting reference
									e.target.ownerDocument !== document
								) {
									return original.apply(this, arguments);
								}
							};
						}
						target$1.addEventListener(
							name,
							handler,
							supportsPassive
								? {capture: capture, passive: passive}
								: capture
						);
					}

					function remove$2(name, handler, capture, _target) {
						(_target || target$1).removeEventListener(
							name,
							handler._wrapper || handler,
							capture
						);
					}

					function updateDOMListeners(oldVnode, vnode) {
						if (
							isUndef(oldVnode.data.on) &&
							isUndef(vnode.data.on)
						) {
							return;
						}
						var on = vnode.data.on || {};
						var oldOn = oldVnode.data.on || {};
						target$1 = vnode.elm;
						normalizeEvents(on);
						updateListeners(
							on,
							oldOn,
							add$1,
							remove$2,
							createOnceHandler$1,
							vnode.context
						);
						target$1 = undefined;
					}

					var events = {
						create: updateDOMListeners,
						update: updateDOMListeners,
					};

					/*  */

					var svgContainer;

					function updateDOMProps(oldVnode, vnode) {
						if (
							isUndef(oldVnode.data.domProps) &&
							isUndef(vnode.data.domProps)
						) {
							return;
						}
						var key, cur;
						var elm = vnode.elm;
						var oldProps = oldVnode.data.domProps || {};
						var props = vnode.data.domProps || {};
						// clone observed objects, as the user probably wants to mutate it
						if (isDef(props.__ob__)) {
							props = vnode.data.domProps = extend({}, props);
						}

						for (key in oldProps) {
							if (!(key in props)) {
								elm[key] = "";
							}
						}

						for (key in props) {
							cur = props[key];
							// ignore children if the node has textContent or innerHTML,
							// as these will throw away existing DOM nodes and cause removal errors
							// on subsequent patches (#3360)
							if (key === "textContent" || key === "innerHTML") {
								if (vnode.children) {
									vnode.children.length = 0;
								}
								if (cur === oldProps[key]) {
									continue;
								}
								// #6601 work around Chrome version <= 55 bug where single textNode
								// replaced by innerHTML/textContent retains its parentNode property
								if (elm.childNodes.length === 1) {
									elm.removeChild(elm.childNodes[0]);
								}
							}

							if (key === "value" && elm.tagName !== "PROGRESS") {
								// store value as _value as well since
								// non-string values will be stringified
								elm._value = cur;
								// avoid resetting cursor position when value is the same
								var strCur = isUndef(cur) ? "" : String(cur);
								if (shouldUpdateValue(elm, strCur)) {
									elm.value = strCur;
								}
							} else if (
								key === "innerHTML" &&
								isSVG(elm.tagName) &&
								isUndef(elm.innerHTML)
							) {
								// IE doesn't support innerHTML for SVG elements
								svgContainer =
									svgContainer ||
									document.createElement("div");
								svgContainer.innerHTML =
									"<svg>" + cur + "</svg>";
								var svg = svgContainer.firstChild;
								while (elm.firstChild) {
									elm.removeChild(elm.firstChild);
								}
								while (svg.firstChild) {
									elm.appendChild(svg.firstChild);
								}
							} else if (
								// skip the update if old and new VDOM state is the same.
								// `value` is handled separately because the DOM value may be temporarily
								// out of sync with VDOM state due to focus, composition and modifiers.
								// This  #4521 by skipping the unnecesarry `checked` update.
								cur !== oldProps[key]
							) {
								// some property updates can throw
								// e.g. `value` on <progress> w/ non-finite value
								try {
									elm[key] = cur;
								} catch (e) {}
							}
						}
					}

					// check platforms/web/util/attrs.js acceptValue

					function shouldUpdateValue(elm, checkVal) {
						return (
							!elm.composing &&
							(elm.tagName === "OPTION" ||
								isNotInFocusAndDirty(elm, checkVal) ||
								isDirtyWithModifiers(elm, checkVal))
						);
					}

					function isNotInFocusAndDirty(elm, checkVal) {
						// return true when textbox (.number and .trim) loses focus and its value is
						// not equal to the updated value
						var notInFocus = true;
						// #6157
						// work around IE bug when accessing document.activeElement in an iframe
						try {
							notInFocus = document.activeElement !== elm;
						} catch (e) {}
						return notInFocus && elm.value !== checkVal;
					}

					function isDirtyWithModifiers(elm, newVal) {
						var value = elm.value;
						var modifiers = elm._vModifiers; // injected by v-model runtime
						if (isDef(modifiers)) {
							if (modifiers.number) {
								return toNumber(value) !== toNumber(newVal);
							}
							if (modifiers.trim) {
								return value.trim() !== newVal.trim();
							}
						}
						return value !== newVal;
					}

					var domProps = {
						create: updateDOMProps,
						update: updateDOMProps,
					};

					/*  */

					var parseStyleText = cached(function(cssText) {
						var res = {};
						var listDelimiter = /;(?![^(]*\))/g;
						var propertyDelimiter = /:(.+)/;
						cssText.split(listDelimiter).forEach(function(item) {
							if (item) {
								var tmp = item.split(propertyDelimiter);
								tmp.length > 1 &&
									(res[tmp[0].trim()] = tmp[1].trim());
							}
						});
						return res;
					});

					// merge static and dynamic style data on the same vnode
					function normalizeStyleData(data) {
						var style = normalizeStyleBinding(data.style);
						// static style is pre-processed into an object during compilation
						// and is always a fresh object, so it's safe to merge into it
						return data.staticStyle
							? extend(data.staticStyle, style)
							: style;
					}

					// normalize possible array / string values into Object
					function normalizeStyleBinding(bindingStyle) {
						if (Array.isArray(bindingStyle)) {
							return toObject(bindingStyle);
						}
						if (typeof bindingStyle === "string") {
							return parseStyleText(bindingStyle);
						}
						return bindingStyle;
					}

					/**
					 * parent component style should be after child's
					 * so that parent component's style could override it
					 */
					function getStyle(vnode, checkChild) {
						var res = {};
						var styleData;

						if (checkChild) {
							var childNode = vnode;
							while (childNode.componentInstance) {
								childNode = childNode.componentInstance._vnode;
								if (
									childNode &&
									childNode.data &&
									(styleData = normalizeStyleData(
										childNode.data
									))
								) {
									extend(res, styleData);
								}
							}
						}

						if ((styleData = normalizeStyleData(vnode.data))) {
							extend(res, styleData);
						}

						var parentNode = vnode;
						while ((parentNode = parentNode.parent)) {
							if (
								parentNode.data &&
								(styleData = normalizeStyleData(
									parentNode.data
								))
							) {
								extend(res, styleData);
							}
						}
						return res;
					}

					/*  */

					var cssVarRE = /^--/;
					var importantRE = /\s*!important$/;
					var setProp = function(el, name, val) {
						/* istanbul ignore if */
						if (cssVarRE.test(name)) {
							el.style.setProperty(name, val);
						} else if (importantRE.test(val)) {
							el.style.setProperty(
								hyphenate(name),
								val.replace(importantRE, ""),
								"important"
							);
						} else {
							var normalizedName = normalize(name);
							if (Array.isArray(val)) {
								// Support values array created by autoprefixer, e.g.
								// {display: ["-webkit-box", "-ms-flexbox", "flex"]}
								// Set them one by one, and the browser will only set those it can recognize
								for (
									var i = 0, len = val.length;
									i < len;
									i++
								) {
									el.style[normalizedName] = val[i];
								}
							} else {
								el.style[normalizedName] = val;
							}
						}
					};

					var vendorNames = ["Webkit", "Moz", "ms"];

					var emptyStyle;
					var normalize = cached(function(prop) {
						emptyStyle =
							emptyStyle || document.createElement("div").style;
						prop = camelize(prop);
						if (prop !== "filter" && prop in emptyStyle) {
							return prop;
						}
						var capName =
							prop.charAt(0).toUpperCase() + prop.slice(1);
						for (var i = 0; i < vendorNames.length; i++) {
							var name = vendorNames[i] + capName;
							if (name in emptyStyle) {
								return name;
							}
						}
					});

					function updateStyle(oldVnode, vnode) {
						var data = vnode.data;
						var oldData = oldVnode.data;

						if (
							isUndef(data.staticStyle) &&
							isUndef(data.style) &&
							isUndef(oldData.staticStyle) &&
							isUndef(oldData.style)
						) {
							return;
						}

						var cur, name;
						var el = vnode.elm;
						var oldStaticStyle = oldData.staticStyle;
						var oldStyleBinding =
							oldData.normalizedStyle || oldData.style || {};

						// if static style exists, stylebinding already merged into it when doing normalizeStyleData
						var oldStyle = oldStaticStyle || oldStyleBinding;

						var style =
							normalizeStyleBinding(vnode.data.style) || {};

						// store normalized style under a different key for next diff
						// make sure to clone it if it's reactive, since the user likely wants
						// to mutate it.
						vnode.data.normalizedStyle = isDef(style.__ob__)
							? extend({}, style)
							: style;

						var newStyle = getStyle(vnode, true);

						for (name in oldStyle) {
							if (isUndef(newStyle[name])) {
								setProp(el, name, "");
							}
						}
						for (name in newStyle) {
							cur = newStyle[name];
							if (cur !== oldStyle[name]) {
								// ie9 setting to null has no effect, must use empty string
								setProp(el, name, cur == null ? "" : cur);
							}
						}
					}

					var style = {
						create: updateStyle,
						update: updateStyle,
					};

					/*  */

					var whitespaceRE = /\s+/;

					/**
					 * Add class with compatibility for SVG since classList is not supported on
					 * SVG elements in IE
					 */
					function addClass(el, cls) {
						/* istanbul ignore if */
						if (!cls || !(cls = cls.trim())) {
							return;
						}

						/* istanbul ignore else */
						if (el.classList) {
							if (cls.indexOf(" ") > -1) {
								cls.split(whitespaceRE).forEach(function(c) {
									return el.classList.add(c);
								});
							} else {
								el.classList.add(cls);
							}
						} else {
							var cur =
								" " + (el.getAttribute("class") || "") + " ";
							if (cur.indexOf(" " + cls + " ") < 0) {
								el.setAttribute("class", (cur + cls).trim());
							}
						}
					}

					/**
					 * Remove class with compatibility for SVG since classList is not supported on
					 * SVG elements in IE
					 */
					function removeClass(el, cls) {
						/* istanbul ignore if */
						if (!cls || !(cls = cls.trim())) {
							return;
						}

						/* istanbul ignore else */
						if (el.classList) {
							if (cls.indexOf(" ") > -1) {
								cls.split(whitespaceRE).forEach(function(c) {
									return el.classList.remove(c);
								});
							} else {
								el.classList.remove(cls);
							}
							if (!el.classList.length) {
								el.removeAttribute("class");
							}
						} else {
							var cur =
								" " + (el.getAttribute("class") || "") + " ";
							var tar = " " + cls + " ";
							while (cur.indexOf(tar) >= 0) {
								cur = cur.replace(tar, " ");
							}
							cur = cur.trim();
							if (cur) {
								el.setAttribute("class", cur);
							} else {
								el.removeAttribute("class");
							}
						}
					}

					/*  */

					function resolveTransition(def$$1) {
						if (!def$$1) {
							return;
						}
						/* istanbul ignore else */
						if (typeof def$$1 === "object") {
							var res = {};
							if (def$$1.css !== false) {
								extend(
									res,
									autoCssTransition(def$$1.name || "v")
								);
							}
							extend(res, def$$1);
							return res;
						} else if (typeof def$$1 === "string") {
							return autoCssTransition(def$$1);
						}
					}

					var autoCssTransition = cached(function(name) {
						return {
							enterClass: name + "-enter",
							enterToClass: name + "-enter-to",
							enterActiveClass: name + "-enter-active",
							leaveClass: name + "-leave",
							leaveToClass: name + "-leave-to",
							leaveActiveClass: name + "-leave-active",
						};
					});

					var hasTransition = inBrowser && !isIE9;
					var TRANSITION = "transition";
					var ANIMATION = "animation";

					// Transition property/event sniffing
					var transitionProp = "transition";
					var transitionEndEvent = "transitionend";
					var animationProp = "animation";
					var animationEndEvent = "animationend";
					if (hasTransition) {
						/* istanbul ignore if */
						if (
							window.ontransitionend === undefined &&
							window.onwebkittransitionend !== undefined
						) {
							transitionProp = "WebkitTransition";
							transitionEndEvent = "webkitTransitionEnd";
						}
						if (
							window.onanimationend === undefined &&
							window.onwebkitanimationend !== undefined
						) {
							animationProp = "WebkitAnimation";
							animationEndEvent = "webkitAnimationEnd";
						}
					}

					// binding to window is necessary to make hot reload work in IE in strict mode
					var raf = inBrowser
						? window.requestAnimationFrame
							? window.requestAnimationFrame.bind(window)
							: setTimeout
						: /* istanbul ignore next */ function(fn) {
								return fn();
						  };

					function nextFrame(fn) {
						raf(function() {
							raf(fn);
						});
					}

					function addTransitionClass(el, cls) {
						var transitionClasses =
							el._transitionClasses ||
							(el._transitionClasses = []);
						if (transitionClasses.indexOf(cls) < 0) {
							transitionClasses.push(cls);
							addClass(el, cls);
						}
					}

					function removeTransitionClass(el, cls) {
						if (el._transitionClasses) {
							remove(el._transitionClasses, cls);
						}
						removeClass(el, cls);
					}

					function whenTransitionEnds(el, expectedType, cb) {
						var ref = getTransitionInfo(el, expectedType);
						var type = ref.type;
						var timeout = ref.timeout;
						var propCount = ref.propCount;
						if (!type) {
							return cb();
						}
						var event =
							type === TRANSITION
								? transitionEndEvent
								: animationEndEvent;
						var ended = 0;
						var end = function() {
							el.removeEventListener(event, onEnd);
							cb();
						};
						var onEnd = function(e) {
							if (e.target === el) {
								if (++ended >= propCount) {
									end();
								}
							}
						};
						setTimeout(function() {
							if (ended < propCount) {
								end();
							}
						}, timeout + 1);
						el.addEventListener(event, onEnd);
					}

					var transformRE = /\b(transform|all)(,|$)/;

					function getTransitionInfo(el, expectedType) {
						var styles = window.getComputedStyle(el);
						// JSDOM may return undefined for transition properties
						var transitionDelays = (
							styles[transitionProp + "Delay"] || ""
						).split(", ");
						var transitionDurations = (
							styles[transitionProp + "Duration"] || ""
						).split(", ");
						var transitionTimeout = getTimeout(
							transitionDelays,
							transitionDurations
						);
						var animationDelays = (
							styles[animationProp + "Delay"] || ""
						).split(", ");
						var animationDurations = (
							styles[animationProp + "Duration"] || ""
						).split(", ");
						var animationTimeout = getTimeout(
							animationDelays,
							animationDurations
						);

						var type;
						var timeout = 0;
						var propCount = 0;
						/* istanbul ignore if */
						if (expectedType === TRANSITION) {
							if (transitionTimeout > 0) {
								type = TRANSITION;
								timeout = transitionTimeout;
								propCount = transitionDurations.length;
							}
						} else if (expectedType === ANIMATION) {
							if (animationTimeout > 0) {
								type = ANIMATION;
								timeout = animationTimeout;
								propCount = animationDurations.length;
							}
						} else {
							timeout = Math.max(
								transitionTimeout,
								animationTimeout
							);
							type =
								timeout > 0
									? transitionTimeout > animationTimeout
										? TRANSITION
										: ANIMATION
									: null;
							propCount = type
								? type === TRANSITION
									? transitionDurations.length
									: animationDurations.length
								: 0;
						}
						var hasTransform =
							type === TRANSITION &&
							transformRE.test(
								styles[transitionProp + "Property"]
							);
						return {
							type: type,
							timeout: timeout,
							propCount: propCount,
							hasTransform: hasTransform,
						};
					}

					function getTimeout(delays, durations) {
						/* istanbul ignore next */
						while (delays.length < durations.length) {
							delays = delays.concat(delays);
						}

						return Math.max.apply(
							null,
							durations.map(function(d, i) {
								return toMs(d) + toMs(delays[i]);
							})
						);
					}

					// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
					// in a locale-dependent way, using a comma instead of a dot.
					// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
					// as a floor function) causing unexpected behaviors
					function toMs(s) {
						return Number(s.slice(0, -1).replace(",", ".")) * 1000;
					}

					/*  */

					function enter(vnode, toggleDisplay) {
						var el = vnode.elm;

						// call leave callback now
						if (isDef(el._leaveCb)) {
							el._leaveCb.cancelled = true;
							el._leaveCb();
						}

						var data = resolveTransition(vnode.data.transition);
						if (isUndef(data)) {
							return;
						}

						/* istanbul ignore if */
						if (isDef(el._enterCb) || el.nodeType !== 1) {
							return;
						}

						var css = data.css;
						var type = data.type;
						var enterClass = data.enterClass;
						var enterToClass = data.enterToClass;
						var enterActiveClass = data.enterActiveClass;
						var appearClass = data.appearClass;
						var appearToClass = data.appearToClass;
						var appearActiveClass = data.appearActiveClass;
						var beforeEnter = data.beforeEnter;
						var enter = data.enter;
						var afterEnter = data.afterEnter;
						var enterCancelled = data.enterCancelled;
						var beforeAppear = data.beforeAppear;
						var appear = data.appear;
						var afterAppear = data.afterAppear;
						var appearCancelled = data.appearCancelled;
						var duration = data.duration;

						// activeInstance will always be the <transition> component managing this
						// transition. One edge case to check is when the <transition> is placed
						// as the root node of a child component. In that case we need to check
						// <transition>'s parent for appear check.
						var context = activeInstance;
						var transitionNode = activeInstance.$vnode;
						while (transitionNode && transitionNode.parent) {
							context = transitionNode.context;
							transitionNode = transitionNode.parent;
						}

						var isAppear =
							!context._isMounted || !vnode.isRootInsert;

						if (isAppear && !appear && appear !== "") {
							return;
						}

						var startClass =
							isAppear && appearClass ? appearClass : enterClass;
						var activeClass =
							isAppear && appearActiveClass
								? appearActiveClass
								: enterActiveClass;
						var toClass =
							isAppear && appearToClass
								? appearToClass
								: enterToClass;

						var beforeEnterHook = isAppear
							? beforeAppear || beforeEnter
							: beforeEnter;
						var enterHook = isAppear
							? typeof appear === "function"
								? appear
								: enter
							: enter;
						var afterEnterHook = isAppear
							? afterAppear || afterEnter
							: afterEnter;
						var enterCancelledHook = isAppear
							? appearCancelled || enterCancelled
							: enterCancelled;

						var explicitEnterDuration = toNumber(
							isObject(duration) ? duration.enter : duration
						);

						if (explicitEnterDuration != null) {
							checkDuration(
								explicitEnterDuration,
								"enter",
								vnode
							);
						}

						var expectsCSS = css !== false && !isIE9;
						var userWantsControl = getHookArgumentsLength(
							enterHook
						);

						var cb = (el._enterCb = once(function() {
							if (expectsCSS) {
								removeTransitionClass(el, toClass);
								removeTransitionClass(el, activeClass);
							}
							if (cb.cancelled) {
								if (expectsCSS) {
									removeTransitionClass(el, startClass);
								}
								enterCancelledHook && enterCancelledHook(el);
							} else {
								afterEnterHook && afterEnterHook(el);
							}
							el._enterCb = null;
						}));

						if (!vnode.data.show) {
							// remove pending leave element on enter by injecting an insert hook
							mergeVNodeHook(vnode, "insert", function() {
								var parent = el.parentNode;
								var pendingNode =
									parent &&
									parent._pending &&
									parent._pending[vnode.key];
								if (
									pendingNode &&
									pendingNode.tag === vnode.tag &&
									pendingNode.elm._leaveCb
								) {
									pendingNode.elm._leaveCb();
								}
								enterHook && enterHook(el, cb);
							});
						}

						// start enter transition
						beforeEnterHook && beforeEnterHook(el);
						if (expectsCSS) {
							addTransitionClass(el, startClass);
							addTransitionClass(el, activeClass);
							nextFrame(function() {
								removeTransitionClass(el, startClass);
								if (!cb.cancelled) {
									addTransitionClass(el, toClass);
									if (!userWantsControl) {
										if (
											isValidDuration(
												explicitEnterDuration
											)
										) {
											setTimeout(
												cb,
												explicitEnterDuration
											);
										} else {
											whenTransitionEnds(el, type, cb);
										}
									}
								}
							});
						}

						if (vnode.data.show) {
							toggleDisplay && toggleDisplay();
							enterHook && enterHook(el, cb);
						}

						if (!expectsCSS && !userWantsControl) {
							cb();
						}
					}

					function leave(vnode, rm) {
						var el = vnode.elm;

						// call enter callback now
						if (isDef(el._enterCb)) {
							el._enterCb.cancelled = true;
							el._enterCb();
						}

						var data = resolveTransition(vnode.data.transition);
						if (isUndef(data) || el.nodeType !== 1) {
							return rm();
						}

						/* istanbul ignore if */
						if (isDef(el._leaveCb)) {
							return;
						}

						var css = data.css;
						var type = data.type;
						var leaveClass = data.leaveClass;
						var leaveToClass = data.leaveToClass;
						var leaveActiveClass = data.leaveActiveClass;
						var beforeLeave = data.beforeLeave;
						var leave = data.leave;
						var afterLeave = data.afterLeave;
						var leaveCancelled = data.leaveCancelled;
						var delayLeave = data.delayLeave;
						var duration = data.duration;

						var expectsCSS = css !== false && !isIE9;
						var userWantsControl = getHookArgumentsLength(leave);

						var explicitLeaveDuration = toNumber(
							isObject(duration) ? duration.leave : duration
						);

						if (isDef(explicitLeaveDuration)) {
							checkDuration(
								explicitLeaveDuration,
								"leave",
								vnode
							);
						}

						var cb = (el._leaveCb = once(function() {
							if (el.parentNode && el.parentNode._pending) {
								el.parentNode._pending[vnode.key] = null;
							}
							if (expectsCSS) {
								removeTransitionClass(el, leaveToClass);
								removeTransitionClass(el, leaveActiveClass);
							}
							if (cb.cancelled) {
								if (expectsCSS) {
									removeTransitionClass(el, leaveClass);
								}
								leaveCancelled && leaveCancelled(el);
							} else {
								rm();
								afterLeave && afterLeave(el);
							}
							el._leaveCb = null;
						}));

						if (delayLeave) {
							delayLeave(performLeave);
						} else {
							performLeave();
						}

						function performLeave() {
							// the delayed leave may have already been cancelled
							if (cb.cancelled) {
								return;
							}
							// record leaving element
							if (!vnode.data.show && el.parentNode) {
								(el.parentNode._pending ||
									(el.parentNode._pending = {}))[
									vnode.key
								] = vnode;
							}
							beforeLeave && beforeLeave(el);
							if (expectsCSS) {
								addTransitionClass(el, leaveClass);
								addTransitionClass(el, leaveActiveClass);
								nextFrame(function() {
									removeTransitionClass(el, leaveClass);
									if (!cb.cancelled) {
										addTransitionClass(el, leaveToClass);
										if (!userWantsControl) {
											if (
												isValidDuration(
													explicitLeaveDuration
												)
											) {
												setTimeout(
													cb,
													explicitLeaveDuration
												);
											} else {
												whenTransitionEnds(
													el,
													type,
													cb
												);
											}
										}
									}
								});
							}
							leave && leave(el, cb);
							if (!expectsCSS && !userWantsControl) {
								cb();
							}
						}
					}

					// only used in dev mode
					function checkDuration(val, name, vnode) {
						if (typeof val !== "number") {
							warn(
								"<transition> explicit " +
									name +
									" duration is not a valid number - " +
									"got " +
									JSON.stringify(val) +
									".",
								vnode.context
							);
						} else if (isNaN(val)) {
							warn(
								"<transition> explicit " +
									name +
									" duration is NaN - " +
									"the duration expression might be incorrect.",
								vnode.context
							);
						}
					}

					function isValidDuration(val) {
						return typeof val === "number" && !isNaN(val);
					}

					/**
					 * Normalize a transition hook's argument length. The hook may be:
					 * - a merged hook (invoker) with the original in .fns
					 * - a wrapped component method (check ._length)
					 * - a plain function (.length)
					 */
					function getHookArgumentsLength(fn) {
						if (isUndef(fn)) {
							return false;
						}
						var invokerFns = fn.fns;
						if (isDef(invokerFns)) {
							// invoker
							return getHookArgumentsLength(
								Array.isArray(invokerFns)
									? invokerFns[0]
									: invokerFns
							);
						} else {
							return (fn._length || fn.length) > 1;
						}
					}

					function _enter(_, vnode) {
						if (vnode.data.show !== true) {
							enter(vnode);
						}
					}

					var transition = inBrowser
						? {
								create: _enter,
								activate: _enter,
								remove: function remove$$1(vnode, rm) {
									/* istanbul ignore else */
									if (vnode.data.show !== true) {
										leave(vnode, rm);
									} else {
										rm();
									}
								},
						  }
						: {};

					var platformModules = [
						attrs,
						klass,
						events,
						domProps,
						style,
						transition,
					];

					/*  */

					// the directive module should be applied last, after all
					// built-in modules have been applied.
					var modules = platformModules.concat(baseModules);

					var patch = createPatchFunction({
						nodeOps: nodeOps,
						modules: modules,
					});

					/**
					 * Not type checking this file because flow doesn't like attaching
					 * properties to Elements.
					 */

					/* istanbul ignore if */
					if (isIE9) {
						// http://www.matts411.com/post/internet-explorer-9-oninput/
						document.addEventListener(
							"selectionchange",
							function() {
								var el = document.activeElement;
								if (el && el.vmodel) {
									trigger(el, "input");
								}
							}
						);
					}

					var directive = {
						inserted: function inserted(
							el,
							binding,
							vnode,
							oldVnode
						) {
							if (vnode.tag === "select") {
								// #6903
								if (oldVnode.elm && !oldVnode.elm._vOptions) {
									mergeVNodeHook(
										vnode,
										"postpatch",
										function() {
											directive.componentUpdated(
												el,
												binding,
												vnode
											);
										}
									);
								} else {
									setSelected(el, binding, vnode.context);
								}
								el._vOptions = [].map.call(
									el.options,
									getValue
								);
							} else if (
								vnode.tag === "textarea" ||
								isTextInputType(el.type)
							) {
								el._vModifiers = binding.modifiers;
								if (!binding.modifiers.lazy) {
									el.addEventListener(
										"compositionstart",
										onCompositionStart
									);
									el.addEventListener(
										"compositionend",
										onCompositionEnd
									);
									// Safari < 10.2 & UIWebView doesn't fire compositionend when
									// switching focus before confirming composition choice
									// this also fixes the issue where some browsers e.g. iOS Chrome
									// fires "change" instead of "input" on autocomplete.
									el.addEventListener(
										"change",
										onCompositionEnd
									);
									/* istanbul ignore if */
									if (isIE9) {
										el.vmodel = true;
									}
								}
							}
						},

						componentUpdated: function componentUpdated(
							el,
							binding,
							vnode
						) {
							if (vnode.tag === "select") {
								setSelected(el, binding, vnode.context);
								// in case the options rendered by v-for have changed,
								// it's possible that the value is out-of-sync with the rendered options.
								// detect such cases and filter out values that no longer has a matching
								// option in the DOM.
								var prevOptions = el._vOptions;
								var curOptions = (el._vOptions = [].map.call(
									el.options,
									getValue
								));
								if (
									curOptions.some(function(o, i) {
										return !looseEqual(o, prevOptions[i]);
									})
								) {
									// trigger change event if
									// no matching option found for at least one value
									var needReset = el.multiple
										? binding.value.some(function(v) {
												return hasNoMatchingOption(
													v,
													curOptions
												);
										  })
										: binding.value !== binding.oldValue &&
										  hasNoMatchingOption(
												binding.value,
												curOptions
										  );
									if (needReset) {
										trigger(el, "change");
									}
								}
							}
						},
					};

					function setSelected(el, binding, vm) {
						actuallySetSelected(el, binding, vm);
						/* istanbul ignore if */
						if (isIE || isEdge) {
							setTimeout(function() {
								actuallySetSelected(el, binding, vm);
							}, 0);
						}
					}

					function actuallySetSelected(el, binding, vm) {
						var value = binding.value;
						var isMultiple = el.multiple;
						if (isMultiple && !Array.isArray(value)) {
							warn(
								'<select multiple v-model="' +
									binding.expression +
									'"> ' +
									"expects an Array value for its binding, but got " +
									Object.prototype.toString
										.call(value)
										.slice(8, -1),
								vm
							);
							return;
						}
						var selected, option;
						for (var i = 0, l = el.options.length; i < l; i++) {
							option = el.options[i];
							if (isMultiple) {
								selected =
									looseIndexOf(value, getValue(option)) > -1;
								if (option.selected !== selected) {
									option.selected = selected;
								}
							} else {
								if (looseEqual(getValue(option), value)) {
									if (el.selectedIndex !== i) {
										el.selectedIndex = i;
									}
									return;
								}
							}
						}
						if (!isMultiple) {
							el.selectedIndex = -1;
						}
					}

					function hasNoMatchingOption(value, options) {
						return options.every(function(o) {
							return !looseEqual(o, value);
						});
					}

					function getValue(option) {
						return "_value" in option
							? option._value
							: option.value;
					}

					function onCompositionStart(e) {
						e.target.composing = true;
					}

					function onCompositionEnd(e) {
						// prevent triggering an input event for no reason
						if (!e.target.composing) {
							return;
						}
						e.target.composing = false;
						trigger(e.target, "input");
					}

					function trigger(el, type) {
						var e = document.createEvent("HTMLEvents");
						e.initEvent(type, true, true);
						el.dispatchEvent(e);
					}

					/*  */

					// recursively search for possible transition defined inside the component root
					function locateNode(vnode) {
						return vnode.componentInstance &&
							(!vnode.data || !vnode.data.transition)
							? locateNode(vnode.componentInstance._vnode)
							: vnode;
					}

					var show = {
						bind: function bind(el, ref, vnode) {
							var value = ref.value;

							vnode = locateNode(vnode);
							var transition$$1 =
								vnode.data && vnode.data.transition;
							var originalDisplay = (el.__vOriginalDisplay =
								el.style.display === "none"
									? ""
									: el.style.display);
							if (value && transition$$1) {
								vnode.data.show = true;
								enter(vnode, function() {
									el.style.display = originalDisplay;
								});
							} else {
								el.style.display = value
									? originalDisplay
									: "none";
							}
						},

						update: function update(el, ref, vnode) {
							var value = ref.value;
							var oldValue = ref.oldValue;

							/* istanbul ignore if */
							if (!value === !oldValue) {
								return;
							}
							vnode = locateNode(vnode);
							var transition$$1 =
								vnode.data && vnode.data.transition;
							if (transition$$1) {
								vnode.data.show = true;
								if (value) {
									enter(vnode, function() {
										el.style.display =
											el.__vOriginalDisplay;
									});
								} else {
									leave(vnode, function() {
										el.style.display = "none";
									});
								}
							} else {
								el.style.display = value
									? el.__vOriginalDisplay
									: "none";
							}
						},

						unbind: function unbind(
							el,
							binding,
							vnode,
							oldVnode,
							isDestroy
						) {
							if (!isDestroy) {
								el.style.display = el.__vOriginalDisplay;
							}
						},
					};

					var platformDirectives = {
						model: directive,
						show: show,
					};

					/*  */

					var transitionProps = {
						name: String,
						appear: Boolean,
						css: Boolean,
						mode: String,
						type: String,
						enterClass: String,
						leaveClass: String,
						enterToClass: String,
						leaveToClass: String,
						enterActiveClass: String,
						leaveActiveClass: String,
						appearClass: String,
						appearActiveClass: String,
						appearToClass: String,
						duration: [Number, String, Object],
					};

					// in case the child is also an abstract component, e.g. <keep-alive>
					// we want to recursively retrieve the real component to be rendered
					function getRealChild(vnode) {
						var compOptions = vnode && vnode.componentOptions;
						if (compOptions && compOptions.Ctor.options.abstract) {
							return getRealChild(
								getFirstComponentChild(compOptions.children)
							);
						} else {
							return vnode;
						}
					}

					function extractTransitionData(comp) {
						var data = {};
						var options = comp.$options;
						// props
						for (var key in options.propsData) {
							data[key] = comp[key];
						}
						// events.
						// extract listeners and pass them directly to the transition methods
						var listeners = options._parentListeners;
						for (var key$1 in listeners) {
							data[camelize(key$1)] = listeners[key$1];
						}
						return data;
					}

					function placeholder(h, rawChild) {
						if (/\d-keep-alive$/.test(rawChild.tag)) {
							return h("keep-alive", {
								props: rawChild.componentOptions.propsData,
							});
						}
					}

					function hasParentTransition(vnode) {
						while ((vnode = vnode.parent)) {
							if (vnode.data.transition) {
								return true;
							}
						}
					}

					function isSameChild(child, oldChild) {
						return (
							oldChild.key === child.key &&
							oldChild.tag === child.tag
						);
					}

					var isNotTextNode = function(c) {
						return c.tag || isAsyncPlaceholder(c);
					};

					var isVShowDirective = function(d) {
						return d.name === "show";
					};

					var Transition = {
						name: "transition",
						props: transitionProps,
						abstract: true,

						render: function render(h) {
							var this$1 = this;

							var children = this.$slots.default;
							if (!children) {
								return;
							}

							// filter out text nodes (possible whitespaces)
							children = children.filter(isNotTextNode);
							/* istanbul ignore if */
							if (!children.length) {
								return;
							}

							// warn multiple elements
							if (children.length > 1) {
								warn(
									"<transition> can only be used on a single element. Use " +
										"<transition-group> for lists.",
									this.$parent
								);
							}

							var mode = this.mode;

							// warn invalid mode
							if (
								mode &&
								mode !== "in-out" &&
								mode !== "out-in"
							) {
								warn(
									"invalid <transition> mode: " + mode,
									this.$parent
								);
							}

							var rawChild = children[0];

							// if this is a component root node and the component's
							// parent container node also has transition, skip.
							if (hasParentTransition(this.$vnode)) {
								return rawChild;
							}

							// apply transition data to child
							// use getRealChild() to ignore abstract components e.g. keep-alive
							var child = getRealChild(rawChild);
							/* istanbul ignore if */
							if (!child) {
								return rawChild;
							}

							if (this._leaving) {
								return placeholder(h, rawChild);
							}

							// ensure a key that is unique to the vnode type and to this transition
							// component instance. This key will be used to remove pending leaving nodes
							// during entering.
							var id = "__transition-" + this._uid + "-";
							child.key =
								child.key == null
									? child.isComment
										? id + "comment"
										: id + child.tag
									: isPrimitive(child.key)
									? String(child.key).indexOf(id) === 0
										? child.key
										: id + child.key
									: child.key;

							var data = ((
								child.data || (child.data = {})
							).transition = extractTransitionData(this));
							var oldRawChild = this._vnode;
							var oldChild = getRealChild(oldRawChild);

							// mark v-show
							// so that the transition module can hand over the control to the directive
							if (
								child.data.directives &&
								child.data.directives.some(isVShowDirective)
							) {
								child.data.show = true;
							}

							if (
								oldChild &&
								oldChild.data &&
								!isSameChild(child, oldChild) &&
								!isAsyncPlaceholder(oldChild) &&
								// #6687 component root is a comment node
								!(
									oldChild.componentInstance &&
									oldChild.componentInstance._vnode.isComment
								)
							) {
								// replace old child transition data with fresh one
								// important for dynamic transitions!
								var oldData = (oldChild.data.transition = extend(
									{},
									data
								));
								// handle transition mode
								if (mode === "out-in") {
									// return placeholder node and queue update when leave finishes
									this._leaving = true;
									mergeVNodeHook(
										oldData,
										"afterLeave",
										function() {
											this$1._leaving = false;
											this$1.$forceUpdate();
										}
									);
									return placeholder(h, rawChild);
								} else if (mode === "in-out") {
									if (isAsyncPlaceholder(child)) {
										return oldRawChild;
									}
									var delayedLeave;
									var performLeave = function() {
										delayedLeave();
									};
									mergeVNodeHook(
										data,
										"afterEnter",
										performLeave
									);
									mergeVNodeHook(
										data,
										"enterCancelled",
										performLeave
									);
									mergeVNodeHook(
										oldData,
										"delayLeave",
										function(leave) {
											delayedLeave = leave;
										}
									);
								}
							}

							return rawChild;
						},
					};

					/*  */

					var props = extend(
						{
							tag: String,
							moveClass: String,
						},
						transitionProps
					);

					delete props.mode;

					var TransitionGroup = {
						props: props,

						beforeMount: function beforeMount() {
							var this$1 = this;

							var update = this._update;
							this._update = function(vnode, hydrating) {
								var restoreActiveInstance = setActiveInstance(
									this$1
								);
								// force removing pass
								this$1.__patch__(
									this$1._vnode,
									this$1.kept,
									false, // hydrating
									true // removeOnly (!important, avoids unnecessary moves)
								);
								this$1._vnode = this$1.kept;
								restoreActiveInstance();
								update.call(this$1, vnode, hydrating);
							};
						},

						render: function render(h) {
							var tag =
								this.tag || this.$vnode.data.tag || "span";
							var map = Object.create(null);
							var prevChildren = (this.prevChildren = this.children);
							var rawChildren = this.$slots.default || [];
							var children = (this.children = []);
							var transitionData = extractTransitionData(this);

							for (var i = 0; i < rawChildren.length; i++) {
								var c = rawChildren[i];
								if (c.tag) {
									if (
										c.key != null &&
										String(c.key).indexOf("__vlist") !== 0
									) {
										children.push(c);
										map[c.key] = c;
										(
											c.data || (c.data = {})
										).transition = transitionData;
									} else {
										var opts = c.componentOptions;
										var name = opts
											? opts.Ctor.options.name ||
											  opts.tag ||
											  ""
											: c.tag;
										warn(
											"<transition-group> children must be keyed: <" +
												name +
												">"
										);
									}
								}
							}

							if (prevChildren) {
								var kept = [];
								var removed = [];
								for (
									var i$1 = 0;
									i$1 < prevChildren.length;
									i$1++
								) {
									var c$1 = prevChildren[i$1];
									c$1.data.transition = transitionData;
									c$1.data.pos = c$1.elm.getBoundingClientRect();
									if (map[c$1.key]) {
										kept.push(c$1);
									} else {
										removed.push(c$1);
									}
								}
								this.kept = h(tag, null, kept);
								this.removed = removed;
							}

							return h(tag, null, children);
						},

						updated: function updated() {
							var children = this.prevChildren;
							var moveClass =
								this.moveClass || (this.name || "v") + "-move";
							if (
								!children.length ||
								!this.hasMove(children[0].elm, moveClass)
							) {
								return;
							}

							// we divide the work into three loops to avoid mixing DOM reads and writes
							// in each iteration - which helps prevent layout thrashing.
							children.forEach(callPendingCbs);
							children.forEach(recordPosition);
							children.forEach(applyTranslation);

							// force reflow to put everything in position
							// assign to this to avoid being removed in tree-shaking
							// $flow-disable-line
							this._reflow = document.body.offsetHeight;

							children.forEach(function(c) {
								if (c.data.moved) {
									var el = c.elm;
									var s = el.style;
									addTransitionClass(el, moveClass);
									s.transform = s.WebkitTransform = s.transitionDuration =
										"";
									el.addEventListener(
										transitionEndEvent,
										(el._moveCb = function cb(e) {
											if (e && e.target !== el) {
												return;
											}
											if (
												!e ||
												/transform$/.test(
													e.propertyName
												)
											) {
												el.removeEventListener(
													transitionEndEvent,
													cb
												);
												el._moveCb = null;
												removeTransitionClass(
													el,
													moveClass
												);
											}
										})
									);
								}
							});
						},

						methods: {
							hasMove: function hasMove(el, moveClass) {
								/* istanbul ignore if */
								if (!hasTransition) {
									return false;
								}
								/* istanbul ignore if */
								if (this._hasMove) {
									return this._hasMove;
								}
								// Detect whether an element with the move class applied has
								// CSS transitions. Since the element may be inside an entering
								// transition at this very moment, we make a clone of it and remove
								// all other transition classes applied to ensure only the move class
								// is applied.
								var clone = el.cloneNode();
								if (el._transitionClasses) {
									el._transitionClasses.forEach(function(
										cls
									) {
										removeClass(clone, cls);
									});
								}
								addClass(clone, moveClass);
								clone.style.display = "none";
								this.$el.appendChild(clone);
								var info = getTransitionInfo(clone);
								this.$el.removeChild(clone);
								return (this._hasMove = info.hasTransform);
							},
						},
					};

					function callPendingCbs(c) {
						/* istanbul ignore if */
						if (c.elm._moveCb) {
							c.elm._moveCb();
						}
						/* istanbul ignore if */
						if (c.elm._enterCb) {
							c.elm._enterCb();
						}
					}

					function recordPosition(c) {
						c.data.newPos = c.elm.getBoundingClientRect();
					}

					function applyTranslation(c) {
						var oldPos = c.data.pos;
						var newPos = c.data.newPos;
						var dx = oldPos.left - newPos.left;
						var dy = oldPos.top - newPos.top;
						if (dx || dy) {
							c.data.moved = true;
							var s = c.elm.style;
							s.transform = s.WebkitTransform =
								"translate(" + dx + "px," + dy + "px)";
							s.transitionDuration = "0s";
						}
					}

					var platformComponents = {
						Transition: Transition,
						TransitionGroup: TransitionGroup,
					};

					/*  */

					// install platform specific utils
					Vue.config.mustUseProp = mustUseProp;
					Vue.config.isReservedTag = isReservedTag;
					Vue.config.isReservedAttr = isReservedAttr;
					Vue.config.getTagNamespace = getTagNamespace;
					Vue.config.isUnknownElement = isUnknownElement;

					// install platform runtime directives & components
					extend(Vue.options.directives, platformDirectives);
					extend(Vue.options.components, platformComponents);

					// install platform patch function
					Vue.prototype.__patch__ = inBrowser ? patch : noop;

					// public mount method
					Vue.prototype.$mount = function(el, hydrating) {
						el = el && inBrowser ? query(el) : undefined;
						return mountComponent(this, el, hydrating);
					};

					// devtools global hook
					/* istanbul ignore next */
					if (inBrowser) {
						setTimeout(function() {
							if (config.devtools) {
								if (devtools) {
									devtools.emit("init", Vue);
								} else {
									console[console.info ? "info" : "log"](
										"Download the Vue Devtools extension for a better development experience:\n" +
											"https://github.com/vuejs/vue-devtools"
									);
								}
							}
							if (
								config.productionTip !== false &&
								typeof console !== "undefined"
							) {
								console[console.info ? "info" : "log"](
									"You are running Vue in development mode.\n" +
										"Make sure to turn on production mode when deploying for production.\n" +
										"See more tips at https://vuejs.org/guide/deployment.html"
								);
							}
						}, 0);
					}

					/*  */

					var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
					var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

					var buildRegex = cached(function(delimiters) {
						var open = delimiters[0].replace(regexEscapeRE, "\\$&");
						var close = delimiters[1].replace(
							regexEscapeRE,
							"\\$&"
						);
						return new RegExp(open + "((?:.|\\n)+?)" + close, "g");
					});

					function parseText(text, delimiters) {
						var tagRE = delimiters
							? buildRegex(delimiters)
							: defaultTagRE;
						if (!tagRE.test(text)) {
							return;
						}
						var tokens = [];
						var rawTokens = [];
						var lastIndex = (tagRE.lastIndex = 0);
						var match, index, tokenValue;
						while ((match = tagRE.exec(text))) {
							index = match.index;
							// push text token
							if (index > lastIndex) {
								rawTokens.push(
									(tokenValue = text.slice(lastIndex, index))
								);
								tokens.push(JSON.stringify(tokenValue));
							}
							// tag token
							var exp = parseFilters(match[1].trim());
							tokens.push("_s(" + exp + ")");
							rawTokens.push({"@binding": exp});
							lastIndex = index + match[0].length;
						}
						if (lastIndex < text.length) {
							rawTokens.push(
								(tokenValue = text.slice(lastIndex))
							);
							tokens.push(JSON.stringify(tokenValue));
						}
						return {
							expression: tokens.join("+"),
							tokens: rawTokens,
						};
					}

					/*  */

					function transformNode(el, options) {
						var warn = options.warn || baseWarn;
						var staticClass = getAndRemoveAttr(el, "class");
						if (staticClass) {
							var res = parseText(
								staticClass,
								options.delimiters
							);
							if (res) {
								warn(
									'class="' +
										staticClass +
										'": ' +
										"Interpolation inside attributes has been removed. " +
										"Use v-bind or the colon shorthand instead. For example, " +
										'instead of <div class="{{ val }}">, use <div :class="val">.',
									el.rawAttrsMap["class"]
								);
							}
						}
						if (staticClass) {
							el.staticClass = JSON.stringify(staticClass);
						}
						var classBinding = getBindingAttr(
							el,
							"class",
							false /* getStatic */
						);
						if (classBinding) {
							el.classBinding = classBinding;
						}
					}

					function genData(el) {
						var data = "";
						if (el.staticClass) {
							data += "staticClass:" + el.staticClass + ",";
						}
						if (el.classBinding) {
							data += "class:" + el.classBinding + ",";
						}
						return data;
					}

					var klass$1 = {
						staticKeys: ["staticClass"],
						transformNode: transformNode,
						genData: genData,
					};

					/*  */

					function transformNode$1(el, options) {
						var warn = options.warn || baseWarn;
						var staticStyle = getAndRemoveAttr(el, "style");
						if (staticStyle) {
							/* istanbul ignore if */
							{
								var res = parseText(
									staticStyle,
									options.delimiters
								);
								if (res) {
									warn(
										'style="' +
											staticStyle +
											'": ' +
											"Interpolation inside attributes has been removed. " +
											"Use v-bind or the colon shorthand instead. For example, " +
											'instead of <div style="{{ val }}">, use <div :style="val">.',
										el.rawAttrsMap["style"]
									);
								}
							}
							el.staticStyle = JSON.stringify(
								parseStyleText(staticStyle)
							);
						}

						var styleBinding = getBindingAttr(
							el,
							"style",
							false /* getStatic */
						);
						if (styleBinding) {
							el.styleBinding = styleBinding;
						}
					}

					function genData$1(el) {
						var data = "";
						if (el.staticStyle) {
							data += "staticStyle:" + el.staticStyle + ",";
						}
						if (el.styleBinding) {
							data += "style:(" + el.styleBinding + "),";
						}
						return data;
					}

					var style$1 = {
						staticKeys: ["staticStyle"],
						transformNode: transformNode$1,
						genData: genData$1,
					};

					/*  */

					var decoder;

					var he = {
						decode: function decode(html) {
							decoder = decoder || document.createElement("div");
							decoder.innerHTML = html;
							return decoder.textContent;
						},
					};

					/*  */

					var isUnaryTag = makeMap(
						"area,base,br,col,embed,frame,hr,img,input,isindex,keygen," +
							"link,meta,param,source,track,wbr"
					);

					// Elements that you can, intentionally, leave open
					// (and which close themselves)
					var canBeLeftOpenTag = makeMap(
						"colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"
					);

					// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
					// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
					var isNonPhrasingTag = makeMap(
						"address,article,aside,base,blockquote,body,caption,col,colgroup,dd," +
							"details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form," +
							"h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta," +
							"optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead," +
							"title,tr,track"
					);

					/**
					 * Not type-checking this file because it's mostly vendor code.
					 */

					// Regular Expressions for parsing tags and attributes
					var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
					var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
					var ncname =
						"[a-zA-Z_][\\-\\.0-9_a-zA-Z" +
						unicodeRegExp.source +
						"]*";
					var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
					var startTagOpen = new RegExp("^<" + qnameCapture);
					var startTagClose = /^\s*(\/?)>/;
					var endTag = new RegExp("^<\\/" + qnameCapture + "[^>]*>");
					var doctype = /^<!DOCTYPE [^>]+>/i;
					// #7298: escape - to avoid being pased as HTML comment when inlined in page
					var comment = /^<!\--/;
					var conditionalComment = /^<!\[/;

					// Special Elements (can contain anything)
					var isPlainTextElement = makeMap(
						"script,style,textarea",
						true
					);
					var reCache = {};

					var decodingMap = {
						"&lt;": "<",
						"&gt;": ">",
						"&quot;": '"',
						"&amp;": "&",
						"&#10;": "\n",
						"&#9;": "\t",
						"&#39;": "'",
					};
					var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
					var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;

					// #5992
					var isIgnoreNewlineTag = makeMap("pre,textarea", true);
					var shouldIgnoreFirstNewline = function(tag, html) {
						return (
							tag && isIgnoreNewlineTag(tag) && html[0] === "\n"
						);
					};

					function decodeAttr(value, shouldDecodeNewlines) {
						var re = shouldDecodeNewlines
							? encodedAttrWithNewLines
							: encodedAttr;
						return value.replace(re, function(match) {
							return decodingMap[match];
						});
					}

					function parseHTML(html, options) {
						var stack = [];
						var expectHTML = options.expectHTML;
						var isUnaryTag$$1 = options.isUnaryTag || no;
						var canBeLeftOpenTag$$1 =
							options.canBeLeftOpenTag || no;
						var index = 0;
						var last, lastTag;
						while (html) {
							last = html;
							// Make sure we're not in a plaintext content element like script/style
							if (!lastTag || !isPlainTextElement(lastTag)) {
								var textEnd = html.indexOf("<");
								if (textEnd === 0) {
									// Comment:
									if (comment.test(html)) {
										var commentEnd = html.indexOf("-->");

										if (commentEnd >= 0) {
											if (options.shouldKeepComment) {
												options.comment(
													html.substring(
														4,
														commentEnd
													),
													index,
													index + commentEnd + 3
												);
											}
											advance(commentEnd + 3);
											continue;
										}
									}

									// http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
									if (conditionalComment.test(html)) {
										var conditionalEnd = html.indexOf("]>");

										if (conditionalEnd >= 0) {
											advance(conditionalEnd + 2);
											continue;
										}
									}

									// Doctype:
									var doctypeMatch = html.match(doctype);
									if (doctypeMatch) {
										advance(doctypeMatch[0].length);
										continue;
									}

									// End tag:
									var endTagMatch = html.match(endTag);
									if (endTagMatch) {
										var curIndex = index;
										advance(endTagMatch[0].length);
										parseEndTag(
											endTagMatch[1],
											curIndex,
											index
										);
										continue;
									}

									// Start tag:
									var startTagMatch = parseStartTag();
									if (startTagMatch) {
										handleStartTag(startTagMatch);
										if (
											shouldIgnoreFirstNewline(
												startTagMatch.tagName,
												html
											)
										) {
											advance(1);
										}
										continue;
									}
								}

								var text = void 0,
									rest = void 0,
									next = void 0;
								if (textEnd >= 0) {
									rest = html.slice(textEnd);
									while (
										!endTag.test(rest) &&
										!startTagOpen.test(rest) &&
										!comment.test(rest) &&
										!conditionalComment.test(rest)
									) {
										// < in plain text, be forgiving and treat it as text
										next = rest.indexOf("<", 1);
										if (next < 0) {
											break;
										}
										textEnd += next;
										rest = html.slice(textEnd);
									}
									text = html.substring(0, textEnd);
								}

								if (textEnd < 0) {
									text = html;
								}

								if (text) {
									advance(text.length);
								}

								if (options.chars && text) {
									options.chars(
										text,
										index - text.length,
										index
									);
								}
							} else {
								var endTagLength = 0;
								var stackedTag = lastTag.toLowerCase();
								var reStackedTag =
									reCache[stackedTag] ||
									(reCache[stackedTag] = new RegExp(
										"([\\s\\S]*?)(</" +
											stackedTag +
											"[^>]*>)",
										"i"
									));
								var rest$1 = html.replace(
									reStackedTag,
									function(all, text, endTag) {
										endTagLength = endTag.length;
										if (
											!isPlainTextElement(stackedTag) &&
											stackedTag !== "noscript"
										) {
											text = text
												.replace(
													/<!\--([\s\S]*?)-->/g,
													"$1"
												) // #7298
												.replace(
													/<!\[CDATA\[([\s\S]*?)]]>/g,
													"$1"
												);
										}
										if (
											shouldIgnoreFirstNewline(
												stackedTag,
												text
											)
										) {
											text = text.slice(1);
										}
										if (options.chars) {
											options.chars(text);
										}
										return "";
									}
								);
								index += html.length - rest$1.length;
								html = rest$1;
								parseEndTag(
									stackedTag,
									index - endTagLength,
									index
								);
							}

							if (html === last) {
								options.chars && options.chars(html);
								if (!stack.length && options.warn) {
									options.warn(
										'Mal-formatted tag at end of template: "' +
											html +
											'"',
										{start: index + html.length}
									);
								}
								break;
							}
						}

						// Clean up any remaining tags
						parseEndTag();

						function advance(n) {
							index += n;
							html = html.substring(n);
						}

						function parseStartTag() {
							var start = html.match(startTagOpen);
							if (start) {
								var match = {
									tagName: start[1],
									attrs: [],
									start: index,
								};
								advance(start[0].length);
								var end, attr;
								while (
									!(end = html.match(startTagClose)) &&
									(attr =
										html.match(dynamicArgAttribute) ||
										html.match(attribute))
								) {
									attr.start = index;
									advance(attr[0].length);
									attr.end = index;
									match.attrs.push(attr);
								}
								if (end) {
									match.unarySlash = end[1];
									advance(end[0].length);
									match.end = index;
									return match;
								}
							}
						}

						function handleStartTag(match) {
							var tagName = match.tagName;
							var unarySlash = match.unarySlash;

							if (expectHTML) {
								if (
									lastTag === "p" &&
									isNonPhrasingTag(tagName)
								) {
									parseEndTag(lastTag);
								}
								if (
									canBeLeftOpenTag$$1(tagName) &&
									lastTag === tagName
								) {
									parseEndTag(tagName);
								}
							}

							var unary = isUnaryTag$$1(tagName) || !!unarySlash;

							var l = match.attrs.length;
							var attrs = new Array(l);
							for (var i = 0; i < l; i++) {
								var args = match.attrs[i];
								var value = args[3] || args[4] || args[5] || "";
								var shouldDecodeNewlines =
									tagName === "a" && args[1] === "href"
										? options.shouldDecodeNewlinesForHref
										: options.shouldDecodeNewlines;
								attrs[i] = {
									name: args[1],
									value: decodeAttr(
										value,
										shouldDecodeNewlines
									),
								};
								if (options.outputSourceRange) {
									attrs[i].start =
										args.start +
										args[0].match(/^\s*/).length;
									attrs[i].end = args.end;
								}
							}

							if (!unary) {
								stack.push({
									tag: tagName,
									lowerCasedTag: tagName.toLowerCase(),
									attrs: attrs,
									start: match.start,
									end: match.end,
								});
								lastTag = tagName;
							}

							if (options.start) {
								options.start(
									tagName,
									attrs,
									unary,
									match.start,
									match.end
								);
							}
						}

						function parseEndTag(tagName, start, end) {
							var pos, lowerCasedTagName;
							if (start == null) {
								start = index;
							}
							if (end == null) {
								end = index;
							}

							// Find the closest opened tag of the same type
							if (tagName) {
								lowerCasedTagName = tagName.toLowerCase();
								for (pos = stack.length - 1; pos >= 0; pos--) {
									if (
										stack[pos].lowerCasedTag ===
										lowerCasedTagName
									) {
										break;
									}
								}
							} else {
								// If no tag name is provided, clean shop
								pos = 0;
							}

							if (pos >= 0) {
								// Close all the open elements, up the stack
								for (var i = stack.length - 1; i >= pos; i--) {
									if (i > pos || (!tagName && options.warn)) {
										options.warn(
											"tag <" +
												stack[i].tag +
												"> has no matching end tag.",
											{
												start: stack[i].start,
												end: stack[i].end,
											}
										);
									}
									if (options.end) {
										options.end(stack[i].tag, start, end);
									}
								}

								// Remove the open elements from the stack
								stack.length = pos;
								lastTag = pos && stack[pos - 1].tag;
							} else if (lowerCasedTagName === "br") {
								if (options.start) {
									options.start(
										tagName,
										[],
										true,
										start,
										end
									);
								}
							} else if (lowerCasedTagName === "p") {
								if (options.start) {
									options.start(
										tagName,
										[],
										false,
										start,
										end
									);
								}
								if (options.end) {
									options.end(tagName, start, end);
								}
							}
						}
					}

					/*  */

					var onRE = /^@|^v-on:/;
					var dirRE = /^v-|^@|^:/;
					var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
					var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
					var stripParensRE = /^\(|\)$/g;
					var dynamicArgRE = /^\[.*\]$/;

					var argRE = /:(.*)$/;
					var bindRE = /^:|^\.|^v-bind:/;
					var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;

					var slotRE = /^v-slot(:|$)|^#/;

					var lineBreakRE = /[\r\n]/;
					var whitespaceRE$1 = /\s+/g;

					var invalidAttributeRE = /[\s"'<>\/=]/;

					var decodeHTMLCached = cached(he.decode);

					var emptySlotScopeToken = "_empty_";

					// configurable state
					var warn$2;
					var delimiters;
					var transforms;
					var preTransforms;
					var postTransforms;
					var platformIsPreTag;
					var platformMustUseProp;
					var platformGetTagNamespace;
					var maybeComponent;

					function createASTElement(tag, attrs, parent) {
						return {
							type: 1,
							tag: tag,
							attrsList: attrs,
							attrsMap: makeAttrsMap(attrs),
							rawAttrsMap: {},
							parent: parent,
							children: [],
						};
					}

					/**
					 * Convert HTML string to AST.
					 */
					function parse(template, options) {
						warn$2 = options.warn || baseWarn;

						platformIsPreTag = options.isPreTag || no;
						platformMustUseProp = options.mustUseProp || no;
						platformGetTagNamespace = options.getTagNamespace || no;
						var isReservedTag = options.isReservedTag || no;
						maybeComponent = function(el) {
							return !!el.component || !isReservedTag(el.tag);
						};

						transforms = pluckModuleFunction(
							options.modules,
							"transformNode"
						);
						preTransforms = pluckModuleFunction(
							options.modules,
							"preTransformNode"
						);
						postTransforms = pluckModuleFunction(
							options.modules,
							"postTransformNode"
						);

						delimiters = options.delimiters;

						var stack = [];
						var preserveWhitespace =
							options.preserveWhitespace !== false;
						var whitespaceOption = options.whitespace;
						var root;
						var currentParent;
						var inVPre = false;
						var inPre = false;
						var warned = false;

						function warnOnce(msg, range) {
							if (!warned) {
								warned = true;
								warn$2(msg, range);
							}
						}

						function closeElement(element) {
							trimEndingWhitespace(element);
							if (!inVPre && !element.processed) {
								element = processElement(element, options);
							}
							// tree management
							if (!stack.length && element !== root) {
								// allow root elements with v-if, v-else-if and v-else
								if (
									root.if &&
									(element.elseif || element.else)
								) {
									{
										checkRootConstraints(element);
									}
									addIfCondition(root, {
										exp: element.elseif,
										block: element,
									});
								} else {
									warnOnce(
										"Component template should contain exactly one root element. " +
											"If you are using v-if on multiple elements, " +
											"use v-else-if to chain them instead.",
										{start: element.start}
									);
								}
							}
							if (currentParent && !element.forbidden) {
								if (element.elseif || element.else) {
									processIfConditions(element, currentParent);
								} else {
									if (element.slotScope) {
										// scoped slot
										// keep it in the children list so that v-else(-if) conditions can
										// find it as the prev node.
										var name =
											element.slotTarget || '"default"';
										(currentParent.scopedSlots ||
											(currentParent.scopedSlots = {}))[
											name
										] = element;
									}
									currentParent.children.push(element);
									element.parent = currentParent;
								}
							}

							// final children cleanup
							// filter out scoped slots
							element.children = element.children.filter(function(
								c
							) {
								return !c.slotScope;
							});
							// remove trailing whitespace node again
							trimEndingWhitespace(element);

							// check pre state
							if (element.pre) {
								inVPre = false;
							}
							if (platformIsPreTag(element.tag)) {
								inPre = false;
							}
							// apply post-transforms
							for (var i = 0; i < postTransforms.length; i++) {
								postTransforms[i](element, options);
							}
						}

						function trimEndingWhitespace(el) {
							// remove trailing whitespace node
							if (!inPre) {
								var lastNode;
								while (
									(lastNode =
										el.children[el.children.length - 1]) &&
									lastNode.type === 3 &&
									lastNode.text === " "
								) {
									el.children.pop();
								}
							}
						}

						function checkRootConstraints(el) {
							if (el.tag === "slot" || el.tag === "template") {
								warnOnce(
									"Cannot use <" +
										el.tag +
										"> as component root element because it may " +
										"contain multiple nodes.",
									{start: el.start}
								);
							}
							if (el.attrsMap.hasOwnProperty("v-for")) {
								warnOnce(
									"Cannot use v-for on stateful component root element because " +
										"it renders multiple elements.",
									el.rawAttrsMap["v-for"]
								);
							}
						}

						parseHTML(template, {
							warn: warn$2,
							expectHTML: options.expectHTML,
							isUnaryTag: options.isUnaryTag,
							canBeLeftOpenTag: options.canBeLeftOpenTag,
							shouldDecodeNewlines: options.shouldDecodeNewlines,
							shouldDecodeNewlinesForHref:
								options.shouldDecodeNewlinesForHref,
							shouldKeepComment: options.comments,
							outputSourceRange: options.outputSourceRange,
							start: function start(
								tag,
								attrs,
								unary,
								start$1,
								end
							) {
								// check namespace.
								// inherit parent ns if there is one
								var ns =
									(currentParent && currentParent.ns) ||
									platformGetTagNamespace(tag);

								// handle IE svg bug
								/* istanbul ignore if */
								if (isIE && ns === "svg") {
									attrs = guardIESVGBug(attrs);
								}

								var element = createASTElement(
									tag,
									attrs,
									currentParent
								);
								if (ns) {
									element.ns = ns;
								}

								{
									if (options.outputSourceRange) {
										element.start = start$1;
										element.end = end;
										element.rawAttrsMap = element.attrsList.reduce(
											function(cumulated, attr) {
												cumulated[attr.name] = attr;
												return cumulated;
											},
											{}
										);
									}
									attrs.forEach(function(attr) {
										if (
											invalidAttributeRE.test(attr.name)
										) {
											warn$2(
												"Invalid dynamic argument expression: attribute names cannot contain " +
													"spaces, quotes, <, >, / or =.",
												{
													start:
														attr.start +
														attr.name.indexOf("["),
													end:
														attr.start +
														attr.name.length,
												}
											);
										}
									});
								}

								if (
									isForbiddenTag(element) &&
									!isServerRendering()
								) {
									element.forbidden = true;
									warn$2(
										"Templates should only be responsible for mapping the state to the " +
											"UI. Avoid placing tags with side-effects in your templates, such as " +
											"<" +
											tag +
											">" +
											", as they will not be parsed.",
										{start: element.start}
									);
								}

								// apply pre-transforms
								for (var i = 0; i < preTransforms.length; i++) {
									element =
										preTransforms[i](element, options) ||
										element;
								}

								if (!inVPre) {
									processPre(element);
									if (element.pre) {
										inVPre = true;
									}
								}
								if (platformIsPreTag(element.tag)) {
									inPre = true;
								}
								if (inVPre) {
									processRawAttrs(element);
								} else if (!element.processed) {
									// structural directives
									processFor(element);
									processIf(element);
									processOnce(element);
								}

								if (!root) {
									root = element;
									{
										checkRootConstraints(root);
									}
								}

								if (!unary) {
									currentParent = element;
									stack.push(element);
								} else {
									closeElement(element);
								}
							},

							end: function end(tag, start, end$1) {
								var element = stack[stack.length - 1];
								// pop stack
								stack.length -= 1;
								currentParent = stack[stack.length - 1];
								if (options.outputSourceRange) {
									element.end = end$1;
								}
								closeElement(element);
							},

							chars: function chars(text, start, end) {
								if (!currentParent) {
									{
										if (text === template) {
											warnOnce(
												"Component template requires a root element, rather than just text.",
												{start: start}
											);
										} else if ((text = text.trim())) {
											warnOnce(
												'text "' +
													text +
													'" outside root element will be ignored.',
												{start: start}
											);
										}
									}
									return;
								}
								// IE textarea placeholder bug
								/* istanbul ignore if */
								if (
									isIE &&
									currentParent.tag === "textarea" &&
									currentParent.attrsMap.placeholder === text
								) {
									return;
								}
								var children = currentParent.children;
								if (inPre || text.trim()) {
									text = isTextTag(currentParent)
										? text
										: decodeHTMLCached(text);
								} else if (!children.length) {
									// remove the whitespace-only node right after an opening tag
									text = "";
								} else if (whitespaceOption) {
									if (whitespaceOption === "condense") {
										// in condense mode, remove the whitespace node if it contains
										// line break, otherwise condense to a single space
										text = lineBreakRE.test(text)
											? ""
											: " ";
									} else {
										text = " ";
									}
								} else {
									text = preserveWhitespace ? " " : "";
								}
								if (text) {
									if (
										!inPre &&
										whitespaceOption === "condense"
									) {
										// condense consecutive whitespaces into single space
										text = text.replace(
											whitespaceRE$1,
											" "
										);
									}
									var res;
									var child;
									if (
										!inVPre &&
										text !== " " &&
										(res = parseText(text, delimiters))
									) {
										child = {
											type: 2,
											expression: res.expression,
											tokens: res.tokens,
											text: text,
										};
									} else if (
										text !== " " ||
										!children.length ||
										children[children.length - 1].text !==
											" "
									) {
										child = {
											type: 3,
											text: text,
										};
									}
									if (child) {
										if (options.outputSourceRange) {
											child.start = start;
											child.end = end;
										}
										children.push(child);
									}
								}
							},
							comment: function comment(text, start, end) {
								// adding anyting as a sibling to the root node is forbidden
								// comments should still be allowed, but ignored
								if (currentParent) {
									var child = {
										type: 3,
										text: text,
										isComment: true,
									};
									if (options.outputSourceRange) {
										child.start = start;
										child.end = end;
									}
									currentParent.children.push(child);
								}
							},
						});
						return root;
					}

					function processPre(el) {
						if (getAndRemoveAttr(el, "v-pre") != null) {
							el.pre = true;
						}
					}

					function processRawAttrs(el) {
						var list = el.attrsList;
						var len = list.length;
						if (len) {
							var attrs = (el.attrs = new Array(len));
							for (var i = 0; i < len; i++) {
								attrs[i] = {
									name: list[i].name,
									value: JSON.stringify(list[i].value),
								};
								if (list[i].start != null) {
									attrs[i].start = list[i].start;
									attrs[i].end = list[i].end;
								}
							}
						} else if (!el.pre) {
							// non root node in pre blocks with no attributes
							el.plain = true;
						}
					}

					function processElement(element, options) {
						processKey(element);

						// determine whether this is a plain element after
						// removing structural attributes
						element.plain =
							!element.key &&
							!element.scopedSlots &&
							!element.attrsList.length;

						processRef(element);
						processSlotContent(element);
						processSlotOutlet(element);
						processComponent(element);
						for (var i = 0; i < transforms.length; i++) {
							element =
								transforms[i](element, options) || element;
						}
						processAttrs(element);
						return element;
					}

					function processKey(el) {
						var exp = getBindingAttr(el, "key");
						if (exp) {
							{
								if (el.tag === "template") {
									warn$2(
										"<template> cannot be keyed. Place the key on real elements instead.",
										getRawBindingAttr(el, "key")
									);
								}
								if (el.for) {
									var iterator = el.iterator2 || el.iterator1;
									var parent = el.parent;
									if (
										iterator &&
										iterator === exp &&
										parent &&
										parent.tag === "transition-group"
									) {
										warn$2(
											"Do not use v-for index as key on <transition-group> children, " +
												"this is the same as not using keys.",
											getRawBindingAttr(el, "key"),
											true /* tip */
										);
									}
								}
							}
							el.key = exp;
						}
					}

					function processRef(el) {
						var ref = getBindingAttr(el, "ref");
						if (ref) {
							el.ref = ref;
							el.refInFor = checkInFor(el);
						}
					}

					function processFor(el) {
						var exp;
						if ((exp = getAndRemoveAttr(el, "v-for"))) {
							var res = parseFor(exp);
							if (res) {
								extend(el, res);
							} else {
								warn$2(
									"Invalid v-for expression: " + exp,
									el.rawAttrsMap["v-for"]
								);
							}
						}
					}

					function parseFor(exp) {
						var inMatch = exp.match(forAliasRE);
						if (!inMatch) {
							return;
						}
						var res = {};
						res.for = inMatch[2].trim();
						var alias = inMatch[1]
							.trim()
							.replace(stripParensRE, "");
						var iteratorMatch = alias.match(forIteratorRE);
						if (iteratorMatch) {
							res.alias = alias.replace(forIteratorRE, "").trim();
							res.iterator1 = iteratorMatch[1].trim();
							if (iteratorMatch[2]) {
								res.iterator2 = iteratorMatch[2].trim();
							}
						} else {
							res.alias = alias;
						}
						return res;
					}

					function processIf(el) {
						var exp = getAndRemoveAttr(el, "v-if");
						if (exp) {
							el.if = exp;
							addIfCondition(el, {
								exp: exp,
								block: el,
							});
						} else {
							if (getAndRemoveAttr(el, "v-else") != null) {
								el.else = true;
							}
							var elseif = getAndRemoveAttr(el, "v-else-if");
							if (elseif) {
								el.elseif = elseif;
							}
						}
					}

					function processIfConditions(el, parent) {
						var prev = findPrevElement(parent.children);
						if (prev && prev.if) {
							addIfCondition(prev, {
								exp: el.elseif,
								block: el,
							});
						} else {
							warn$2(
								"v-" +
									(el.elseif
										? 'else-if="' + el.elseif + '"'
										: "else") +
									" " +
									"used on element <" +
									el.tag +
									"> without corresponding v-if.",
								el.rawAttrsMap[
									el.elseif ? "v-else-if" : "v-else"
								]
							);
						}
					}

					function findPrevElement(children) {
						var i = children.length;
						while (i--) {
							if (children[i].type === 1) {
								return children[i];
							} else {
								if (children[i].text !== " ") {
									warn$2(
										'text "' +
											children[i].text.trim() +
											'" between v-if and v-else(-if) ' +
											"will be ignored.",
										children[i]
									);
								}
								children.pop();
							}
						}
					}

					function addIfCondition(el, condition) {
						if (!el.ifConditions) {
							el.ifConditions = [];
						}
						el.ifConditions.push(condition);
					}

					function processOnce(el) {
						var once$$1 = getAndRemoveAttr(el, "v-once");
						if (once$$1 != null) {
							el.once = true;
						}
					}

					// handle content being passed to a component as slot,
					// e.g. <template slot="xxx">, <div slot-scope="xxx">
					function processSlotContent(el) {
						var slotScope;
						if (el.tag === "template") {
							slotScope = getAndRemoveAttr(el, "scope");
							/* istanbul ignore if */
							if (slotScope) {
								warn$2(
									'the "scope" attribute for scoped slots have been deprecated and ' +
										'replaced by "slot-scope" since 2.5. The new "slot-scope" attribute ' +
										"can also be used on plain elements in addition to <template> to " +
										"denote scoped slots.",
									el.rawAttrsMap["scope"],
									true
								);
							}
							el.slotScope =
								slotScope || getAndRemoveAttr(el, "slot-scope");
						} else if (
							(slotScope = getAndRemoveAttr(el, "slot-scope"))
						) {
							/* istanbul ignore if */
							if (el.attrsMap["v-for"]) {
								warn$2(
									"Ambiguous combined usage of slot-scope and v-for on <" +
										el.tag +
										"> " +
										"(v-for takes higher priority). Use a wrapper <template> for the " +
										"scoped slot to make it clearer.",
									el.rawAttrsMap["slot-scope"],
									true
								);
							}
							el.slotScope = slotScope;
						}

						// slot="xxx"
						var slotTarget = getBindingAttr(el, "slot");
						if (slotTarget) {
							el.slotTarget =
								slotTarget === '""' ? '"default"' : slotTarget;
							el.slotTargetDynamic = !!(
								el.attrsMap[":slot"] ||
								el.attrsMap["v-bind:slot"]
							);
							// preserve slot as an attribute for native shadow DOM compat
							// only for non-scoped slots.
							if (el.tag !== "template" && !el.slotScope) {
								addAttr(
									el,
									"slot",
									slotTarget,
									getRawBindingAttr(el, "slot")
								);
							}
						}

						// 2.6 v-slot syntax
						{
							if (el.tag === "template") {
								// v-slot on <template>
								var slotBinding = getAndRemoveAttrByRegex(
									el,
									slotRE
								);
								if (slotBinding) {
									{
										if (el.slotTarget || el.slotScope) {
											warn$2(
												"Unexpected mixed usage of different slot syntaxes.",
												el
											);
										}
										if (
											el.parent &&
											!maybeComponent(el.parent)
										) {
											warn$2(
												"<template v-slot> can only appear at the root level inside " +
													"the receiving the component",
												el
											);
										}
									}
									var ref = getSlotName(slotBinding);
									var name = ref.name;
									var dynamic = ref.dynamic;
									el.slotTarget = name;
									el.slotTargetDynamic = dynamic;
									el.slotScope =
										slotBinding.value ||
										emptySlotScopeToken; // force it into a scoped slot for perf
								}
							} else {
								// v-slot on component, denotes default slot
								var slotBinding$1 = getAndRemoveAttrByRegex(
									el,
									slotRE
								);
								if (slotBinding$1) {
									{
										if (!maybeComponent(el)) {
											warn$2(
												"v-slot can only be used on components or <template>.",
												slotBinding$1
											);
										}
										if (el.slotScope || el.slotTarget) {
											warn$2(
												"Unexpected mixed usage of different slot syntaxes.",
												el
											);
										}
										if (el.scopedSlots) {
											warn$2(
												"To avoid scope ambiguity, the default slot should also use " +
													"<template> syntax when there are other named slots.",
												slotBinding$1
											);
										}
									}
									// add the component's children to its default slot
									var slots =
										el.scopedSlots || (el.scopedSlots = {});
									var ref$1 = getSlotName(slotBinding$1);
									var name$1 = ref$1.name;
									var dynamic$1 = ref$1.dynamic;
									var slotContainer = (slots[
										name$1
									] = createASTElement("template", [], el));
									slotContainer.slotTarget = name$1;
									slotContainer.slotTargetDynamic = dynamic$1;
									slotContainer.children = el.children.filter(
										function(c) {
											if (!c.slotScope) {
												c.parent = slotContainer;
												return true;
											}
										}
									);
									slotContainer.slotScope =
										slotBinding$1.value ||
										emptySlotScopeToken;
									// remove children as they are returned from scopedSlots now
									el.children = [];
									// mark el non-plain so data gets generated
									el.plain = false;
								}
							}
						}
					}

					function getSlotName(binding) {
						var name = binding.name.replace(slotRE, "");
						if (!name) {
							if (binding.name[0] !== "#") {
								name = "default";
							} else {
								warn$2(
									"v-slot shorthand syntax requires a slot name.",
									binding
								);
							}
						}
						return dynamicArgRE.test(name)
							? // dynamic [name]
							  {name: name.slice(1, -1), dynamic: true}
							: // static name
							  {name: '"' + name + '"', dynamic: false};
					}

					// handle <slot/> outlets
					function processSlotOutlet(el) {
						if (el.tag === "slot") {
							el.slotName = getBindingAttr(el, "name");
							if (el.key) {
								warn$2(
									"`key` does not work on <slot> because slots are abstract outlets " +
										"and can possibly expand into multiple elements. " +
										"Use the key on a wrapping element instead.",
									getRawBindingAttr(el, "key")
								);
							}
						}
					}

					function processComponent(el) {
						var binding;
						if ((binding = getBindingAttr(el, "is"))) {
							el.component = binding;
						}
						if (getAndRemoveAttr(el, "inline-template") != null) {
							el.inlineTemplate = true;
						}
					}

					function processAttrs(el) {
						var list = el.attrsList;
						var i,
							l,
							name,
							rawName,
							value,
							modifiers,
							syncGen,
							isDynamic;
						for (i = 0, l = list.length; i < l; i++) {
							name = rawName = list[i].name;
							value = list[i].value;
							if (dirRE.test(name)) {
								// mark element as dynamic
								el.hasBindings = true;
								// modifiers
								modifiers = parseModifiers(
									name.replace(dirRE, "")
								);
								// support .foo shorthand syntax for the .prop modifier
								if (modifiers) {
									name = name.replace(modifierRE, "");
								}
								if (bindRE.test(name)) {
									// v-bind
									name = name.replace(bindRE, "");
									value = parseFilters(value);
									isDynamic = dynamicArgRE.test(name);
									if (isDynamic) {
										name = name.slice(1, -1);
									}
									if (value.trim().length === 0) {
										warn$2(
											'The value for a v-bind expression cannot be empty. Found in "v-bind:' +
												name +
												'"'
										);
									}
									if (modifiers) {
										if (modifiers.prop && !isDynamic) {
											name = camelize(name);
											if (name === "innerHtml") {
												name = "innerHTML";
											}
										}
										if (modifiers.camel && !isDynamic) {
											name = camelize(name);
										}
										if (modifiers.sync) {
											syncGen = genAssignmentCode(
												value,
												"$event"
											);
											if (!isDynamic) {
												addHandler(
													el,
													"update:" + camelize(name),
													syncGen,
													null,
													false,
													warn$2,
													list[i]
												);
												if (
													hyphenate(name) !==
													camelize(name)
												) {
													addHandler(
														el,
														"update:" +
															hyphenate(name),
														syncGen,
														null,
														false,
														warn$2,
														list[i]
													);
												}
											} else {
												// handler w/ dynamic event name
												addHandler(
													el,
													'"update:"+(' + name + ")",
													syncGen,
													null,
													false,
													warn$2,
													list[i],
													true // dynamic
												);
											}
										}
									}
									if (
										(modifiers && modifiers.prop) ||
										(!el.component &&
											platformMustUseProp(
												el.tag,
												el.attrsMap.type,
												name
											))
									) {
										addProp(
											el,
											name,
											value,
											list[i],
											isDynamic
										);
									} else {
										addAttr(
											el,
											name,
											value,
											list[i],
											isDynamic
										);
									}
								} else if (onRE.test(name)) {
									// v-on
									name = name.replace(onRE, "");
									isDynamic = dynamicArgRE.test(name);
									if (isDynamic) {
										name = name.slice(1, -1);
									}
									addHandler(
										el,
										name,
										value,
										modifiers,
										false,
										warn$2,
										list[i],
										isDynamic
									);
								} else {
									// normal directives
									name = name.replace(dirRE, "");
									// parse arg
									var argMatch = name.match(argRE);
									var arg = argMatch && argMatch[1];
									isDynamic = false;
									if (arg) {
										name = name.slice(0, -(arg.length + 1));
										if (dynamicArgRE.test(arg)) {
											arg = arg.slice(1, -1);
											isDynamic = true;
										}
									}
									addDirective(
										el,
										name,
										rawName,
										value,
										arg,
										isDynamic,
										modifiers,
										list[i]
									);
									if (name === "model") {
										checkForAliasModel(el, value);
									}
								}
							} else {
								// literal attribute
								{
									var res = parseText(value, delimiters);
									if (res) {
										warn$2(
											name +
												'="' +
												value +
												'": ' +
												"Interpolation inside attributes has been removed. " +
												"Use v-bind or the colon shorthand instead. For example, " +
												'instead of <div id="{{ val }}">, use <div :id="val">.',
											list[i]
										);
									}
								}
								addAttr(
									el,
									name,
									JSON.stringify(value),
									list[i]
								);
								// #6887 firefox doesn't update muted state if set via attribute
								// even immediately after element creation
								if (
									!el.component &&
									name === "muted" &&
									platformMustUseProp(
										el.tag,
										el.attrsMap.type,
										name
									)
								) {
									addProp(el, name, "true", list[i]);
								}
							}
						}
					}

					function checkInFor(el) {
						var parent = el;
						while (parent) {
							if (parent.for !== undefined) {
								return true;
							}
							parent = parent.parent;
						}
						return false;
					}

					function parseModifiers(name) {
						var match = name.match(modifierRE);
						if (match) {
							var ret = {};
							match.forEach(function(m) {
								ret[m.slice(1)] = true;
							});
							return ret;
						}
					}

					function makeAttrsMap(attrs) {
						var map = {};
						for (var i = 0, l = attrs.length; i < l; i++) {
							if (map[attrs[i].name] && !isIE && !isEdge) {
								warn$2(
									"duplicate attribute: " + attrs[i].name,
									attrs[i]
								);
							}
							map[attrs[i].name] = attrs[i].value;
						}
						return map;
					}

					// for script (e.g. type="x/template") or style, do not decode content
					function isTextTag(el) {
						return el.tag === "script" || el.tag === "style";
					}

					function isForbiddenTag(el) {
						return (
							el.tag === "style" ||
							(el.tag === "script" &&
								(!el.attrsMap.type ||
									el.attrsMap.type === "text/javascript"))
						);
					}

					var ieNSBug = /^xmlns:NS\d+/;
					var ieNSPrefix = /^NS\d+:/;

					/* istanbul ignore next */
					function guardIESVGBug(attrs) {
						var res = [];
						for (var i = 0; i < attrs.length; i++) {
							var attr = attrs[i];
							if (!ieNSBug.test(attr.name)) {
								attr.name = attr.name.replace(ieNSPrefix, "");
								res.push(attr);
							}
						}
						return res;
					}

					function checkForAliasModel(el, value) {
						var _el = el;
						while (_el) {
							if (_el.for && _el.alias === value) {
								warn$2(
									"<" +
										el.tag +
										' v-model="' +
										value +
										'">: ' +
										"You are binding v-model directly to a v-for iteration alias. " +
										"This will not be able to modify the v-for source array because " +
										"writing to the alias is like modifying a function local variable. " +
										"Consider using an array of objects and use v-model on an object property instead.",
									el.rawAttrsMap["v-model"]
								);
							}
							_el = _el.parent;
						}
					}

					/*  */

					function preTransformNode(el, options) {
						if (el.tag === "input") {
							var map = el.attrsMap;
							if (!map["v-model"]) {
								return;
							}

							var typeBinding;
							if (map[":type"] || map["v-bind:type"]) {
								typeBinding = getBindingAttr(el, "type");
							}
							if (!map.type && !typeBinding && map["v-bind"]) {
								typeBinding = "(" + map["v-bind"] + ").type";
							}

							if (typeBinding) {
								var ifCondition = getAndRemoveAttr(
									el,
									"v-if",
									true
								);
								var ifConditionExtra = ifCondition
									? "&&(" + ifCondition + ")"
									: "";
								var hasElse =
									getAndRemoveAttr(el, "v-else", true) !=
									null;
								var elseIfCondition = getAndRemoveAttr(
									el,
									"v-else-if",
									true
								);
								// 1. checkbox
								var branch0 = cloneASTElement(el);
								// process for on the main node
								processFor(branch0);
								addRawAttr(branch0, "type", "checkbox");
								processElement(branch0, options);
								branch0.processed = true; // prevent it from double-processed
								branch0.if =
									"(" +
									typeBinding +
									")==='checkbox'" +
									ifConditionExtra;
								addIfCondition(branch0, {
									exp: branch0.if,
									block: branch0,
								});
								// 2. add radio else-if condition
								var branch1 = cloneASTElement(el);
								getAndRemoveAttr(branch1, "v-for", true);
								addRawAttr(branch1, "type", "radio");
								processElement(branch1, options);
								addIfCondition(branch0, {
									exp:
										"(" +
										typeBinding +
										")==='radio'" +
										ifConditionExtra,
									block: branch1,
								});
								// 3. other
								var branch2 = cloneASTElement(el);
								getAndRemoveAttr(branch2, "v-for", true);
								addRawAttr(branch2, ":type", typeBinding);
								processElement(branch2, options);
								addIfCondition(branch0, {
									exp: ifCondition,
									block: branch2,
								});

								if (hasElse) {
									branch0.else = true;
								} else if (elseIfCondition) {
									branch0.elseif = elseIfCondition;
								}

								return branch0;
							}
						}
					}

					function cloneASTElement(el) {
						return createASTElement(
							el.tag,
							el.attrsList.slice(),
							el.parent
						);
					}

					var model$1 = {
						preTransformNode: preTransformNode,
					};

					var modules$1 = [klass$1, style$1, model$1];

					/*  */

					function text(el, dir) {
						if (dir.value) {
							addProp(
								el,
								"textContent",
								"_s(" + dir.value + ")",
								dir
							);
						}
					}

					/*  */

					function html(el, dir) {
						if (dir.value) {
							addProp(
								el,
								"innerHTML",
								"_s(" + dir.value + ")",
								dir
							);
						}
					}

					var directives$1 = {
						model: model,
						text: text,
						html: html,
					};

					/*  */

					var baseOptions = {
						expectHTML: true,
						modules: modules$1,
						directives: directives$1,
						isPreTag: isPreTag,
						isUnaryTag: isUnaryTag,
						mustUseProp: mustUseProp,
						canBeLeftOpenTag: canBeLeftOpenTag,
						isReservedTag: isReservedTag,
						getTagNamespace: getTagNamespace,
						staticKeys: genStaticKeys(modules$1),
					};

					/*  */

					var isStaticKey;
					var isPlatformReservedTag;

					var genStaticKeysCached = cached(genStaticKeys$1);

					/**
					 * Goal of the optimizer: walk the generated template AST tree
					 * and detect sub-trees that are purely static, i.e. parts of
					 * the DOM that never needs to change.
					 *
					 * Once we detect these sub-trees, we can:
					 *
					 * 1. Hoist them into constants, so that we no longer need to
					 *    create fresh nodes for them on each re-render;
					 * 2. Completely skip them in the patching process.
					 */
					function optimize(root, options) {
						if (!root) {
							return;
						}
						isStaticKey = genStaticKeysCached(
							options.staticKeys || ""
						);
						isPlatformReservedTag = options.isReservedTag || no;
						// first pass: mark all non-static nodes.
						markStatic$1(root);
						// second pass: mark static roots.
						markStaticRoots(root, false);
					}

					function genStaticKeys$1(keys) {
						return makeMap(
							"type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap" +
								(keys ? "," + keys : "")
						);
					}

					function markStatic$1(node) {
						node.static = isStatic(node);
						if (node.type === 1) {
							// do not make component slot content static. this avoids
							// 1. components not able to mutate slot nodes
							// 2. static slot content fails for hot-reloading
							if (
								!isPlatformReservedTag(node.tag) &&
								node.tag !== "slot" &&
								node.attrsMap["inline-template"] == null
							) {
								return;
							}
							for (
								var i = 0, l = node.children.length;
								i < l;
								i++
							) {
								var child = node.children[i];
								markStatic$1(child);
								if (!child.static) {
									node.static = false;
								}
							}
							if (node.ifConditions) {
								for (
									var i$1 = 1, l$1 = node.ifConditions.length;
									i$1 < l$1;
									i$1++
								) {
									var block = node.ifConditions[i$1].block;
									markStatic$1(block);
									if (!block.static) {
										node.static = false;
									}
								}
							}
						}
					}

					function markStaticRoots(node, isInFor) {
						if (node.type === 1) {
							if (node.static || node.once) {
								node.staticInFor = isInFor;
							}
							// For a node to qualify as a static root, it should have children that
							// are not just static text. Otherwise the cost of hoisting out will
							// outweigh the benefits and it's better off to just always render it fresh.
							if (
								node.static &&
								node.children.length &&
								!(
									node.children.length === 1 &&
									node.children[0].type === 3
								)
							) {
								node.staticRoot = true;
								return;
							} else {
								node.staticRoot = false;
							}
							if (node.children) {
								for (
									var i = 0, l = node.children.length;
									i < l;
									i++
								) {
									markStaticRoots(
										node.children[i],
										isInFor || !!node.for
									);
								}
							}
							if (node.ifConditions) {
								for (
									var i$1 = 1, l$1 = node.ifConditions.length;
									i$1 < l$1;
									i$1++
								) {
									markStaticRoots(
										node.ifConditions[i$1].block,
										isInFor
									);
								}
							}
						}
					}

					function isStatic(node) {
						if (node.type === 2) {
							// expression
							return false;
						}
						if (node.type === 3) {
							// text
							return true;
						}
						return !!(
							node.pre ||
							(!node.hasBindings && // no dynamic bindings
							!node.if &&
							!node.for && // not v-if or v-for or v-else
							!isBuiltInTag(node.tag) && // not a built-in
							isPlatformReservedTag(node.tag) && // not a component
								!isDirectChildOfTemplateFor(node) &&
								Object.keys(node).every(isStaticKey))
						);
					}

					function isDirectChildOfTemplateFor(node) {
						while (node.parent) {
							node = node.parent;
							if (node.tag !== "template") {
								return false;
							}
							if (node.for) {
								return true;
							}
						}
						return false;
					}

					/*  */

					var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*(?:[\w$]+)?\s*\(/;
					var fnInvokeRE = /\([^)]*?\);*$/;
					var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;

					// KeyboardEvent.keyCode aliases
					var keyCodes = {
						esc: 27,
						tab: 9,
						enter: 13,
						space: 32,
						up: 38,
						left: 37,
						right: 39,
						down: 40,
						delete: [8, 46],
					};

					// KeyboardEvent.key aliases
					var keyNames = {
						// #7880: IE11 and Edge use `Esc` for Escape key name.
						esc: ["Esc", "Escape"],
						tab: "Tab",
						enter: "Enter",
						// #9112: IE11 uses `Spacebar` for Space key name.
						space: [" ", "Spacebar"],
						// #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
						up: ["Up", "ArrowUp"],
						left: ["Left", "ArrowLeft"],
						right: ["Right", "ArrowRight"],
						down: ["Down", "ArrowDown"],
						// #9112: IE11 uses `Del` for Delete key name.
						delete: ["Backspace", "Delete", "Del"],
					};

					// #4868: modifiers that prevent the execution of the listener
					// need to explicitly return null so that we can determine whether to remove
					// the listener for .once
					var genGuard = function(condition) {
						return "if(" + condition + ")return null;";
					};

					var modifierCode = {
						stop: "$event.stopPropagation();",
						prevent: "$event.preventDefault();",
						self: genGuard(
							"$event.target !== $event.currentTarget"
						),
						ctrl: genGuard("!$event.ctrlKey"),
						shift: genGuard("!$event.shiftKey"),
						alt: genGuard("!$event.altKey"),
						meta: genGuard("!$event.metaKey"),
						left: genGuard(
							"'button' in $event && $event.button !== 0"
						),
						middle: genGuard(
							"'button' in $event && $event.button !== 1"
						),
						right: genGuard(
							"'button' in $event && $event.button !== 2"
						),
					};

					function genHandlers(events, isNative) {
						var prefix = isNative ? "nativeOn:" : "on:";
						var staticHandlers = "";
						var dynamicHandlers = "";
						for (var name in events) {
							var handlerCode = genHandler(events[name]);
							if (events[name] && events[name].dynamic) {
								dynamicHandlers +=
									name + "," + handlerCode + ",";
							} else {
								staticHandlers +=
									'"' + name + '":' + handlerCode + ",";
							}
						}
						staticHandlers =
							"{" + staticHandlers.slice(0, -1) + "}";
						if (dynamicHandlers) {
							return (
								prefix +
								"_d(" +
								staticHandlers +
								",[" +
								dynamicHandlers.slice(0, -1) +
								"])"
							);
						} else {
							return prefix + staticHandlers;
						}
					}

					function genHandler(handler) {
						if (!handler) {
							return "function(){}";
						}

						if (Array.isArray(handler)) {
							return (
								"[" +
								handler
									.map(function(handler) {
										return genHandler(handler);
									})
									.join(",") +
								"]"
							);
						}

						var isMethodPath = simplePathRE.test(handler.value);
						var isFunctionExpression = fnExpRE.test(handler.value);
						var isFunctionInvocation = simplePathRE.test(
							handler.value.replace(fnInvokeRE, "")
						);

						if (!handler.modifiers) {
							if (isMethodPath || isFunctionExpression) {
								return handler.value;
							}
							return (
								"function($event){" +
								(isFunctionInvocation
									? "return " + handler.value
									: handler.value) +
								"}"
							); // inline statement
						} else {
							var code = "";
							var genModifierCode = "";
							var keys = [];
							for (var key in handler.modifiers) {
								if (modifierCode[key]) {
									genModifierCode += modifierCode[key];
									// left/right
									if (keyCodes[key]) {
										keys.push(key);
									}
								} else if (key === "exact") {
									var modifiers = handler.modifiers;
									genModifierCode += genGuard(
										["ctrl", "shift", "alt", "meta"]
											.filter(function(keyModifier) {
												return !modifiers[keyModifier];
											})
											.map(function(keyModifier) {
												return (
													"$event." +
													keyModifier +
													"Key"
												);
											})
											.join("||")
									);
								} else {
									keys.push(key);
								}
							}
							if (keys.length) {
								code += genKeyFilter(keys);
							}
							// Make sure modifiers like prevent and stop get executed after key filtering
							if (genModifierCode) {
								code += genModifierCode;
							}
							var handlerCode = isMethodPath
								? "return " + handler.value + "($event)"
								: isFunctionExpression
								? "return (" + handler.value + ")($event)"
								: isFunctionInvocation
								? "return " + handler.value
								: handler.value;
							return (
								"function($event){" + code + handlerCode + "}"
							);
						}
					}

					function genKeyFilter(keys) {
						return (
							// make sure the key filters only apply to KeyboardEvents
							// #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
							// key events that do not have keyCode property...
							"if(!$event.type.indexOf('key')&&" +
							keys.map(genFilterCode).join("&&") +
							")return null;"
						);
					}

					function genFilterCode(key) {
						var keyVal = parseInt(key, 10);
						if (keyVal) {
							return "$event.keyCode!==" + keyVal;
						}
						var keyCode = keyCodes[key];
						var keyName = keyNames[key];
						return (
							"_k($event.keyCode," +
							JSON.stringify(key) +
							"," +
							JSON.stringify(keyCode) +
							"," +
							"$event.key," +
							"" +
							JSON.stringify(keyName) +
							")"
						);
					}

					/*  */

					function on(el, dir) {
						if (dir.modifiers) {
							warn(
								"v-on without argument does not support modifiers."
							);
						}
						el.wrapListeners = function(code) {
							return "_g(" + code + "," + dir.value + ")";
						};
					}

					/*  */

					function bind$1(el, dir) {
						el.wrapData = function(code) {
							return (
								"_b(" +
								code +
								",'" +
								el.tag +
								"'," +
								dir.value +
								"," +
								(dir.modifiers && dir.modifiers.prop
									? "true"
									: "false") +
								(dir.modifiers && dir.modifiers.sync
									? ",true"
									: "") +
								")"
							);
						};
					}

					/*  */

					var baseDirectives = {
						on: on,
						bind: bind$1,
						cloak: noop,
					};

					/*  */

					var CodegenState = function CodegenState(options) {
						this.options = options;
						this.warn = options.warn || baseWarn;
						this.transforms = pluckModuleFunction(
							options.modules,
							"transformCode"
						);
						this.dataGenFns = pluckModuleFunction(
							options.modules,
							"genData"
						);
						this.directives = extend(
							extend({}, baseDirectives),
							options.directives
						);
						var isReservedTag = options.isReservedTag || no;
						this.maybeComponent = function(el) {
							return !!el.component || !isReservedTag(el.tag);
						};
						this.onceId = 0;
						this.staticRenderFns = [];
						this.pre = false;
					};

					function generate(ast, options) {
						var state = new CodegenState(options);
						var code = ast ? genElement(ast, state) : '_c("div")';
						return {
							render: "with(this){return " + code + "}",
							staticRenderFns: state.staticRenderFns,
						};
					}

					function genElement(el, state) {
						if (el.parent) {
							el.pre = el.pre || el.parent.pre;
						}

						if (el.staticRoot && !el.staticProcessed) {
							return genStatic(el, state);
						} else if (el.once && !el.onceProcessed) {
							return genOnce(el, state);
						} else if (el.for && !el.forProcessed) {
							return genFor(el, state);
						} else if (el.if && !el.ifProcessed) {
							return genIf(el, state);
						} else if (
							el.tag === "template" &&
							!el.slotTarget &&
							!state.pre
						) {
							return genChildren(el, state) || "void 0";
						} else if (el.tag === "slot") {
							return genSlot(el, state);
						} else {
							// component or element
							var code;
							if (el.component) {
								code = genComponent(el.component, el, state);
							} else {
								var data;
								if (
									!el.plain ||
									(el.pre && state.maybeComponent(el))
								) {
									data = genData$2(el, state);
								}

								var children = el.inlineTemplate
									? null
									: genChildren(el, state, true);
								code =
									"_c('" +
									el.tag +
									"'" +
									(data ? "," + data : "") +
									(children ? "," + children : "") +
									")";
							}
							// module transforms
							for (var i = 0; i < state.transforms.length; i++) {
								code = state.transforms[i](el, code);
							}
							return code;
						}
					}

					// hoist static sub-trees out
					function genStatic(el, state) {
						el.staticProcessed = true;
						// Some elements (templates) need to behave differently inside of a v-pre
						// node.  All pre nodes are static roots, so we can use this as a location to
						// wrap a state change and reset it upon exiting the pre node.
						var originalPreState = state.pre;
						if (el.pre) {
							state.pre = el.pre;
						}
						state.staticRenderFns.push(
							"with(this){return " + genElement(el, state) + "}"
						);
						state.pre = originalPreState;
						return (
							"_m(" +
							(state.staticRenderFns.length - 1) +
							(el.staticInFor ? ",true" : "") +
							")"
						);
					}

					// v-once
					function genOnce(el, state) {
						el.onceProcessed = true;
						if (el.if && !el.ifProcessed) {
							return genIf(el, state);
						} else if (el.staticInFor) {
							var key = "";
							var parent = el.parent;
							while (parent) {
								if (parent.for) {
									key = parent.key;
									break;
								}
								parent = parent.parent;
							}
							if (!key) {
								state.warn(
									"v-once can only be used inside v-for that is keyed. ",
									el.rawAttrsMap["v-once"]
								);
								return genElement(el, state);
							}
							return (
								"_o(" +
								genElement(el, state) +
								"," +
								state.onceId++ +
								"," +
								key +
								")"
							);
						} else {
							return genStatic(el, state);
						}
					}

					function genIf(el, state, altGen, altEmpty) {
						el.ifProcessed = true; // avoid recursion
						return genIfConditions(
							el.ifConditions.slice(),
							state,
							altGen,
							altEmpty
						);
					}

					function genIfConditions(
						conditions,
						state,
						altGen,
						altEmpty
					) {
						if (!conditions.length) {
							return altEmpty || "_e()";
						}

						var condition = conditions.shift();
						if (condition.exp) {
							return (
								"(" +
								condition.exp +
								")?" +
								genTernaryExp(condition.block) +
								":" +
								genIfConditions(
									conditions,
									state,
									altGen,
									altEmpty
								)
							);
						} else {
							return "" + genTernaryExp(condition.block);
						}

						// v-if with v-once should generate code like (a)?_m(0):_m(1)
						function genTernaryExp(el) {
							return altGen
								? altGen(el, state)
								: el.once
								? genOnce(el, state)
								: genElement(el, state);
						}
					}

					function genFor(el, state, altGen, altHelper) {
						var exp = el.for;
						var alias = el.alias;
						var iterator1 = el.iterator1 ? "," + el.iterator1 : "";
						var iterator2 = el.iterator2 ? "," + el.iterator2 : "";

						if (
							state.maybeComponent(el) &&
							el.tag !== "slot" &&
							el.tag !== "template" &&
							!el.key
						) {
							state.warn(
								"<" +
									el.tag +
									' v-for="' +
									alias +
									" in " +
									exp +
									'">: component lists rendered with ' +
									"v-for should have explicit keys. " +
									"See https://vuejs.org/guide/list.html#key for more info.",
								el.rawAttrsMap["v-for"],
								true /* tip */
							);
						}

						el.forProcessed = true; // avoid recursion
						return (
							(altHelper || "_l") +
							"((" +
							exp +
							")," +
							"function(" +
							alias +
							iterator1 +
							iterator2 +
							"){" +
							"return " +
							(altGen || genElement)(el, state) +
							"})"
						);
					}

					function genData$2(el, state) {
						var data = "{";

						// directives first.
						// directives may mutate the el's other properties before they are generated.
						var dirs = genDirectives(el, state);
						if (dirs) {
							data += dirs + ",";
						}

						// key
						if (el.key) {
							data += "key:" + el.key + ",";
						}
						// ref
						if (el.ref) {
							data += "ref:" + el.ref + ",";
						}
						if (el.refInFor) {
							data += "refInFor:true,";
						}
						// pre
						if (el.pre) {
							data += "pre:true,";
						}
						// record original tag name for components using "is" attribute
						if (el.component) {
							data += 'tag:"' + el.tag + '",';
						}
						// module data generation functions
						for (var i = 0; i < state.dataGenFns.length; i++) {
							data += state.dataGenFns[i](el);
						}
						// attributes
						if (el.attrs) {
							data += "attrs:" + genProps(el.attrs) + ",";
						}
						// DOM props
						if (el.props) {
							data += "domProps:" + genProps(el.props) + ",";
						}
						// event handlers
						if (el.events) {
							data += genHandlers(el.events, false) + ",";
						}
						if (el.nativeEvents) {
							data += genHandlers(el.nativeEvents, true) + ",";
						}
						// slot target
						// only for non-scoped slots
						if (el.slotTarget && !el.slotScope) {
							data += "slot:" + el.slotTarget + ",";
						}
						// scoped slots
						if (el.scopedSlots) {
							data +=
								genScopedSlots(el, el.scopedSlots, state) + ",";
						}
						// component v-model
						if (el.model) {
							data +=
								"model:{value:" +
								el.model.value +
								",callback:" +
								el.model.callback +
								",expression:" +
								el.model.expression +
								"},";
						}
						// inline-template
						if (el.inlineTemplate) {
							var inlineTemplate = genInlineTemplate(el, state);
							if (inlineTemplate) {
								data += inlineTemplate + ",";
							}
						}
						data = data.replace(/,$/, "") + "}";
						// v-bind dynamic argument wrap
						// v-bind with dynamic arguments must be applied using the same v-bind object
						// merge helper so that class/style/mustUseProp attrs are handled correctly.
						if (el.dynamicAttrs) {
							data =
								"_b(" +
								data +
								',"' +
								el.tag +
								'",' +
								genProps(el.dynamicAttrs) +
								")";
						}
						// v-bind data wrap
						if (el.wrapData) {
							data = el.wrapData(data);
						}
						// v-on data wrap
						if (el.wrapListeners) {
							data = el.wrapListeners(data);
						}
						return data;
					}

					function genDirectives(el, state) {
						var dirs = el.directives;
						if (!dirs) {
							return;
						}
						var res = "directives:[";
						var hasRuntime = false;
						var i, l, dir, needRuntime;
						for (i = 0, l = dirs.length; i < l; i++) {
							dir = dirs[i];
							needRuntime = true;
							var gen = state.directives[dir.name];
							if (gen) {
								// compile-time directive that manipulates AST.
								// returns true if it also needs a runtime counterpart.
								needRuntime = !!gen(el, dir, state.warn);
							}
							if (needRuntime) {
								hasRuntime = true;
								res +=
									'{name:"' +
									dir.name +
									'",rawName:"' +
									dir.rawName +
									'"' +
									(dir.value
										? ",value:(" +
										  dir.value +
										  "),expression:" +
										  JSON.stringify(dir.value)
										: "") +
									(dir.arg
										? ",arg:" +
										  (dir.isDynamicArg
												? dir.arg
												: '"' + dir.arg + '"')
										: "") +
									(dir.modifiers
										? ",modifiers:" +
										  JSON.stringify(dir.modifiers)
										: "") +
									"},";
							}
						}
						if (hasRuntime) {
							return res.slice(0, -1) + "]";
						}
					}

					function genInlineTemplate(el, state) {
						var ast = el.children[0];
						if (el.children.length !== 1 || ast.type !== 1) {
							state.warn(
								"Inline-template components must have exactly one child element.",
								{start: el.start}
							);
						}
						if (ast && ast.type === 1) {
							var inlineRenderFns = generate(ast, state.options);
							return (
								"inlineTemplate:{render:function(){" +
								inlineRenderFns.render +
								"},staticRenderFns:[" +
								inlineRenderFns.staticRenderFns
									.map(function(code) {
										return "function(){" + code + "}";
									})
									.join(",") +
								"]}"
							);
						}
					}

					function genScopedSlots(el, slots, state) {
						// by default scoped slots are considered "stable", this allows child
						// components with only scoped slots to skip forced updates from parent.
						// but in some cases we have to bail-out of this optimization
						// for example if the slot contains dynamic names, has v-if or v-for on them...
						var needsForceUpdate =
							el.for ||
							Object.keys(slots).some(function(key) {
								var slot = slots[key];
								return (
									slot.slotTargetDynamic ||
									slot.if ||
									slot.for ||
									containsSlotChild(slot) // is passing down slot from parent which may be dynamic
								);
							});

						// #9534: if a component with scoped slots is inside a conditional branch,
						// it's possible for the same component to be reused but with different
						// compiled slot content. To avoid that, we generate a unique key based on
						// the generated code of all the slot contents.
						var needsKey = !!el.if;

						// OR when it is inside another scoped slot or v-for (the reactivity may be
						// disconnected due to the intermediate scope variable)
						// #9438, #9506
						// TODO: this can be further optimized by properly analyzing in-scope bindings
						// and skip force updating ones that do not actually use scope variables.
						if (!needsForceUpdate) {
							var parent = el.parent;
							while (parent) {
								if (
									(parent.slotScope &&
										parent.slotScope !==
											emptySlotScopeToken) ||
									parent.for
								) {
									needsForceUpdate = true;
									break;
								}
								if (parent.if) {
									needsKey = true;
								}
								parent = parent.parent;
							}
						}

						var generatedSlots = Object.keys(slots)
							.map(function(key) {
								return genScopedSlot(slots[key], state);
							})
							.join(",");

						return (
							"scopedSlots:_u([" +
							generatedSlots +
							"]" +
							(needsForceUpdate ? ",null,true" : "") +
							(!needsForceUpdate && needsKey
								? ",null,false," + hash(generatedSlots)
								: "") +
							")"
						);
					}

					function hash(str) {
						var hash = 5381;
						var i = str.length;
						while (i) {
							hash = (hash * 33) ^ str.charCodeAt(--i);
						}
						return hash >>> 0;
					}

					function containsSlotChild(el) {
						if (el.type === 1) {
							if (el.tag === "slot") {
								return true;
							}
							return el.children.some(containsSlotChild);
						}
						return false;
					}

					function genScopedSlot(el, state) {
						var isLegacySyntax = el.attrsMap["slot-scope"];
						if (el.if && !el.ifProcessed && !isLegacySyntax) {
							return genIf(el, state, genScopedSlot, "null");
						}
						if (el.for && !el.forProcessed) {
							return genFor(el, state, genScopedSlot);
						}
						var slotScope =
							el.slotScope === emptySlotScopeToken
								? ""
								: String(el.slotScope);
						var fn =
							"function(" +
							slotScope +
							"){" +
							"return " +
							(el.tag === "template"
								? el.if && isLegacySyntax
									? "(" +
									  el.if +
									  ")?" +
									  (genChildren(el, state) || "undefined") +
									  ":undefined"
									: genChildren(el, state) || "undefined"
								: genElement(el, state)) +
							"}";
						// reverse proxy v-slot without scope on this.$slots
						var reverseProxy = slotScope ? "" : ",proxy:true";
						return (
							"{key:" +
							(el.slotTarget || '"default"') +
							",fn:" +
							fn +
							reverseProxy +
							"}"
						);
					}

					function genChildren(
						el,
						state,
						checkSkip,
						altGenElement,
						altGenNode
					) {
						var children = el.children;
						if (children.length) {
							var el$1 = children[0];
							// optimize single v-for
							if (
								children.length === 1 &&
								el$1.for &&
								el$1.tag !== "template" &&
								el$1.tag !== "slot"
							) {
								var normalizationType = checkSkip
									? state.maybeComponent(el$1)
										? ",1"
										: ",0"
									: "";
								return (
									"" +
									(altGenElement || genElement)(el$1, state) +
									normalizationType
								);
							}
							var normalizationType$1 = checkSkip
								? getNormalizationType(
										children,
										state.maybeComponent
								  )
								: 0;
							var gen = altGenNode || genNode;
							return (
								"[" +
								children
									.map(function(c) {
										return gen(c, state);
									})
									.join(",") +
								"]" +
								(normalizationType$1
									? "," + normalizationType$1
									: "")
							);
						}
					}

					// determine the normalization needed for the children array.
					// 0: no normalization needed
					// 1: simple normalization needed (possible 1-level deep nested array)
					// 2: full normalization needed
					function getNormalizationType(children, maybeComponent) {
						var res = 0;
						for (var i = 0; i < children.length; i++) {
							var el = children[i];
							if (el.type !== 1) {
								continue;
							}
							if (
								needsNormalization(el) ||
								(el.ifConditions &&
									el.ifConditions.some(function(c) {
										return needsNormalization(c.block);
									}))
							) {
								res = 2;
								break;
							}
							if (
								maybeComponent(el) ||
								(el.ifConditions &&
									el.ifConditions.some(function(c) {
										return maybeComponent(c.block);
									}))
							) {
								res = 1;
							}
						}
						return res;
					}

					function needsNormalization(el) {
						return (
							el.for !== undefined ||
							el.tag === "template" ||
							el.tag === "slot"
						);
					}

					function genNode(node, state) {
						if (node.type === 1) {
							return genElement(node, state);
						} else if (node.type === 3 && node.isComment) {
							return genComment(node);
						} else {
							return genText(node);
						}
					}

					function genText(text) {
						return (
							"_v(" +
							(text.type === 2
								? text.expression // no need for () because already wrapped in _s()
								: transformSpecialNewlines(
										JSON.stringify(text.text)
								  )) +
							")"
						);
					}

					function genComment(comment) {
						return "_e(" + JSON.stringify(comment.text) + ")";
					}

					function genSlot(el, state) {
						var slotName = el.slotName || '"default"';
						var children = genChildren(el, state);
						var res =
							"_t(" + slotName + (children ? "," + children : "");
						var attrs =
							el.attrs || el.dynamicAttrs
								? genProps(
										(el.attrs || [])
											.concat(el.dynamicAttrs || [])
											.map(function(attr) {
												return {
													// slot props are camelized
													name: camelize(attr.name),
													value: attr.value,
													dynamic: attr.dynamic,
												};
											})
								  )
								: null;
						var bind$$1 = el.attrsMap["v-bind"];
						if ((attrs || bind$$1) && !children) {
							res += ",null";
						}
						if (attrs) {
							res += "," + attrs;
						}
						if (bind$$1) {
							res += (attrs ? "" : ",null") + "," + bind$$1;
						}
						return res + ")";
					}

					// componentName is el.component, take it as argument to shun flow's pessimistic refinement
					function genComponent(componentName, el, state) {
						var children = el.inlineTemplate
							? null
							: genChildren(el, state, true);
						return (
							"_c(" +
							componentName +
							"," +
							genData$2(el, state) +
							(children ? "," + children : "") +
							")"
						);
					}

					function genProps(props) {
						var staticProps = "";
						var dynamicProps = "";
						for (var i = 0; i < props.length; i++) {
							var prop = props[i];
							var value = transformSpecialNewlines(prop.value);
							if (prop.dynamic) {
								dynamicProps += prop.name + "," + value + ",";
							} else {
								staticProps +=
									'"' + prop.name + '":' + value + ",";
							}
						}
						staticProps = "{" + staticProps.slice(0, -1) + "}";
						if (dynamicProps) {
							return (
								"_d(" +
								staticProps +
								",[" +
								dynamicProps.slice(0, -1) +
								"])"
							);
						} else {
							return staticProps;
						}
					}

					// #3895, #4268
					function transformSpecialNewlines(text) {
						return text
							.replace(/\u2028/g, "\\u2028")
							.replace(/\u2029/g, "\\u2029");
					}

					/*  */

					// these keywords should not appear inside expressions, but operators like
					// typeof, instanceof and in are allowed
					var prohibitedKeywordRE = new RegExp(
						"\\b" +
							(
								"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const," +
								"super,throw,while,yield,delete,export,import,return,switch,default," +
								"extends,finally,continue,debugger,function,arguments"
							)
								.split(",")
								.join("\\b|\\b") +
							"\\b"
					);

					// these unary operators should not be used as property/method names
					var unaryOperatorsRE = new RegExp(
						"\\b" +
							"delete,typeof,void"
								.split(",")
								.join("\\s*\\([^\\)]*\\)|\\b") +
							"\\s*\\([^\\)]*\\)"
					);

					// strip strings in expressions
					var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

					// detect problematic expressions in a template
					function detectErrors(ast, warn) {
						if (ast) {
							checkNode(ast, warn);
						}
					}

					function checkNode(node, warn) {
						if (node.type === 1) {
							for (var name in node.attrsMap) {
								if (dirRE.test(name)) {
									var value = node.attrsMap[name];
									if (value) {
										var range = node.rawAttrsMap[name];
										if (name === "v-for") {
											checkFor(
												node,
												'v-for="' + value + '"',
												warn,
												range
											);
										} else if (onRE.test(name)) {
											checkEvent(
												value,
												name + '="' + value + '"',
												warn,
												range
											);
										} else {
											checkExpression(
												value,
												name + '="' + value + '"',
												warn,
												range
											);
										}
									}
								}
							}
							if (node.children) {
								for (var i = 0; i < node.children.length; i++) {
									checkNode(node.children[i], warn);
								}
							}
						} else if (node.type === 2) {
							checkExpression(
								node.expression,
								node.text,
								warn,
								node
							);
						}
					}

					function checkEvent(exp, text, warn, range) {
						var stipped = exp.replace(stripStringRE, "");
						var keywordMatch = stipped.match(unaryOperatorsRE);
						if (
							keywordMatch &&
							stipped.charAt(keywordMatch.index - 1) !== "$"
						) {
							warn(
								"avoid using JavaScript unary operator as property name: " +
									'"' +
									keywordMatch[0] +
									'" in expression ' +
									text.trim(),
								range
							);
						}
						checkExpression(exp, text, warn, range);
					}

					function checkFor(node, text, warn, range) {
						checkExpression(node.for || "", text, warn, range);
						checkIdentifier(
							node.alias,
							"v-for alias",
							text,
							warn,
							range
						);
						checkIdentifier(
							node.iterator1,
							"v-for iterator",
							text,
							warn,
							range
						);
						checkIdentifier(
							node.iterator2,
							"v-for iterator",
							text,
							warn,
							range
						);
					}

					function checkIdentifier(ident, type, text, warn, range) {
						if (typeof ident === "string") {
							try {
								new Function("var " + ident + "=_");
							} catch (e) {
								warn(
									"invalid " +
										type +
										' "' +
										ident +
										'" in expression: ' +
										text.trim(),
									range
								);
							}
						}
					}

					function checkExpression(exp, text, warn, range) {
						try {
							new Function("return " + exp);
						} catch (e) {
							var keywordMatch = exp
								.replace(stripStringRE, "")
								.match(prohibitedKeywordRE);
							if (keywordMatch) {
								warn(
									"avoid using JavaScript keyword as property name: " +
										'"' +
										keywordMatch[0] +
										'"\n  Raw expression: ' +
										text.trim(),
									range
								);
							} else {
								warn(
									"invalid expression: " +
										e.message +
										" in\n\n" +
										"    " +
										exp +
										"\n\n" +
										"  Raw expression: " +
										text.trim() +
										"\n",
									range
								);
							}
						}
					}

					/*  */

					var range = 2;

					function generateCodeFrame(source, start, end) {
						if (start === void 0) start = 0;
						if (end === void 0) end = source.length;

						var lines = source.split(/\r?\n/);
						var count = 0;
						var res = [];
						for (var i = 0; i < lines.length; i++) {
							count += lines[i].length + 1;
							if (count >= start) {
								for (
									var j = i - range;
									j <= i + range || end > count;
									j++
								) {
									if (j < 0 || j >= lines.length) {
										continue;
									}
									res.push(
										"" +
											(j + 1) +
											repeat$1(
												" ",
												3 - String(j + 1).length
											) +
											"|  " +
											lines[j]
									);
									var lineLength = lines[j].length;
									if (j === i) {
										// push underline
										var pad =
											start - (count - lineLength) + 1;
										var length =
											end > count
												? lineLength - pad
												: end - start;
										res.push(
											"   |  " +
												repeat$1(" ", pad) +
												repeat$1("^", length)
										);
									} else if (j > i) {
										if (end > count) {
											var length$1 = Math.min(
												end - count,
												lineLength
											);
											res.push(
												"   |  " +
													repeat$1("^", length$1)
											);
										}
										count += lineLength + 1;
									}
								}
								break;
							}
						}
						return res.join("\n");
					}

					function repeat$1(str, n) {
						var result = "";
						if (n > 0) {
							while (true) {
								// eslint-disable-line
								if (n & 1) {
									result += str;
								}
								n >>>= 1;
								if (n <= 0) {
									break;
								}
								str += str;
							}
						}
						return result;
					}

					/*  */

					function createFunction(code, errors) {
						try {
							return new Function(code);
						} catch (err) {
							errors.push({err: err, code: code});
							return noop;
						}
					}

					function createCompileToFunctionFn(compile) {
						var cache = Object.create(null);

						return function compileToFunctions(
							template,
							options,
							vm
						) {
							options = extend({}, options);
							var warn$$1 = options.warn || warn;
							delete options.warn;

							/* istanbul ignore if */
							{
								// detect possible CSP restriction
								try {
									new Function("return 1");
								} catch (e) {
									if (e.toString().match(/unsafe-eval|CSP/)) {
										warn$$1(
											"It seems you are using the standalone build of Vue.js in an " +
												"environment with Content Security Policy that prohibits unsafe-eval. " +
												"The template compiler cannot work in this environment. Consider " +
												"relaxing the policy to allow unsafe-eval or pre-compiling your " +
												"templates into render functions."
										);
									}
								}
							}

							// check cache
							var key = options.delimiters
								? String(options.delimiters) + template
								: template;
							if (cache[key]) {
								return cache[key];
							}

							// compile
							var compiled = compile(template, options);

							// check compilation errors/tips
							{
								if (compiled.errors && compiled.errors.length) {
									if (options.outputSourceRange) {
										compiled.errors.forEach(function(e) {
											warn$$1(
												"Error compiling template:\n\n" +
													e.msg +
													"\n\n" +
													generateCodeFrame(
														template,
														e.start,
														e.end
													),
												vm
											);
										});
									} else {
										warn$$1(
											"Error compiling template:\n\n" +
												template +
												"\n\n" +
												compiled.errors
													.map(function(e) {
														return "- " + e;
													})
													.join("\n") +
												"\n",
											vm
										);
									}
								}
								if (compiled.tips && compiled.tips.length) {
									if (options.outputSourceRange) {
										compiled.tips.forEach(function(e) {
											return tip(e.msg, vm);
										});
									} else {
										compiled.tips.forEach(function(msg) {
											return tip(msg, vm);
										});
									}
								}
							}

							// turn code into functions
							var res = {};
							var fnGenErrors = [];
							res.render = createFunction(
								compiled.render,
								fnGenErrors
							);
							res.staticRenderFns = compiled.staticRenderFns.map(
								function(code) {
									return createFunction(code, fnGenErrors);
								}
							);

							// check function generation errors.
							// this should only happen if there is a bug in the compiler itself.
							// mostly for codegen development use
							/* istanbul ignore if */
							{
								if (
									(!compiled.errors ||
										!compiled.errors.length) &&
									fnGenErrors.length
								) {
									warn$$1(
										"Failed to generate render function:\n\n" +
											fnGenErrors
												.map(function(ref) {
													var err = ref.err;
													var code = ref.code;

													return (
														err.toString() +
														" in\n\n" +
														code +
														"\n"
													);
												})
												.join("\n"),
										vm
									);
								}
							}

							return (cache[key] = res);
						};
					}

					/*  */

					function createCompilerCreator(baseCompile) {
						return function createCompiler(baseOptions) {
							function compile(template, options) {
								var finalOptions = Object.create(baseOptions);
								var errors = [];
								var tips = [];

								var warn = function(msg, range, tip) {
									(tip ? tips : errors).push(msg);
								};

								if (options) {
									if (options.outputSourceRange) {
										// $flow-disable-line
										var leadingSpaceLength = template.match(
											/^\s*/
										)[0].length;

										warn = function(msg, range, tip) {
											var data = {msg: msg};
											if (range) {
												if (range.start != null) {
													data.start =
														range.start +
														leadingSpaceLength;
												}
												if (range.end != null) {
													data.end =
														range.end +
														leadingSpaceLength;
												}
											}
											(tip ? tips : errors).push(data);
										};
									}
									// merge custom modules
									if (options.modules) {
										finalOptions.modules = (
											baseOptions.modules || []
										).concat(options.modules);
									}
									// merge custom directives
									if (options.directives) {
										finalOptions.directives = extend(
											Object.create(
												baseOptions.directives || null
											),
											options.directives
										);
									}
									// copy other options
									for (var key in options) {
										if (
											key !== "modules" &&
											key !== "directives"
										) {
											finalOptions[key] = options[key];
										}
									}
								}

								finalOptions.warn = warn;

								var compiled = baseCompile(
									template.trim(),
									finalOptions
								);
								{
									detectErrors(compiled.ast, warn);
								}
								compiled.errors = errors;
								compiled.tips = tips;
								return compiled;
							}

							return {
								compile: compile,
								compileToFunctions: createCompileToFunctionFn(
									compile
								),
							};
						};
					}

					/*  */

					// `createCompilerCreator` allows creating compilers that use alternative
					// parser/optimizer/codegen, e.g the SSR optimizing compiler.
					// Here we just export a default compiler using the default parts.
					var createCompiler = createCompilerCreator(
						function baseCompile(template, options) {
							var ast = parse(template.trim(), options);
							if (options.optimize !== false) {
								optimize(ast, options);
							}
							var code = generate(ast, options);
							return {
								ast: ast,
								render: code.render,
								staticRenderFns: code.staticRenderFns,
							};
						}
					);

					/*  */

					var ref$1 = createCompiler(baseOptions);
					var compile = ref$1.compile;
					var compileToFunctions = ref$1.compileToFunctions;

					/*  */

					// check whether current browser encodes a char inside attribute values
					var div;
					function getShouldDecode(href) {
						div = div || document.createElement("div");
						div.innerHTML = href
							? '<a href="\n"/>'
							: '<div a="\n"/>';
						return div.innerHTML.indexOf("&#10;") > 0;
					}

					// #3663: IE encodes newlines inside attribute values while other browsers don't
					var shouldDecodeNewlines = inBrowser
						? getShouldDecode(false)
						: false;
					// #6828: chrome encodes content in a[href]
					var shouldDecodeNewlinesForHref = inBrowser
						? getShouldDecode(true)
						: false;

					/*  */

					var idToTemplate = cached(function(id) {
						var el = query(id);
						return el && el.innerHTML;
					});

					var mount = Vue.prototype.$mount;
					Vue.prototype.$mount = function(el, hydrating) {
						el = el && query(el);

						/* istanbul ignore if */
						if (
							el === document.body ||
							el === document.documentElement
						) {
							warn(
								"Do not mount Vue to <html> or <body> - mount to normal elements instead."
							);
							return this;
						}

						var options = this.$options;
						// resolve template/el and convert to render function
						if (!options.render) {
							var template = options.template;
							if (template) {
								if (typeof template === "string") {
									if (template.charAt(0) === "#") {
										template = idToTemplate(template);
										/* istanbul ignore if */
										if (!template) {
											warn(
												"Template element not found or is empty: " +
													options.template,
												this
											);
										}
									}
								} else if (template.nodeType) {
									template = template.innerHTML;
								} else {
									{
										warn(
											"invalid template option:" +
												template,
											this
										);
									}
									return this;
								}
							} else if (el) {
								template = getOuterHTML(el);
							}
							if (template) {
								/* istanbul ignore if */
								if (config.performance && mark) {
									mark("compile");
								}

								var ref = compileToFunctions(
									template,
									{
										outputSourceRange:
											"development" !== "production",
										shouldDecodeNewlines: shouldDecodeNewlines,
										shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
										delimiters: options.delimiters,
										comments: options.comments,
									},
									this
								);
								var render = ref.render;
								var staticRenderFns = ref.staticRenderFns;
								options.render = render;
								options.staticRenderFns = staticRenderFns;

								/* istanbul ignore if */
								if (config.performance && mark) {
									mark("compile end");
									measure(
										"vue " + this._name + " compile",
										"compile",
										"compile end"
									);
								}
							}
						}
						return mount.call(this, el, hydrating);
					};

					/**
					 * Get outerHTML of elements, taking care
					 * of SVG elements in IE as well.
					 */
					function getOuterHTML(el) {
						if (el.outerHTML) {
							return el.outerHTML;
						} else {
							var container = document.createElement("div");
							container.appendChild(el.cloneNode(true));
							return container.innerHTML;
						}
					}

					Vue.compile = compileToFunctions;

					module.exports = Vue;

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
					),
					__webpack_require__(
						/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js"
					).setImmediate
				));

				/***/
			},

		/***/ "./node_modules/vue/dist/vue.common.js":
			/*!*********************************************!*\
  !*** ./node_modules/vue/dist/vue.common.js ***!
  \*********************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				if (false) {
				} else {
					module.exports = __webpack_require__(
						/*! ./vue.common.dev.js */ "./node_modules/vue/dist/vue.common.dev.js"
					);
				}

				/***/
			},

		/***/ "./node_modules/webpack/buildin/global.js":
			/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				var g;

				// This works in non-strict mode
				g = (function() {
					return this;
				})();

				try {
					// This works if eval is allowed (see CSP)
					g = g || new Function("return this")();
				} catch (e) {
					// This works if the window reference is available
					if (typeof window === "object") g = window;
				}

				// g can still be undefined, but nothing to do about it...
				// We return undefined, instead of nothing here, so it's
				// easier to handle this case. if(!global) { ...}

				module.exports = g;

				/***/
			},

		/***/ "./node_modules/webpack/buildin/module.js":
			/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				module.exports = function(module) {
					if (!module.webpackPolyfill) {
						module.deprecate = function() {};
						module.paths = [];
						// module.parent = undefined by default
						if (!module.children) module.children = [];
						Object.defineProperty(module, "loaded", {
							enumerable: true,
							get: function() {
								return module.l;
							},
						});
						Object.defineProperty(module, "id", {
							enumerable: true,
							get: function() {
								return module.i;
							},
						});
						module.webpackPolyfill = 1;
					}
					return module;
				};

				/***/
			},

		/***/ "./node_modules/xmlhttprequest/lib/XMLHttpRequest.js":
			/*!***********************************************************!*\
  !*** ./node_modules/xmlhttprequest/lib/XMLHttpRequest.js ***!
  \***********************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/* WEBPACK VAR INJECTION */ (function(Buffer, process) {
					/**
					 * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.
					 *
					 * This can be used with JS designed for browsers to improve reuse of code and
					 * allow the use of existing libraries.
					 *
					 * Usage: include("XMLHttpRequest.js") and use XMLHttpRequest per W3C specs.
					 *
					 * @author Dan DeFelippi <dan@driverdan.com>
					 * @contributor David Ellis <d.f.ellis@ieee.org>
					 * @license MIT
					 */

					var Url = __webpack_require__(
						/*! url */ "./node_modules/url/url.js"
					);
					var spawn = __webpack_require__(
						!(function webpackMissingModule() {
							var e = new Error(
								"Cannot find module 'child_process'"
							);
							e.code = "MODULE_NOT_FOUND";
							throw e;
						})()
					).spawn;
					var fs = __webpack_require__(
						!(function webpackMissingModule() {
							var e = new Error("Cannot find module 'fs'");
							e.code = "MODULE_NOT_FOUND";
							throw e;
						})()
					);

					exports.XMLHttpRequest = function() {
						"use strict";

						/**
						 * Private variables
						 */
						var self = this;
						var http = __webpack_require__(
							/*! http */ "./node_modules/stream-http/index.js"
						);
						var https = __webpack_require__(
							/*! https */ "./node_modules/https-browserify/index.js"
						);

						// Holds http.js objects
						var request;
						var response;

						// Request settings
						var settings = {};

						// Disable header blacklist.
						// Not part of XHR specs.
						var disableHeaderCheck = false;

						// Set some default headers
						var defaultHeaders = {
							"User-Agent": "node-XMLHttpRequest",
							Accept: "*/*",
						};

						var headers = {};
						var headersCase = {};

						// These headers are not user setable.
						// The following are allowed but banned in the spec:
						// * user-agent
						var forbiddenRequestHeaders = [
							"accept-charset",
							"accept-encoding",
							"access-control-request-headers",
							"access-control-request-method",
							"connection",
							"content-length",
							"content-transfer-encoding",
							"cookie",
							"cookie2",
							"date",
							"expect",
							"host",
							"keep-alive",
							"origin",
							"referer",
							"te",
							"trailer",
							"transfer-encoding",
							"upgrade",
							"via",
						];

						// These request methods are not allowed
						var forbiddenRequestMethods = [
							"TRACE",
							"TRACK",
							"CONNECT",
						];

						// Send flag
						var sendFlag = false;
						// Error flag, used when errors occur or abort is called
						var errorFlag = false;

						// Event listeners
						var listeners = {};

						/**
						 * Constants
						 */

						this.UNSENT = 0;
						this.OPENED = 1;
						this.HEADERS_RECEIVED = 2;
						this.LOADING = 3;
						this.DONE = 4;

						/**
						 * Public vars
						 */

						// Current state
						this.readyState = this.UNSENT;

						// default ready state change handler in case one is not set or is set late
						this.onreadystatechange = null;

						// Result & response
						this.responseText = "";
						this.responseXML = "";
						this.status = null;
						this.statusText = null;

						// Whether cross-site Access-Control requests should be made using
						// credentials such as cookies or authorization headers
						this.withCredentials = false;

						/**
						 * Private methods
						 */

						/**
						 * Check if the specified header is allowed.
						 *
						 * @param string header Header to validate
						 * @return boolean False if not allowed, otherwise true
						 */
						var isAllowedHttpHeader = function(header) {
							return (
								disableHeaderCheck ||
								(header &&
									forbiddenRequestHeaders.indexOf(
										header.toLowerCase()
									) === -1)
							);
						};

						/**
						 * Check if the specified method is allowed.
						 *
						 * @param string method Request method to validate
						 * @return boolean False if not allowed, otherwise true
						 */
						var isAllowedHttpMethod = function(method) {
							return (
								method &&
								forbiddenRequestMethods.indexOf(method) === -1
							);
						};

						/**
						 * Public methods
						 */

						/**
						 * Open the connection. Currently supports local server requests.
						 *
						 * @param string method Connection method (eg GET, POST)
						 * @param string url URL for the connection.
						 * @param boolean async Asynchronous connection. Default is true.
						 * @param string user Username for basic authentication (optional)
						 * @param string password Password for basic authentication (optional)
						 */
						this.open = function(
							method,
							url,
							async,
							user,
							password
						) {
							this.abort();
							errorFlag = false;

							// Check for valid request method
							if (!isAllowedHttpMethod(method)) {
								throw new Error(
									"SecurityError: Request method not allowed"
								);
							}

							settings = {
								method: method,
								url: url.toString(),
								async:
									typeof async !== "boolean" ? true : async,
								user: user || null,
								password: password || null,
							};

							setState(this.OPENED);
						};

						/**
						 * Disables or enables isAllowedHttpHeader() check the request. Enabled by default.
						 * This does not conform to the W3C spec.
						 *
						 * @param boolean state Enable or disable header checking.
						 */
						this.setDisableHeaderCheck = function(state) {
							disableHeaderCheck = state;
						};

						/**
						 * Sets a header for the request or appends the value if one is already set.
						 *
						 * @param string header Header name
						 * @param string value Header value
						 */
						this.setRequestHeader = function(header, value) {
							if (this.readyState !== this.OPENED) {
								throw new Error(
									"INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN"
								);
							}
							if (!isAllowedHttpHeader(header)) {
								console.warn(
									'Refused to set unsafe header "' +
										header +
										'"'
								);
								return;
							}
							if (sendFlag) {
								throw new Error(
									"INVALID_STATE_ERR: send flag is true"
								);
							}
							header =
								headersCase[header.toLowerCase()] || header;
							headersCase[header.toLowerCase()] = header;
							headers[header] = headers[header]
								? headers[header] + ", " + value
								: value;
						};

						/**
						 * Gets a header from the server response.
						 *
						 * @param string header Name of header to get.
						 * @return string Text of the header or null if it doesn't exist.
						 */
						this.getResponseHeader = function(header) {
							if (
								typeof header === "string" &&
								this.readyState > this.OPENED &&
								response &&
								response.headers &&
								response.headers[header.toLowerCase()] &&
								!errorFlag
							) {
								return response.headers[header.toLowerCase()];
							}

							return null;
						};

						/**
						 * Gets all the response headers.
						 *
						 * @return string A string with all response headers separated by CR+LF
						 */
						this.getAllResponseHeaders = function() {
							if (
								this.readyState < this.HEADERS_RECEIVED ||
								errorFlag
							) {
								return "";
							}
							var result = "";

							for (var i in response.headers) {
								// Cookie headers are excluded
								if (i !== "set-cookie" && i !== "set-cookie2") {
									result +=
										i + ": " + response.headers[i] + "\r\n";
								}
							}
							return result.substr(0, result.length - 2);
						};

						/**
						 * Gets a request header
						 *
						 * @param string name Name of header to get
						 * @return string Returns the request header or empty string if not set
						 */
						this.getRequestHeader = function(name) {
							if (
								typeof name === "string" &&
								headersCase[name.toLowerCase()]
							) {
								return headers[headersCase[name.toLowerCase()]];
							}

							return "";
						};

						/**
						 * Sends the request to the server.
						 *
						 * @param string data Optional data to send as request body.
						 */
						this.send = function(data) {
							if (this.readyState !== this.OPENED) {
								throw new Error(
									"INVALID_STATE_ERR: connection must be opened before send() is called"
								);
							}

							if (sendFlag) {
								throw new Error(
									"INVALID_STATE_ERR: send has already been called"
								);
							}

							var ssl = false,
								local = false;
							var url = Url.parse(settings.url);
							var host;
							// Determine the server
							switch (url.protocol) {
								case "https:":
									ssl = true;
								// SSL & non-SSL both need host, no break here.
								case "http:":
									host = url.hostname;
									break;

								case "file:":
									local = true;
									break;

								case undefined:
								case null:
								case "":
									host = "localhost";
									break;

								default:
									throw new Error("Protocol not supported.");
							}

							// Load files off the local filesystem (file://)
							if (local) {
								if (settings.method !== "GET") {
									throw new Error(
										"XMLHttpRequest: Only GET method is supported"
									);
								}

								if (settings.async) {
									fs.readFile(url.pathname, "utf8", function(
										error,
										data
									) {
										if (error) {
											self.handleError(error);
										} else {
											self.status = 200;
											self.responseText = data;
											setState(self.DONE);
										}
									});
								} else {
									try {
										this.responseText = fs.readFileSync(
											url.pathname,
											"utf8"
										);
										this.status = 200;
										setState(self.DONE);
									} catch (e) {
										this.handleError(e);
									}
								}

								return;
							}

							// Default to port 80. If accessing localhost on another port be sure
							// to use http://localhost:port/path
							var port = url.port || (ssl ? 443 : 80);
							// Add query string if one is used
							var uri =
								url.pathname + (url.search ? url.search : "");

							// Set the defaults if they haven't been set
							for (var name in defaultHeaders) {
								if (!headersCase[name.toLowerCase()]) {
									headers[name] = defaultHeaders[name];
								}
							}

							// Set the Host header or the server may reject the request
							headers.Host = host;
							if (!((ssl && port === 443) || port === 80)) {
								headers.Host += ":" + url.port;
							}

							// Set Basic Auth if necessary
							if (settings.user) {
								if (typeof settings.password === "undefined") {
									settings.password = "";
								}
								var authBuf = new Buffer(
									settings.user + ":" + settings.password
								);
								headers.Authorization =
									"Basic " + authBuf.toString("base64");
							}

							// Set content length header
							if (
								settings.method === "GET" ||
								settings.method === "HEAD"
							) {
								data = null;
							} else if (data) {
								headers["Content-Length"] = Buffer.isBuffer(
									data
								)
									? data.length
									: Buffer.byteLength(data);

								if (!headers["Content-Type"]) {
									headers["Content-Type"] =
										"text/plain;charset=UTF-8";
								}
							} else if (settings.method === "POST") {
								// For a post with no data set Content-Length: 0.
								// This is required by buggy servers that don't meet the specs.
								headers["Content-Length"] = 0;
							}

							var options = {
								host: host,
								port: port,
								path: uri,
								method: settings.method,
								headers: headers,
								agent: false,
								withCredentials: self.withCredentials,
							};

							// Reset error flag
							errorFlag = false;

							// Handle async requests
							if (settings.async) {
								// Use the proper protocol
								var doRequest = ssl
									? https.request
									: http.request;

								// Request is being sent, set send flag
								sendFlag = true;

								// As per spec, this is called here for historical reasons.
								self.dispatchEvent("readystatechange");

								// Handler for the response
								var responseHandler = function responseHandler(
									resp
								) {
									// Set response var to the response we got back
									// This is so it remains accessable outside this scope
									response = resp;
									// Check for redirect
									// @TODO Prevent looped redirects
									if (
										response.statusCode === 301 ||
										response.statusCode === 302 ||
										response.statusCode === 303 ||
										response.statusCode === 307
									) {
										// Change URL to the redirect location
										settings.url =
											response.headers.location;
										var url = Url.parse(settings.url);
										// Set host var in case it's used later
										host = url.hostname;
										// Options for the new request
										var newOptions = {
											hostname: url.hostname,
											port: url.port,
											path: url.path,
											method:
												response.statusCode === 303
													? "GET"
													: settings.method,
											headers: headers,
											withCredentials:
												self.withCredentials,
										};

										// Issue the new request
										request = doRequest(
											newOptions,
											responseHandler
										).on("error", errorHandler);
										request.end();
										// @TODO Check if an XHR event needs to be fired here
										return;
									}

									response.setEncoding("utf8");

									setState(self.HEADERS_RECEIVED);
									self.status = response.statusCode;

									response.on("data", function(chunk) {
										// Make sure there's some data
										if (chunk) {
											self.responseText += chunk;
										}
										// Don't emit state changes if the connection has been aborted.
										if (sendFlag) {
											setState(self.LOADING);
										}
									});

									response.on("end", function() {
										if (sendFlag) {
											// Discard the end event if the connection has been aborted
											setState(self.DONE);
											sendFlag = false;
										}
									});

									response.on("error", function(error) {
										self.handleError(error);
									});
								};

								// Error handler for the request
								var errorHandler = function errorHandler(
									error
								) {
									self.handleError(error);
								};

								// Create the request
								request = doRequest(
									options,
									responseHandler
								).on("error", errorHandler);

								// Node 0.4 and later won't accept empty data. Make sure it's needed.
								if (data) {
									request.write(data);
								}

								request.end();

								self.dispatchEvent("loadstart");
							} else {
								// Synchronous
								// Create a temporary file for communication with the other Node process
								var contentFile =
									".node-xmlhttprequest-content-" +
									process.pid;
								var syncFile =
									".node-xmlhttprequest-sync-" + process.pid;
								fs.writeFileSync(syncFile, "", "utf8");
								// The async request the other Node process executes
								var execString =
									"var http = require('http'), https = require('https'), fs = require('fs');" +
									"var doRequest = http" +
									(ssl ? "s" : "") +
									".request;" +
									"var options = " +
									JSON.stringify(options) +
									";" +
									"var responseText = '';" +
									"var req = doRequest(options, function(response) {" +
									"response.setEncoding('utf8');" +
									"response.on('data', function(chunk) {" +
									"  responseText += chunk;" +
									"});" +
									"response.on('end', function() {" +
									"fs.writeFileSync('" +
									contentFile +
									"', JSON.stringify({err: null, data: {statusCode: response.statusCode, headers: response.headers, text: responseText}}), 'utf8');" +
									"fs.unlinkSync('" +
									syncFile +
									"');" +
									"});" +
									"response.on('error', function(error) {" +
									"fs.writeFileSync('" +
									contentFile +
									"', JSON.stringify({err: error}), 'utf8');" +
									"fs.unlinkSync('" +
									syncFile +
									"');" +
									"});" +
									"}).on('error', function(error) {" +
									"fs.writeFileSync('" +
									contentFile +
									"', JSON.stringify({err: error}), 'utf8');" +
									"fs.unlinkSync('" +
									syncFile +
									"');" +
									"});" +
									(data
										? "req.write('" +
										  JSON.stringify(data)
												.slice(1, -1)
												.replace(/'/g, "\\'") +
										  "');"
										: "") +
									"req.end();";
								// Start the other Node Process, executing this string
								var syncProc = spawn(process.argv[0], [
									"-e",
									execString,
								]);
								while (fs.existsSync(syncFile)) {
									// Wait while the sync file is empty
								}
								var resp = JSON.parse(
									fs.readFileSync(contentFile, "utf8")
								);
								// Kill the child process once the file has data
								syncProc.stdin.end();
								// Remove the temporary file
								fs.unlinkSync(contentFile);

								if (resp.err) {
									self.handleError(resp.err);
								} else {
									response = resp.data;
									self.status = resp.data.statusCode;
									self.responseText = resp.data.text;
									setState(self.DONE);
								}
							}
						};

						/**
						 * Called when an error is encountered to deal with it.
						 */
						this.handleError = function(error) {
							this.status = 0;
							this.statusText = error;
							this.responseText = error.stack;
							errorFlag = true;
							setState(this.DONE);
							this.dispatchEvent("error");
						};

						/**
						 * Aborts a request.
						 */
						this.abort = function() {
							if (request) {
								request.abort();
								request = null;
							}

							headers = defaultHeaders;
							this.status = 0;
							this.responseText = "";
							this.responseXML = "";

							errorFlag = true;

							if (
								this.readyState !== this.UNSENT &&
								(this.readyState !== this.OPENED || sendFlag) &&
								this.readyState !== this.DONE
							) {
								sendFlag = false;
								setState(this.DONE);
							}
							this.readyState = this.UNSENT;
							this.dispatchEvent("abort");
						};

						/**
						 * Adds an event listener. Preferred method of binding to events.
						 */
						this.addEventListener = function(event, callback) {
							if (!(event in listeners)) {
								listeners[event] = [];
							}
							// Currently allows duplicate callbacks. Should it?
							listeners[event].push(callback);
						};

						/**
						 * Remove an event callback that has already been bound.
						 * Only works on the matching funciton, cannot be a copy.
						 */
						this.removeEventListener = function(event, callback) {
							if (event in listeners) {
								// Filter will return a new array with the callback removed
								listeners[event] = listeners[event].filter(
									function(ev) {
										return ev !== callback;
									}
								);
							}
						};

						/**
						 * Dispatch any events, including both "on" methods and events attached using addEventListener.
						 */
						this.dispatchEvent = function(event) {
							if (typeof self["on" + event] === "function") {
								self["on" + event]();
							}
							if (event in listeners) {
								for (
									var i = 0, len = listeners[event].length;
									i < len;
									i++
								) {
									listeners[event][i].call(self);
								}
							}
						};

						/**
						 * Changes readyState and calls onreadystatechange.
						 *
						 * @param int state New state
						 */
						var setState = function(state) {
							if (
								state == self.LOADING ||
								self.readyState !== state
							) {
								self.readyState = state;

								if (
									settings.async ||
									self.readyState < self.OPENED ||
									self.readyState === self.DONE
								) {
									self.dispatchEvent("readystatechange");
								}

								if (
									self.readyState === self.DONE &&
									!errorFlag
								) {
									self.dispatchEvent("load");
									// @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)
									self.dispatchEvent("loadend");
								}
							}
						};
					};

					/* WEBPACK VAR INJECTION */
				}.call(
					this,
					__webpack_require__(
						/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js"
					).Buffer,
					__webpack_require__(
						/*! ./../../process/browser.js */ "./node_modules/process/browser.js"
					)
				));

				/***/
			},

		/***/ "./node_modules/xtend/immutable.js":
			/*!*****************************************!*\
  !*** ./node_modules/xtend/immutable.js ***!
  \*****************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				module.exports = extend;

				var hasOwnProperty = Object.prototype.hasOwnProperty;

				function extend() {
					var target = {};

					for (var i = 0; i < arguments.length; i++) {
						var source = arguments[i];

						for (var key in source) {
							if (hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}

					return target;
				}

				/***/
			},

		/***/ "./resources/js/app.js":
			/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				/**
				 * First we will load all of this project's JavaScript dependencies which
				 * includes Vue and other libraries. It is a great starting point when
				 * building robust, powerful web applications using Vue and Laravel.
				 */
				// require('./bootstrap');
				__webpack_require__(
					/*! ./discord */ "./resources/js/discord.js"
				);

				window.Vue = __webpack_require__(
					/*! vue */ "./node_modules/vue/dist/vue.common.js"
				);
				/**
				 * The following block of code may be used to automatically register your
				 * Vue components. It will recursively scan this directory for the Vue
				 * components and automatically register them with their "basename".
				 *
				 * Eg. ./components/ExampleComponent.vue -> <example-component></example-component>
				 */
				// const files = require.context('./', true, /\.vue$/i)
				// files.keys().map(key => Vue.component(key.split('/').pop().split('.')[0], files(key).default))

				Vue.component(
					"example-component",
					__webpack_require__(
						/*! ./components/ExampleComponent.vue */ "./resources/js/components/ExampleComponent.vue"
					)["default"]
				);
				/**
				 * Next, we will create a fresh Vue application instance and attach it to
				 * the page. Then, you may begin adding components to this application
				 * or customize the JavaScript scaffolding to fit your unique needs.
				 */

				var app = new Vue({
					el: "#app",
				});

				/***/
			},

		/***/ "./resources/js/components/ExampleComponent.vue":
			/*!******************************************************!*\
  !*** ./resources/js/components/ExampleComponent.vue ***!
  \******************************************************/
			/*! exports provided: default */
			/***/ function(module, __webpack_exports__, __webpack_require__) {
				"use strict";
				__webpack_require__.r(__webpack_exports__);
				/* harmony import */ var _ExampleComponent_vue_vue_type_template_id_299e239e___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
					/*! ./ExampleComponent.vue?vue&type=template&id=299e239e& */ "./resources/js/components/ExampleComponent.vue?vue&type=template&id=299e239e&"
				);
				/* harmony import */ var _ExampleComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
					/*! ./ExampleComponent.vue?vue&type=script&lang=js& */ "./resources/js/components/ExampleComponent.vue?vue&type=script&lang=js&"
				);
				/* empty/unused harmony star reexport */ /* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
					/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js"
				);

				/* normalize component */

				var component = Object(
					_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[
						"default"
					]
				)(
					_ExampleComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[
						"default"
					],
					_ExampleComponent_vue_vue_type_template_id_299e239e___WEBPACK_IMPORTED_MODULE_0__[
						"render"
					],
					_ExampleComponent_vue_vue_type_template_id_299e239e___WEBPACK_IMPORTED_MODULE_0__[
						"staticRenderFns"
					],
					false,
					null,
					null,
					null
				);

				/* hot reload */
				if (false) {
					var api;
				}
				component.options.__file =
					"resources/js/components/ExampleComponent.vue";
				/* harmony default export */ __webpack_exports__["default"] =
					component.exports;

				/***/
			},

		/***/ "./resources/js/components/ExampleComponent.vue?vue&type=script&lang=js&":
			/*!*******************************************************************************!*\
  !*** ./resources/js/components/ExampleComponent.vue?vue&type=script&lang=js& ***!
  \*******************************************************************************/
			/*! exports provided: default */
			/***/ function(module, __webpack_exports__, __webpack_require__) {
				"use strict";
				__webpack_require__.r(__webpack_exports__);
				/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ExampleComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
					/*! -!../../../node_modules/babel-loader/lib??ref--4-0!../../../node_modules/vue-loader/lib??vue-loader-options!./ExampleComponent.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/ExampleComponent.vue?vue&type=script&lang=js&"
				);
				/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[
					"default"
				] =
					_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ExampleComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[
						"default"
					];

				/***/
			},

		/***/ "./resources/js/components/ExampleComponent.vue?vue&type=template&id=299e239e&":
			/*!*************************************************************************************!*\
  !*** ./resources/js/components/ExampleComponent.vue?vue&type=template&id=299e239e& ***!
  \*************************************************************************************/
			/*! exports provided: render, staticRenderFns */
			/***/ function(module, __webpack_exports__, __webpack_require__) {
				"use strict";
				__webpack_require__.r(__webpack_exports__);
				/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_ExampleComponent_vue_vue_type_template_id_299e239e___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
					/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./ExampleComponent.vue?vue&type=template&id=299e239e& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/ExampleComponent.vue?vue&type=template&id=299e239e&"
				);
				/* harmony reexport (safe) */ __webpack_require__.d(
					__webpack_exports__,
					"render",
					function() {
						return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_ExampleComponent_vue_vue_type_template_id_299e239e___WEBPACK_IMPORTED_MODULE_0__[
							"render"
						];
					}
				);

				/* harmony reexport (safe) */ __webpack_require__.d(
					__webpack_exports__,
					"staticRenderFns",
					function() {
						return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_ExampleComponent_vue_vue_type_template_id_299e239e___WEBPACK_IMPORTED_MODULE_0__[
							"staticRenderFns"
						];
					}
				);

				/***/
			},

		/***/ "./resources/js/discord.js":
			/*!*********************************!*\
  !*** ./resources/js/discord.js ***!
  \*********************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				var Discord = __webpack_require__(
					/*! discord.js */ "./node_modules/discord.js/src/index.js"
				);

				var XMLHttpRequest = __webpack_require__(
					/*! xmlhttprequest */ "./node_modules/xmlhttprequest/lib/XMLHttpRequest.js"
				).XMLHttpRequest;

				var client = new Discord.Client();
				client.on("ready", function() {
					console.log("Connected as " + client.user.tag);
				});
				client.on("message", function(message) {
					// If the message is "ping"
					if (message.content === "ping") {
						// Send "pong" to the same channel
						message.channel.send("pong");
					}

					var prefix = "-";
					if (
						!message.content.startsWith(prefix) ||
						message.author.bot
					)
						return;
					var args = message.content.slice(prefix.length).split(" ");
					var command = args.shift().toLowerCase();

					if (command === "done") {
						if (!args.length) {
							return message.channel.send(
								"You didn't provide any order, ".concat(
									message.author,
									"!"
								)
							);
						}

						args = args.pop();

						if (args.charAt(0) === "#") {
							args = args.slice(1);
						}

						message.channel.send(
							"Order #".concat(args, " is being delivered...")
						);
						var xhr = new XMLHttpRequest();
						xhr.open(
							"POST",
							"http://localhost/discord/deliver",
							true
						);
						xhr.setRequestHeader(
							"Content-Type",
							"application/json"
						);
						xhr.send(
							JSON.stringify({
								invoiceId: args,
								by: message.author.username,
							})
						); // console.log(xhr.onreadystatechange);
						// if (xhr.responseText == '200') {
						//     message.channel.send(`Order ${args} delivered!`);
						// }
						// else {
						//     message.channel.send(`Failed order delivery, check invoice ID!`);
						// }

						xhr.onreadystatechange = function() {
							// If the request completed, close the extension popup
							if (xhr.readyState == 4) {
								if (xhr.status == 200) {
									console.log(
										xhr.responseText.startsWith("200")
									);

									if (xhr.responseText.startsWith("200")) {
										message.channel.send(
											"Order ".concat(args, " delivered!")
										);
									} else {
										message.channel.send(
											"Failed order delivery, check invoice ID!"
										);
									}
								}
							}
						};
					}
				}); // Get your bot's secret token from:
				// https://discordapp.com/developers/applications/
				// Click on your application -> Bot -> Token -> "Click to Reveal Token"

				bot_secret_token = "DISCORD_BOT_TOKEN";
				client.login(bot_secret_token);

				/***/
			},

		/***/ "./resources/sass/app.scss":
			/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				// removed by extract-text-webpack-plugin
				/***/
			},

		/***/ 0:
			/*!*************************************************************!*\
  !*** multi ./resources/js/app.js ./resources/sass/app.scss ***!
  \*************************************************************/
			/*! no static exports found */
			/***/ function(module, exports, __webpack_require__) {
				__webpack_require__(
					/*! C:\xampp\htdocs\laravel\resources\js\app.js */ "./resources/js/app.js"
				);
				module.exports = __webpack_require__(
					/*! C:\xampp\htdocs\laravel\resources\sass\app.scss */ "./resources/sass/app.scss"
				);

				/***/
			},

		/***/ 1:
			/*!************************!*\
  !*** ./node (ignored) ***!
  \************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/* (ignored) */
				/***/
			},

		/***/ 10:
			/*!**********************************!*\
  !*** ./sharding/Shard (ignored) ***!
  \**********************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/* (ignored) */
				/***/
			},

		/***/ 11:
			/*!********************************************!*\
  !*** ./sharding/ShardClientUtil (ignored) ***!
  \********************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/* (ignored) */
				/***/
			},

		/***/ 12:
			/*!********************************************!*\
  !*** ./sharding/ShardingManager (ignored) ***!
  \********************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/* (ignored) */
				/***/
			},

		/***/ 2:
			/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/* (ignored) */
				/***/
			},

		/***/ 3:
			/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/* (ignored) */
				/***/
			},

		/***/ 4:
			/*!*************************!*\
  !*** erlpack (ignored) ***!
  \*************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/* (ignored) */
				/***/
			},

		/***/ 5:
			/*!*********************!*\
  !*** uws (ignored) ***!
  \*********************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/* (ignored) */
				/***/
			},

		/***/ 6:
			/*!********************!*\
  !*** ws (ignored) ***!
  \********************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/* (ignored) */
				/***/
			},

		/***/ 7:
			/*!********************************************!*\
  !*** ./voice/ClientVoiceManager (ignored) ***!
  \********************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/* (ignored) */
				/***/
			},

		/***/ 8:
			/*!*********************************************!*\
  !*** ../sharding/ShardClientUtil (ignored) ***!
  \*********************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/* (ignored) */
				/***/
			},

		/***/ 9:
			/*!****************************************!*\
  !*** ./voice/VoiceBroadcast (ignored) ***!
  \****************************************/
			/*! no static exports found */
			/***/ function(module, exports) {
				/* (ignored) */
				/***/
			},

		/******/
	}
);
